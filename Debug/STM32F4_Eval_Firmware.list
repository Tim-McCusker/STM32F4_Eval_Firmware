
STM32F4_Eval_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009578  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08009708  08009708  00019708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097b4  080097b4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080097b4  080097b4  000197b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097bc  080097bc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097bc  080097bc  000197bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097c0  080097c0  000197c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080097c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001acc  200001e8  080099ac  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cb4  080099ac  00021cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e55f  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cfb  00000000  00000000  0003e777  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016d8  00000000  00000000  00042478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001538  00000000  00000000  00043b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024338  00000000  00000000  00045088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014c45  00000000  00000000  000693c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca5d2  00000000  00000000  0007e005  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001485d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064b0  00000000  00000000  00148654  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096f0 	.word	0x080096f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080096f0 	.word	0x080096f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b972 	b.w	8000da8 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4688      	mov	r8, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14b      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4615      	mov	r5, r2
 8000aee:	d967      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0720 	rsb	r7, r2, #32
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	fa20 f707 	lsr.w	r7, r0, r7
 8000b02:	4095      	lsls	r5, r2
 8000b04:	ea47 0803 	orr.w	r8, r7, r3
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b14:	fa1f fc85 	uxth.w	ip, r5
 8000b18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b20:	fb07 f10c 	mul.w	r1, r7, ip
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18eb      	adds	r3, r5, r3
 8000b2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b2e:	f080 811b 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8118 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b38:	3f02      	subs	r7, #2
 8000b3a:	442b      	add	r3, r5
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b50:	45a4      	cmp	ip, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	192c      	adds	r4, r5, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8107 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b5e:	45a4      	cmp	ip, r4
 8000b60:	f240 8104 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b64:	3802      	subs	r0, #2
 8000b66:	442c      	add	r4, r5
 8000b68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b6c:	eba4 040c 	sub.w	r4, r4, ip
 8000b70:	2700      	movs	r7, #0
 8000b72:	b11e      	cbz	r6, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xbe>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80eb 	beq.w	8000d62 <__udivmoddi4+0x286>
 8000b8c:	2700      	movs	r7, #0
 8000b8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b92:	4638      	mov	r0, r7
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f783 	clz	r7, r3
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d147      	bne.n	8000c32 <__udivmoddi4+0x156>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd0>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80fa 	bhi.w	8000da0 <__udivmoddi4+0x2c4>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000bba:	e9c6 4800 	strd	r4, r8, [r6]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xe8>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 808f 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bce:	1b49      	subs	r1, r1, r5
 8000bd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd4:	fa1f f885 	uxth.w	r8, r5
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x14c>
 8000c18:	192c      	adds	r4, r5, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x14a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80b6 	bhi.w	8000d92 <__udivmoddi4+0x2b6>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e79f      	b.n	8000b72 <__udivmoddi4+0x96>
 8000c32:	f1c7 0c20 	rsb	ip, r7, #32
 8000c36:	40bb      	lsls	r3, r7
 8000c38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c40:	fa01 f407 	lsl.w	r4, r1, r7
 8000c44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c50:	4325      	orrs	r5, r4
 8000c52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c56:	0c2c      	lsrs	r4, r5, #16
 8000c58:	fb08 3319 	mls	r3, r8, r9, r3
 8000c5c:	fa1f fa8e 	uxth.w	sl, lr
 8000c60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c64:	fb09 f40a 	mul.w	r4, r9, sl
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1e 0303 	adds.w	r3, lr, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	f080 8087 	bcs.w	8000d8e <__udivmoddi4+0x2b2>
 8000c80:	429c      	cmp	r4, r3
 8000c82:	f240 8084 	bls.w	8000d8e <__udivmoddi4+0x2b2>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4473      	add	r3, lr
 8000c8c:	1b1b      	subs	r3, r3, r4
 8000c8e:	b2ad      	uxth	r5, r5
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ca0:	45a2      	cmp	sl, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	d26b      	bcs.n	8000d86 <__udivmoddi4+0x2aa>
 8000cae:	45a2      	cmp	sl, r4
 8000cb0:	d969      	bls.n	8000d86 <__udivmoddi4+0x2aa>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4474      	add	r4, lr
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	eba4 040a 	sub.w	r4, r4, sl
 8000cc2:	454c      	cmp	r4, r9
 8000cc4:	46c2      	mov	sl, r8
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	d354      	bcc.n	8000d74 <__udivmoddi4+0x298>
 8000cca:	d051      	beq.n	8000d70 <__udivmoddi4+0x294>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d069      	beq.n	8000da4 <__udivmoddi4+0x2c8>
 8000cd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cdc:	40fd      	lsrs	r5, r7
 8000cde:	40fc      	lsrs	r4, r7
 8000ce0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ce4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e747      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000cec:	f1c2 0320 	rsb	r3, r2, #32
 8000cf0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cf4:	4095      	lsls	r5, r2
 8000cf6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	4338      	orrs	r0, r7
 8000d04:	0c01      	lsrs	r1, r0, #16
 8000d06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d0a:	fa1f f885 	uxth.w	r8, r5
 8000d0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d16:	fb07 f308 	mul.w	r3, r7, r8
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x256>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d28:	d22f      	bcs.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d92d      	bls.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2e:	3f02      	subs	r7, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	b281      	uxth	r1, r0
 8000d36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d42:	fb00 f308 	mul.w	r3, r0, r8
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x27e>
 8000d4a:	1869      	adds	r1, r5, r1
 8000d4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d50:	d217      	bcs.n	8000d82 <__udivmoddi4+0x2a6>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d915      	bls.n	8000d82 <__udivmoddi4+0x2a6>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4429      	add	r1, r5
 8000d5a:	1ac9      	subs	r1, r1, r3
 8000d5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d60:	e73b      	b.n	8000bda <__udivmoddi4+0xfe>
 8000d62:	4637      	mov	r7, r6
 8000d64:	4630      	mov	r0, r6
 8000d66:	e709      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e6e7      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	e6fb      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d70:	4541      	cmp	r1, r8
 8000d72:	d2ab      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d78:	eb69 020e 	sbc.w	r2, r9, lr
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	4613      	mov	r3, r2
 8000d80:	e7a4      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d82:	4660      	mov	r0, ip
 8000d84:	e7e9      	b.n	8000d5a <__udivmoddi4+0x27e>
 8000d86:	4618      	mov	r0, r3
 8000d88:	e795      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8a:	4667      	mov	r7, ip
 8000d8c:	e7d1      	b.n	8000d32 <__udivmoddi4+0x256>
 8000d8e:	4681      	mov	r9, r0
 8000d90:	e77c      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	442c      	add	r4, r5
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0x14c>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	442b      	add	r3, r5
 8000d9e:	e72f      	b.n	8000c00 <__udivmoddi4+0x124>
 8000da0:	4638      	mov	r0, r7
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xda>
 8000da4:	4637      	mov	r7, r6
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0xa0>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <LED_Service>:
 *
 * Blinks R2D2's led at period configured in eval_timers.h
 * Returns: N/A
 */
void LED_Service()
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
    Blink_LED(LED_Mode);
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <LED_Service+0x14>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 f815 	bl	8000de4 <Blink_LED>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000000 	.word	0x20000000

08000dc4 <LED_Set_Mode>:


void LED_Set_Mode(LED_Mode_t mode)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
	LED_Mode = mode;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <LED_Set_Mode+0x1c>)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	7013      	strb	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	20000000 	.word	0x20000000

08000de4 <Blink_LED>:


void Blink_LED(LED_Mode_t mode)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
	static _Bool led_level = LEVEL_LOW;

	switch(mode)
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d00a      	beq.n	8000e0a <Blink_LED+0x26>
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d037      	beq.n	8000e68 <Blink_LED+0x84>
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d000      	beq.n	8000dfe <Blink_LED+0x1a>
		HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, LEVEL_LOW);

	break;

	default:
	break;
 8000dfc:	e03b      	b.n	8000e76 <Blink_LED+0x92>
		HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, LEVEL_HIGH);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2104      	movs	r1, #4
 8000e02:	481f      	ldr	r0, [pc, #124]	; (8000e80 <Blink_LED+0x9c>)
 8000e04:	f001 fc1e 	bl	8002644 <HAL_GPIO_WritePin>
	break;
 8000e08:	e035      	b.n	8000e76 <Blink_LED+0x92>
		if(BLINK_PERIOD <= timer[LED_BLINK].t)
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <Blink_LED+0xa0>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e12:	d32f      	bcc.n	8000e74 <Blink_LED+0x90>
			RESET_TIMER((&timer[LED_BLINK]), TIMER_RUN);
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <Blink_LED+0xa0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	735a      	strb	r2, [r3, #13]
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <Blink_LED+0xa0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	731a      	strb	r2, [r3, #12]
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <Blink_LED+0xa0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
			led_level = !led_level;
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <Blink_LED+0xa4>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	bf14      	ite	ne
 8000e2e:	2301      	movne	r3, #1
 8000e30:	2300      	moveq	r3, #0
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	f083 0301 	eor.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <Blink_LED+0xa4>)
 8000e42:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, led_level);
 8000e44:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <Blink_LED+0xa4>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <Blink_LED+0x9c>)
 8000e4e:	f001 fbf9 	bl	8002644 <HAL_GPIO_WritePin>
			if(LEVEL_HIGH == led_level)
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <Blink_LED+0xa4>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00c      	beq.n	8000e74 <Blink_LED+0x90>
				blinkCnt++;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <Blink_LED+0xa8>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <Blink_LED+0xa8>)
 8000e64:	801a      	strh	r2, [r3, #0]
	break;
 8000e66:	e005      	b.n	8000e74 <Blink_LED+0x90>
		HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, LEVEL_LOW);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <Blink_LED+0x9c>)
 8000e6e:	f001 fbe9 	bl	8002644 <HAL_GPIO_WritePin>
	break;
 8000e72:	e000      	b.n	8000e76 <Blink_LED+0x92>
	break;
 8000e74:	bf00      	nop
	}


}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40020000 	.word	0x40020000
 8000e84:	200002a0 	.word	0x200002a0
 8000e88:	20000206 	.word	0x20000206
 8000e8c:	20000204 	.word	0x20000204

08000e90 <System_Control>:
 * Runs the system infinite loop
 * Args: N/A
 * Returns: N/A
 */
void System_Control()
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	initTimers();
 8000e94:	f000 f8b6 	bl	8001004 <initTimers>
	LED_Set_Mode(MODE_BLINK);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff ff93 	bl	8000dc4 <LED_Set_Mode>

	while(INFINITY)
	{
		Update_Timers();
 8000e9e:	f000 f807 	bl	8000eb0 <Update_Timers>
		ADC_Service();
 8000ea2:	f000 f84d 	bl	8000f40 <ADC_Service>
		UART_Service();
 8000ea6:	f000 f887 	bl	8000fb8 <UART_Service>
		LED_Service();
 8000eaa:	f7ff ff7f 	bl	8000dac <LED_Service>
		Update_Timers();
 8000eae:	e7f6      	b.n	8000e9e <System_Control+0xe>

08000eb0 <Update_Timers>:
 * Updates global 1ms counters attached to hwtim11
 * Args: N/A
 * Returns: N/A
 */
void Update_Timers(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
	if(tim11_OvrFlo_Flag)
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <Update_Timers+0x84>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d034      	beq.n	8000f28 <Update_Timers+0x78>
	{
		tim11_OvrFlo_Flag = FALSE;
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <Update_Timers+0x84>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]

		for(uint8_t idx = 0U; idx < NUM_SYS_TIMERS; idx++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	e02b      	b.n	8000f22 <Update_Timers+0x72>
		{
			if(!timer[idx].lock)
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4a1a      	ldr	r2, [pc, #104]	; (8000f38 <Update_Timers+0x88>)
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	4413      	add	r3, r2
 8000ed2:	795b      	ldrb	r3, [r3, #5]
 8000ed4:	f083 0301 	eor.w	r3, r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d019      	beq.n	8000f12 <Update_Timers+0x62>
			{
				++timer[idx].t;
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <Update_Timers+0x88>)
 8000ee2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000ee6:	3201      	adds	r2, #1
 8000ee8:	4913      	ldr	r1, [pc, #76]	; (8000f38 <Update_Timers+0x88>)
 8000eea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

				if(system_timer_overflow[idx] <= timer[idx].t)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <Update_Timers+0x8c>)
 8000ef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <Update_Timers+0x88>)
 8000efc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f00:	4299      	cmp	r1, r3
 8000f02:	d80b      	bhi.n	8000f1c <Update_Timers+0x6c>
				{
				    timer[idx].flag = TRUE;
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <Update_Timers+0x88>)
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	4413      	add	r3, r2
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	711a      	strb	r2, [r3, #4]
 8000f10:	e004      	b.n	8000f1c <Update_Timers+0x6c>
				}
			}
			else
			{
				timer[idx].t = 0U;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <Update_Timers+0x88>)
 8000f16:	2100      	movs	r1, #0
 8000f18:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		for(uint8_t idx = 0U; idx < NUM_SYS_TIMERS; idx++)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	71fb      	strb	r3, [r7, #7]
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d9d0      	bls.n	8000eca <Update_Timers+0x1a>
			}
		}
	}
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	20000207 	.word	0x20000207
 8000f38:	200002a0 	.word	0x200002a0
 8000f3c:	08009760 	.word	0x08009760

08000f40 <ADC_Service>:
 * Polls ADC1 for System Temp. Calculates real deg C.
 * Args: N/A
 * Returns: N/A
 */
void ADC_Service()
{
 8000f40:	b598      	push	{r3, r4, r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000f44:	4818      	ldr	r0, [pc, #96]	; (8000fa8 <ADC_Service+0x68>)
 8000f46:	f000 fd39 	bl	80019bc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f4a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4e:	4816      	ldr	r0, [pc, #88]	; (8000fa8 <ADC_Service+0x68>)
 8000f50:	f000 fdfa 	bl	8001b48 <HAL_ADC_PollForConversion>
	temp_ADC = HAL_ADC_GetValue(&hadc1);
 8000f54:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <ADC_Service+0x68>)
 8000f56:	f000 fe7b 	bl	8001c50 <HAL_ADC_GetValue>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <ADC_Service+0x6c>)
 8000f60:	801a      	strh	r2, [r3, #0]

	SysTemp = TEMP_ADC_GAIN * temp_ADC + TEMP_ADC_OFFSET;
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <ADC_Service+0x6c>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fad4 	bl	8000514 <__aeabi_i2d>
 8000f6c:	a30c      	add	r3, pc, #48	; (adr r3, 8000fa0 <ADC_Service+0x60>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f7ff fb39 	bl	80005e8 <__aeabi_dmul>
 8000f76:	4603      	mov	r3, r0
 8000f78:	460c      	mov	r4, r1
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	4621      	mov	r1, r4
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <ADC_Service+0x70>)
 8000f84:	f7ff f97a 	bl	800027c <__adddf3>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	460c      	mov	r4, r1
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	4621      	mov	r1, r4
 8000f90:	f7ff fd3c 	bl	8000a0c <__aeabi_d2f>
 8000f94:	4602      	mov	r2, r0
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <ADC_Service+0x74>)
 8000f98:	601a      	str	r2, [r3, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	bd98      	pop	{r3, r4, r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	930be0df 	.word	0x930be0df
 8000fa4:	3fa182a9 	.word	0x3fa182a9
 8000fa8:	2000034c 	.word	0x2000034c
 8000fac:	20000288 	.word	0x20000288
 8000fb0:	402c0000 	.word	0x402c0000
 8000fb4:	2000028c 	.word	0x2000028c

08000fb8 <UART_Service>:
 * Transmits 128 bit UART message at defined period
 * Args: N/A
 * Returns: N/A
 */
void UART_Service()
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	if(timer[UART_TX].flag)
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <UART_Service+0x38>)
 8000fbe:	7d1b      	ldrb	r3, [r3, #20]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d012      	beq.n	8000fea <UART_Service+0x32>
	{
		timer[UART_TX].flag = FALSE;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <UART_Service+0x38>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	751a      	strb	r2, [r3, #20]
		timer[UART_TX].t = 0U;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <UART_Service+0x38>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]

		sprintf(msg, "Temp raw: %hu\n\r", temp_ADC);
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <UART_Service+0x3c>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <UART_Service+0x40>)
 8000fd8:	4808      	ldr	r0, [pc, #32]	; (8000ffc <UART_Service+0x44>)
 8000fda:	f008 f83b 	bl	8009054 <siprintf>

		HAL_UART_Transmit(&huart3, (uint8_t*)msg, sizeof(msg), 100);
 8000fde:	2364      	movs	r3, #100	; 0x64
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	4906      	ldr	r1, [pc, #24]	; (8000ffc <UART_Service+0x44>)
 8000fe4:	4806      	ldr	r0, [pc, #24]	; (8001000 <UART_Service+0x48>)
 8000fe6:	f003 fcc0 	bl	800496a <HAL_UART_Transmit>
	}
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200002a0 	.word	0x200002a0
 8000ff4:	20000288 	.word	0x20000288
 8000ff8:	08009708 	.word	0x08009708
 8000ffc:	20000208 	.word	0x20000208
 8001000:	200002b8 	.word	0x200002b8

08001004 <initTimers>:


void initTimers(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
	for(uint8_t idx = 0U; idx < NUM_SYS_TIMERS; idx++)
 800100a:	2300      	movs	r3, #0
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	e013      	b.n	8001038 <initTimers+0x34>
	{
		timer[idx].t = 0U;
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	4a0e      	ldr	r2, [pc, #56]	; (800104c <initTimers+0x48>)
 8001014:	2100      	movs	r1, #0
 8001016:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		timer[idx].flag = FALSE;
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <initTimers+0x48>)
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	4413      	add	r3, r2
 8001022:	2200      	movs	r2, #0
 8001024:	711a      	strb	r2, [r3, #4]
		timer[idx].lock = FALSE;    // TODO: Should init to TRUE
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	4a08      	ldr	r2, [pc, #32]	; (800104c <initTimers+0x48>)
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	4413      	add	r3, r2
 800102e:	2200      	movs	r2, #0
 8001030:	715a      	strb	r2, [r3, #5]
	for(uint8_t idx = 0U; idx < NUM_SYS_TIMERS; idx++)
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	3301      	adds	r3, #1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d9e8      	bls.n	8001010 <initTimers+0xc>
	}
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200002a0 	.word	0x200002a0

08001050 <HAL_TIM_PeriodElapsedCallback>:
 * General Timer Overflow ISR
 * Args: htim (TIM_HandleTypeDef)
 * Returns: N/A
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	tim11_OvrFlo_Flag = TRUE;
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000207 	.word	0x20000207

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001074:	f000 fbca 	bl	800180c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001078:	f000 f816 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107c:	f000 f94e 	bl	800131c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001080:	f000 f8d0 	bl	8001224 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001084:	f000 f920 	bl	80012c8 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8001088:	f007 fa10 	bl	80084ac <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800108c:	f000 f878 	bl	8001180 <MX_ADC1_Init>
  MX_TIM11_Init();
 8001090:	f000 f8f6 	bl	8001280 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <main+0x34>)
 8001096:	f003 fa12 	bl	80044be <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  System_Control();
 800109a:	f7ff fef9 	bl	8000e90 <System_Control>
 800109e:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000394 	.word	0x20000394

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b094      	sub	sp, #80	; 0x50
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	2230      	movs	r2, #48	; 0x30
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f007 ff0c 	bl	8008ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <SystemClock_Config+0xd0>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	4a28      	ldr	r2, [pc, #160]	; (8001178 <SystemClock_Config+0xd0>)
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010da:	6413      	str	r3, [r2, #64]	; 0x40
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <SystemClock_Config+0xd0>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <SystemClock_Config+0xd4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a22      	ldr	r2, [pc, #136]	; (800117c <SystemClock_Config+0xd4>)
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b20      	ldr	r3, [pc, #128]	; (800117c <SystemClock_Config+0xd4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001104:	2303      	movs	r3, #3
 8001106:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001108:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800110e:	2301      	movs	r3, #1
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001112:	2310      	movs	r3, #16
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2302      	movs	r3, #2
 8001118:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001120:	230f      	movs	r3, #15
 8001122:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001124:	2390      	movs	r3, #144	; 0x90
 8001126:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001128:	2302      	movs	r3, #2
 800112a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800112c:	2305      	movs	r3, #5
 800112e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	4618      	mov	r0, r3
 8001136:	f002 fd5b 	bl	8003bf0 <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001140:	f000 f96e 	bl	8001420 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001144:	230f      	movs	r3, #15
 8001146:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f002 ffb6 	bl	80040d0 <HAL_RCC_ClockConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800116a:	f000 f959 	bl	8001420 <Error_Handler>
  }
}
 800116e:	bf00      	nop
 8001170:	3750      	adds	r7, #80	; 0x50
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40007000 	.word	0x40007000

08001180 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <MX_ADC1_Init+0x98>)
 8001194:	4a21      	ldr	r2, [pc, #132]	; (800121c <MX_ADC1_Init+0x9c>)
 8001196:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <MX_ADC1_Init+0x98>)
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <MX_ADC1_Init+0x98>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_ADC1_Init+0x98>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <MX_ADC1_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_ADC1_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_ADC1_Init+0x98>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <MX_ADC1_Init+0x98>)
 80011c0:	4a17      	ldr	r2, [pc, #92]	; (8001220 <MX_ADC1_Init+0xa0>)
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_ADC1_Init+0x98>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <MX_ADC1_Init+0x98>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_ADC1_Init+0x98>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_ADC1_Init+0x98>)
 80011da:	2201      	movs	r2, #1
 80011dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011de:	480e      	ldr	r0, [pc, #56]	; (8001218 <MX_ADC1_Init+0x98>)
 80011e0:	f000 fba8 	bl	8001934 <HAL_ADC_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011ea:	f000 f919 	bl	8001420 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_ADC1_Init+0x98>)
 8001200:	f000 fd34 	bl	8001c6c <HAL_ADC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800120a:	f000 f909 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000034c 	.word	0x2000034c
 800121c:	40012000 	.word	0x40012000
 8001220:	0f000001 	.word	0x0f000001

08001224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2C1_Init+0x50>)
 800122a:	4a13      	ldr	r2, [pc, #76]	; (8001278 <MX_I2C1_Init+0x54>)
 800122c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_I2C1_Init+0x50>)
 8001230:	4a12      	ldr	r2, [pc, #72]	; (800127c <MX_I2C1_Init+0x58>)
 8001232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_I2C1_Init+0x50>)
 8001242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001246:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <MX_I2C1_Init+0x50>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_I2C1_Init+0x50>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_I2C1_Init+0x50>)
 8001262:	f001 fa09 	bl	8002678 <HAL_I2C_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800126c:	f000 f8d8 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200002f8 	.word	0x200002f8
 8001278:	40005400 	.word	0x40005400
 800127c:	000186a0 	.word	0x000186a0

08001280 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_TIM11_Init+0x40>)
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <MX_TIM11_Init+0x44>)
 8001288:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <MX_TIM11_Init+0x40>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <MX_TIM11_Init+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 15850;
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MX_TIM11_Init+0x40>)
 8001298:	f643 52ea 	movw	r2, #15850	; 0x3dea
 800129c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <MX_TIM11_Init+0x40>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_TIM11_Init+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_TIM11_Init+0x40>)
 80012ac:	f003 f8dc 	bl	8004468 <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80012b6:	f000 f8b3 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000394 	.word	0x20000394
 80012c4:	40014800 	.word	0x40014800

080012c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_USART3_UART_Init+0x4c>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <MX_USART3_UART_Init+0x50>)
 80012d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <MX_USART3_UART_Init+0x4c>)
 80012d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_USART3_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_USART3_UART_Init+0x4c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MX_USART3_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_USART3_UART_Init+0x4c>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <MX_USART3_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_USART3_UART_Init+0x4c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_USART3_UART_Init+0x4c>)
 8001300:	f003 fae6 	bl	80048d0 <HAL_UART_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800130a:	f000 f889 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200002b8 	.word	0x200002b8
 8001318:	40004800 	.word	0x40004800

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b36      	ldr	r3, [pc, #216]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a35      	ldr	r2, [pc, #212]	; (8001410 <MX_GPIO_Init+0xf4>)
 800133c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a2e      	ldr	r2, [pc, #184]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b28      	ldr	r3, [pc, #160]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a27      	ldr	r2, [pc, #156]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b25      	ldr	r3, [pc, #148]	; (8001410 <MX_GPIO_Init+0xf4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <MX_GPIO_Init+0xf4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a20      	ldr	r2, [pc, #128]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <MX_GPIO_Init+0xf4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2104      	movs	r1, #4
 80013a6:	481b      	ldr	r0, [pc, #108]	; (8001414 <MX_GPIO_Init+0xf8>)
 80013a8:	f001 f94c 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2140      	movs	r1, #64	; 0x40
 80013b0:	4819      	ldr	r0, [pc, #100]	; (8001418 <MX_GPIO_Init+0xfc>)
 80013b2:	f001 f947 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Status_Pin */
  GPIO_InitStruct.Pin = LED_Status_Pin;
 80013b6:	2304      	movs	r3, #4
 80013b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Status_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	4811      	ldr	r0, [pc, #68]	; (8001414 <MX_GPIO_Init+0xf8>)
 80013ce:	f000 ff9f 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|IMU_INT1_Pin;
 80013d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	480d      	ldr	r0, [pc, #52]	; (800141c <MX_GPIO_Init+0x100>)
 80013e8:	f000 ff92 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 80013ec:	2340      	movs	r3, #64	; 0x40
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_GPIO_Init+0xfc>)
 8001404:	f000 ff84 	bl	8002310 <HAL_GPIO_Init>

}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020800 	.word	0x40020800
 800141c:	40020400 	.word	0x40020400

08001420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_MspInit+0x4c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a0f      	ldr	r2, [pc, #60]	; (800147c <HAL_MspInit+0x4c>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_MspInit+0x4c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_MspInit+0x4c>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_MspInit+0x4c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_ADC_MspInit+0x7c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d127      	bne.n	80014f2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <HAL_ADC_MspInit+0x80>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a15      	ldr	r2, [pc, #84]	; (8001500 <HAL_ADC_MspInit+0x80>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <HAL_ADC_MspInit+0x80>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <HAL_ADC_MspInit+0x80>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <HAL_ADC_MspInit+0x80>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <HAL_ADC_MspInit+0x80>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014da:	2301      	movs	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014de:	2303      	movs	r3, #3
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <HAL_ADC_MspInit+0x84>)
 80014ee:	f000 ff0f 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40012000 	.word	0x40012000
 8001500:	40023800 	.word	0x40023800
 8001504:	40020000 	.word	0x40020000

08001508 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a19      	ldr	r2, [pc, #100]	; (800158c <HAL_I2C_MspInit+0x84>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d12b      	bne.n	8001582 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_I2C_MspInit+0x88>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a17      	ldr	r2, [pc, #92]	; (8001590 <HAL_I2C_MspInit+0x88>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_I2C_MspInit+0x88>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001546:	23c0      	movs	r3, #192	; 0xc0
 8001548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800154a:	2312      	movs	r3, #18
 800154c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154e:	2301      	movs	r3, #1
 8001550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001552:	2303      	movs	r3, #3
 8001554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001556:	2304      	movs	r3, #4
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <HAL_I2C_MspInit+0x8c>)
 8001562:	f000 fed5 	bl	8002310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_I2C_MspInit+0x88>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_I2C_MspInit+0x88>)
 8001570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_I2C_MspInit+0x88>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3728      	adds	r7, #40	; 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40005400 	.word	0x40005400
 8001590:	40023800 	.word	0x40023800
 8001594:	40020400 	.word	0x40020400

08001598 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <HAL_TIM_Base_MspInit+0x48>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d115      	bne.n	80015d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <HAL_TIM_Base_MspInit+0x4c>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <HAL_TIM_Base_MspInit+0x4c>)
 80015b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_TIM_Base_MspInit+0x4c>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	201a      	movs	r0, #26
 80015cc:	f000 fe47 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80015d0:	201a      	movs	r0, #26
 80015d2:	f000 fe60 	bl	8002296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40014800 	.word	0x40014800
 80015e4:	40023800 	.word	0x40023800

080015e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1d      	ldr	r2, [pc, #116]	; (800167c <HAL_UART_MspInit+0x94>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d134      	bne.n	8001674 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <HAL_UART_MspInit+0x98>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <HAL_UART_MspInit+0x98>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001618:	6413      	str	r3, [r2, #64]	; 0x40
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_UART_MspInit+0x98>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_UART_MspInit+0x98>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a14      	ldr	r2, [pc, #80]	; (8001680 <HAL_UART_MspInit+0x98>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_UART_MspInit+0x98>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001642:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001654:	2307      	movs	r3, #7
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4809      	ldr	r0, [pc, #36]	; (8001684 <HAL_UART_MspInit+0x9c>)
 8001660:	f000 fe56 	bl	8002310 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	2027      	movs	r0, #39	; 0x27
 800166a:	f000 fdf8 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800166e:	2027      	movs	r0, #39	; 0x27
 8001670:	f000 fe11 	bl	8002296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40004800 	.word	0x40004800
 8001680:	40023800 	.word	0x40023800
 8001684:	40020400 	.word	0x40020400

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <HardFault_Handler+0x4>

0800169c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <MemManage_Handler+0x4>

080016a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <BusFault_Handler+0x4>

080016a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <UsageFault_Handler+0x4>

080016ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016dc:	f000 f8e8 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80016ea:	f002 ff0c 	bl	8004506 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000394 	.word	0x20000394

080016f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <USART3_IRQHandler+0x10>)
 80016fe:	f003 f9cd 	bl	8004a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200002b8 	.word	0x200002b8

0800170c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <OTG_FS_IRQHandler+0x10>)
 8001712:	f001 fa39 	bl	8002b88 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200018a8 	.word	0x200018a8

08001720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001728:	4a14      	ldr	r2, [pc, #80]	; (800177c <_sbrk+0x5c>)
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <_sbrk+0x60>)
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <_sbrk+0x64>)
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <_sbrk+0x68>)
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	d207      	bcs.n	8001760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001750:	f007 fb86 	bl	8008e60 <__errno>
 8001754:	4602      	mov	r2, r0
 8001756:	230c      	movs	r3, #12
 8001758:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	e009      	b.n	8001774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <_sbrk+0x64>)
 8001770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001772:	68fb      	ldr	r3, [r7, #12]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20020000 	.word	0x20020000
 8001780:	00000400 	.word	0x00000400
 8001784:	20000290 	.word	0x20000290
 8001788:	20001cb8 	.word	0x20001cb8

0800178c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <SystemInit+0x28>)
 8001792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001796:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <SystemInit+0x28>)
 8001798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800179c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SystemInit+0x28>)
 80017a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017a6:	609a      	str	r2, [r3, #8]
#endif
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017be:	e003      	b.n	80017c8 <LoopCopyDataInit>

080017c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017c6:	3104      	adds	r1, #4

080017c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017c8:	480b      	ldr	r0, [pc, #44]	; (80017f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017d0:	d3f6      	bcc.n	80017c0 <CopyDataInit>
  ldr  r2, =_sbss
 80017d2:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017d4:	e002      	b.n	80017dc <LoopFillZerobss>

080017d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017d8:	f842 3b04 	str.w	r3, [r2], #4

080017dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017e0:	d3f9      	bcc.n	80017d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017e2:	f7ff ffd3 	bl	800178c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017e6:	f007 fb41 	bl	8008e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ea:	f7ff fc41 	bl	8001070 <main>
  bx  lr    
 80017ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017f4:	080097c4 	.word	0x080097c4
  ldr  r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017fc:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8001800:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8001804:	20001cb4 	.word	0x20001cb4

08001808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC_IRQHandler>
	...

0800180c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001810:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <HAL_Init+0x40>)
 8001816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_Init+0x40>)
 8001822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a07      	ldr	r2, [pc, #28]	; (800184c <HAL_Init+0x40>)
 800182e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 fd07 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183a:	2000      	movs	r0, #0
 800183c:	f000 f808 	bl	8001850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001840:	f7ff fdf6 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023c00 	.word	0x40023c00

08001850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_InitTick+0x54>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_InitTick+0x58>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001866:	fbb3 f3f1 	udiv	r3, r3, r1
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fd1f 	bl	80022b2 <HAL_SYSTICK_Config>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00e      	b.n	800189c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b0f      	cmp	r3, #15
 8001882:	d80a      	bhi.n	800189a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f000 fce7 	bl	800225e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <HAL_InitTick+0x5c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000004 	.word	0x20000004
 80018a8:	2000000c 	.word	0x2000000c
 80018ac:	20000008 	.word	0x20000008

080018b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_IncTick+0x20>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_IncTick+0x24>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_IncTick+0x24>)
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2000000c 	.word	0x2000000c
 80018d4:	200003d4 	.word	0x200003d4

080018d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return uwTick;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <HAL_GetTick+0x14>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	200003d4 	.word	0x200003d4

080018f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f8:	f7ff ffee 	bl	80018d8 <HAL_GetTick>
 80018fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001908:	d005      	beq.n	8001916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_Delay+0x40>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001916:	bf00      	nop
 8001918:	f7ff ffde 	bl	80018d8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	429a      	cmp	r2, r3
 8001926:	d8f7      	bhi.n	8001918 <HAL_Delay+0x28>
  {
  }
}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	2000000c 	.word	0x2000000c

08001934 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e033      	b.n	80019b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fd94 	bl	8001480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	2b00      	cmp	r3, #0
 8001970:	d118      	bne.n	80019a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800197a:	f023 0302 	bic.w	r3, r3, #2
 800197e:	f043 0202 	orr.w	r2, r3, #2
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fa92 	bl	8001eb0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f023 0303 	bic.w	r3, r3, #3
 800199a:	f043 0201 	orr.w	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	641a      	str	r2, [r3, #64]	; 0x40
 80019a2:	e001      	b.n	80019a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_Start+0x1a>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e0a5      	b.n	8001b22 <HAL_ADC_Start+0x166>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d018      	beq.n	8001a1e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019fc:	4b4c      	ldr	r3, [pc, #304]	; (8001b30 <HAL_ADC_Start+0x174>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a4c      	ldr	r2, [pc, #304]	; (8001b34 <HAL_ADC_Start+0x178>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	0c9a      	lsrs	r2, r3, #18
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a10:	e002      	b.n	8001a18 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f9      	bne.n	8001a12 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d179      	bne.n	8001b20 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a6a:	d106      	bne.n	8001a7a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	f023 0206 	bic.w	r2, r3, #6
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	645a      	str	r2, [r3, #68]	; 0x44
 8001a78:	e002      	b.n	8001a80 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_ADC_Start+0x17c>)
 8001a8a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a94:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d12a      	bne.n	8001af8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a25      	ldr	r2, [pc, #148]	; (8001b3c <HAL_ADC_Start+0x180>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d015      	beq.n	8001ad8 <HAL_ADC_Start+0x11c>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a23      	ldr	r2, [pc, #140]	; (8001b40 <HAL_ADC_Start+0x184>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d105      	bne.n	8001ac2 <HAL_ADC_Start+0x106>
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_ADC_Start+0x17c>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00a      	beq.n	8001ad8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a1f      	ldr	r2, [pc, #124]	; (8001b44 <HAL_ADC_Start+0x188>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d129      	bne.n	8001b20 <HAL_ADC_Start+0x164>
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <HAL_ADC_Start+0x17c>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d823      	bhi.n	8001b20 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d11c      	bne.n	8001b20 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	e013      	b.n	8001b20 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <HAL_ADC_Start+0x180>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d10e      	bne.n	8001b20 <HAL_ADC_Start+0x164>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d107      	bne.n	8001b20 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b1e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000004 	.word	0x20000004
 8001b34:	431bde83 	.word	0x431bde83
 8001b38:	40012300 	.word	0x40012300
 8001b3c:	40012000 	.word	0x40012000
 8001b40:	40012100 	.word	0x40012100
 8001b44:	40012200 	.word	0x40012200

08001b48 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b64:	d113      	bne.n	8001b8e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b74:	d10b      	bne.n	8001b8e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f043 0220 	orr.w	r2, r3, #32
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e05c      	b.n	8001c48 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b8e:	f7ff fea3 	bl	80018d8 <HAL_GetTick>
 8001b92:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b94:	e01a      	b.n	8001bcc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d016      	beq.n	8001bcc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <HAL_ADC_PollForConversion+0x6c>
 8001ba4:	f7ff fe98 	bl	80018d8 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d20b      	bcs.n	8001bcc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f043 0204 	orr.w	r2, r3, #4
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e03d      	b.n	8001c48 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d1dd      	bne.n	8001b96 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f06f 0212 	mvn.w	r2, #18
 8001be2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d123      	bne.n	8001c46 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d11f      	bne.n	8001c46 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d006      	beq.n	8001c22 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d111      	bne.n	8001c46 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d105      	bne.n	8001c46 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f043 0201 	orr.w	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x1c>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e105      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x228>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b09      	cmp	r3, #9
 8001c96:	d925      	bls.n	8001ce4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68d9      	ldr	r1, [r3, #12]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	3b1e      	subs	r3, #30
 8001cae:	2207      	movs	r2, #7
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43da      	mvns	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	400a      	ands	r2, r1
 8001cbc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68d9      	ldr	r1, [r3, #12]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4403      	add	r3, r0
 8001cd6:	3b1e      	subs	r3, #30
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	e022      	b.n	8001d2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6919      	ldr	r1, [r3, #16]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	400a      	ands	r2, r1
 8001d06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6919      	ldr	r1, [r3, #16]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4403      	add	r3, r0
 8001d20:	409a      	lsls	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d824      	bhi.n	8001d7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3b05      	subs	r3, #5
 8001d44:	221f      	movs	r2, #31
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	400a      	ands	r2, r1
 8001d52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b05      	subs	r3, #5
 8001d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	635a      	str	r2, [r3, #52]	; 0x34
 8001d7a:	e04c      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b0c      	cmp	r3, #12
 8001d82:	d824      	bhi.n	8001dce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	3b23      	subs	r3, #35	; 0x23
 8001d96:	221f      	movs	r2, #31
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	400a      	ands	r2, r1
 8001da4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3b23      	subs	r3, #35	; 0x23
 8001dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
 8001dcc:	e023      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	3b41      	subs	r3, #65	; 0x41
 8001de0:	221f      	movs	r2, #31
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	400a      	ands	r2, r1
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	3b41      	subs	r3, #65	; 0x41
 8001e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <HAL_ADC_ConfigChannel+0x234>)
 8001e18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a21      	ldr	r2, [pc, #132]	; (8001ea4 <HAL_ADC_ConfigChannel+0x238>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d109      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x1cc>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b12      	cmp	r3, #18
 8001e2a:	d105      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <HAL_ADC_ConfigChannel+0x238>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d123      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x21e>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b10      	cmp	r3, #16
 8001e48:	d003      	beq.n	8001e52 <HAL_ADC_ConfigChannel+0x1e6>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b11      	cmp	r3, #17
 8001e50:	d11b      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b10      	cmp	r3, #16
 8001e64:	d111      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_ADC_ConfigChannel+0x23c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_ADC_ConfigChannel+0x240>)
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	0c9a      	lsrs	r2, r3, #18
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e7c:	e002      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f9      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	40012300 	.word	0x40012300
 8001ea4:	40012000 	.word	0x40012000
 8001ea8:	20000004 	.word	0x20000004
 8001eac:	431bde83 	.word	0x431bde83

08001eb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eb8:	4b79      	ldr	r3, [pc, #484]	; (80020a0 <ADC_Init+0x1f0>)
 8001eba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ee4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6859      	ldr	r1, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	021a      	lsls	r2, r3, #8
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6899      	ldr	r1, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	4a58      	ldr	r2, [pc, #352]	; (80020a4 <ADC_Init+0x1f4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d022      	beq.n	8001f8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6899      	ldr	r1, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6899      	ldr	r1, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	e00f      	b.n	8001fae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0202 	bic.w	r2, r2, #2
 8001fbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6899      	ldr	r1, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7e1b      	ldrb	r3, [r3, #24]
 8001fc8:	005a      	lsls	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01b      	beq.n	8002014 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ffa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6859      	ldr	r1, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	3b01      	subs	r3, #1
 8002008:	035a      	lsls	r2, r3, #13
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	e007      	b.n	8002024 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002022:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	3b01      	subs	r3, #1
 8002040:	051a      	lsls	r2, r3, #20
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6899      	ldr	r1, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002066:	025a      	lsls	r2, r3, #9
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800207e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6899      	ldr	r1, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	029a      	lsls	r2, r3, #10
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	609a      	str	r2, [r3, #8]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	40012300 	.word	0x40012300
 80020a4:	0f000001 	.word	0x0f000001

080020a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c4:	4013      	ands	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60d3      	str	r3, [r2, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <__NVIC_GetPriorityGrouping+0x18>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	f003 0307 	and.w	r3, r3, #7
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	2b00      	cmp	r3, #0
 800211c:	db0b      	blt.n	8002136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	f003 021f 	and.w	r2, r3, #31
 8002124:	4907      	ldr	r1, [pc, #28]	; (8002144 <__NVIC_EnableIRQ+0x38>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	2001      	movs	r0, #1
 800212e:	fa00 f202 	lsl.w	r2, r0, r2
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000e100 	.word	0xe000e100

08002148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db0a      	blt.n	8002172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	490c      	ldr	r1, [pc, #48]	; (8002194 <__NVIC_SetPriority+0x4c>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	440b      	add	r3, r1
 800216c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002170:	e00a      	b.n	8002188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4908      	ldr	r1, [pc, #32]	; (8002198 <__NVIC_SetPriority+0x50>)
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	3b04      	subs	r3, #4
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	440b      	add	r3, r1
 8002186:	761a      	strb	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f1c3 0307 	rsb	r3, r3, #7
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	bf28      	it	cs
 80021ba:	2304      	movcs	r3, #4
 80021bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d902      	bls.n	80021cc <NVIC_EncodePriority+0x30>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3b03      	subs	r3, #3
 80021ca:	e000      	b.n	80021ce <NVIC_EncodePriority+0x32>
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	401a      	ands	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43d9      	mvns	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	4313      	orrs	r3, r2
         );
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	; 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002214:	d301      	bcc.n	800221a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002216:	2301      	movs	r3, #1
 8002218:	e00f      	b.n	800223a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <SysTick_Config+0x40>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002222:	210f      	movs	r1, #15
 8002224:	f04f 30ff 	mov.w	r0, #4294967295
 8002228:	f7ff ff8e 	bl	8002148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <SysTick_Config+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <SysTick_Config+0x40>)
 8002234:	2207      	movs	r2, #7
 8002236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff29 	bl	80020a8 <__NVIC_SetPriorityGrouping>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002270:	f7ff ff3e 	bl	80020f0 <__NVIC_GetPriorityGrouping>
 8002274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	6978      	ldr	r0, [r7, #20]
 800227c:	f7ff ff8e 	bl	800219c <NVIC_EncodePriority>
 8002280:	4602      	mov	r2, r0
 8002282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff5d 	bl	8002148 <__NVIC_SetPriority>
}
 800228e:	bf00      	nop
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff31 	bl	800210c <__NVIC_EnableIRQ>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ffa2 	bl	8002204 <SysTick_Config>
 80022c0:	4603      	mov	r3, r0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d004      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2280      	movs	r2, #128	; 0x80
 80022e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e00c      	b.n	8002302 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2205      	movs	r2, #5
 80022ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	e16b      	b.n	8002604 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800232c:	2201      	movs	r2, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	429a      	cmp	r2, r3
 8002346:	f040 815a 	bne.w	80025fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d00b      	beq.n	800236a <HAL_GPIO_Init+0x5a>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d007      	beq.n	800236a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800235e:	2b11      	cmp	r3, #17
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b12      	cmp	r3, #18
 8002368:	d130      	bne.n	80023cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	2203      	movs	r2, #3
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a0:	2201      	movs	r2, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 0201 	and.w	r2, r3, #1
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0xfc>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b12      	cmp	r3, #18
 800240a:	d123      	bne.n	8002454 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	08da      	lsrs	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3208      	adds	r2, #8
 8002414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	08da      	lsrs	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3208      	adds	r2, #8
 800244e:	69b9      	ldr	r1, [r7, #24]
 8002450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0203 	and.w	r2, r3, #3
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80b4 	beq.w	80025fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b5f      	ldr	r3, [pc, #380]	; (8002618 <HAL_GPIO_Init+0x308>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a5e      	ldr	r2, [pc, #376]	; (8002618 <HAL_GPIO_Init+0x308>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44
 80024a6:	4b5c      	ldr	r3, [pc, #368]	; (8002618 <HAL_GPIO_Init+0x308>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b2:	4a5a      	ldr	r2, [pc, #360]	; (800261c <HAL_GPIO_Init+0x30c>)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	3302      	adds	r3, #2
 80024ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	220f      	movs	r2, #15
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a51      	ldr	r2, [pc, #324]	; (8002620 <HAL_GPIO_Init+0x310>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d02b      	beq.n	8002536 <HAL_GPIO_Init+0x226>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a50      	ldr	r2, [pc, #320]	; (8002624 <HAL_GPIO_Init+0x314>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d025      	beq.n	8002532 <HAL_GPIO_Init+0x222>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4f      	ldr	r2, [pc, #316]	; (8002628 <HAL_GPIO_Init+0x318>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d01f      	beq.n	800252e <HAL_GPIO_Init+0x21e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4e      	ldr	r2, [pc, #312]	; (800262c <HAL_GPIO_Init+0x31c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d019      	beq.n	800252a <HAL_GPIO_Init+0x21a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4d      	ldr	r2, [pc, #308]	; (8002630 <HAL_GPIO_Init+0x320>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d013      	beq.n	8002526 <HAL_GPIO_Init+0x216>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4c      	ldr	r2, [pc, #304]	; (8002634 <HAL_GPIO_Init+0x324>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00d      	beq.n	8002522 <HAL_GPIO_Init+0x212>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a4b      	ldr	r2, [pc, #300]	; (8002638 <HAL_GPIO_Init+0x328>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d007      	beq.n	800251e <HAL_GPIO_Init+0x20e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a4a      	ldr	r2, [pc, #296]	; (800263c <HAL_GPIO_Init+0x32c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d101      	bne.n	800251a <HAL_GPIO_Init+0x20a>
 8002516:	2307      	movs	r3, #7
 8002518:	e00e      	b.n	8002538 <HAL_GPIO_Init+0x228>
 800251a:	2308      	movs	r3, #8
 800251c:	e00c      	b.n	8002538 <HAL_GPIO_Init+0x228>
 800251e:	2306      	movs	r3, #6
 8002520:	e00a      	b.n	8002538 <HAL_GPIO_Init+0x228>
 8002522:	2305      	movs	r3, #5
 8002524:	e008      	b.n	8002538 <HAL_GPIO_Init+0x228>
 8002526:	2304      	movs	r3, #4
 8002528:	e006      	b.n	8002538 <HAL_GPIO_Init+0x228>
 800252a:	2303      	movs	r3, #3
 800252c:	e004      	b.n	8002538 <HAL_GPIO_Init+0x228>
 800252e:	2302      	movs	r3, #2
 8002530:	e002      	b.n	8002538 <HAL_GPIO_Init+0x228>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_GPIO_Init+0x228>
 8002536:	2300      	movs	r3, #0
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	f002 0203 	and.w	r2, r2, #3
 800253e:	0092      	lsls	r2, r2, #2
 8002540:	4093      	lsls	r3, r2
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002548:	4934      	ldr	r1, [pc, #208]	; (800261c <HAL_GPIO_Init+0x30c>)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	089b      	lsrs	r3, r3, #2
 800254e:	3302      	adds	r3, #2
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002556:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <HAL_GPIO_Init+0x330>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800257a:	4a31      	ldr	r2, [pc, #196]	; (8002640 <HAL_GPIO_Init+0x330>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002580:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <HAL_GPIO_Init+0x330>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025a4:	4a26      	ldr	r2, [pc, #152]	; (8002640 <HAL_GPIO_Init+0x330>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025aa:	4b25      	ldr	r3, [pc, #148]	; (8002640 <HAL_GPIO_Init+0x330>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ce:	4a1c      	ldr	r2, [pc, #112]	; (8002640 <HAL_GPIO_Init+0x330>)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d4:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <HAL_GPIO_Init+0x330>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025f8:	4a11      	ldr	r2, [pc, #68]	; (8002640 <HAL_GPIO_Init+0x330>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3301      	adds	r3, #1
 8002602:	61fb      	str	r3, [r7, #28]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	2b0f      	cmp	r3, #15
 8002608:	f67f ae90 	bls.w	800232c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800260c:	bf00      	nop
 800260e:	3724      	adds	r7, #36	; 0x24
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	40023800 	.word	0x40023800
 800261c:	40013800 	.word	0x40013800
 8002620:	40020000 	.word	0x40020000
 8002624:	40020400 	.word	0x40020400
 8002628:	40020800 	.word	0x40020800
 800262c:	40020c00 	.word	0x40020c00
 8002630:	40021000 	.word	0x40021000
 8002634:	40021400 	.word	0x40021400
 8002638:	40021800 	.word	0x40021800
 800263c:	40021c00 	.word	0x40021c00
 8002640:	40013c00 	.word	0x40013c00

08002644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
 8002650:	4613      	mov	r3, r2
 8002652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002654:	787b      	ldrb	r3, [r7, #1]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002660:	e003      	b.n	800266a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002662:	887b      	ldrh	r3, [r7, #2]
 8002664:	041a      	lsls	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	619a      	str	r2, [r3, #24]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e11f      	b.n	80028ca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe ff32 	bl	8001508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2224      	movs	r2, #36	; 0x24
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0201 	bic.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026dc:	f001 fe9c 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 80026e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4a7b      	ldr	r2, [pc, #492]	; (80028d4 <HAL_I2C_Init+0x25c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d807      	bhi.n	80026fc <HAL_I2C_Init+0x84>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4a7a      	ldr	r2, [pc, #488]	; (80028d8 <HAL_I2C_Init+0x260>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	bf94      	ite	ls
 80026f4:	2301      	movls	r3, #1
 80026f6:	2300      	movhi	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	e006      	b.n	800270a <HAL_I2C_Init+0x92>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4a77      	ldr	r2, [pc, #476]	; (80028dc <HAL_I2C_Init+0x264>)
 8002700:	4293      	cmp	r3, r2
 8002702:	bf94      	ite	ls
 8002704:	2301      	movls	r3, #1
 8002706:	2300      	movhi	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e0db      	b.n	80028ca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4a72      	ldr	r2, [pc, #456]	; (80028e0 <HAL_I2C_Init+0x268>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	0c9b      	lsrs	r3, r3, #18
 800271c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	430a      	orrs	r2, r1
 8002730:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4a64      	ldr	r2, [pc, #400]	; (80028d4 <HAL_I2C_Init+0x25c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d802      	bhi.n	800274c <HAL_I2C_Init+0xd4>
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	3301      	adds	r3, #1
 800274a:	e009      	b.n	8002760 <HAL_I2C_Init+0xe8>
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	4a63      	ldr	r2, [pc, #396]	; (80028e4 <HAL_I2C_Init+0x26c>)
 8002758:	fba2 2303 	umull	r2, r3, r2, r3
 800275c:	099b      	lsrs	r3, r3, #6
 800275e:	3301      	adds	r3, #1
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	430b      	orrs	r3, r1
 8002766:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002772:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4956      	ldr	r1, [pc, #344]	; (80028d4 <HAL_I2C_Init+0x25c>)
 800277c:	428b      	cmp	r3, r1
 800277e:	d80d      	bhi.n	800279c <HAL_I2C_Init+0x124>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1e59      	subs	r1, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	fbb1 f3f3 	udiv	r3, r1, r3
 800278e:	3301      	adds	r3, #1
 8002790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002794:	2b04      	cmp	r3, #4
 8002796:	bf38      	it	cc
 8002798:	2304      	movcc	r3, #4
 800279a:	e04f      	b.n	800283c <HAL_I2C_Init+0x1c4>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d111      	bne.n	80027c8 <HAL_I2C_Init+0x150>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	1e58      	subs	r0, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	440b      	add	r3, r1
 80027b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b6:	3301      	adds	r3, #1
 80027b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	e012      	b.n	80027ee <HAL_I2C_Init+0x176>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1e58      	subs	r0, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	0099      	lsls	r1, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	fbb0 f3f3 	udiv	r3, r0, r3
 80027de:	3301      	adds	r3, #1
 80027e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf0c      	ite	eq
 80027e8:	2301      	moveq	r3, #1
 80027ea:	2300      	movne	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Init+0x17e>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e022      	b.n	800283c <HAL_I2C_Init+0x1c4>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10e      	bne.n	800281c <HAL_I2C_Init+0x1a4>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1e58      	subs	r0, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6859      	ldr	r1, [r3, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	440b      	add	r3, r1
 800280c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002810:	3301      	adds	r3, #1
 8002812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800281a:	e00f      	b.n	800283c <HAL_I2C_Init+0x1c4>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e58      	subs	r0, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	0099      	lsls	r1, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002832:	3301      	adds	r3, #1
 8002834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	6809      	ldr	r1, [r1, #0]
 8002840:	4313      	orrs	r3, r2
 8002842:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800286a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6911      	ldr	r1, [r2, #16]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68d2      	ldr	r2, [r2, #12]
 8002876:	4311      	orrs	r1, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	430b      	orrs	r3, r1
 800287e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	000186a0 	.word	0x000186a0
 80028d8:	001e847f 	.word	0x001e847f
 80028dc:	003d08ff 	.word	0x003d08ff
 80028e0:	431bde83 	.word	0x431bde83
 80028e4:	10624dd3 	.word	0x10624dd3

080028e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ea:	b08f      	sub	sp, #60	; 0x3c
 80028ec:	af0a      	add	r7, sp, #40	; 0x28
 80028ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e10f      	b.n	8002b1a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d106      	bne.n	800291a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f005 ffa7 	bl	8008868 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2203      	movs	r2, #3
 800291e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d102      	bne.n	8002934 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f002 ffca 	bl	80058d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	687e      	ldr	r6, [r7, #4]
 8002946:	466d      	mov	r5, sp
 8002948:	f106 0410 	add.w	r4, r6, #16
 800294c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800294e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002954:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002958:	e885 0003 	stmia.w	r5, {r0, r1}
 800295c:	1d33      	adds	r3, r6, #4
 800295e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002960:	6838      	ldr	r0, [r7, #0]
 8002962:	f002 fea1 	bl	80056a8 <USB_CoreInit>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0d0      	b.n	8002b1a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2100      	movs	r1, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f002 ffb8 	bl	80058f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002984:	2300      	movs	r3, #0
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	e04a      	b.n	8002a20 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	333d      	adds	r3, #61	; 0x3d
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	333c      	adds	r3, #60	; 0x3c
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	b298      	uxth	r0, r3
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	3342      	adds	r3, #66	; 0x42
 80029c6:	4602      	mov	r2, r0
 80029c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	333f      	adds	r3, #63	; 0x3f
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	3344      	adds	r3, #68	; 0x44
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	3348      	adds	r3, #72	; 0x48
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	3350      	adds	r3, #80	; 0x50
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d3af      	bcc.n	800298a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	e044      	b.n	8002aba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a58:	7bfa      	ldrb	r2, [r7, #15]
 8002a5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a9e:	7bfa      	ldrb	r2, [r7, #15]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d3b5      	bcc.n	8002a30 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	687e      	ldr	r6, [r7, #4]
 8002acc:	466d      	mov	r5, sp
 8002ace:	f106 0410 	add.w	r4, r6, #16
 8002ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ada:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ade:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ae2:	1d33      	adds	r3, r6, #4
 8002ae4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae6:	6838      	ldr	r0, [r7, #0]
 8002ae8:	f002 ff2e 	bl	8005948 <USB_DevInit>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e00d      	b.n	8002b1a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f003 ff76 	bl	8006a04 <USB_DevDisconnect>

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b22 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_PCD_Start+0x1c>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e020      	b.n	8002b80 <HAL_PCD_Start+0x5e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d109      	bne.n	8002b62 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d005      	beq.n	8002b62 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 fea2 	bl	80058b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f003 ff26 	bl	80069c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b88:	b590      	push	{r4, r7, lr}
 8002b8a:	b08d      	sub	sp, #52	; 0x34
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f003 ffe4 	bl	8006b6c <USB_GetMode>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 839d 	bne.w	80032e6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 ff48 	bl	8006a46 <USB_ReadInterrupts>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8393 	beq.w	80032e4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f003 ff3f 	bl	8006a46 <USB_ReadInterrupts>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d107      	bne.n	8002be2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f002 0202 	and.w	r2, r2, #2
 8002be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f003 ff2d 	bl	8006a46 <USB_ReadInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b10      	cmp	r3, #16
 8002bf4:	d161      	bne.n	8002cba <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699a      	ldr	r2, [r3, #24]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0210 	bic.w	r2, r2, #16
 8002c04:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	f003 020f 	and.w	r2, r3, #15
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	3304      	adds	r3, #4
 8002c24:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	0c5b      	lsrs	r3, r3, #17
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d124      	bne.n	8002c7c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d035      	beq.n	8002caa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	6a38      	ldr	r0, [r7, #32]
 8002c52:	f003 fd93 	bl	800677c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c62:	441a      	add	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	699a      	ldr	r2, [r3, #24]
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c74:	441a      	add	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	619a      	str	r2, [r3, #24]
 8002c7a:	e016      	b.n	8002caa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	0c5b      	lsrs	r3, r3, #17
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	2b06      	cmp	r3, #6
 8002c86:	d110      	bne.n	8002caa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c8e:	2208      	movs	r2, #8
 8002c90:	4619      	mov	r1, r3
 8002c92:	6a38      	ldr	r0, [r7, #32]
 8002c94:	f003 fd72 	bl	800677c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	699a      	ldr	r2, [r3, #24]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	091b      	lsrs	r3, r3, #4
 8002ca0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ca4:	441a      	add	r2, r3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699a      	ldr	r2, [r3, #24]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0210 	orr.w	r2, r2, #16
 8002cb8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 fec1 	bl	8006a46 <USB_ReadInterrupts>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cce:	d16e      	bne.n	8002dae <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f003 fec7 	bl	8006a6c <USB_ReadDevAllOutEpInterrupt>
 8002cde:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002ce0:	e062      	b.n	8002da8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d057      	beq.n	8002d9c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f003 feec 	bl	8006ad4 <USB_ReadDevOutEPInterrupt>
 8002cfc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00c      	beq.n	8002d22 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d14:	461a      	mov	r2, r3
 8002d16:	2301      	movs	r3, #1
 8002d18:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fdb1 	bl	8003884 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00c      	beq.n	8002d46 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 feab 	bl	8003a9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d008      	beq.n	8002d62 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2310      	movs	r3, #16
 8002d60:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2320      	movs	r3, #32
 8002d7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d009      	beq.n	8002d9c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d94:	461a      	mov	r2, r3
 8002d96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d9a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	3301      	adds	r3, #1
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d199      	bne.n	8002ce2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f003 fe47 	bl	8006a46 <USB_ReadInterrupts>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dc2:	f040 80c0 	bne.w	8002f46 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f003 fe68 	bl	8006aa0 <USB_ReadDevAllInEpInterrupt>
 8002dd0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002dd6:	e0b2      	b.n	8002f3e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80a7 	beq.w	8002f32 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 fe8e 	bl	8006b10 <USB_ReadDevInEPInterrupt>
 8002df4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d057      	beq.n	8002eb0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	2201      	movs	r2, #1
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69f9      	ldr	r1, [r7, #28]
 8002e1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e20:	4013      	ands	r3, r2
 8002e22:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e30:	461a      	mov	r2, r3
 8002e32:	2301      	movs	r3, #1
 8002e34:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d132      	bne.n	8002ea4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3348      	adds	r3, #72	; 0x48
 8002e4e:	6819      	ldr	r1, [r3, #0]
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4403      	add	r3, r0
 8002e5e:	3344      	adds	r3, #68	; 0x44
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4419      	add	r1, r3
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4403      	add	r3, r0
 8002e72:	3348      	adds	r3, #72	; 0x48
 8002e74:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d113      	bne.n	8002ea4 <HAL_PCD_IRQHandler+0x31c>
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	3350      	adds	r3, #80	; 0x50
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	f003 fe96 	bl	8006bd0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f005 fd5d 	bl	800896a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2308      	movs	r3, #8
 8002eca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d008      	beq.n	8002f04 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002efe:	461a      	mov	r2, r3
 8002f00:	2340      	movs	r3, #64	; 0x40
 8002f02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fc1b 	bl	8003768 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	3301      	adds	r3, #1
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3a:	085b      	lsrs	r3, r3, #1
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f47f af49 	bne.w	8002dd8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f003 fd7b 	bl	8006a46 <USB_ReadInterrupts>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f5a:	d122      	bne.n	8002fa2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d108      	bne.n	8002f8c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f82:	2100      	movs	r1, #0
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fe27 	bl	8003bd8 <HAL_PCDEx_LPM_Callback>
 8002f8a:	e002      	b.n	8002f92 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f005 fd63 	bl	8008a58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002fa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 fd4d 	bl	8006a46 <USB_ReadInterrupts>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fb6:	d112      	bne.n	8002fde <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d102      	bne.n	8002fce <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f005 fd1f 	bl	8008a0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002fdc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 fd2f 	bl	8006a46 <USB_ReadInterrupts>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff2:	f040 80c7 	bne.w	8003184 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2110      	movs	r1, #16
 8003010:	4618      	mov	r0, r3
 8003012:	f002 fdfd 	bl	8005c10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003016:	2300      	movs	r3, #0
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800301a:	e056      	b.n	80030ca <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003028:	461a      	mov	r2, r3
 800302a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800302e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	4413      	add	r3, r2
 8003038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003040:	0151      	lsls	r1, r2, #5
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	440a      	add	r2, r1
 8003046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800304a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800304e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	4413      	add	r3, r2
 8003058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003060:	0151      	lsls	r1, r2, #5
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	440a      	add	r2, r1
 8003066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800306a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800306e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	4413      	add	r3, r2
 8003078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307c:	461a      	mov	r2, r3
 800307e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003082:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	4413      	add	r3, r2
 800308c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003094:	0151      	lsls	r1, r2, #5
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	440a      	add	r2, r1
 800309a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800309e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030b4:	0151      	lsls	r1, r2, #5
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	440a      	add	r2, r1
 80030ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c6:	3301      	adds	r3, #1
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d3a3      	bcc.n	800301c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80030e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d016      	beq.n	800311e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003100:	f043 030b 	orr.w	r3, r3, #11
 8003104:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003116:	f043 030b 	orr.w	r3, r3, #11
 800311a:	6453      	str	r3, [r2, #68]	; 0x44
 800311c:	e015      	b.n	800314a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800312c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003130:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003134:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003144:	f043 030b 	orr.w	r3, r3, #11
 8003148:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003158:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800315c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800316e:	461a      	mov	r2, r3
 8003170:	f003 fd2e 	bl	8006bd0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f003 fc5c 	bl	8006a46 <USB_ReadInterrupts>
 800318e:	4603      	mov	r3, r0
 8003190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003198:	d124      	bne.n	80031e4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f003 fcf2 	bl	8006b88 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f002 fd92 	bl	8005cd2 <USB_GetDevSpeed>
 80031ae:	4603      	mov	r3, r0
 80031b0:	461a      	mov	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681c      	ldr	r4, [r3, #0]
 80031ba:	f001 f921 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 80031be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	4620      	mov	r0, r4
 80031ca:	f002 facf 	bl	800576c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f005 fbf3 	bl	80089ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80031e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f003 fc2c 	bl	8006a46 <USB_ReadInterrupts>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d10a      	bne.n	800320e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f005 fbd0 	bl	800899e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f002 0208 	and.w	r2, r2, #8
 800320c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f003 fc17 	bl	8006a46 <USB_ReadInterrupts>
 8003218:	4603      	mov	r3, r0
 800321a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800321e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003222:	d10f      	bne.n	8003244 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	b2db      	uxtb	r3, r3
 800322c:	4619      	mov	r1, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f005 fc32 	bl	8008a98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003242:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f003 fbfc 	bl	8006a46 <USB_ReadInterrupts>
 800324e:	4603      	mov	r3, r0
 8003250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003254:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003258:	d10f      	bne.n	800327a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	b2db      	uxtb	r3, r3
 8003262:	4619      	mov	r1, r3
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f005 fc05 	bl	8008a74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695a      	ldr	r2, [r3, #20]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003278:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f003 fbe1 	bl	8006a46 <USB_ReadInterrupts>
 8003284:	4603      	mov	r3, r0
 8003286:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800328a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328e:	d10a      	bne.n	80032a6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f005 fc13 	bl	8008abc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80032a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f003 fbcb 	bl	8006a46 <USB_ReadInterrupts>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d115      	bne.n	80032e6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f005 fc03 	bl	8008ad8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	430a      	orrs	r2, r1
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	e000      	b.n	80032e6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80032e4:	bf00      	nop
    }
  }
}
 80032e6:	3734      	adds	r7, #52	; 0x34
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd90      	pop	{r4, r7, pc}

080032ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_PCD_SetAddress+0x1a>
 8003302:	2302      	movs	r3, #2
 8003304:	e013      	b.n	800332e <HAL_PCD_SetAddress+0x42>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f003 fb29 	bl	8006976 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	4608      	mov	r0, r1
 8003340:	4611      	mov	r1, r2
 8003342:	461a      	mov	r2, r3
 8003344:	4603      	mov	r3, r0
 8003346:	70fb      	strb	r3, [r7, #3]
 8003348:	460b      	mov	r3, r1
 800334a:	803b      	strh	r3, [r7, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003354:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003358:	2b00      	cmp	r3, #0
 800335a:	da0f      	bge.n	800337c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	f003 020f 	and.w	r2, r3, #15
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	3338      	adds	r3, #56	; 0x38
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4413      	add	r3, r2
 8003370:	3304      	adds	r3, #4
 8003372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	705a      	strb	r2, [r3, #1]
 800337a:	e00f      	b.n	800339c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	f003 020f 	and.w	r2, r3, #15
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	3304      	adds	r3, #4
 8003394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80033a8:	883a      	ldrh	r2, [r7, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	78ba      	ldrb	r2, [r7, #2]
 80033b2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	785b      	ldrb	r3, [r3, #1]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d004      	beq.n	80033c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033c6:	78bb      	ldrb	r3, [r7, #2]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d102      	bne.n	80033d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_PCD_EP_Open+0xaa>
 80033dc:	2302      	movs	r3, #2
 80033de:	e00e      	b.n	80033fe <HAL_PCD_EP_Open+0xc8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68f9      	ldr	r1, [r7, #12]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f002 fc94 	bl	8005d1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80033fc:	7afb      	ldrb	r3, [r7, #11]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	460b      	mov	r3, r1
 8003410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003412:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003416:	2b00      	cmp	r3, #0
 8003418:	da0f      	bge.n	800343a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800341a:	78fb      	ldrb	r3, [r7, #3]
 800341c:	f003 020f 	and.w	r2, r3, #15
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	1a9b      	subs	r3, r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	3338      	adds	r3, #56	; 0x38
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	4413      	add	r3, r2
 800342e:	3304      	adds	r3, #4
 8003430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	705a      	strb	r2, [r3, #1]
 8003438:	e00f      	b.n	800345a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	f003 020f 	and.w	r2, r3, #15
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	4413      	add	r3, r2
 8003450:	3304      	adds	r3, #4
 8003452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_PCD_EP_Close+0x6e>
 8003470:	2302      	movs	r3, #2
 8003472:	e00e      	b.n	8003492 <HAL_PCD_EP_Close+0x8c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68f9      	ldr	r1, [r7, #12]
 8003482:	4618      	mov	r0, r3
 8003484:	f002 fcd2 	bl	8005e2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b086      	sub	sp, #24
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
 80034a6:	460b      	mov	r3, r1
 80034a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034aa:	7afb      	ldrb	r3, [r7, #11]
 80034ac:	f003 020f 	and.w	r2, r3, #15
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	3304      	adds	r3, #4
 80034c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2200      	movs	r2, #0
 80034d4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2200      	movs	r2, #0
 80034da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034dc:	7afb      	ldrb	r3, [r7, #11]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d102      	bne.n	80034f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034f6:	7afb      	ldrb	r3, [r7, #11]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d109      	bne.n	8003514 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	6979      	ldr	r1, [r7, #20]
 800350e:	f002 ffad 	bl	800646c <USB_EP0StartXfer>
 8003512:	e008      	b.n	8003526 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	6979      	ldr	r1, [r7, #20]
 8003522:	f002 fd5f 	bl	8005fe4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	f003 020f 	and.w	r2, r3, #15
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	460b      	mov	r3, r1
 800356e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003570:	7afb      	ldrb	r3, [r7, #11]
 8003572:	f003 020f 	and.w	r2, r3, #15
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	3338      	adds	r3, #56	; 0x38
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	3304      	adds	r3, #4
 8003586:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2200      	movs	r2, #0
 8003598:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2201      	movs	r2, #1
 800359e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035a0:	7afb      	ldrb	r3, [r7, #11]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d102      	bne.n	80035ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035ba:	7afb      	ldrb	r3, [r7, #11]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	6979      	ldr	r1, [r7, #20]
 80035d2:	f002 ff4b 	bl	800646c <USB_EP0StartXfer>
 80035d6:	e008      	b.n	80035ea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	6979      	ldr	r1, [r7, #20]
 80035e6:	f002 fcfd 	bl	8005fe4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	f003 020f 	and.w	r2, r3, #15
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	429a      	cmp	r2, r3
 800360c:	d901      	bls.n	8003612 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e050      	b.n	80036b4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003616:	2b00      	cmp	r3, #0
 8003618:	da0f      	bge.n	800363a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	f003 020f 	and.w	r2, r3, #15
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	3338      	adds	r3, #56	; 0x38
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	3304      	adds	r3, #4
 8003630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	705a      	strb	r2, [r3, #1]
 8003638:	e00d      	b.n	8003656 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	4413      	add	r3, r2
 800364c:	3304      	adds	r3, #4
 800364e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	b2da      	uxtb	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_PCD_EP_SetStall+0x82>
 8003672:	2302      	movs	r3, #2
 8003674:	e01e      	b.n	80036b4 <HAL_PCD_EP_SetStall+0xc0>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68f9      	ldr	r1, [r7, #12]
 8003684:	4618      	mov	r0, r3
 8003686:	f003 f8a2 	bl	80067ce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	b2d9      	uxtb	r1, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036a4:	461a      	mov	r2, r3
 80036a6:	f003 fa93 	bl	8006bd0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	f003 020f 	and.w	r2, r3, #15
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d901      	bls.n	80036da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e042      	b.n	8003760 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	da0f      	bge.n	8003702 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	f003 020f 	and.w	r2, r3, #15
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	3338      	adds	r3, #56	; 0x38
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	3304      	adds	r3, #4
 80036f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	705a      	strb	r2, [r3, #1]
 8003700:	e00f      	b.n	8003722 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	f003 020f 	and.w	r2, r3, #15
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4413      	add	r3, r2
 8003718:	3304      	adds	r3, #4
 800371a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	b2da      	uxtb	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_PCD_EP_ClrStall+0x86>
 800373e:	2302      	movs	r3, #2
 8003740:	e00e      	b.n	8003760 <HAL_PCD_EP_ClrStall+0xa4>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68f9      	ldr	r1, [r7, #12]
 8003750:	4618      	mov	r0, r3
 8003752:	f003 f8aa 	bl	80068aa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	; 0x28
 800376c:	af02      	add	r7, sp, #8
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	3338      	adds	r3, #56	; 0x38
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	4413      	add	r3, r2
 800378c:	3304      	adds	r3, #4
 800378e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	699a      	ldr	r2, [r3, #24]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	429a      	cmp	r2, r3
 800379a:	d901      	bls.n	80037a0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e06c      	b.n	800387a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	695a      	ldr	r2, [r3, #20]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d902      	bls.n	80037bc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	3303      	adds	r3, #3
 80037c0:	089b      	lsrs	r3, r3, #2
 80037c2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037c4:	e02b      	b.n	800381e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d902      	bls.n	80037e2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3303      	adds	r3, #3
 80037e6:	089b      	lsrs	r3, r3, #2
 80037e8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	68d9      	ldr	r1, [r3, #12]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	4603      	mov	r3, r0
 8003800:	6978      	ldr	r0, [r7, #20]
 8003802:	f002 ff86 	bl	8006712 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	441a      	add	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	441a      	add	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	b29b      	uxth	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	429a      	cmp	r2, r3
 8003832:	d809      	bhi.n	8003848 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	699a      	ldr	r2, [r3, #24]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800383c:	429a      	cmp	r2, r3
 800383e:	d203      	bcs.n	8003848 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1be      	bne.n	80037c6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	429a      	cmp	r2, r3
 8003852:	d811      	bhi.n	8003878 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	2201      	movs	r2, #1
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	43db      	mvns	r3, r3
 800386e:	6939      	ldr	r1, [r7, #16]
 8003870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003874:	4013      	ands	r3, r2
 8003876:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	333c      	adds	r3, #60	; 0x3c
 800389c:	3304      	adds	r3, #4
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	f040 80a0 	bne.w	80039fc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d015      	beq.n	80038f2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4a72      	ldr	r2, [pc, #456]	; (8003a94 <PCD_EP_OutXfrComplete_int+0x210>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	f240 80dd 	bls.w	8003a8a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80d7 	beq.w	8003a8a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e8:	461a      	mov	r2, r3
 80038ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ee:	6093      	str	r3, [r2, #8]
 80038f0:	e0cb      	b.n	8003a8a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d009      	beq.n	8003910 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003908:	461a      	mov	r2, r3
 800390a:	2320      	movs	r3, #32
 800390c:	6093      	str	r3, [r2, #8]
 800390e:	e0bc      	b.n	8003a8a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 80b7 	bne.w	8003a8a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4a5d      	ldr	r2, [pc, #372]	; (8003a94 <PCD_EP_OutXfrComplete_int+0x210>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d90f      	bls.n	8003944 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393a:	461a      	mov	r2, r3
 800393c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003940:	6093      	str	r3, [r2, #8]
 8003942:	e0a2      	b.n	8003a8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003956:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	0159      	lsls	r1, r3, #5
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	440b      	add	r3, r1
 8003960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800396a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4403      	add	r3, r0
 800397a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800397e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003992:	6819      	ldr	r1, [r3, #0]
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4403      	add	r3, r0
 80039a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4419      	add	r1, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4403      	add	r3, r0
 80039b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039bc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d114      	bne.n	80039ee <PCD_EP_OutXfrComplete_int+0x16a>
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d108      	bne.n	80039ee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039e6:	461a      	mov	r2, r3
 80039e8:	2101      	movs	r1, #1
 80039ea:	f003 f8f1 	bl	8006bd0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	4619      	mov	r1, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f004 ff9d 	bl	8008934 <HAL_PCD_DataOutStageCallback>
 80039fa:	e046      	b.n	8003a8a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4a26      	ldr	r2, [pc, #152]	; (8003a98 <PCD_EP_OutXfrComplete_int+0x214>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d124      	bne.n	8003a4e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a20:	6093      	str	r3, [r2, #8]
 8003a22:	e032      	b.n	8003a8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	4619      	mov	r1, r3
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f004 ff74 	bl	8008934 <HAL_PCD_DataOutStageCallback>
 8003a4c:	e01d      	b.n	8003a8a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d114      	bne.n	8003a7e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d108      	bne.n	8003a7e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a76:	461a      	mov	r2, r3
 8003a78:	2100      	movs	r1, #0
 8003a7a:	f003 f8a9 	bl	8006bd0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	4619      	mov	r1, r3
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f004 ff55 	bl	8008934 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	4f54300a 	.word	0x4f54300a
 8003a98:	4f54310a 	.word	0x4f54310a

08003a9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	333c      	adds	r3, #60	; 0x3c
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a15      	ldr	r2, [pc, #84]	; (8003b24 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d90e      	bls.n	8003af0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d009      	beq.n	8003af0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f004 ff0d 	bl	8008910 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <PCD_EP_OutSetupPacket_int+0x88>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d90c      	bls.n	8003b18 <PCD_EP_OutSetupPacket_int+0x7c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d108      	bne.n	8003b18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b10:	461a      	mov	r2, r3
 8003b12:	2101      	movs	r1, #1
 8003b14:	f003 f85c 	bl	8006bd0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	4f54300a 	.word	0x4f54300a

08003b28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]
 8003b34:	4613      	mov	r3, r2
 8003b36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d107      	bne.n	8003b56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b46:	883b      	ldrh	r3, [r7, #0]
 8003b48:	0419      	lsls	r1, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	629a      	str	r2, [r3, #40]	; 0x28
 8003b54:	e028      	b.n	8003ba8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	4413      	add	r3, r2
 8003b62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b64:	2300      	movs	r3, #0
 8003b66:	73fb      	strb	r3, [r7, #15]
 8003b68:	e00d      	b.n	8003b86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	3340      	adds	r3, #64	; 0x40
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	3301      	adds	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
 8003b86:	7bfa      	ldrb	r2, [r7, #15]
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d3ec      	bcc.n	8003b6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b90:	883b      	ldrh	r3, [r7, #0]
 8003b92:	0418      	lsls	r0, r3, #16
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6819      	ldr	r1, [r3, #0]
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	4302      	orrs	r2, r0
 8003ba0:	3340      	adds	r3, #64	; 0x40
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	887a      	ldrh	r2, [r7, #2]
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e25b      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d075      	beq.n	8003cfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c0e:	4ba3      	ldr	r3, [pc, #652]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d00c      	beq.n	8003c34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c1a:	4ba0      	ldr	r3, [pc, #640]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d112      	bne.n	8003c4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c26:	4b9d      	ldr	r3, [pc, #628]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c32:	d10b      	bne.n	8003c4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c34:	4b99      	ldr	r3, [pc, #612]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d05b      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x108>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d157      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e236      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c54:	d106      	bne.n	8003c64 <HAL_RCC_OscConfig+0x74>
 8003c56:	4b91      	ldr	r3, [pc, #580]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a90      	ldr	r2, [pc, #576]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	e01d      	b.n	8003ca0 <HAL_RCC_OscConfig+0xb0>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x98>
 8003c6e:	4b8b      	ldr	r3, [pc, #556]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a8a      	ldr	r2, [pc, #552]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	4b88      	ldr	r3, [pc, #544]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a87      	ldr	r2, [pc, #540]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e00b      	b.n	8003ca0 <HAL_RCC_OscConfig+0xb0>
 8003c88:	4b84      	ldr	r3, [pc, #528]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a83      	ldr	r2, [pc, #524]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	4b81      	ldr	r3, [pc, #516]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a80      	ldr	r2, [pc, #512]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d013      	beq.n	8003cd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7fd fe16 	bl	80018d8 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb0:	f7fd fe12 	bl	80018d8 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	; 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e1fb      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc2:	4b76      	ldr	r3, [pc, #472]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0xc0>
 8003cce:	e014      	b.n	8003cfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fd fe02 	bl	80018d8 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd8:	f7fd fdfe 	bl	80018d8 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	; 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e1e7      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cea:	4b6c      	ldr	r3, [pc, #432]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0xe8>
 8003cf6:	e000      	b.n	8003cfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d063      	beq.n	8003dce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d06:	4b65      	ldr	r3, [pc, #404]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d12:	4b62      	ldr	r3, [pc, #392]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d11c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d1e:	4b5f      	ldr	r3, [pc, #380]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d116      	bne.n	8003d58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2a:	4b5c      	ldr	r3, [pc, #368]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d005      	beq.n	8003d42 <HAL_RCC_OscConfig+0x152>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d001      	beq.n	8003d42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e1bb      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d42:	4b56      	ldr	r3, [pc, #344]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4952      	ldr	r1, [pc, #328]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d56:	e03a      	b.n	8003dce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d020      	beq.n	8003da2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d60:	4b4f      	ldr	r3, [pc, #316]	; (8003ea0 <HAL_RCC_OscConfig+0x2b0>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d66:	f7fd fdb7 	bl	80018d8 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d6e:	f7fd fdb3 	bl	80018d8 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e19c      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d80:	4b46      	ldr	r3, [pc, #280]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8c:	4b43      	ldr	r3, [pc, #268]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4940      	ldr	r1, [pc, #256]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	600b      	str	r3, [r1, #0]
 8003da0:	e015      	b.n	8003dce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003da2:	4b3f      	ldr	r3, [pc, #252]	; (8003ea0 <HAL_RCC_OscConfig+0x2b0>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da8:	f7fd fd96 	bl	80018d8 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db0:	f7fd fd92 	bl	80018d8 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e17b      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc2:	4b36      	ldr	r3, [pc, #216]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d030      	beq.n	8003e3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d016      	beq.n	8003e10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de2:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <HAL_RCC_OscConfig+0x2b4>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de8:	f7fd fd76 	bl	80018d8 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df0:	f7fd fd72 	bl	80018d8 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e15b      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e02:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0x200>
 8003e0e:	e015      	b.n	8003e3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e10:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <HAL_RCC_OscConfig+0x2b4>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e16:	f7fd fd5f 	bl	80018d8 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e1e:	f7fd fd5b 	bl	80018d8 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e144      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e30:	4b1a      	ldr	r3, [pc, #104]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1f0      	bne.n	8003e1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80a0 	beq.w	8003f8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e4e:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10f      	bne.n	8003e7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	4a0e      	ldr	r2, [pc, #56]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e68:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	60bb      	str	r3, [r7, #8]
 8003e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e76:	2301      	movs	r3, #1
 8003e78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_RCC_OscConfig+0x2b8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d121      	bne.n	8003eca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e86:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <HAL_RCC_OscConfig+0x2b8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a07      	ldr	r2, [pc, #28]	; (8003ea8 <HAL_RCC_OscConfig+0x2b8>)
 8003e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e92:	f7fd fd21 	bl	80018d8 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e98:	e011      	b.n	8003ebe <HAL_RCC_OscConfig+0x2ce>
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	42470000 	.word	0x42470000
 8003ea4:	42470e80 	.word	0x42470e80
 8003ea8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eac:	f7fd fd14 	bl	80018d8 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e0fd      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebe:	4b81      	ldr	r3, [pc, #516]	; (80040c4 <HAL_RCC_OscConfig+0x4d4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d106      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x2f0>
 8003ed2:	4b7d      	ldr	r3, [pc, #500]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	4a7c      	ldr	r2, [pc, #496]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ede:	e01c      	b.n	8003f1a <HAL_RCC_OscConfig+0x32a>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2b05      	cmp	r3, #5
 8003ee6:	d10c      	bne.n	8003f02 <HAL_RCC_OscConfig+0x312>
 8003ee8:	4b77      	ldr	r3, [pc, #476]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	4a76      	ldr	r2, [pc, #472]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003eee:	f043 0304 	orr.w	r3, r3, #4
 8003ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef4:	4b74      	ldr	r3, [pc, #464]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	4a73      	ldr	r2, [pc, #460]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70
 8003f00:	e00b      	b.n	8003f1a <HAL_RCC_OscConfig+0x32a>
 8003f02:	4b71      	ldr	r3, [pc, #452]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	4a70      	ldr	r2, [pc, #448]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0e:	4b6e      	ldr	r3, [pc, #440]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	4a6d      	ldr	r2, [pc, #436]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003f14:	f023 0304 	bic.w	r3, r3, #4
 8003f18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d015      	beq.n	8003f4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f22:	f7fd fcd9 	bl	80018d8 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2a:	f7fd fcd5 	bl	80018d8 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e0bc      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f40:	4b61      	ldr	r3, [pc, #388]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0ee      	beq.n	8003f2a <HAL_RCC_OscConfig+0x33a>
 8003f4c:	e014      	b.n	8003f78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4e:	f7fd fcc3 	bl	80018d8 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f54:	e00a      	b.n	8003f6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f56:	f7fd fcbf 	bl	80018d8 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e0a6      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6c:	4b56      	ldr	r3, [pc, #344]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1ee      	bne.n	8003f56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d105      	bne.n	8003f8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7e:	4b52      	ldr	r3, [pc, #328]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	4a51      	ldr	r2, [pc, #324]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8092 	beq.w	80040b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f94:	4b4c      	ldr	r3, [pc, #304]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 030c 	and.w	r3, r3, #12
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d05c      	beq.n	800405a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d141      	bne.n	800402c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa8:	4b48      	ldr	r3, [pc, #288]	; (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fae:	f7fd fc93 	bl	80018d8 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb6:	f7fd fc8f 	bl	80018d8 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e078      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc8:	4b3f      	ldr	r3, [pc, #252]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f0      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	019b      	lsls	r3, r3, #6
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	085b      	lsrs	r3, r3, #1
 8003fec:	3b01      	subs	r3, #1
 8003fee:	041b      	lsls	r3, r3, #16
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	061b      	lsls	r3, r3, #24
 8003ff8:	4933      	ldr	r1, [pc, #204]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ffe:	4b33      	ldr	r3, [pc, #204]	; (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004004:	f7fd fc68 	bl	80018d8 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400c:	f7fd fc64 	bl	80018d8 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e04d      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401e:	4b2a      	ldr	r3, [pc, #168]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0x41c>
 800402a:	e045      	b.n	80040b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402c:	4b27      	ldr	r3, [pc, #156]	; (80040cc <HAL_RCC_OscConfig+0x4dc>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004032:	f7fd fc51 	bl	80018d8 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403a:	f7fd fc4d 	bl	80018d8 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e036      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404c:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f0      	bne.n	800403a <HAL_RCC_OscConfig+0x44a>
 8004058:	e02e      	b.n	80040b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e029      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004066:	4b18      	ldr	r3, [pc, #96]	; (80040c8 <HAL_RCC_OscConfig+0x4d8>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	429a      	cmp	r2, r3
 8004078:	d11c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d115      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800408e:	4013      	ands	r3, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004094:	4293      	cmp	r3, r2
 8004096:	d10d      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d106      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40007000 	.word	0x40007000
 80040c8:	40023800 	.word	0x40023800
 80040cc:	42470060 	.word	0x42470060

080040d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0cc      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e4:	4b68      	ldr	r3, [pc, #416]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d90c      	bls.n	800410c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b65      	ldr	r3, [pc, #404]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fa:	4b63      	ldr	r3, [pc, #396]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0b8      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d020      	beq.n	800415a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004124:	4b59      	ldr	r3, [pc, #356]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4a58      	ldr	r2, [pc, #352]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800412e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800413c:	4b53      	ldr	r3, [pc, #332]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a52      	ldr	r2, [pc, #328]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004148:	4b50      	ldr	r3, [pc, #320]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	494d      	ldr	r1, [pc, #308]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d044      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	4b47      	ldr	r3, [pc, #284]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d119      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e07f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d003      	beq.n	800418e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800418a:	2b03      	cmp	r3, #3
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418e:	4b3f      	ldr	r3, [pc, #252]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e06f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419e:	4b3b      	ldr	r3, [pc, #236]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e067      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ae:	4b37      	ldr	r3, [pc, #220]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f023 0203 	bic.w	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4934      	ldr	r1, [pc, #208]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041c0:	f7fd fb8a 	bl	80018d8 <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c6:	e00a      	b.n	80041de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c8:	f7fd fb86 	bl	80018d8 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e04f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	4b2b      	ldr	r3, [pc, #172]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 020c 	and.w	r2, r3, #12
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d1eb      	bne.n	80041c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f0:	4b25      	ldr	r3, [pc, #148]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d20c      	bcs.n	8004218 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b22      	ldr	r3, [pc, #136]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b20      	ldr	r3, [pc, #128]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e032      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d008      	beq.n	8004236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004224:	4b19      	ldr	r3, [pc, #100]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4916      	ldr	r1, [pc, #88]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	490e      	ldr	r1, [pc, #56]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004256:	f000 f821 	bl	800429c <HAL_RCC_GetSysClockFreq>
 800425a:	4601      	mov	r1, r0
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	5cd3      	ldrb	r3, [r2, r3]
 800426a:	fa21 f303 	lsr.w	r3, r1, r3
 800426e:	4a09      	ldr	r2, [pc, #36]	; (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004272:	4b09      	ldr	r3, [pc, #36]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fd faea 	bl	8001850 <HAL_InitTick>

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40023c00 	.word	0x40023c00
 800428c:	40023800 	.word	0x40023800
 8004290:	08009768 	.word	0x08009768
 8004294:	20000004 	.word	0x20000004
 8004298:	20000008 	.word	0x20000008

0800429c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800429c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	607b      	str	r3, [r7, #4]
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	2300      	movs	r3, #0
 80042ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042b2:	4b50      	ldr	r3, [pc, #320]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d007      	beq.n	80042ce <HAL_RCC_GetSysClockFreq+0x32>
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d008      	beq.n	80042d4 <HAL_RCC_GetSysClockFreq+0x38>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f040 808d 	bne.w	80043e2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c8:	4b4b      	ldr	r3, [pc, #300]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80042ca:	60bb      	str	r3, [r7, #8]
       break;
 80042cc:	e08c      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ce:	4b4b      	ldr	r3, [pc, #300]	; (80043fc <HAL_RCC_GetSysClockFreq+0x160>)
 80042d0:	60bb      	str	r3, [r7, #8]
      break;
 80042d2:	e089      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d4:	4b47      	ldr	r3, [pc, #284]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042de:	4b45      	ldr	r3, [pc, #276]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d023      	beq.n	8004332 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ea:	4b42      	ldr	r3, [pc, #264]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	099b      	lsrs	r3, r3, #6
 80042f0:	f04f 0400 	mov.w	r4, #0
 80042f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	ea03 0501 	and.w	r5, r3, r1
 8004300:	ea04 0602 	and.w	r6, r4, r2
 8004304:	4a3d      	ldr	r2, [pc, #244]	; (80043fc <HAL_RCC_GetSysClockFreq+0x160>)
 8004306:	fb02 f106 	mul.w	r1, r2, r6
 800430a:	2200      	movs	r2, #0
 800430c:	fb02 f205 	mul.w	r2, r2, r5
 8004310:	440a      	add	r2, r1
 8004312:	493a      	ldr	r1, [pc, #232]	; (80043fc <HAL_RCC_GetSysClockFreq+0x160>)
 8004314:	fba5 0101 	umull	r0, r1, r5, r1
 8004318:	1853      	adds	r3, r2, r1
 800431a:	4619      	mov	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f04f 0400 	mov.w	r4, #0
 8004322:	461a      	mov	r2, r3
 8004324:	4623      	mov	r3, r4
 8004326:	f7fc fbc1 	bl	8000aac <__aeabi_uldivmod>
 800432a:	4603      	mov	r3, r0
 800432c:	460c      	mov	r4, r1
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	e049      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004332:	4b30      	ldr	r3, [pc, #192]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	099b      	lsrs	r3, r3, #6
 8004338:	f04f 0400 	mov.w	r4, #0
 800433c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	ea03 0501 	and.w	r5, r3, r1
 8004348:	ea04 0602 	and.w	r6, r4, r2
 800434c:	4629      	mov	r1, r5
 800434e:	4632      	mov	r2, r6
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	f04f 0400 	mov.w	r4, #0
 8004358:	0154      	lsls	r4, r2, #5
 800435a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800435e:	014b      	lsls	r3, r1, #5
 8004360:	4619      	mov	r1, r3
 8004362:	4622      	mov	r2, r4
 8004364:	1b49      	subs	r1, r1, r5
 8004366:	eb62 0206 	sbc.w	r2, r2, r6
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	f04f 0400 	mov.w	r4, #0
 8004372:	0194      	lsls	r4, r2, #6
 8004374:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004378:	018b      	lsls	r3, r1, #6
 800437a:	1a5b      	subs	r3, r3, r1
 800437c:	eb64 0402 	sbc.w	r4, r4, r2
 8004380:	f04f 0100 	mov.w	r1, #0
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	00e2      	lsls	r2, r4, #3
 800438a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800438e:	00d9      	lsls	r1, r3, #3
 8004390:	460b      	mov	r3, r1
 8004392:	4614      	mov	r4, r2
 8004394:	195b      	adds	r3, r3, r5
 8004396:	eb44 0406 	adc.w	r4, r4, r6
 800439a:	f04f 0100 	mov.w	r1, #0
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	02a2      	lsls	r2, r4, #10
 80043a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043a8:	0299      	lsls	r1, r3, #10
 80043aa:	460b      	mov	r3, r1
 80043ac:	4614      	mov	r4, r2
 80043ae:	4618      	mov	r0, r3
 80043b0:	4621      	mov	r1, r4
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f04f 0400 	mov.w	r4, #0
 80043b8:	461a      	mov	r2, r3
 80043ba:	4623      	mov	r3, r4
 80043bc:	f7fc fb76 	bl	8000aac <__aeabi_uldivmod>
 80043c0:	4603      	mov	r3, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043c6:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	0c1b      	lsrs	r3, r3, #16
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	3301      	adds	r3, #1
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	fbb2 f3f3 	udiv	r3, r2, r3
 80043de:	60bb      	str	r3, [r7, #8]
      break;
 80043e0:	e002      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80043e4:	60bb      	str	r3, [r7, #8]
      break;
 80043e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043e8:	68bb      	ldr	r3, [r7, #8]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40023800 	.word	0x40023800
 80043f8:	00f42400 	.word	0x00f42400
 80043fc:	017d7840 	.word	0x017d7840

08004400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004404:	4b03      	ldr	r3, [pc, #12]	; (8004414 <HAL_RCC_GetHCLKFreq+0x14>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000004 	.word	0x20000004

08004418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800441c:	f7ff fff0 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8004420:	4601      	mov	r1, r0
 8004422:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	0a9b      	lsrs	r3, r3, #10
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	4a03      	ldr	r2, [pc, #12]	; (800443c <HAL_RCC_GetPCLK1Freq+0x24>)
 800442e:	5cd3      	ldrb	r3, [r2, r3]
 8004430:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004434:	4618      	mov	r0, r3
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40023800 	.word	0x40023800
 800443c:	08009778 	.word	0x08009778

08004440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004444:	f7ff ffdc 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8004448:	4601      	mov	r1, r0
 800444a:	4b05      	ldr	r3, [pc, #20]	; (8004460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	0b5b      	lsrs	r3, r3, #13
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	4a03      	ldr	r2, [pc, #12]	; (8004464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004456:	5cd3      	ldrb	r3, [r2, r3]
 8004458:	fa21 f303 	lsr.w	r3, r1, r3
}
 800445c:	4618      	mov	r0, r3
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40023800 	.word	0x40023800
 8004464:	08009778 	.word	0x08009778

08004468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e01d      	b.n	80044b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fd f882 	bl	8001598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f000 f95e 	bl	8004768 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044be:	b480      	push	{r7}
 80044c0:	b085      	sub	sp, #20
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b06      	cmp	r3, #6
 80044e6:	d007      	beq.n	80044f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b02      	cmp	r3, #2
 800451a:	d122      	bne.n	8004562 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b02      	cmp	r3, #2
 8004528:	d11b      	bne.n	8004562 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f06f 0202 	mvn.w	r2, #2
 8004532:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f8ee 	bl	800472a <HAL_TIM_IC_CaptureCallback>
 800454e:	e005      	b.n	800455c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f8e0 	bl	8004716 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8f1 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b04      	cmp	r3, #4
 800456e:	d122      	bne.n	80045b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b04      	cmp	r3, #4
 800457c:	d11b      	bne.n	80045b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f06f 0204 	mvn.w	r2, #4
 8004586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f8c4 	bl	800472a <HAL_TIM_IC_CaptureCallback>
 80045a2:	e005      	b.n	80045b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f8b6 	bl	8004716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f8c7 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d122      	bne.n	800460a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d11b      	bne.n	800460a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f06f 0208 	mvn.w	r2, #8
 80045da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2204      	movs	r2, #4
 80045e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f89a 	bl	800472a <HAL_TIM_IC_CaptureCallback>
 80045f6:	e005      	b.n	8004604 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f88c 	bl	8004716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f89d 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b10      	cmp	r3, #16
 8004616:	d122      	bne.n	800465e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0310 	and.w	r3, r3, #16
 8004622:	2b10      	cmp	r3, #16
 8004624:	d11b      	bne.n	800465e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f06f 0210 	mvn.w	r2, #16
 800462e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2208      	movs	r2, #8
 8004634:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f870 	bl	800472a <HAL_TIM_IC_CaptureCallback>
 800464a:	e005      	b.n	8004658 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f862 	bl	8004716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f873 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d10e      	bne.n	800468a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b01      	cmp	r3, #1
 8004678:	d107      	bne.n	800468a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f06f 0201 	mvn.w	r2, #1
 8004682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7fc fce3 	bl	8001050 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	2b80      	cmp	r3, #128	; 0x80
 8004696:	d10e      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	2b80      	cmp	r3, #128	; 0x80
 80046a4:	d107      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f903 	bl	80048bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d10e      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b40      	cmp	r3, #64	; 0x40
 80046d0:	d107      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f838 	bl	8004752 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d10e      	bne.n	800470e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	d107      	bne.n	800470e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f06f 0220 	mvn.w	r2, #32
 8004706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f8cd 	bl	80048a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a40      	ldr	r2, [pc, #256]	; (800487c <TIM_Base_SetConfig+0x114>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d013      	beq.n	80047a8 <TIM_Base_SetConfig+0x40>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004786:	d00f      	beq.n	80047a8 <TIM_Base_SetConfig+0x40>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a3d      	ldr	r2, [pc, #244]	; (8004880 <TIM_Base_SetConfig+0x118>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00b      	beq.n	80047a8 <TIM_Base_SetConfig+0x40>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a3c      	ldr	r2, [pc, #240]	; (8004884 <TIM_Base_SetConfig+0x11c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d007      	beq.n	80047a8 <TIM_Base_SetConfig+0x40>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a3b      	ldr	r2, [pc, #236]	; (8004888 <TIM_Base_SetConfig+0x120>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d003      	beq.n	80047a8 <TIM_Base_SetConfig+0x40>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a3a      	ldr	r2, [pc, #232]	; (800488c <TIM_Base_SetConfig+0x124>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d108      	bne.n	80047ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a2f      	ldr	r2, [pc, #188]	; (800487c <TIM_Base_SetConfig+0x114>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d02b      	beq.n	800481a <TIM_Base_SetConfig+0xb2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c8:	d027      	beq.n	800481a <TIM_Base_SetConfig+0xb2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a2c      	ldr	r2, [pc, #176]	; (8004880 <TIM_Base_SetConfig+0x118>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d023      	beq.n	800481a <TIM_Base_SetConfig+0xb2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a2b      	ldr	r2, [pc, #172]	; (8004884 <TIM_Base_SetConfig+0x11c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d01f      	beq.n	800481a <TIM_Base_SetConfig+0xb2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a2a      	ldr	r2, [pc, #168]	; (8004888 <TIM_Base_SetConfig+0x120>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d01b      	beq.n	800481a <TIM_Base_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a29      	ldr	r2, [pc, #164]	; (800488c <TIM_Base_SetConfig+0x124>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d017      	beq.n	800481a <TIM_Base_SetConfig+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a28      	ldr	r2, [pc, #160]	; (8004890 <TIM_Base_SetConfig+0x128>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d013      	beq.n	800481a <TIM_Base_SetConfig+0xb2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a27      	ldr	r2, [pc, #156]	; (8004894 <TIM_Base_SetConfig+0x12c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00f      	beq.n	800481a <TIM_Base_SetConfig+0xb2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a26      	ldr	r2, [pc, #152]	; (8004898 <TIM_Base_SetConfig+0x130>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00b      	beq.n	800481a <TIM_Base_SetConfig+0xb2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a25      	ldr	r2, [pc, #148]	; (800489c <TIM_Base_SetConfig+0x134>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d007      	beq.n	800481a <TIM_Base_SetConfig+0xb2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a24      	ldr	r2, [pc, #144]	; (80048a0 <TIM_Base_SetConfig+0x138>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d003      	beq.n	800481a <TIM_Base_SetConfig+0xb2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a23      	ldr	r2, [pc, #140]	; (80048a4 <TIM_Base_SetConfig+0x13c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d108      	bne.n	800482c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a0a      	ldr	r2, [pc, #40]	; (800487c <TIM_Base_SetConfig+0x114>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <TIM_Base_SetConfig+0xf8>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a0c      	ldr	r2, [pc, #48]	; (800488c <TIM_Base_SetConfig+0x124>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d103      	bne.n	8004868 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	615a      	str	r2, [r3, #20]
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40010000 	.word	0x40010000
 8004880:	40000400 	.word	0x40000400
 8004884:	40000800 	.word	0x40000800
 8004888:	40000c00 	.word	0x40000c00
 800488c:	40010400 	.word	0x40010400
 8004890:	40014000 	.word	0x40014000
 8004894:	40014400 	.word	0x40014400
 8004898:	40014800 	.word	0x40014800
 800489c:	40001800 	.word	0x40001800
 80048a0:	40001c00 	.word	0x40001c00
 80048a4:	40002000 	.word	0x40002000

080048a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e03f      	b.n	8004962 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fc fe76 	bl	80015e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2224      	movs	r2, #36	; 0x24
 8004900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fb4b 	bl	8004fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695a      	ldr	r2, [r3, #20]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b088      	sub	sp, #32
 800496e:	af02      	add	r7, sp, #8
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	603b      	str	r3, [r7, #0]
 8004976:	4613      	mov	r3, r2
 8004978:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b20      	cmp	r3, #32
 8004988:	f040 8083 	bne.w	8004a92 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_UART_Transmit+0x2e>
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e07b      	b.n	8004a94 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_UART_Transmit+0x40>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e074      	b.n	8004a94 <HAL_UART_Transmit+0x12a>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2221      	movs	r2, #33	; 0x21
 80049bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80049c0:	f7fc ff8a 	bl	80018d8 <HAL_GetTick>
 80049c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	88fa      	ldrh	r2, [r7, #6]
 80049ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	88fa      	ldrh	r2, [r7, #6]
 80049d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80049da:	e042      	b.n	8004a62 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f2:	d122      	bne.n	8004a3a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	2180      	movs	r1, #128	; 0x80
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f96a 	bl	8004cd8 <UART_WaitOnFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e042      	b.n	8004a94 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a20:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d103      	bne.n	8004a32 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	3302      	adds	r3, #2
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	e017      	b.n	8004a62 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	3301      	adds	r3, #1
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	e013      	b.n	8004a62 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2200      	movs	r2, #0
 8004a42:	2180      	movs	r1, #128	; 0x80
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f947 	bl	8004cd8 <UART_WaitOnFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e01f      	b.n	8004a94 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	60ba      	str	r2, [r7, #8]
 8004a5a:	781a      	ldrb	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1b7      	bne.n	80049dc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2200      	movs	r2, #0
 8004a74:	2140      	movs	r1, #64	; 0x40
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f92e 	bl	8004cd8 <UART_WaitOnFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e006      	b.n	8004a94 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e000      	b.n	8004a94 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004a92:	2302      	movs	r3, #2
  }
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10d      	bne.n	8004aee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_UART_IRQHandler+0x52>
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f9e0 	bl	8004eac <UART_Receive_IT>
      return;
 8004aec:	e0d1      	b.n	8004c92 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80b0 	beq.w	8004c56 <HAL_UART_IRQHandler+0x1ba>
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d105      	bne.n	8004b0c <HAL_UART_IRQHandler+0x70>
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80a5 	beq.w	8004c56 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_UART_IRQHandler+0x90>
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b24:	f043 0201 	orr.w	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_UART_IRQHandler+0xb0>
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b44:	f043 0202 	orr.w	r2, r3, #2
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <HAL_UART_IRQHandler+0xd0>
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b64:	f043 0204 	orr.w	r2, r3, #4
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00f      	beq.n	8004b96 <HAL_UART_IRQHandler+0xfa>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d104      	bne.n	8004b8a <HAL_UART_IRQHandler+0xee>
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8e:	f043 0208 	orr.w	r2, r3, #8
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d078      	beq.n	8004c90 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <HAL_UART_IRQHandler+0x11c>
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f97a 	bl	8004eac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc2:	2b40      	cmp	r3, #64	; 0x40
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2301      	moveq	r3, #1
 8004bc8:	2300      	movne	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <HAL_UART_IRQHandler+0x144>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d031      	beq.n	8004c44 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f8c3 	bl	8004d6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d123      	bne.n	8004c3c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695a      	ldr	r2, [r3, #20]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c02:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d013      	beq.n	8004c34 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c10:	4a21      	ldr	r2, [pc, #132]	; (8004c98 <HAL_UART_IRQHandler+0x1fc>)
 8004c12:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fd fb56 	bl	80022ca <HAL_DMA_Abort_IT>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d016      	beq.n	8004c52 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c2e:	4610      	mov	r0, r2
 8004c30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c32:	e00e      	b.n	8004c52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f845 	bl	8004cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3a:	e00a      	b.n	8004c52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f841 	bl	8004cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c42:	e006      	b.n	8004c52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f83d 	bl	8004cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004c50:	e01e      	b.n	8004c90 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c52:	bf00      	nop
    return;
 8004c54:	e01c      	b.n	8004c90 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_UART_IRQHandler+0x1d6>
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f8b0 	bl	8004dd0 <UART_Transmit_IT>
    return;
 8004c70:	e00f      	b.n	8004c92 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_UART_IRQHandler+0x1f6>
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f8f8 	bl	8004e7c <UART_EndTransmit_IT>
    return;
 8004c8c:	bf00      	nop
 8004c8e:	e000      	b.n	8004c92 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004c90:	bf00      	nop
  }
}
 8004c92:	3720      	adds	r7, #32
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	08004da9 	.word	0x08004da9

08004c9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	603b      	str	r3, [r7, #0]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce8:	e02c      	b.n	8004d44 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf0:	d028      	beq.n	8004d44 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d007      	beq.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cf8:	f7fc fdee 	bl	80018d8 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d21d      	bcs.n	8004d44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d16:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695a      	ldr	r2, [r3, #20]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0201 	bic.w	r2, r2, #1
 8004d26:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e00f      	b.n	8004d64 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	bf0c      	ite	eq
 8004d54:	2301      	moveq	r3, #1
 8004d56:	2300      	movne	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d0c3      	beq.n	8004cea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d82:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f7ff ff7e 	bl	8004cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b21      	cmp	r3, #33	; 0x21
 8004de2:	d144      	bne.n	8004e6e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dec:	d11a      	bne.n	8004e24 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e02:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d105      	bne.n	8004e18 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	1c9a      	adds	r2, r3, #2
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	621a      	str	r2, [r3, #32]
 8004e16:	e00e      	b.n	8004e36 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	621a      	str	r2, [r3, #32]
 8004e22:	e008      	b.n	8004e36 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	1c59      	adds	r1, r3, #1
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6211      	str	r1, [r2, #32]
 8004e2e:	781a      	ldrb	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	4619      	mov	r1, r3
 8004e44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10f      	bne.n	8004e6a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e000      	b.n	8004e70 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004e6e:	2302      	movs	r3, #2
  }
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff fefd 	bl	8004c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b22      	cmp	r3, #34	; 0x22
 8004ebe:	d171      	bne.n	8004fa4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec8:	d123      	bne.n	8004f12 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10e      	bne.n	8004ef6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eee:	1c9a      	adds	r2, r3, #2
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ef4:	e029      	b.n	8004f4a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f10:	e01b      	b.n	8004f4a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6858      	ldr	r0, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	1c59      	adds	r1, r3, #1
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6291      	str	r1, [r2, #40]	; 0x28
 8004f2a:	b2c2      	uxtb	r2, r0
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e00c      	b.n	8004f4a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	1c58      	adds	r0, r3, #1
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	6288      	str	r0, [r1, #40]	; 0x28
 8004f42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	4619      	mov	r1, r3
 8004f58:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d120      	bne.n	8004fa0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0220 	bic.w	r2, r2, #32
 8004f6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695a      	ldr	r2, [r3, #20]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0201 	bic.w	r2, r2, #1
 8004f8c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff fe8a 	bl	8004cb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e002      	b.n	8004fa6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	e000      	b.n	8004fa6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004fa4:	2302      	movs	r3, #2
  }
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ff2:	f023 030c 	bic.w	r3, r3, #12
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6812      	ldr	r2, [r2, #0]
 8004ffa:	68f9      	ldr	r1, [r7, #12]
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800501e:	f040 818b 	bne.w	8005338 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4ac1      	ldr	r2, [pc, #772]	; (800532c <UART_SetConfig+0x37c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d005      	beq.n	8005038 <UART_SetConfig+0x88>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4abf      	ldr	r2, [pc, #764]	; (8005330 <UART_SetConfig+0x380>)
 8005032:	4293      	cmp	r3, r2
 8005034:	f040 80bd 	bne.w	80051b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005038:	f7ff fa02 	bl	8004440 <HAL_RCC_GetPCLK2Freq>
 800503c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	461d      	mov	r5, r3
 8005042:	f04f 0600 	mov.w	r6, #0
 8005046:	46a8      	mov	r8, r5
 8005048:	46b1      	mov	r9, r6
 800504a:	eb18 0308 	adds.w	r3, r8, r8
 800504e:	eb49 0409 	adc.w	r4, r9, r9
 8005052:	4698      	mov	r8, r3
 8005054:	46a1      	mov	r9, r4
 8005056:	eb18 0805 	adds.w	r8, r8, r5
 800505a:	eb49 0906 	adc.w	r9, r9, r6
 800505e:	f04f 0100 	mov.w	r1, #0
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800506a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800506e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005072:	4688      	mov	r8, r1
 8005074:	4691      	mov	r9, r2
 8005076:	eb18 0005 	adds.w	r0, r8, r5
 800507a:	eb49 0106 	adc.w	r1, r9, r6
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	461d      	mov	r5, r3
 8005084:	f04f 0600 	mov.w	r6, #0
 8005088:	196b      	adds	r3, r5, r5
 800508a:	eb46 0406 	adc.w	r4, r6, r6
 800508e:	461a      	mov	r2, r3
 8005090:	4623      	mov	r3, r4
 8005092:	f7fb fd0b 	bl	8000aac <__aeabi_uldivmod>
 8005096:	4603      	mov	r3, r0
 8005098:	460c      	mov	r4, r1
 800509a:	461a      	mov	r2, r3
 800509c:	4ba5      	ldr	r3, [pc, #660]	; (8005334 <UART_SetConfig+0x384>)
 800509e:	fba3 2302 	umull	r2, r3, r3, r2
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	461d      	mov	r5, r3
 80050ac:	f04f 0600 	mov.w	r6, #0
 80050b0:	46a9      	mov	r9, r5
 80050b2:	46b2      	mov	sl, r6
 80050b4:	eb19 0309 	adds.w	r3, r9, r9
 80050b8:	eb4a 040a 	adc.w	r4, sl, sl
 80050bc:	4699      	mov	r9, r3
 80050be:	46a2      	mov	sl, r4
 80050c0:	eb19 0905 	adds.w	r9, r9, r5
 80050c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80050c8:	f04f 0100 	mov.w	r1, #0
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050dc:	4689      	mov	r9, r1
 80050de:	4692      	mov	sl, r2
 80050e0:	eb19 0005 	adds.w	r0, r9, r5
 80050e4:	eb4a 0106 	adc.w	r1, sl, r6
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	461d      	mov	r5, r3
 80050ee:	f04f 0600 	mov.w	r6, #0
 80050f2:	196b      	adds	r3, r5, r5
 80050f4:	eb46 0406 	adc.w	r4, r6, r6
 80050f8:	461a      	mov	r2, r3
 80050fa:	4623      	mov	r3, r4
 80050fc:	f7fb fcd6 	bl	8000aac <__aeabi_uldivmod>
 8005100:	4603      	mov	r3, r0
 8005102:	460c      	mov	r4, r1
 8005104:	461a      	mov	r2, r3
 8005106:	4b8b      	ldr	r3, [pc, #556]	; (8005334 <UART_SetConfig+0x384>)
 8005108:	fba3 1302 	umull	r1, r3, r3, r2
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	2164      	movs	r1, #100	; 0x64
 8005110:	fb01 f303 	mul.w	r3, r1, r3
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	3332      	adds	r3, #50	; 0x32
 800511a:	4a86      	ldr	r2, [pc, #536]	; (8005334 <UART_SetConfig+0x384>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005128:	4498      	add	r8, r3
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	461d      	mov	r5, r3
 800512e:	f04f 0600 	mov.w	r6, #0
 8005132:	46a9      	mov	r9, r5
 8005134:	46b2      	mov	sl, r6
 8005136:	eb19 0309 	adds.w	r3, r9, r9
 800513a:	eb4a 040a 	adc.w	r4, sl, sl
 800513e:	4699      	mov	r9, r3
 8005140:	46a2      	mov	sl, r4
 8005142:	eb19 0905 	adds.w	r9, r9, r5
 8005146:	eb4a 0a06 	adc.w	sl, sl, r6
 800514a:	f04f 0100 	mov.w	r1, #0
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005156:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800515a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800515e:	4689      	mov	r9, r1
 8005160:	4692      	mov	sl, r2
 8005162:	eb19 0005 	adds.w	r0, r9, r5
 8005166:	eb4a 0106 	adc.w	r1, sl, r6
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	461d      	mov	r5, r3
 8005170:	f04f 0600 	mov.w	r6, #0
 8005174:	196b      	adds	r3, r5, r5
 8005176:	eb46 0406 	adc.w	r4, r6, r6
 800517a:	461a      	mov	r2, r3
 800517c:	4623      	mov	r3, r4
 800517e:	f7fb fc95 	bl	8000aac <__aeabi_uldivmod>
 8005182:	4603      	mov	r3, r0
 8005184:	460c      	mov	r4, r1
 8005186:	461a      	mov	r2, r3
 8005188:	4b6a      	ldr	r3, [pc, #424]	; (8005334 <UART_SetConfig+0x384>)
 800518a:	fba3 1302 	umull	r1, r3, r3, r2
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	2164      	movs	r1, #100	; 0x64
 8005192:	fb01 f303 	mul.w	r3, r1, r3
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	3332      	adds	r3, #50	; 0x32
 800519c:	4a65      	ldr	r2, [pc, #404]	; (8005334 <UART_SetConfig+0x384>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	f003 0207 	and.w	r2, r3, #7
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4442      	add	r2, r8
 80051ae:	609a      	str	r2, [r3, #8]
 80051b0:	e26f      	b.n	8005692 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051b2:	f7ff f931 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 80051b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	461d      	mov	r5, r3
 80051bc:	f04f 0600 	mov.w	r6, #0
 80051c0:	46a8      	mov	r8, r5
 80051c2:	46b1      	mov	r9, r6
 80051c4:	eb18 0308 	adds.w	r3, r8, r8
 80051c8:	eb49 0409 	adc.w	r4, r9, r9
 80051cc:	4698      	mov	r8, r3
 80051ce:	46a1      	mov	r9, r4
 80051d0:	eb18 0805 	adds.w	r8, r8, r5
 80051d4:	eb49 0906 	adc.w	r9, r9, r6
 80051d8:	f04f 0100 	mov.w	r1, #0
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80051e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80051e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051ec:	4688      	mov	r8, r1
 80051ee:	4691      	mov	r9, r2
 80051f0:	eb18 0005 	adds.w	r0, r8, r5
 80051f4:	eb49 0106 	adc.w	r1, r9, r6
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	461d      	mov	r5, r3
 80051fe:	f04f 0600 	mov.w	r6, #0
 8005202:	196b      	adds	r3, r5, r5
 8005204:	eb46 0406 	adc.w	r4, r6, r6
 8005208:	461a      	mov	r2, r3
 800520a:	4623      	mov	r3, r4
 800520c:	f7fb fc4e 	bl	8000aac <__aeabi_uldivmod>
 8005210:	4603      	mov	r3, r0
 8005212:	460c      	mov	r4, r1
 8005214:	461a      	mov	r2, r3
 8005216:	4b47      	ldr	r3, [pc, #284]	; (8005334 <UART_SetConfig+0x384>)
 8005218:	fba3 2302 	umull	r2, r3, r3, r2
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	461d      	mov	r5, r3
 8005226:	f04f 0600 	mov.w	r6, #0
 800522a:	46a9      	mov	r9, r5
 800522c:	46b2      	mov	sl, r6
 800522e:	eb19 0309 	adds.w	r3, r9, r9
 8005232:	eb4a 040a 	adc.w	r4, sl, sl
 8005236:	4699      	mov	r9, r3
 8005238:	46a2      	mov	sl, r4
 800523a:	eb19 0905 	adds.w	r9, r9, r5
 800523e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005242:	f04f 0100 	mov.w	r1, #0
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800524e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005252:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005256:	4689      	mov	r9, r1
 8005258:	4692      	mov	sl, r2
 800525a:	eb19 0005 	adds.w	r0, r9, r5
 800525e:	eb4a 0106 	adc.w	r1, sl, r6
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	461d      	mov	r5, r3
 8005268:	f04f 0600 	mov.w	r6, #0
 800526c:	196b      	adds	r3, r5, r5
 800526e:	eb46 0406 	adc.w	r4, r6, r6
 8005272:	461a      	mov	r2, r3
 8005274:	4623      	mov	r3, r4
 8005276:	f7fb fc19 	bl	8000aac <__aeabi_uldivmod>
 800527a:	4603      	mov	r3, r0
 800527c:	460c      	mov	r4, r1
 800527e:	461a      	mov	r2, r3
 8005280:	4b2c      	ldr	r3, [pc, #176]	; (8005334 <UART_SetConfig+0x384>)
 8005282:	fba3 1302 	umull	r1, r3, r3, r2
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	2164      	movs	r1, #100	; 0x64
 800528a:	fb01 f303 	mul.w	r3, r1, r3
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	3332      	adds	r3, #50	; 0x32
 8005294:	4a27      	ldr	r2, [pc, #156]	; (8005334 <UART_SetConfig+0x384>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052a2:	4498      	add	r8, r3
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	461d      	mov	r5, r3
 80052a8:	f04f 0600 	mov.w	r6, #0
 80052ac:	46a9      	mov	r9, r5
 80052ae:	46b2      	mov	sl, r6
 80052b0:	eb19 0309 	adds.w	r3, r9, r9
 80052b4:	eb4a 040a 	adc.w	r4, sl, sl
 80052b8:	4699      	mov	r9, r3
 80052ba:	46a2      	mov	sl, r4
 80052bc:	eb19 0905 	adds.w	r9, r9, r5
 80052c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80052c4:	f04f 0100 	mov.w	r1, #0
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052d8:	4689      	mov	r9, r1
 80052da:	4692      	mov	sl, r2
 80052dc:	eb19 0005 	adds.w	r0, r9, r5
 80052e0:	eb4a 0106 	adc.w	r1, sl, r6
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	461d      	mov	r5, r3
 80052ea:	f04f 0600 	mov.w	r6, #0
 80052ee:	196b      	adds	r3, r5, r5
 80052f0:	eb46 0406 	adc.w	r4, r6, r6
 80052f4:	461a      	mov	r2, r3
 80052f6:	4623      	mov	r3, r4
 80052f8:	f7fb fbd8 	bl	8000aac <__aeabi_uldivmod>
 80052fc:	4603      	mov	r3, r0
 80052fe:	460c      	mov	r4, r1
 8005300:	461a      	mov	r2, r3
 8005302:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <UART_SetConfig+0x384>)
 8005304:	fba3 1302 	umull	r1, r3, r3, r2
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	2164      	movs	r1, #100	; 0x64
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	3332      	adds	r3, #50	; 0x32
 8005316:	4a07      	ldr	r2, [pc, #28]	; (8005334 <UART_SetConfig+0x384>)
 8005318:	fba2 2303 	umull	r2, r3, r2, r3
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	f003 0207 	and.w	r2, r3, #7
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4442      	add	r2, r8
 8005328:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800532a:	e1b2      	b.n	8005692 <UART_SetConfig+0x6e2>
 800532c:	40011000 	.word	0x40011000
 8005330:	40011400 	.word	0x40011400
 8005334:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4ad7      	ldr	r2, [pc, #860]	; (800569c <UART_SetConfig+0x6ec>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d005      	beq.n	800534e <UART_SetConfig+0x39e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4ad6      	ldr	r2, [pc, #856]	; (80056a0 <UART_SetConfig+0x6f0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	f040 80d1 	bne.w	80054f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800534e:	f7ff f877 	bl	8004440 <HAL_RCC_GetPCLK2Freq>
 8005352:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	469a      	mov	sl, r3
 8005358:	f04f 0b00 	mov.w	fp, #0
 800535c:	46d0      	mov	r8, sl
 800535e:	46d9      	mov	r9, fp
 8005360:	eb18 0308 	adds.w	r3, r8, r8
 8005364:	eb49 0409 	adc.w	r4, r9, r9
 8005368:	4698      	mov	r8, r3
 800536a:	46a1      	mov	r9, r4
 800536c:	eb18 080a 	adds.w	r8, r8, sl
 8005370:	eb49 090b 	adc.w	r9, r9, fp
 8005374:	f04f 0100 	mov.w	r1, #0
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005380:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005384:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005388:	4688      	mov	r8, r1
 800538a:	4691      	mov	r9, r2
 800538c:	eb1a 0508 	adds.w	r5, sl, r8
 8005390:	eb4b 0609 	adc.w	r6, fp, r9
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4619      	mov	r1, r3
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	f04f 0400 	mov.w	r4, #0
 80053a6:	0094      	lsls	r4, r2, #2
 80053a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053ac:	008b      	lsls	r3, r1, #2
 80053ae:	461a      	mov	r2, r3
 80053b0:	4623      	mov	r3, r4
 80053b2:	4628      	mov	r0, r5
 80053b4:	4631      	mov	r1, r6
 80053b6:	f7fb fb79 	bl	8000aac <__aeabi_uldivmod>
 80053ba:	4603      	mov	r3, r0
 80053bc:	460c      	mov	r4, r1
 80053be:	461a      	mov	r2, r3
 80053c0:	4bb8      	ldr	r3, [pc, #736]	; (80056a4 <UART_SetConfig+0x6f4>)
 80053c2:	fba3 2302 	umull	r2, r3, r3, r2
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	469b      	mov	fp, r3
 80053d0:	f04f 0c00 	mov.w	ip, #0
 80053d4:	46d9      	mov	r9, fp
 80053d6:	46e2      	mov	sl, ip
 80053d8:	eb19 0309 	adds.w	r3, r9, r9
 80053dc:	eb4a 040a 	adc.w	r4, sl, sl
 80053e0:	4699      	mov	r9, r3
 80053e2:	46a2      	mov	sl, r4
 80053e4:	eb19 090b 	adds.w	r9, r9, fp
 80053e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053ec:	f04f 0100 	mov.w	r1, #0
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005400:	4689      	mov	r9, r1
 8005402:	4692      	mov	sl, r2
 8005404:	eb1b 0509 	adds.w	r5, fp, r9
 8005408:	eb4c 060a 	adc.w	r6, ip, sl
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	4619      	mov	r1, r3
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	f04f 0400 	mov.w	r4, #0
 800541e:	0094      	lsls	r4, r2, #2
 8005420:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005424:	008b      	lsls	r3, r1, #2
 8005426:	461a      	mov	r2, r3
 8005428:	4623      	mov	r3, r4
 800542a:	4628      	mov	r0, r5
 800542c:	4631      	mov	r1, r6
 800542e:	f7fb fb3d 	bl	8000aac <__aeabi_uldivmod>
 8005432:	4603      	mov	r3, r0
 8005434:	460c      	mov	r4, r1
 8005436:	461a      	mov	r2, r3
 8005438:	4b9a      	ldr	r3, [pc, #616]	; (80056a4 <UART_SetConfig+0x6f4>)
 800543a:	fba3 1302 	umull	r1, r3, r3, r2
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	2164      	movs	r1, #100	; 0x64
 8005442:	fb01 f303 	mul.w	r3, r1, r3
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	3332      	adds	r3, #50	; 0x32
 800544c:	4a95      	ldr	r2, [pc, #596]	; (80056a4 <UART_SetConfig+0x6f4>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	095b      	lsrs	r3, r3, #5
 8005454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005458:	4498      	add	r8, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	469b      	mov	fp, r3
 800545e:	f04f 0c00 	mov.w	ip, #0
 8005462:	46d9      	mov	r9, fp
 8005464:	46e2      	mov	sl, ip
 8005466:	eb19 0309 	adds.w	r3, r9, r9
 800546a:	eb4a 040a 	adc.w	r4, sl, sl
 800546e:	4699      	mov	r9, r3
 8005470:	46a2      	mov	sl, r4
 8005472:	eb19 090b 	adds.w	r9, r9, fp
 8005476:	eb4a 0a0c 	adc.w	sl, sl, ip
 800547a:	f04f 0100 	mov.w	r1, #0
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005486:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800548a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800548e:	4689      	mov	r9, r1
 8005490:	4692      	mov	sl, r2
 8005492:	eb1b 0509 	adds.w	r5, fp, r9
 8005496:	eb4c 060a 	adc.w	r6, ip, sl
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4619      	mov	r1, r3
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	f04f 0400 	mov.w	r4, #0
 80054ac:	0094      	lsls	r4, r2, #2
 80054ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054b2:	008b      	lsls	r3, r1, #2
 80054b4:	461a      	mov	r2, r3
 80054b6:	4623      	mov	r3, r4
 80054b8:	4628      	mov	r0, r5
 80054ba:	4631      	mov	r1, r6
 80054bc:	f7fb faf6 	bl	8000aac <__aeabi_uldivmod>
 80054c0:	4603      	mov	r3, r0
 80054c2:	460c      	mov	r4, r1
 80054c4:	461a      	mov	r2, r3
 80054c6:	4b77      	ldr	r3, [pc, #476]	; (80056a4 <UART_SetConfig+0x6f4>)
 80054c8:	fba3 1302 	umull	r1, r3, r3, r2
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	2164      	movs	r1, #100	; 0x64
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	3332      	adds	r3, #50	; 0x32
 80054da:	4a72      	ldr	r2, [pc, #456]	; (80056a4 <UART_SetConfig+0x6f4>)
 80054dc:	fba2 2303 	umull	r2, r3, r2, r3
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	f003 020f 	and.w	r2, r3, #15
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4442      	add	r2, r8
 80054ec:	609a      	str	r2, [r3, #8]
 80054ee:	e0d0      	b.n	8005692 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80054f0:	f7fe ff92 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 80054f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	469a      	mov	sl, r3
 80054fa:	f04f 0b00 	mov.w	fp, #0
 80054fe:	46d0      	mov	r8, sl
 8005500:	46d9      	mov	r9, fp
 8005502:	eb18 0308 	adds.w	r3, r8, r8
 8005506:	eb49 0409 	adc.w	r4, r9, r9
 800550a:	4698      	mov	r8, r3
 800550c:	46a1      	mov	r9, r4
 800550e:	eb18 080a 	adds.w	r8, r8, sl
 8005512:	eb49 090b 	adc.w	r9, r9, fp
 8005516:	f04f 0100 	mov.w	r1, #0
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005522:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005526:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800552a:	4688      	mov	r8, r1
 800552c:	4691      	mov	r9, r2
 800552e:	eb1a 0508 	adds.w	r5, sl, r8
 8005532:	eb4b 0609 	adc.w	r6, fp, r9
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	4619      	mov	r1, r3
 800553c:	f04f 0200 	mov.w	r2, #0
 8005540:	f04f 0300 	mov.w	r3, #0
 8005544:	f04f 0400 	mov.w	r4, #0
 8005548:	0094      	lsls	r4, r2, #2
 800554a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800554e:	008b      	lsls	r3, r1, #2
 8005550:	461a      	mov	r2, r3
 8005552:	4623      	mov	r3, r4
 8005554:	4628      	mov	r0, r5
 8005556:	4631      	mov	r1, r6
 8005558:	f7fb faa8 	bl	8000aac <__aeabi_uldivmod>
 800555c:	4603      	mov	r3, r0
 800555e:	460c      	mov	r4, r1
 8005560:	461a      	mov	r2, r3
 8005562:	4b50      	ldr	r3, [pc, #320]	; (80056a4 <UART_SetConfig+0x6f4>)
 8005564:	fba3 2302 	umull	r2, r3, r3, r2
 8005568:	095b      	lsrs	r3, r3, #5
 800556a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	469b      	mov	fp, r3
 8005572:	f04f 0c00 	mov.w	ip, #0
 8005576:	46d9      	mov	r9, fp
 8005578:	46e2      	mov	sl, ip
 800557a:	eb19 0309 	adds.w	r3, r9, r9
 800557e:	eb4a 040a 	adc.w	r4, sl, sl
 8005582:	4699      	mov	r9, r3
 8005584:	46a2      	mov	sl, r4
 8005586:	eb19 090b 	adds.w	r9, r9, fp
 800558a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800558e:	f04f 0100 	mov.w	r1, #0
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800559a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800559e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055a2:	4689      	mov	r9, r1
 80055a4:	4692      	mov	sl, r2
 80055a6:	eb1b 0509 	adds.w	r5, fp, r9
 80055aa:	eb4c 060a 	adc.w	r6, ip, sl
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	4619      	mov	r1, r3
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	f04f 0400 	mov.w	r4, #0
 80055c0:	0094      	lsls	r4, r2, #2
 80055c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055c6:	008b      	lsls	r3, r1, #2
 80055c8:	461a      	mov	r2, r3
 80055ca:	4623      	mov	r3, r4
 80055cc:	4628      	mov	r0, r5
 80055ce:	4631      	mov	r1, r6
 80055d0:	f7fb fa6c 	bl	8000aac <__aeabi_uldivmod>
 80055d4:	4603      	mov	r3, r0
 80055d6:	460c      	mov	r4, r1
 80055d8:	461a      	mov	r2, r3
 80055da:	4b32      	ldr	r3, [pc, #200]	; (80056a4 <UART_SetConfig+0x6f4>)
 80055dc:	fba3 1302 	umull	r1, r3, r3, r2
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	2164      	movs	r1, #100	; 0x64
 80055e4:	fb01 f303 	mul.w	r3, r1, r3
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	3332      	adds	r3, #50	; 0x32
 80055ee:	4a2d      	ldr	r2, [pc, #180]	; (80056a4 <UART_SetConfig+0x6f4>)
 80055f0:	fba2 2303 	umull	r2, r3, r2, r3
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055fa:	4498      	add	r8, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	469b      	mov	fp, r3
 8005600:	f04f 0c00 	mov.w	ip, #0
 8005604:	46d9      	mov	r9, fp
 8005606:	46e2      	mov	sl, ip
 8005608:	eb19 0309 	adds.w	r3, r9, r9
 800560c:	eb4a 040a 	adc.w	r4, sl, sl
 8005610:	4699      	mov	r9, r3
 8005612:	46a2      	mov	sl, r4
 8005614:	eb19 090b 	adds.w	r9, r9, fp
 8005618:	eb4a 0a0c 	adc.w	sl, sl, ip
 800561c:	f04f 0100 	mov.w	r1, #0
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005628:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800562c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005630:	4689      	mov	r9, r1
 8005632:	4692      	mov	sl, r2
 8005634:	eb1b 0509 	adds.w	r5, fp, r9
 8005638:	eb4c 060a 	adc.w	r6, ip, sl
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4619      	mov	r1, r3
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	f04f 0400 	mov.w	r4, #0
 800564e:	0094      	lsls	r4, r2, #2
 8005650:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005654:	008b      	lsls	r3, r1, #2
 8005656:	461a      	mov	r2, r3
 8005658:	4623      	mov	r3, r4
 800565a:	4628      	mov	r0, r5
 800565c:	4631      	mov	r1, r6
 800565e:	f7fb fa25 	bl	8000aac <__aeabi_uldivmod>
 8005662:	4603      	mov	r3, r0
 8005664:	460c      	mov	r4, r1
 8005666:	461a      	mov	r2, r3
 8005668:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <UART_SetConfig+0x6f4>)
 800566a:	fba3 1302 	umull	r1, r3, r3, r2
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	2164      	movs	r1, #100	; 0x64
 8005672:	fb01 f303 	mul.w	r3, r1, r3
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	3332      	adds	r3, #50	; 0x32
 800567c:	4a09      	ldr	r2, [pc, #36]	; (80056a4 <UART_SetConfig+0x6f4>)
 800567e:	fba2 2303 	umull	r2, r3, r2, r3
 8005682:	095b      	lsrs	r3, r3, #5
 8005684:	f003 020f 	and.w	r2, r3, #15
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4442      	add	r2, r8
 800568e:	609a      	str	r2, [r3, #8]
}
 8005690:	e7ff      	b.n	8005692 <UART_SetConfig+0x6e2>
 8005692:	bf00      	nop
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569c:	40011000 	.word	0x40011000
 80056a0:	40011400 	.word	0x40011400
 80056a4:	51eb851f 	.word	0x51eb851f

080056a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056a8:	b084      	sub	sp, #16
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	f107 001c 	add.w	r0, r7, #28
 80056b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d122      	bne.n	8005706 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d105      	bne.n	80056fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f001 fac6 	bl	8006c8c <USB_CoreReset>
 8005700:	4603      	mov	r3, r0
 8005702:	73fb      	strb	r3, [r7, #15]
 8005704:	e01a      	b.n	800573c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f001 faba 	bl	8006c8c <USB_CoreReset>
 8005718:	4603      	mov	r3, r0
 800571a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800571c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	639a      	str	r2, [r3, #56]	; 0x38
 800572e:	e005      	b.n	800573c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	2b01      	cmp	r3, #1
 8005740:	d10b      	bne.n	800575a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f043 0206 	orr.w	r2, r3, #6
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f043 0220 	orr.w	r2, r3, #32
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800575a:	7bfb      	ldrb	r3, [r7, #15]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005766:	b004      	add	sp, #16
 8005768:	4770      	bx	lr
	...

0800576c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	4613      	mov	r3, r2
 8005778:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800577a:	79fb      	ldrb	r3, [r7, #7]
 800577c:	2b02      	cmp	r3, #2
 800577e:	d165      	bne.n	800584c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4a41      	ldr	r2, [pc, #260]	; (8005888 <USB_SetTurnaroundTime+0x11c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d906      	bls.n	8005796 <USB_SetTurnaroundTime+0x2a>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4a40      	ldr	r2, [pc, #256]	; (800588c <USB_SetTurnaroundTime+0x120>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d802      	bhi.n	8005796 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005790:	230f      	movs	r3, #15
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	e062      	b.n	800585c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	4a3c      	ldr	r2, [pc, #240]	; (800588c <USB_SetTurnaroundTime+0x120>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d906      	bls.n	80057ac <USB_SetTurnaroundTime+0x40>
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	4a3b      	ldr	r2, [pc, #236]	; (8005890 <USB_SetTurnaroundTime+0x124>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d802      	bhi.n	80057ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057a6:	230e      	movs	r3, #14
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	e057      	b.n	800585c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4a38      	ldr	r2, [pc, #224]	; (8005890 <USB_SetTurnaroundTime+0x124>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d906      	bls.n	80057c2 <USB_SetTurnaroundTime+0x56>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4a37      	ldr	r2, [pc, #220]	; (8005894 <USB_SetTurnaroundTime+0x128>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d802      	bhi.n	80057c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057bc:	230d      	movs	r3, #13
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	e04c      	b.n	800585c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	4a33      	ldr	r2, [pc, #204]	; (8005894 <USB_SetTurnaroundTime+0x128>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d906      	bls.n	80057d8 <USB_SetTurnaroundTime+0x6c>
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	4a32      	ldr	r2, [pc, #200]	; (8005898 <USB_SetTurnaroundTime+0x12c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d802      	bhi.n	80057d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80057d2:	230c      	movs	r3, #12
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	e041      	b.n	800585c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4a2f      	ldr	r2, [pc, #188]	; (8005898 <USB_SetTurnaroundTime+0x12c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d906      	bls.n	80057ee <USB_SetTurnaroundTime+0x82>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4a2e      	ldr	r2, [pc, #184]	; (800589c <USB_SetTurnaroundTime+0x130>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d802      	bhi.n	80057ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80057e8:	230b      	movs	r3, #11
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	e036      	b.n	800585c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4a2a      	ldr	r2, [pc, #168]	; (800589c <USB_SetTurnaroundTime+0x130>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d906      	bls.n	8005804 <USB_SetTurnaroundTime+0x98>
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	4a29      	ldr	r2, [pc, #164]	; (80058a0 <USB_SetTurnaroundTime+0x134>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d802      	bhi.n	8005804 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80057fe:	230a      	movs	r3, #10
 8005800:	617b      	str	r3, [r7, #20]
 8005802:	e02b      	b.n	800585c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4a26      	ldr	r2, [pc, #152]	; (80058a0 <USB_SetTurnaroundTime+0x134>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d906      	bls.n	800581a <USB_SetTurnaroundTime+0xae>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4a25      	ldr	r2, [pc, #148]	; (80058a4 <USB_SetTurnaroundTime+0x138>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d802      	bhi.n	800581a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005814:	2309      	movs	r3, #9
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	e020      	b.n	800585c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4a21      	ldr	r2, [pc, #132]	; (80058a4 <USB_SetTurnaroundTime+0x138>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d906      	bls.n	8005830 <USB_SetTurnaroundTime+0xc4>
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	4a20      	ldr	r2, [pc, #128]	; (80058a8 <USB_SetTurnaroundTime+0x13c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d802      	bhi.n	8005830 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800582a:	2308      	movs	r3, #8
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	e015      	b.n	800585c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4a1d      	ldr	r2, [pc, #116]	; (80058a8 <USB_SetTurnaroundTime+0x13c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d906      	bls.n	8005846 <USB_SetTurnaroundTime+0xda>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4a1c      	ldr	r2, [pc, #112]	; (80058ac <USB_SetTurnaroundTime+0x140>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d802      	bhi.n	8005846 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005840:	2307      	movs	r3, #7
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e00a      	b.n	800585c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005846:	2306      	movs	r3, #6
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e007      	b.n	800585c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d102      	bne.n	8005858 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005852:	2309      	movs	r3, #9
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	e001      	b.n	800585c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005858:	2309      	movs	r3, #9
 800585a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	029b      	lsls	r3, r3, #10
 8005870:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005874:	431a      	orrs	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	00d8acbf 	.word	0x00d8acbf
 800588c:	00e4e1bf 	.word	0x00e4e1bf
 8005890:	00f423ff 	.word	0x00f423ff
 8005894:	0106737f 	.word	0x0106737f
 8005898:	011a499f 	.word	0x011a499f
 800589c:	01312cff 	.word	0x01312cff
 80058a0:	014ca43f 	.word	0x014ca43f
 80058a4:	016e35ff 	.word	0x016e35ff
 80058a8:	01a6ab1f 	.word	0x01a6ab1f
 80058ac:	01e847ff 	.word	0x01e847ff

080058b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f043 0201 	orr.w	r2, r3, #1
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f023 0201 	bic.w	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d106      	bne.n	8005920 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60da      	str	r2, [r3, #12]
 800591e:	e00b      	b.n	8005938 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	60da      	str	r2, [r3, #12]
 8005932:	e001      	b.n	8005938 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e003      	b.n	8005940 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005938:	2032      	movs	r0, #50	; 0x32
 800593a:	f7fb ffd9 	bl	80018f0 <HAL_Delay>

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005948:	b084      	sub	sp, #16
 800594a:	b580      	push	{r7, lr}
 800594c:	b086      	sub	sp, #24
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005962:	2300      	movs	r3, #0
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	e009      	b.n	800597c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	3340      	adds	r3, #64	; 0x40
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	2200      	movs	r2, #0
 8005974:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	3301      	adds	r3, #1
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	2b0e      	cmp	r3, #14
 8005980:	d9f2      	bls.n	8005968 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005984:	2b00      	cmp	r3, #0
 8005986:	d11c      	bne.n	80059c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005996:	f043 0302 	orr.w	r3, r3, #2
 800599a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	639a      	str	r2, [r3, #56]	; 0x38
 80059c0:	e00b      	b.n	80059da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059e0:	461a      	mov	r2, r3
 80059e2:	2300      	movs	r3, #0
 80059e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ec:	4619      	mov	r1, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f4:	461a      	mov	r2, r3
 80059f6:	680b      	ldr	r3, [r1, #0]
 80059f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d10c      	bne.n	8005a1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d104      	bne.n	8005a10 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a06:	2100      	movs	r1, #0
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f949 	bl	8005ca0 <USB_SetDevSpeed>
 8005a0e:	e008      	b.n	8005a22 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a10:	2101      	movs	r1, #1
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f944 	bl	8005ca0 <USB_SetDevSpeed>
 8005a18:	e003      	b.n	8005a22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a1a:	2103      	movs	r1, #3
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f93f 	bl	8005ca0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a22:	2110      	movs	r1, #16
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f8f3 	bl	8005c10 <USB_FlushTxFifo>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f911 	bl	8005c5c <USB_FlushRxFifo>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a56:	461a      	mov	r2, r3
 8005a58:	2300      	movs	r3, #0
 8005a5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a62:	461a      	mov	r2, r3
 8005a64:	2300      	movs	r3, #0
 8005a66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a68:	2300      	movs	r3, #0
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	e043      	b.n	8005af6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a84:	d118      	bne.n	8005ab8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a98:	461a      	mov	r2, r3
 8005a9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	e013      	b.n	8005aca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	e008      	b.n	8005aca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	2300      	movs	r3, #0
 8005ada:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae8:	461a      	mov	r2, r3
 8005aea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005aee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	3301      	adds	r3, #1
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d3b7      	bcc.n	8005a6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	e043      	b.n	8005b8c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b1a:	d118      	bne.n	8005b4e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10a      	bne.n	8005b38 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	e013      	b.n	8005b60 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b44:	461a      	mov	r2, r3
 8005b46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	e008      	b.n	8005b60 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	2300      	movs	r3, #0
 8005b70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d3b7      	bcc.n	8005b04 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ba2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005bb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d105      	bne.n	8005bc8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	f043 0210 	orr.w	r2, r3, #16
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	699a      	ldr	r2, [r3, #24]
 8005bcc:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <USB_DevInit+0x2c4>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d005      	beq.n	8005be6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f043 0208 	orr.w	r2, r3, #8
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d107      	bne.n	8005bfc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bf4:	f043 0304 	orr.w	r3, r3, #4
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c08:	b004      	add	sp, #16
 8005c0a:	4770      	bx	lr
 8005c0c:	803c3800 	.word	0x803c3800

08005c10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	019b      	lsls	r3, r3, #6
 8005c22:	f043 0220 	orr.w	r2, r3, #32
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4a09      	ldr	r2, [pc, #36]	; (8005c58 <USB_FlushTxFifo+0x48>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d901      	bls.n	8005c3c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e006      	b.n	8005c4a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d0f0      	beq.n	8005c2a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	00030d40 	.word	0x00030d40

08005c5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2210      	movs	r2, #16
 8005c6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3301      	adds	r3, #1
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <USB_FlushRxFifo+0x40>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d901      	bls.n	8005c80 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e006      	b.n	8005c8e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f003 0310 	and.w	r3, r3, #16
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d0f0      	beq.n	8005c6e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	00030d40 	.word	0x00030d40

08005ca0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	68f9      	ldr	r1, [r7, #12]
 8005cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b087      	sub	sp, #28
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0306 	and.w	r3, r3, #6
 8005cea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d102      	bne.n	8005cf8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	75fb      	strb	r3, [r7, #23]
 8005cf6:	e00a      	b.n	8005d0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d002      	beq.n	8005d04 <USB_GetDevSpeed+0x32>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b06      	cmp	r3, #6
 8005d02:	d102      	bne.n	8005d0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d04:	2302      	movs	r3, #2
 8005d06:	75fb      	strb	r3, [r7, #23]
 8005d08:	e001      	b.n	8005d0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d0a:	230f      	movs	r3, #15
 8005d0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	371c      	adds	r7, #28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d13a      	bne.n	8005dae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	2101      	movs	r1, #1
 8005d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	68f9      	ldr	r1, [r7, #12]
 8005d52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d56:	4313      	orrs	r3, r2
 8005d58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d155      	bne.n	8005e1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	78db      	ldrb	r3, [r3, #3]
 8005d8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	059b      	lsls	r3, r3, #22
 8005d92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d94:	4313      	orrs	r3, r2
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	0151      	lsls	r1, r2, #5
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	440a      	add	r2, r1
 8005d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	e036      	b.n	8005e1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db4:	69da      	ldr	r2, [r3, #28]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc4:	041b      	lsls	r3, r3, #16
 8005dc6:	68f9      	ldr	r1, [r7, #12]
 8005dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d11a      	bne.n	8005e1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	78db      	ldrb	r3, [r3, #3]
 8005e00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e02:	430b      	orrs	r3, r1
 8005e04:	4313      	orrs	r3, r2
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
	...

08005e2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	785b      	ldrb	r3, [r3, #1]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d161      	bne.n	8005f0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e5e:	d11f      	bne.n	8005ea0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	0151      	lsls	r1, r2, #5
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	440a      	add	r2, r1
 8005e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	0151      	lsls	r1, r2, #5
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	440a      	add	r2, r1
 8005e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	68f9      	ldr	r1, [r7, #12]
 8005ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eca:	69da      	ldr	r2, [r3, #28]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	f003 030f 	and.w	r3, r3, #15
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	43db      	mvns	r3, r3
 8005ede:	68f9      	ldr	r1, [r7, #12]
 8005ee0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	0159      	lsls	r1, r3, #5
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	440b      	add	r3, r1
 8005efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f02:	4619      	mov	r1, r3
 8005f04:	4b35      	ldr	r3, [pc, #212]	; (8005fdc <USB_DeactivateEndpoint+0x1b0>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	600b      	str	r3, [r1, #0]
 8005f0a:	e060      	b.n	8005fce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f22:	d11f      	bne.n	8005f64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	2101      	movs	r1, #1
 8005f76:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7a:	041b      	lsls	r3, r3, #16
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	68f9      	ldr	r1, [r7, #12]
 8005f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f84:	4013      	ands	r3, r2
 8005f86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	69da      	ldr	r2, [r3, #28]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	2101      	movs	r1, #1
 8005f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9e:	041b      	lsls	r3, r3, #16
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	68f9      	ldr	r1, [r7, #12]
 8005fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa8:	4013      	ands	r3, r2
 8005faa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	0159      	lsls	r1, r3, #5
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	440b      	add	r3, r1
 8005fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <USB_DeactivateEndpoint+0x1b4>)
 8005fca:	4013      	ands	r3, r2
 8005fcc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	ec337800 	.word	0xec337800
 8005fe0:	eff37800 	.word	0xeff37800

08005fe4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08a      	sub	sp, #40	; 0x28
 8005fe8:	af02      	add	r7, sp, #8
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	2b01      	cmp	r3, #1
 8006002:	f040 815c 	bne.w	80062be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d132      	bne.n	8006074 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	0151      	lsls	r1, r2, #5
 8006020:	69fa      	ldr	r2, [r7, #28]
 8006022:	440a      	add	r2, r1
 8006024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006028:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800602c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006030:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006050:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	0151      	lsls	r1, r2, #5
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	440a      	add	r2, r1
 8006068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800606c:	0cdb      	lsrs	r3, r3, #19
 800606e:	04db      	lsls	r3, r3, #19
 8006070:	6113      	str	r3, [r2, #16]
 8006072:	e074      	b.n	800615e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	0151      	lsls	r1, r2, #5
 8006086:	69fa      	ldr	r2, [r7, #28]
 8006088:	440a      	add	r2, r1
 800608a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608e:	0cdb      	lsrs	r3, r3, #19
 8006090:	04db      	lsls	r3, r3, #19
 8006092:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	0151      	lsls	r1, r2, #5
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	440a      	add	r2, r1
 80060aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c4:	691a      	ldr	r2, [r3, #16]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	6959      	ldr	r1, [r3, #20]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	440b      	add	r3, r1
 80060d0:	1e59      	subs	r1, r3, #1
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80060da:	04d9      	lsls	r1, r3, #19
 80060dc:	4b9d      	ldr	r3, [pc, #628]	; (8006354 <USB_EPStartXfer+0x370>)
 80060de:	400b      	ands	r3, r1
 80060e0:	69b9      	ldr	r1, [r7, #24]
 80060e2:	0148      	lsls	r0, r1, #5
 80060e4:	69f9      	ldr	r1, [r7, #28]
 80060e6:	4401      	add	r1, r0
 80060e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060ec:	4313      	orrs	r3, r2
 80060ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006106:	69b9      	ldr	r1, [r7, #24]
 8006108:	0148      	lsls	r0, r1, #5
 800610a:	69f9      	ldr	r1, [r7, #28]
 800610c:	4401      	add	r1, r0
 800610e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006112:	4313      	orrs	r3, r2
 8006114:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	78db      	ldrb	r3, [r3, #3]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d11f      	bne.n	800615e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	0151      	lsls	r1, r2, #5
 8006130:	69fa      	ldr	r2, [r7, #28]
 8006132:	440a      	add	r2, r1
 8006134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006138:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800613c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	0151      	lsls	r1, r2, #5
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	440a      	add	r2, r1
 8006154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006158:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800615c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d14b      	bne.n	80061fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d009      	beq.n	8006180 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006178:	461a      	mov	r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	78db      	ldrb	r3, [r3, #3]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d128      	bne.n	80061da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006194:	2b00      	cmp	r3, #0
 8006196:	d110      	bne.n	80061ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	0151      	lsls	r1, r2, #5
 80061aa:	69fa      	ldr	r2, [r7, #28]
 80061ac:	440a      	add	r2, r1
 80061ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	e00f      	b.n	80061da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	e12f      	b.n	800645c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006216:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800621a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	78db      	ldrb	r3, [r3, #3]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d015      	beq.n	8006250 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 8117 	beq.w	800645c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	2101      	movs	r1, #1
 8006240:	fa01 f303 	lsl.w	r3, r1, r3
 8006244:	69f9      	ldr	r1, [r7, #28]
 8006246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800624a:	4313      	orrs	r3, r2
 800624c:	634b      	str	r3, [r1, #52]	; 0x34
 800624e:	e105      	b.n	800645c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625c:	2b00      	cmp	r3, #0
 800625e:	d110      	bne.n	8006282 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	440a      	add	r2, r1
 8006276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	e00f      	b.n	80062a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	0151      	lsls	r1, r2, #5
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	440a      	add	r2, r1
 8006298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800629c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	68d9      	ldr	r1, [r3, #12]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	781a      	ldrb	r2, [r3, #0]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	b298      	uxth	r0, r3
 80062b0:	79fb      	ldrb	r3, [r7, #7]
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	4603      	mov	r3, r0
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 fa2b 	bl	8006712 <USB_WritePacket>
 80062bc:	e0ce      	b.n	800645c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	0151      	lsls	r1, r2, #5
 80062d0:	69fa      	ldr	r2, [r7, #28]
 80062d2:	440a      	add	r2, r1
 80062d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d8:	0cdb      	lsrs	r3, r3, #19
 80062da:	04db      	lsls	r3, r3, #19
 80062dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006300:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d126      	bne.n	8006358 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006320:	69b9      	ldr	r1, [r7, #24]
 8006322:	0148      	lsls	r0, r1, #5
 8006324:	69f9      	ldr	r1, [r7, #28]
 8006326:	4401      	add	r1, r0
 8006328:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800632c:	4313      	orrs	r3, r2
 800632e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	0151      	lsls	r1, r2, #5
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	440a      	add	r2, r1
 8006346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800634a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800634e:	6113      	str	r3, [r2, #16]
 8006350:	e036      	b.n	80063c0 <USB_EPStartXfer+0x3dc>
 8006352:	bf00      	nop
 8006354:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	695a      	ldr	r2, [r3, #20]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	4413      	add	r3, r2
 8006362:	1e5a      	subs	r2, r3, #1
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	fbb2 f3f3 	udiv	r3, r2, r3
 800636c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637a:	691a      	ldr	r2, [r3, #16]
 800637c:	8afb      	ldrh	r3, [r7, #22]
 800637e:	04d9      	lsls	r1, r3, #19
 8006380:	4b39      	ldr	r3, [pc, #228]	; (8006468 <USB_EPStartXfer+0x484>)
 8006382:	400b      	ands	r3, r1
 8006384:	69b9      	ldr	r1, [r7, #24]
 8006386:	0148      	lsls	r0, r1, #5
 8006388:	69f9      	ldr	r1, [r7, #28]
 800638a:	4401      	add	r1, r0
 800638c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006390:	4313      	orrs	r3, r2
 8006392:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a0:	691a      	ldr	r2, [r3, #16]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	8af9      	ldrh	r1, [r7, #22]
 80063a8:	fb01 f303 	mul.w	r3, r1, r3
 80063ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063b0:	69b9      	ldr	r1, [r7, #24]
 80063b2:	0148      	lsls	r0, r1, #5
 80063b4:	69f9      	ldr	r1, [r7, #28]
 80063b6:	4401      	add	r1, r0
 80063b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063bc:	4313      	orrs	r3, r2
 80063be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d10d      	bne.n	80063e2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d009      	beq.n	80063e2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	68d9      	ldr	r1, [r3, #12]
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063de:	460a      	mov	r2, r1
 80063e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	78db      	ldrb	r3, [r3, #3]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d128      	bne.n	800643c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d110      	bne.n	800641c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	0151      	lsls	r1, r2, #5
 800640c:	69fa      	ldr	r2, [r7, #28]
 800640e:	440a      	add	r2, r1
 8006410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	e00f      	b.n	800643c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	0151      	lsls	r1, r2, #5
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	440a      	add	r2, r1
 8006432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800643a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	440a      	add	r2, r1
 8006452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006456:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800645a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3720      	adds	r7, #32
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	1ff80000 	.word	0x1ff80000

0800646c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	4613      	mov	r3, r2
 8006478:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	785b      	ldrb	r3, [r3, #1]
 8006488:	2b01      	cmp	r3, #1
 800648a:	f040 80cd 	bne.w	8006628 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d132      	bne.n	80064fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	4413      	add	r3, r2
 800649e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	0151      	lsls	r1, r2, #5
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	440a      	add	r2, r1
 80064ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f4:	0cdb      	lsrs	r3, r3, #19
 80064f6:	04db      	lsls	r3, r3, #19
 80064f8:	6113      	str	r3, [r2, #16]
 80064fa:	e04e      	b.n	800659a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	440a      	add	r2, r1
 8006512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006516:	0cdb      	lsrs	r3, r3, #19
 8006518:	04db      	lsls	r3, r3, #19
 800651a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	0151      	lsls	r1, r2, #5
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	440a      	add	r2, r1
 8006532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006536:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800653a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800653e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	695a      	ldr	r2, [r3, #20]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	429a      	cmp	r2, r3
 800654a:	d903      	bls.n	8006554 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	0151      	lsls	r1, r2, #5
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	440a      	add	r2, r1
 800656a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006572:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800658a:	6939      	ldr	r1, [r7, #16]
 800658c:	0148      	lsls	r0, r1, #5
 800658e:	6979      	ldr	r1, [r7, #20]
 8006590:	4401      	add	r1, r0
 8006592:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006596:	4313      	orrs	r3, r2
 8006598:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d11e      	bne.n	80065de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d009      	beq.n	80065bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b4:	461a      	mov	r2, r3
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	e092      	b.n	8006704 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	0151      	lsls	r1, r2, #5
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	440a      	add	r2, r1
 80065f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d07e      	beq.n	8006704 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	2101      	movs	r1, #1
 8006618:	fa01 f303 	lsl.w	r3, r1, r3
 800661c:	6979      	ldr	r1, [r7, #20]
 800661e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006622:	4313      	orrs	r3, r2
 8006624:	634b      	str	r3, [r1, #52]	; 0x34
 8006626:	e06d      	b.n	8006704 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	0151      	lsls	r1, r2, #5
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	440a      	add	r2, r1
 800663e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006642:	0cdb      	lsrs	r3, r3, #19
 8006644:	04db      	lsls	r3, r3, #19
 8006646:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	0151      	lsls	r1, r2, #5
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	440a      	add	r2, r1
 800665e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006662:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006666:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800666a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	440a      	add	r2, r1
 8006692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800669a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066b2:	6939      	ldr	r1, [r7, #16]
 80066b4:	0148      	lsls	r0, r1, #5
 80066b6:	6979      	ldr	r1, [r7, #20]
 80066b8:	4401      	add	r1, r0
 80066ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066be:	4313      	orrs	r3, r2
 80066c0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d10d      	bne.n	80066e4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d009      	beq.n	80066e4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	68d9      	ldr	r1, [r3, #12]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e0:	460a      	mov	r2, r1
 80066e2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006702:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006712:	b480      	push	{r7}
 8006714:	b089      	sub	sp, #36	; 0x24
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	4611      	mov	r1, r2
 800671e:	461a      	mov	r2, r3
 8006720:	460b      	mov	r3, r1
 8006722:	71fb      	strb	r3, [r7, #7]
 8006724:	4613      	mov	r3, r2
 8006726:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006730:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006734:	2b00      	cmp	r3, #0
 8006736:	d11a      	bne.n	800676e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006738:	88bb      	ldrh	r3, [r7, #4]
 800673a:	3303      	adds	r3, #3
 800673c:	089b      	lsrs	r3, r3, #2
 800673e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006740:	2300      	movs	r3, #0
 8006742:	61bb      	str	r3, [r7, #24]
 8006744:	e00f      	b.n	8006766 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006746:	79fb      	ldrb	r3, [r7, #7]
 8006748:	031a      	lsls	r2, r3, #12
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	4413      	add	r3, r2
 800674e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006752:	461a      	mov	r2, r3
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6013      	str	r3, [r2, #0]
      pSrc++;
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	3304      	adds	r3, #4
 800675e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	3301      	adds	r3, #1
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	429a      	cmp	r2, r3
 800676c:	d3eb      	bcc.n	8006746 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3724      	adds	r7, #36	; 0x24
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800677c:	b480      	push	{r7}
 800677e:	b089      	sub	sp, #36	; 0x24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	4613      	mov	r3, r2
 8006788:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006792:	88fb      	ldrh	r3, [r7, #6]
 8006794:	3303      	adds	r3, #3
 8006796:	089b      	lsrs	r3, r3, #2
 8006798:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800679a:	2300      	movs	r3, #0
 800679c:	61bb      	str	r3, [r7, #24]
 800679e:	e00b      	b.n	80067b8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	3304      	adds	r3, #4
 80067b0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	3301      	adds	r3, #1
 80067b6:	61bb      	str	r3, [r7, #24]
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d3ef      	bcc.n	80067a0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80067c0:	69fb      	ldr	r3, [r7, #28]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3724      	adds	r7, #36	; 0x24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	785b      	ldrb	r3, [r3, #1]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d12c      	bne.n	8006844 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	db12      	blt.n	8006822 <USB_EPSetStall+0x54>
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00f      	beq.n	8006822 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4413      	add	r3, r2
 800680a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	0151      	lsls	r1, r2, #5
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	440a      	add	r2, r1
 8006818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800681c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006820:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	0151      	lsls	r1, r2, #5
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	440a      	add	r2, r1
 8006838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800683c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	e02b      	b.n	800689c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	db12      	blt.n	800687c <USB_EPSetStall+0xae>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00f      	beq.n	800687c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	0151      	lsls	r1, r2, #5
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	440a      	add	r2, r1
 8006872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006876:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800687a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	0151      	lsls	r1, r2, #5
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	440a      	add	r2, r1
 8006892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006896:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800689a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b085      	sub	sp, #20
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	785b      	ldrb	r3, [r3, #1]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d128      	bne.n	8006918 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	0151      	lsls	r1, r2, #5
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	440a      	add	r2, r1
 80068dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	78db      	ldrb	r3, [r3, #3]
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d003      	beq.n	80068f6 <USB_EPClearStall+0x4c>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	78db      	ldrb	r3, [r3, #3]
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d138      	bne.n	8006968 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	0151      	lsls	r1, r2, #5
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	440a      	add	r2, r1
 800690c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	e027      	b.n	8006968 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	0151      	lsls	r1, r2, #5
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	440a      	add	r2, r1
 800692e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006932:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006936:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	78db      	ldrb	r3, [r3, #3]
 800693c:	2b03      	cmp	r3, #3
 800693e:	d003      	beq.n	8006948 <USB_EPClearStall+0x9e>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	78db      	ldrb	r3, [r3, #3]
 8006944:	2b02      	cmp	r3, #2
 8006946:	d10f      	bne.n	8006968 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	0151      	lsls	r1, r2, #5
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	440a      	add	r2, r1
 800695e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006966:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006976:	b480      	push	{r7}
 8006978:	b085      	sub	sp, #20
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	460b      	mov	r3, r1
 8006980:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006994:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006998:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80069aa:	68f9      	ldr	r1, [r7, #12]
 80069ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069b0:	4313      	orrs	r3, r2
 80069b2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b085      	sub	sp, #20
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069dc:	f023 0303 	bic.w	r3, r3, #3
 80069e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069f0:	f023 0302 	bic.w	r3, r3, #2
 80069f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a1e:	f023 0303 	bic.w	r3, r3, #3
 8006a22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a32:	f043 0302 	orr.w	r3, r3, #2
 8006a36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b085      	sub	sp, #20
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	0c1b      	lsrs	r3, r3, #16
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	b29b      	uxth	r3, r3
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	460b      	mov	r3, r1
 8006ade:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	4013      	ands	r3, r2
 8006b00:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b02:	68bb      	ldr	r3, [r7, #8]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b32:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b34:	78fb      	ldrb	r3, [r7, #3]
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b40:	01db      	lsls	r3, r3, #7
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	f003 0301 	and.w	r3, r3, #1
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ba6:	f023 0307 	bic.w	r3, r3, #7
 8006baa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
	...

08006bd0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	333c      	adds	r3, #60	; 0x3c
 8006be6:	3304      	adds	r3, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	4a26      	ldr	r2, [pc, #152]	; (8006c88 <USB_EP0_OutStart+0xb8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d90a      	bls.n	8006c0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c04:	d101      	bne.n	8006c0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	e037      	b.n	8006c7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c10:	461a      	mov	r2, r3
 8006c12:	2300      	movs	r3, #0
 8006c14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c38:	f043 0318 	orr.w	r3, r3, #24
 8006c3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c4c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006c50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c52:	7afb      	ldrb	r3, [r7, #11]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d10f      	bne.n	8006c78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5e:	461a      	mov	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c72:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006c76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	371c      	adds	r7, #28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	4f54300a 	.word	0x4f54300a

08006c8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4a13      	ldr	r2, [pc, #76]	; (8006cf0 <USB_CoreReset+0x64>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d901      	bls.n	8006caa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e01b      	b.n	8006ce2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	daf2      	bge.n	8006c98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	f043 0201 	orr.w	r2, r3, #1
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4a09      	ldr	r2, [pc, #36]	; (8006cf0 <USB_CoreReset+0x64>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d901      	bls.n	8006cd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e006      	b.n	8006ce2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d0f0      	beq.n	8006cc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	00030d40 	.word	0x00030d40

08006cf4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d00:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d04:	f002 f8d6 	bl	8008eb4 <malloc>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d105      	bne.n	8006d1e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e066      	b.n	8006dec <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	7c1b      	ldrb	r3, [r3, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d119      	bne.n	8006d62 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d32:	2202      	movs	r2, #2
 8006d34:	2181      	movs	r1, #129	; 0x81
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f001 ff43 	bl	8008bc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d46:	2202      	movs	r2, #2
 8006d48:	2101      	movs	r1, #1
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 ff39 	bl	8008bc2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2210      	movs	r2, #16
 8006d5c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006d60:	e016      	b.n	8006d90 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d62:	2340      	movs	r3, #64	; 0x40
 8006d64:	2202      	movs	r2, #2
 8006d66:	2181      	movs	r1, #129	; 0x81
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 ff2a 	bl	8008bc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d74:	2340      	movs	r3, #64	; 0x40
 8006d76:	2202      	movs	r2, #2
 8006d78:	2101      	movs	r1, #1
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 ff21 	bl	8008bc2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2210      	movs	r2, #16
 8006d8c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d90:	2308      	movs	r3, #8
 8006d92:	2203      	movs	r2, #3
 8006d94:	2182      	movs	r1, #130	; 0x82
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 ff13 	bl	8008bc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	7c1b      	ldrb	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d109      	bne.n	8006dda <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f001 ffe4 	bl	8008da0 <USBD_LL_PrepareReceive>
 8006dd8:	e007      	b.n	8006dea <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006de0:	2340      	movs	r3, #64	; 0x40
 8006de2:	2101      	movs	r1, #1
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 ffdb 	bl	8008da0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e04:	2181      	movs	r1, #129	; 0x81
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 ff01 	bl	8008c0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e12:	2101      	movs	r1, #1
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f001 fefa 	bl	8008c0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006e22:	2182      	movs	r1, #130	; 0x82
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 fef2 	bl	8008c0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00e      	beq.n	8006e62 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e54:	4618      	mov	r0, r3
 8006e56:	f002 f835 	bl	8008ec4 <free>
    pdev->pClassData = NULL;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e7c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d03a      	beq.n	8006f0c <USBD_CDC_Setup+0xa0>
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	f040 8097 	bne.w	8006fca <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	88db      	ldrh	r3, [r3, #6]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d029      	beq.n	8006ef8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	b25b      	sxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	da11      	bge.n	8006ed2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006eba:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	88d2      	ldrh	r2, [r2, #6]
 8006ec0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ec2:	6939      	ldr	r1, [r7, #16]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	88db      	ldrh	r3, [r3, #6]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 fa6d 	bl	80083aa <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006ed0:	e082      	b.n	8006fd8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	785a      	ldrb	r2, [r3, #1]
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	88db      	ldrh	r3, [r3, #6]
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ee8:	6939      	ldr	r1, [r7, #16]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	88db      	ldrh	r3, [r3, #6]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 fa86 	bl	8008402 <USBD_CtlPrepareRx>
    break;
 8006ef6:	e06f      	b.n	8006fd8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	7850      	ldrb	r0, [r2, #1]
 8006f04:	2200      	movs	r2, #0
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	4798      	blx	r3
    break;
 8006f0a:	e065      	b.n	8006fd8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	785b      	ldrb	r3, [r3, #1]
 8006f10:	2b0b      	cmp	r3, #11
 8006f12:	d84f      	bhi.n	8006fb4 <USBD_CDC_Setup+0x148>
 8006f14:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <USBD_CDC_Setup+0xb0>)
 8006f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1a:	bf00      	nop
 8006f1c:	08006f4d 	.word	0x08006f4d
 8006f20:	08006fc3 	.word	0x08006fc3
 8006f24:	08006fb5 	.word	0x08006fb5
 8006f28:	08006fb5 	.word	0x08006fb5
 8006f2c:	08006fb5 	.word	0x08006fb5
 8006f30:	08006fb5 	.word	0x08006fb5
 8006f34:	08006fb5 	.word	0x08006fb5
 8006f38:	08006fb5 	.word	0x08006fb5
 8006f3c:	08006fb5 	.word	0x08006fb5
 8006f40:	08006fb5 	.word	0x08006fb5
 8006f44:	08006f75 	.word	0x08006f75
 8006f48:	08006f9d 	.word	0x08006f9d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d107      	bne.n	8006f66 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f56:	f107 030c 	add.w	r3, r7, #12
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fa23 	bl	80083aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006f64:	e030      	b.n	8006fc8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 f9ad 	bl	80082c8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	75fb      	strb	r3, [r7, #23]
      break;
 8006f72:	e029      	b.n	8006fc8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d107      	bne.n	8006f8e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f7e:	f107 030f 	add.w	r3, r7, #15
 8006f82:	2201      	movs	r2, #1
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 fa0f 	bl	80083aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006f8c:	e01c      	b.n	8006fc8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 f999 	bl	80082c8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006f96:	2303      	movs	r3, #3
 8006f98:	75fb      	strb	r3, [r7, #23]
      break;
 8006f9a:	e015      	b.n	8006fc8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d00f      	beq.n	8006fc6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 f98d 	bl	80082c8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006fb2:	e008      	b.n	8006fc6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f001 f986 	bl	80082c8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc0:	e002      	b.n	8006fc8 <USBD_CDC_Setup+0x15c>
      break;
 8006fc2:	bf00      	nop
 8006fc4:	e008      	b.n	8006fd8 <USBD_CDC_Setup+0x16c>
      break;
 8006fc6:	bf00      	nop
    }
    break;
 8006fc8:	e006      	b.n	8006fd8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f001 f97b 	bl	80082c8 <USBD_CtlError>
    ret = USBD_FAIL;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	75fb      	strb	r3, [r7, #23]
    break;
 8006fd6:	bf00      	nop
  }

  return (uint8_t)ret;
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop

08006fe4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ff6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007002:	2303      	movs	r3, #3
 8007004:	e049      	b.n	800709a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800700c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800700e:	78fa      	ldrb	r2, [r7, #3]
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	3318      	adds	r3, #24
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d029      	beq.n	8007078 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007024:	78fa      	ldrb	r2, [r7, #3]
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	4613      	mov	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	440b      	add	r3, r1
 8007032:	3318      	adds	r3, #24
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	78f9      	ldrb	r1, [r7, #3]
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	460b      	mov	r3, r1
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	1a5b      	subs	r3, r3, r1
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4403      	add	r3, r0
 8007044:	3344      	adds	r3, #68	; 0x44
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	fbb2 f1f3 	udiv	r1, r2, r3
 800704c:	fb03 f301 	mul.w	r3, r3, r1
 8007050:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007052:	2b00      	cmp	r3, #0
 8007054:	d110      	bne.n	8007078 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007056:	78fa      	ldrb	r2, [r7, #3]
 8007058:	6879      	ldr	r1, [r7, #4]
 800705a:	4613      	mov	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	440b      	add	r3, r1
 8007064:	3318      	adds	r3, #24
 8007066:	2200      	movs	r2, #0
 8007068:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800706a:	78f9      	ldrb	r1, [r7, #3]
 800706c:	2300      	movs	r3, #0
 800706e:	2200      	movs	r2, #0
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 fe74 	bl	8008d5e <USBD_LL_Transmit>
 8007076:	e00f      	b.n	8007098 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2200      	movs	r2, #0
 800707c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007094:	78fa      	ldrb	r2, [r7, #3]
 8007096:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	460b      	mov	r3, r1
 80070ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e015      	b.n	80070f0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f001 fe8a 	bl	8008de2 <USBD_LL_GetRxDataSize>
 80070ce:	4602      	mov	r2, r0
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80070ea:	4611      	mov	r1, r2
 80070ec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007106:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d015      	beq.n	800713e <USBD_CDC_EP0_RxReady+0x46>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007118:	2bff      	cmp	r3, #255	; 0xff
 800711a:	d010      	beq.n	800713e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800712a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007132:	b292      	uxth	r2, r2
 8007134:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	22ff      	movs	r2, #255	; 0xff
 800713a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2243      	movs	r2, #67	; 0x43
 8007154:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007156:	4b03      	ldr	r3, [pc, #12]	; (8007164 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	20000098 	.word	0x20000098

08007168 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2243      	movs	r2, #67	; 0x43
 8007174:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007176:	4b03      	ldr	r3, [pc, #12]	; (8007184 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007178:	4618      	mov	r0, r3
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	20000054 	.word	0x20000054

08007188 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2243      	movs	r2, #67	; 0x43
 8007194:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007196:	4b03      	ldr	r3, [pc, #12]	; (80071a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	200000dc 	.word	0x200000dc

080071a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	220a      	movs	r2, #10
 80071b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80071b6:	4b03      	ldr	r3, [pc, #12]	; (80071c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	20000010 	.word	0x20000010

080071c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80071d8:	2303      	movs	r3, #3
 80071da:	e004      	b.n	80071e6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b087      	sub	sp, #28
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	60b9      	str	r1, [r7, #8]
 80071fc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007204:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007234:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800725a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007266:	2303      	movs	r3, #3
 8007268:	e016      	b.n	8007298 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	7c1b      	ldrb	r3, [r3, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d109      	bne.n	8007286 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800727c:	2101      	movs	r1, #1
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 fd8e 	bl	8008da0 <USBD_LL_PrepareReceive>
 8007284:	e007      	b.n	8007296 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800728c:	2340      	movs	r3, #64	; 0x40
 800728e:	2101      	movs	r1, #1
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 fd85 	bl	8008da0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	4613      	mov	r3, r2
 80072ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e025      	b.n	8007304 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	79fa      	ldrb	r2, [r7, #7]
 80072f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f001 fbfb 	bl	8008af4 <USBD_LL_Init>
 80072fe:	4603      	mov	r3, r0
 8007300:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007302:	7dfb      	ldrb	r3, [r7, #23]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007320:	2303      	movs	r3, #3
 8007322:	e010      	b.n	8007346 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007334:	f107 020e 	add.w	r2, r7, #14
 8007338:	4610      	mov	r0, r2
 800733a:	4798      	blx	r3
 800733c:	4602      	mov	r2, r0
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b082      	sub	sp, #8
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 fc18 	bl	8008b8c <USBD_LL_Start>
 800735c:	4603      	mov	r3, r0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007388:	2303      	movs	r3, #3
 800738a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d009      	beq.n	80073aa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	78fa      	ldrb	r2, [r7, #3]
 80073a0:	4611      	mov	r1, r2
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	4798      	blx	r3
 80073a6:	4603      	mov	r3, r0
 80073a8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d007      	beq.n	80073da <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	78fa      	ldrb	r2, [r7, #3]
 80073d4:	4611      	mov	r1, r2
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	4798      	blx	r3
  }

  return USBD_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 ff2c 	bl	8008254 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800740a:	461a      	mov	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007418:	f003 031f 	and.w	r3, r3, #31
 800741c:	2b01      	cmp	r3, #1
 800741e:	d00e      	beq.n	800743e <USBD_LL_SetupStage+0x5a>
 8007420:	2b01      	cmp	r3, #1
 8007422:	d302      	bcc.n	800742a <USBD_LL_SetupStage+0x46>
 8007424:	2b02      	cmp	r3, #2
 8007426:	d014      	beq.n	8007452 <USBD_LL_SetupStage+0x6e>
 8007428:	e01d      	b.n	8007466 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fa18 	bl	8007868 <USBD_StdDevReq>
 8007438:	4603      	mov	r3, r0
 800743a:	73fb      	strb	r3, [r7, #15]
      break;
 800743c:	e020      	b.n	8007480 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fa7c 	bl	8007944 <USBD_StdItfReq>
 800744c:	4603      	mov	r3, r0
 800744e:	73fb      	strb	r3, [r7, #15]
      break;
 8007450:	e016      	b.n	8007480 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fab8 	bl	80079d0 <USBD_StdEPReq>
 8007460:	4603      	mov	r3, r0
 8007462:	73fb      	strb	r3, [r7, #15]
      break;
 8007464:	e00c      	b.n	8007480 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800746c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007470:	b2db      	uxtb	r3, r3
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f001 fbe9 	bl	8008c4c <USBD_LL_StallEP>
 800747a:	4603      	mov	r3, r0
 800747c:	73fb      	strb	r3, [r7, #15]
      break;
 800747e:	bf00      	nop
  }

  return ret;
 8007480:	7bfb      	ldrb	r3, [r7, #15]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b086      	sub	sp, #24
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	460b      	mov	r3, r1
 8007494:	607a      	str	r2, [r7, #4]
 8007496:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007498:	7afb      	ldrb	r3, [r7, #11]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d137      	bne.n	800750e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80074a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d14a      	bne.n	8007546 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d913      	bls.n	80074e4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	1ad2      	subs	r2, r2, r3
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	4293      	cmp	r3, r2
 80074d4:	bf28      	it	cs
 80074d6:	4613      	movcs	r3, r2
 80074d8:	461a      	mov	r2, r3
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 ffad 	bl	800843c <USBD_CtlContinueRx>
 80074e2:	e030      	b.n	8007546 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00a      	beq.n	8007506 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d105      	bne.n	8007506 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 ffa9 	bl	800845e <USBD_CtlSendStatus>
 800750c:	e01b      	b.n	8007546 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d013      	beq.n	8007542 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007520:	2b03      	cmp	r3, #3
 8007522:	d10e      	bne.n	8007542 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	7afa      	ldrb	r2, [r7, #11]
 800752e:	4611      	mov	r1, r2
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	4798      	blx	r3
 8007534:	4603      	mov	r3, r0
 8007536:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007538:	7dfb      	ldrb	r3, [r7, #23]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d003      	beq.n	8007546 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800753e:	7dfb      	ldrb	r3, [r7, #23]
 8007540:	e002      	b.n	8007548 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007542:	2303      	movs	r3, #3
 8007544:	e000      	b.n	8007548 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	460b      	mov	r3, r1
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800755e:	7afb      	ldrb	r3, [r7, #11]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d16a      	bne.n	800763a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3314      	adds	r3, #20
 8007568:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007570:	2b02      	cmp	r3, #2
 8007572:	d155      	bne.n	8007620 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	689a      	ldr	r2, [r3, #8]
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	429a      	cmp	r2, r3
 800757e:	d914      	bls.n	80075aa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	1ad2      	subs	r2, r2, r3
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	461a      	mov	r2, r3
 8007594:	6879      	ldr	r1, [r7, #4]
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 ff22 	bl	80083e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800759c:	2300      	movs	r3, #0
 800759e:	2200      	movs	r2, #0
 80075a0:	2100      	movs	r1, #0
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f001 fbfc 	bl	8008da0 <USBD_LL_PrepareReceive>
 80075a8:	e03a      	b.n	8007620 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	68da      	ldr	r2, [r3, #12]
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d11c      	bne.n	80075f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80075be:	429a      	cmp	r2, r3
 80075c0:	d316      	bcc.n	80075f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d20f      	bcs.n	80075f0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075d0:	2200      	movs	r2, #0
 80075d2:	2100      	movs	r1, #0
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 ff03 	bl	80083e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075e2:	2300      	movs	r3, #0
 80075e4:	2200      	movs	r2, #0
 80075e6:	2100      	movs	r1, #0
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f001 fbd9 	bl	8008da0 <USBD_LL_PrepareReceive>
 80075ee:	e017      	b.n	8007620 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007602:	2b03      	cmp	r3, #3
 8007604:	d105      	bne.n	8007612 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007612:	2180      	movs	r1, #128	; 0x80
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f001 fb19 	bl	8008c4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 ff32 	bl	8008484 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007626:	2b01      	cmp	r3, #1
 8007628:	d123      	bne.n	8007672 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f7ff fe9b 	bl	8007366 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007638:	e01b      	b.n	8007672 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d013      	beq.n	800766e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800764c:	2b03      	cmp	r3, #3
 800764e:	d10e      	bne.n	800766e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	7afa      	ldrb	r2, [r7, #11]
 800765a:	4611      	mov	r1, r2
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	4798      	blx	r3
 8007660:	4603      	mov	r3, r0
 8007662:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007664:	7dfb      	ldrb	r3, [r7, #23]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800766a:	7dfb      	ldrb	r3, [r7, #23]
 800766c:	e002      	b.n	8007674 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800766e:	2303      	movs	r3, #3
 8007670:	e000      	b.n	8007674 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d009      	beq.n	80076c0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	6852      	ldr	r2, [r2, #4]
 80076b8:	b2d2      	uxtb	r2, r2
 80076ba:	4611      	mov	r1, r2
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076c0:	2340      	movs	r3, #64	; 0x40
 80076c2:	2200      	movs	r2, #0
 80076c4:	2100      	movs	r1, #0
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 fa7b 	bl	8008bc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2240      	movs	r2, #64	; 0x40
 80076d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076dc:	2340      	movs	r3, #64	; 0x40
 80076de:	2200      	movs	r2, #0
 80076e0:	2180      	movs	r1, #128	; 0x80
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f001 fa6d 	bl	8008bc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2240      	movs	r2, #64	; 0x40
 80076f2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	460b      	mov	r3, r1
 8007708:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	78fa      	ldrb	r2, [r7, #3]
 800770e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2204      	movs	r2, #4
 8007736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007756:	2b04      	cmp	r3, #4
 8007758:	d105      	bne.n	8007766 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007782:	2b03      	cmp	r3, #3
 8007784:	d10b      	bne.n	800779e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d005      	beq.n	800779e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	460b      	mov	r3, r1
 80077b2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	460b      	mov	r3, r1
 80077cc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b082      	sub	sp, #8
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007808:	2b00      	cmp	r3, #0
 800780a:	d009      	beq.n	8007820 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	6852      	ldr	r2, [r2, #4]
 8007818:	b2d2      	uxtb	r2, r2
 800781a:	4611      	mov	r1, r2
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	4798      	blx	r3
  }

  return USBD_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800782a:	b480      	push	{r7}
 800782c:	b087      	sub	sp, #28
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	3301      	adds	r3, #1
 8007840:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007848:	8a3b      	ldrh	r3, [r7, #16]
 800784a:	021b      	lsls	r3, r3, #8
 800784c:	b21a      	sxth	r2, r3
 800784e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007852:	4313      	orrs	r3, r2
 8007854:	b21b      	sxth	r3, r3
 8007856:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007858:	89fb      	ldrh	r3, [r7, #14]
}
 800785a:	4618      	mov	r0, r3
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
	...

08007868 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800787e:	2b20      	cmp	r3, #32
 8007880:	d004      	beq.n	800788c <USBD_StdDevReq+0x24>
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	d002      	beq.n	800788c <USBD_StdDevReq+0x24>
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00a      	beq.n	80078a0 <USBD_StdDevReq+0x38>
 800788a:	e050      	b.n	800792e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	4798      	blx	r3
 800789a:	4603      	mov	r3, r0
 800789c:	73fb      	strb	r3, [r7, #15]
    break;
 800789e:	e04b      	b.n	8007938 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	785b      	ldrb	r3, [r3, #1]
 80078a4:	2b09      	cmp	r3, #9
 80078a6:	d83c      	bhi.n	8007922 <USBD_StdDevReq+0xba>
 80078a8:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <USBD_StdDevReq+0x48>)
 80078aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ae:	bf00      	nop
 80078b0:	08007905 	.word	0x08007905
 80078b4:	08007919 	.word	0x08007919
 80078b8:	08007923 	.word	0x08007923
 80078bc:	0800790f 	.word	0x0800790f
 80078c0:	08007923 	.word	0x08007923
 80078c4:	080078e3 	.word	0x080078e3
 80078c8:	080078d9 	.word	0x080078d9
 80078cc:	08007923 	.word	0x08007923
 80078d0:	080078fb 	.word	0x080078fb
 80078d4:	080078ed 	.word	0x080078ed
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f9ce 	bl	8007c7c <USBD_GetDescriptor>
      break;
 80078e0:	e024      	b.n	800792c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fb33 	bl	8007f50 <USBD_SetAddress>
      break;
 80078ea:	e01f      	b.n	800792c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fb70 	bl	8007fd4 <USBD_SetConfig>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73fb      	strb	r3, [r7, #15]
      break;
 80078f8:	e018      	b.n	800792c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fc0d 	bl	800811c <USBD_GetConfig>
      break;
 8007902:	e013      	b.n	800792c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fc3c 	bl	8008184 <USBD_GetStatus>
      break;
 800790c:	e00e      	b.n	800792c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fc6a 	bl	80081ea <USBD_SetFeature>
      break;
 8007916:	e009      	b.n	800792c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fc79 	bl	8008212 <USBD_ClrFeature>
      break;
 8007920:	e004      	b.n	800792c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fccf 	bl	80082c8 <USBD_CtlError>
      break;
 800792a:	bf00      	nop
    }
    break;
 800792c:	e004      	b.n	8007938 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fcc9 	bl	80082c8 <USBD_CtlError>
    break;
 8007936:	bf00      	nop
  }

  return ret;
 8007938:	7bfb      	ldrb	r3, [r7, #15]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop

08007944 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800795a:	2b20      	cmp	r3, #32
 800795c:	d003      	beq.n	8007966 <USBD_StdItfReq+0x22>
 800795e:	2b40      	cmp	r3, #64	; 0x40
 8007960:	d001      	beq.n	8007966 <USBD_StdItfReq+0x22>
 8007962:	2b00      	cmp	r3, #0
 8007964:	d12a      	bne.n	80079bc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796c:	3b01      	subs	r3, #1
 800796e:	2b02      	cmp	r3, #2
 8007970:	d81d      	bhi.n	80079ae <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	889b      	ldrh	r3, [r3, #4]
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b01      	cmp	r3, #1
 800797a:	d813      	bhi.n	80079a4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	4798      	blx	r3
 800798a:	4603      	mov	r3, r0
 800798c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	88db      	ldrh	r3, [r3, #6]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d110      	bne.n	80079b8 <USBD_StdItfReq+0x74>
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10d      	bne.n	80079b8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fd5e 	bl	800845e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80079a2:	e009      	b.n	80079b8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fc8e 	bl	80082c8 <USBD_CtlError>
      break;
 80079ac:	e004      	b.n	80079b8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fc89 	bl	80082c8 <USBD_CtlError>
      break;
 80079b6:	e000      	b.n	80079ba <USBD_StdItfReq+0x76>
      break;
 80079b8:	bf00      	nop
    }
    break;
 80079ba:	e004      	b.n	80079c6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fc82 	bl	80082c8 <USBD_CtlError>
    break;
 80079c4:	bf00      	nop
  }

  return ret;
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	889b      	ldrh	r3, [r3, #4]
 80079e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	d004      	beq.n	80079fa <USBD_StdEPReq+0x2a>
 80079f0:	2b40      	cmp	r3, #64	; 0x40
 80079f2:	d002      	beq.n	80079fa <USBD_StdEPReq+0x2a>
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00a      	beq.n	8007a0e <USBD_StdEPReq+0x3e>
 80079f8:	e135      	b.n	8007c66 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	4798      	blx	r3
 8007a08:	4603      	mov	r3, r0
 8007a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a0c:	e130      	b.n	8007c70 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	785b      	ldrb	r3, [r3, #1]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d03e      	beq.n	8007a94 <USBD_StdEPReq+0xc4>
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d002      	beq.n	8007a20 <USBD_StdEPReq+0x50>
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d077      	beq.n	8007b0e <USBD_StdEPReq+0x13e>
 8007a1e:	e11c      	b.n	8007c5a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d002      	beq.n	8007a30 <USBD_StdEPReq+0x60>
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d015      	beq.n	8007a5a <USBD_StdEPReq+0x8a>
 8007a2e:	e02b      	b.n	8007a88 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00c      	beq.n	8007a50 <USBD_StdEPReq+0x80>
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	2b80      	cmp	r3, #128	; 0x80
 8007a3a:	d009      	beq.n	8007a50 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 f903 	bl	8008c4c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a46:	2180      	movs	r1, #128	; 0x80
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 f8ff 	bl	8008c4c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007a4e:	e020      	b.n	8007a92 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fc38 	bl	80082c8 <USBD_CtlError>
        break;
 8007a58:	e01b      	b.n	8007a92 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	885b      	ldrh	r3, [r3, #2]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10e      	bne.n	8007a80 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a62:	7bbb      	ldrb	r3, [r7, #14]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00b      	beq.n	8007a80 <USBD_StdEPReq+0xb0>
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	2b80      	cmp	r3, #128	; 0x80
 8007a6c:	d008      	beq.n	8007a80 <USBD_StdEPReq+0xb0>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	88db      	ldrh	r3, [r3, #6]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d104      	bne.n	8007a80 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f001 f8e6 	bl	8008c4c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fcec 	bl	800845e <USBD_CtlSendStatus>

        break;
 8007a86:	e004      	b.n	8007a92 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fc1c 	bl	80082c8 <USBD_CtlError>
        break;
 8007a90:	bf00      	nop
      }
      break;
 8007a92:	e0e7      	b.n	8007c64 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d002      	beq.n	8007aa4 <USBD_StdEPReq+0xd4>
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d015      	beq.n	8007ace <USBD_StdEPReq+0xfe>
 8007aa2:	e02d      	b.n	8007b00 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00c      	beq.n	8007ac4 <USBD_StdEPReq+0xf4>
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b80      	cmp	r3, #128	; 0x80
 8007aae:	d009      	beq.n	8007ac4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 f8c9 	bl	8008c4c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aba:	2180      	movs	r1, #128	; 0x80
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 f8c5 	bl	8008c4c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007ac2:	e023      	b.n	8007b0c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fbfe 	bl	80082c8 <USBD_CtlError>
        break;
 8007acc:	e01e      	b.n	8007b0c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	885b      	ldrh	r3, [r3, #2]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d119      	bne.n	8007b0a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d004      	beq.n	8007aea <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 f8d0 	bl	8008c8a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fcb7 	bl	800845e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	4798      	blx	r3
        }
        break;
 8007afe:	e004      	b.n	8007b0a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fbe0 	bl	80082c8 <USBD_CtlError>
        break;
 8007b08:	e000      	b.n	8007b0c <USBD_StdEPReq+0x13c>
        break;
 8007b0a:	bf00      	nop
      }
      break;
 8007b0c:	e0aa      	b.n	8007c64 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d002      	beq.n	8007b1e <USBD_StdEPReq+0x14e>
 8007b18:	2b03      	cmp	r3, #3
 8007b1a:	d032      	beq.n	8007b82 <USBD_StdEPReq+0x1b2>
 8007b1c:	e097      	b.n	8007c4e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d007      	beq.n	8007b34 <USBD_StdEPReq+0x164>
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b80      	cmp	r3, #128	; 0x80
 8007b28:	d004      	beq.n	8007b34 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fbcb 	bl	80082c8 <USBD_CtlError>
          break;
 8007b32:	e091      	b.n	8007c58 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	da0b      	bge.n	8007b54 <USBD_StdEPReq+0x184>
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	3310      	adds	r3, #16
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	4413      	add	r3, r2
 8007b50:	3304      	adds	r3, #4
 8007b52:	e00b      	b.n	8007b6c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
 8007b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	4413      	add	r3, r2
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2200      	movs	r2, #0
 8007b72:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2202      	movs	r2, #2
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fc15 	bl	80083aa <USBD_CtlSendData>
        break;
 8007b80:	e06a      	b.n	8007c58 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007b82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	da11      	bge.n	8007bae <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	f003 020f 	and.w	r2, r3, #15
 8007b90:	6879      	ldr	r1, [r7, #4]
 8007b92:	4613      	mov	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	440b      	add	r3, r1
 8007b9c:	3324      	adds	r3, #36	; 0x24
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d117      	bne.n	8007bd4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fb8e 	bl	80082c8 <USBD_CtlError>
            break;
 8007bac:	e054      	b.n	8007c58 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	f003 020f 	and.w	r2, r3, #15
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	440b      	add	r3, r1
 8007bc0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d104      	bne.n	8007bd4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fb7b 	bl	80082c8 <USBD_CtlError>
            break;
 8007bd2:	e041      	b.n	8007c58 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	da0b      	bge.n	8007bf4 <USBD_StdEPReq+0x224>
 8007bdc:	7bbb      	ldrb	r3, [r7, #14]
 8007bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007be2:	4613      	mov	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	3310      	adds	r3, #16
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	4413      	add	r3, r2
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	e00b      	b.n	8007c0c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007bf4:	7bbb      	ldrb	r3, [r7, #14]
 8007bf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	4413      	add	r3, r2
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <USBD_StdEPReq+0x24a>
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	2b80      	cmp	r3, #128	; 0x80
 8007c18:	d103      	bne.n	8007c22 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	e00e      	b.n	8007c40 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	4619      	mov	r1, r3
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f001 f84e 	bl	8008cc8 <USBD_LL_IsStallEP>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2201      	movs	r2, #1
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	e002      	b.n	8007c40 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2202      	movs	r2, #2
 8007c44:	4619      	mov	r1, r3
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fbaf 	bl	80083aa <USBD_CtlSendData>
          break;
 8007c4c:	e004      	b.n	8007c58 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fb39 	bl	80082c8 <USBD_CtlError>
        break;
 8007c56:	bf00      	nop
      }
      break;
 8007c58:	e004      	b.n	8007c64 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fb33 	bl	80082c8 <USBD_CtlError>
      break;
 8007c62:	bf00      	nop
    }
    break;
 8007c64:	e004      	b.n	8007c70 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fb2d 	bl	80082c8 <USBD_CtlError>
    break;
 8007c6e:	bf00      	nop
  }

  return ret;
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	885b      	ldrh	r3, [r3, #2]
 8007c96:	0a1b      	lsrs	r3, r3, #8
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	2b06      	cmp	r3, #6
 8007c9e:	f200 8128 	bhi.w	8007ef2 <USBD_GetDescriptor+0x276>
 8007ca2:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <USBD_GetDescriptor+0x2c>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007cc5 	.word	0x08007cc5
 8007cac:	08007cdd 	.word	0x08007cdd
 8007cb0:	08007d1d 	.word	0x08007d1d
 8007cb4:	08007ef3 	.word	0x08007ef3
 8007cb8:	08007ef3 	.word	0x08007ef3
 8007cbc:	08007e93 	.word	0x08007e93
 8007cc0:	08007ebf 	.word	0x08007ebf
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	7c12      	ldrb	r2, [r2, #16]
 8007cd0:	f107 0108 	add.w	r1, r7, #8
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4798      	blx	r3
 8007cd8:	60f8      	str	r0, [r7, #12]
    break;
 8007cda:	e112      	b.n	8007f02 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	7c1b      	ldrb	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10d      	bne.n	8007d00 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cec:	f107 0208 	add.w	r2, r7, #8
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4798      	blx	r3
 8007cf4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007cfe:	e100      	b.n	8007f02 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	f107 0208 	add.w	r2, r7, #8
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
 8007d10:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	3301      	adds	r3, #1
 8007d16:	2202      	movs	r2, #2
 8007d18:	701a      	strb	r2, [r3, #0]
    break;
 8007d1a:	e0f2      	b.n	8007f02 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	885b      	ldrh	r3, [r3, #2]
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b05      	cmp	r3, #5
 8007d24:	f200 80ac 	bhi.w	8007e80 <USBD_GetDescriptor+0x204>
 8007d28:	a201      	add	r2, pc, #4	; (adr r2, 8007d30 <USBD_GetDescriptor+0xb4>)
 8007d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2e:	bf00      	nop
 8007d30:	08007d49 	.word	0x08007d49
 8007d34:	08007d7d 	.word	0x08007d7d
 8007d38:	08007db1 	.word	0x08007db1
 8007d3c:	08007de5 	.word	0x08007de5
 8007d40:	08007e19 	.word	0x08007e19
 8007d44:	08007e4d 	.word	0x08007e4d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00b      	beq.n	8007d6c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	7c12      	ldrb	r2, [r2, #16]
 8007d60:	f107 0108 	add.w	r1, r7, #8
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
 8007d68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d6a:	e091      	b.n	8007e90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 faaa 	bl	80082c8 <USBD_CtlError>
        err++;
 8007d74:	7afb      	ldrb	r3, [r7, #11]
 8007d76:	3301      	adds	r3, #1
 8007d78:	72fb      	strb	r3, [r7, #11]
      break;
 8007d7a:	e089      	b.n	8007e90 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	7c12      	ldrb	r2, [r2, #16]
 8007d94:	f107 0108 	add.w	r1, r7, #8
 8007d98:	4610      	mov	r0, r2
 8007d9a:	4798      	blx	r3
 8007d9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d9e:	e077      	b.n	8007e90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fa90 	bl	80082c8 <USBD_CtlError>
        err++;
 8007da8:	7afb      	ldrb	r3, [r7, #11]
 8007daa:	3301      	adds	r3, #1
 8007dac:	72fb      	strb	r3, [r7, #11]
      break;
 8007dae:	e06f      	b.n	8007e90 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	7c12      	ldrb	r2, [r2, #16]
 8007dc8:	f107 0108 	add.w	r1, r7, #8
 8007dcc:	4610      	mov	r0, r2
 8007dce:	4798      	blx	r3
 8007dd0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dd2:	e05d      	b.n	8007e90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fa76 	bl	80082c8 <USBD_CtlError>
        err++;
 8007ddc:	7afb      	ldrb	r3, [r7, #11]
 8007dde:	3301      	adds	r3, #1
 8007de0:	72fb      	strb	r3, [r7, #11]
      break;
 8007de2:	e055      	b.n	8007e90 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00b      	beq.n	8007e08 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	7c12      	ldrb	r2, [r2, #16]
 8007dfc:	f107 0108 	add.w	r1, r7, #8
 8007e00:	4610      	mov	r0, r2
 8007e02:	4798      	blx	r3
 8007e04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e06:	e043      	b.n	8007e90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fa5c 	bl	80082c8 <USBD_CtlError>
        err++;
 8007e10:	7afb      	ldrb	r3, [r7, #11]
 8007e12:	3301      	adds	r3, #1
 8007e14:	72fb      	strb	r3, [r7, #11]
      break;
 8007e16:	e03b      	b.n	8007e90 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00b      	beq.n	8007e3c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	7c12      	ldrb	r2, [r2, #16]
 8007e30:	f107 0108 	add.w	r1, r7, #8
 8007e34:	4610      	mov	r0, r2
 8007e36:	4798      	blx	r3
 8007e38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e3a:	e029      	b.n	8007e90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa42 	bl	80082c8 <USBD_CtlError>
        err++;
 8007e44:	7afb      	ldrb	r3, [r7, #11]
 8007e46:	3301      	adds	r3, #1
 8007e48:	72fb      	strb	r3, [r7, #11]
      break;
 8007e4a:	e021      	b.n	8007e90 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00b      	beq.n	8007e70 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	7c12      	ldrb	r2, [r2, #16]
 8007e64:	f107 0108 	add.w	r1, r7, #8
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4798      	blx	r3
 8007e6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e6e:	e00f      	b.n	8007e90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa28 	bl	80082c8 <USBD_CtlError>
        err++;
 8007e78:	7afb      	ldrb	r3, [r7, #11]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	72fb      	strb	r3, [r7, #11]
      break;
 8007e7e:	e007      	b.n	8007e90 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fa20 	bl	80082c8 <USBD_CtlError>
      err++;
 8007e88:	7afb      	ldrb	r3, [r7, #11]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007e8e:	bf00      	nop
    }
    break;
 8007e90:	e037      	b.n	8007f02 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	7c1b      	ldrb	r3, [r3, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d109      	bne.n	8007eae <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea2:	f107 0208 	add.w	r2, r7, #8
 8007ea6:	4610      	mov	r0, r2
 8007ea8:	4798      	blx	r3
 8007eaa:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007eac:	e029      	b.n	8007f02 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fa09 	bl	80082c8 <USBD_CtlError>
      err++;
 8007eb6:	7afb      	ldrb	r3, [r7, #11]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	72fb      	strb	r3, [r7, #11]
    break;
 8007ebc:	e021      	b.n	8007f02 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	7c1b      	ldrb	r3, [r3, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10d      	bne.n	8007ee2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ece:	f107 0208 	add.w	r2, r7, #8
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	4798      	blx	r3
 8007ed6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	3301      	adds	r3, #1
 8007edc:	2207      	movs	r2, #7
 8007ede:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007ee0:	e00f      	b.n	8007f02 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f9ef 	bl	80082c8 <USBD_CtlError>
      err++;
 8007eea:	7afb      	ldrb	r3, [r7, #11]
 8007eec:	3301      	adds	r3, #1
 8007eee:	72fb      	strb	r3, [r7, #11]
    break;
 8007ef0:	e007      	b.n	8007f02 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f9e7 	bl	80082c8 <USBD_CtlError>
    err++;
 8007efa:	7afb      	ldrb	r3, [r7, #11]
 8007efc:	3301      	adds	r3, #1
 8007efe:	72fb      	strb	r3, [r7, #11]
    break;
 8007f00:	bf00      	nop
  }

  if (err != 0U)
 8007f02:	7afb      	ldrb	r3, [r7, #11]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d11e      	bne.n	8007f46 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	88db      	ldrh	r3, [r3, #6]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d016      	beq.n	8007f3e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007f10:	893b      	ldrh	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00e      	beq.n	8007f34 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	88da      	ldrh	r2, [r3, #6]
 8007f1a:	893b      	ldrh	r3, [r7, #8]
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	bf28      	it	cs
 8007f20:	4613      	movcs	r3, r2
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f26:	893b      	ldrh	r3, [r7, #8]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	68f9      	ldr	r1, [r7, #12]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fa3c 	bl	80083aa <USBD_CtlSendData>
 8007f32:	e009      	b.n	8007f48 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f9c6 	bl	80082c8 <USBD_CtlError>
 8007f3c:	e004      	b.n	8007f48 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fa8d 	bl	800845e <USBD_CtlSendStatus>
 8007f44:	e000      	b.n	8007f48 <USBD_GetDescriptor+0x2cc>
    return;
 8007f46:	bf00      	nop
    }
  }
}
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop

08007f50 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	889b      	ldrh	r3, [r3, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d130      	bne.n	8007fc4 <USBD_SetAddress+0x74>
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	88db      	ldrh	r3, [r3, #6]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d12c      	bne.n	8007fc4 <USBD_SetAddress+0x74>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	885b      	ldrh	r3, [r3, #2]
 8007f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8007f70:	d828      	bhi.n	8007fc4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	885b      	ldrh	r3, [r3, #2]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d104      	bne.n	8007f92 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f99c 	bl	80082c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f90:	e01c      	b.n	8007fcc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	7bfa      	ldrb	r2, [r7, #15]
 8007f96:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 febe 	bl	8008d20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fa5a 	bl	800845e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d004      	beq.n	8007fba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb8:	e008      	b.n	8007fcc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc2:	e003      	b.n	8007fcc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f97e 	bl	80082c8 <USBD_CtlError>
  }
}
 8007fcc:	bf00      	nop
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	885b      	ldrh	r3, [r3, #2]
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	4b4b      	ldr	r3, [pc, #300]	; (8008118 <USBD_SetConfig+0x144>)
 8007fea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fec:	4b4a      	ldr	r3, [pc, #296]	; (8008118 <USBD_SetConfig+0x144>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d905      	bls.n	8008000 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f966 	bl	80082c8 <USBD_CtlError>
    return USBD_FAIL;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e087      	b.n	8008110 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008006:	2b02      	cmp	r3, #2
 8008008:	d002      	beq.n	8008010 <USBD_SetConfig+0x3c>
 800800a:	2b03      	cmp	r3, #3
 800800c:	d025      	beq.n	800805a <USBD_SetConfig+0x86>
 800800e:	e071      	b.n	80080f4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008010:	4b41      	ldr	r3, [pc, #260]	; (8008118 <USBD_SetConfig+0x144>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01c      	beq.n	8008052 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008018:	4b3f      	ldr	r3, [pc, #252]	; (8008118 <USBD_SetConfig+0x144>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	461a      	mov	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008022:	4b3d      	ldr	r3, [pc, #244]	; (8008118 <USBD_SetConfig+0x144>)
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7ff f9a7 	bl	800737c <USBD_SetClassConfig>
 800802e:	4603      	mov	r3, r0
 8008030:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d004      	beq.n	8008042 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f944 	bl	80082c8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008040:	e065      	b.n	800810e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fa0b 	bl	800845e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2203      	movs	r2, #3
 800804c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008050:	e05d      	b.n	800810e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fa03 	bl	800845e <USBD_CtlSendStatus>
    break;
 8008058:	e059      	b.n	800810e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800805a:	4b2f      	ldr	r3, [pc, #188]	; (8008118 <USBD_SetConfig+0x144>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d112      	bne.n	8008088 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2202      	movs	r2, #2
 8008066:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800806a:	4b2b      	ldr	r3, [pc, #172]	; (8008118 <USBD_SetConfig+0x144>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	461a      	mov	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008074:	4b28      	ldr	r3, [pc, #160]	; (8008118 <USBD_SetConfig+0x144>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	4619      	mov	r1, r3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7ff f99a 	bl	80073b4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f9ec 	bl	800845e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008086:	e042      	b.n	800810e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008088:	4b23      	ldr	r3, [pc, #140]	; (8008118 <USBD_SetConfig+0x144>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	461a      	mov	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	429a      	cmp	r2, r3
 8008094:	d02a      	beq.n	80080ec <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	b2db      	uxtb	r3, r3
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7ff f988 	bl	80073b4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80080a4:	4b1c      	ldr	r3, [pc, #112]	; (8008118 <USBD_SetConfig+0x144>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	461a      	mov	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80080ae:	4b1a      	ldr	r3, [pc, #104]	; (8008118 <USBD_SetConfig+0x144>)
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7ff f961 	bl	800737c <USBD_SetClassConfig>
 80080ba:	4603      	mov	r3, r0
 80080bc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80080be:	7bfb      	ldrb	r3, [r7, #15]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00f      	beq.n	80080e4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f8fe 	bl	80082c8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7ff f96d 	bl	80073b4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2202      	movs	r2, #2
 80080de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80080e2:	e014      	b.n	800810e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f9ba 	bl	800845e <USBD_CtlSendStatus>
    break;
 80080ea:	e010      	b.n	800810e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f9b6 	bl	800845e <USBD_CtlSendStatus>
    break;
 80080f2:	e00c      	b.n	800810e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f8e6 	bl	80082c8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080fc:	4b06      	ldr	r3, [pc, #24]	; (8008118 <USBD_SetConfig+0x144>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff f956 	bl	80073b4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008108:	2303      	movs	r3, #3
 800810a:	73fb      	strb	r3, [r7, #15]
    break;
 800810c:	bf00      	nop
  }

  return ret;
 800810e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	20000294 	.word	0x20000294

0800811c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	88db      	ldrh	r3, [r3, #6]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d004      	beq.n	8008138 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f8c9 	bl	80082c8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008136:	e021      	b.n	800817c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800813e:	2b01      	cmp	r3, #1
 8008140:	db17      	blt.n	8008172 <USBD_GetConfig+0x56>
 8008142:	2b02      	cmp	r3, #2
 8008144:	dd02      	ble.n	800814c <USBD_GetConfig+0x30>
 8008146:	2b03      	cmp	r3, #3
 8008148:	d00b      	beq.n	8008162 <USBD_GetConfig+0x46>
 800814a:	e012      	b.n	8008172 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3308      	adds	r3, #8
 8008156:	2201      	movs	r2, #1
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f925 	bl	80083aa <USBD_CtlSendData>
      break;
 8008160:	e00c      	b.n	800817c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	3304      	adds	r3, #4
 8008166:	2201      	movs	r2, #1
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f91d 	bl	80083aa <USBD_CtlSendData>
      break;
 8008170:	e004      	b.n	800817c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f8a7 	bl	80082c8 <USBD_CtlError>
      break;
 800817a:	bf00      	nop
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008194:	3b01      	subs	r3, #1
 8008196:	2b02      	cmp	r3, #2
 8008198:	d81e      	bhi.n	80081d8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	88db      	ldrh	r3, [r3, #6]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d004      	beq.n	80081ac <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f88f 	bl	80082c8 <USBD_CtlError>
      break;
 80081aa:	e01a      	b.n	80081e2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d005      	beq.n	80081c8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	f043 0202 	orr.w	r2, r3, #2
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	330c      	adds	r3, #12
 80081cc:	2202      	movs	r2, #2
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f8ea 	bl	80083aa <USBD_CtlSendData>
    break;
 80081d6:	e004      	b.n	80081e2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f874 	bl	80082c8 <USBD_CtlError>
    break;
 80081e0:	bf00      	nop
  }
}
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b082      	sub	sp, #8
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	885b      	ldrh	r3, [r3, #2]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d106      	bne.n	800820a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f92a 	bl	800845e <USBD_CtlSendStatus>
  }
}
 800820a:	bf00      	nop
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008222:	3b01      	subs	r3, #1
 8008224:	2b02      	cmp	r3, #2
 8008226:	d80b      	bhi.n	8008240 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	885b      	ldrh	r3, [r3, #2]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d10c      	bne.n	800824a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f910 	bl	800845e <USBD_CtlSendStatus>
      }
      break;
 800823e:	e004      	b.n	800824a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f840 	bl	80082c8 <USBD_CtlError>
      break;
 8008248:	e000      	b.n	800824c <USBD_ClrFeature+0x3a>
      break;
 800824a:	bf00      	nop
  }
}
 800824c:	bf00      	nop
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	781a      	ldrb	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3301      	adds	r3, #1
 800826e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	781a      	ldrb	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	3301      	adds	r3, #1
 800827c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f7ff fad3 	bl	800782a <SWAPBYTE>
 8008284:	4603      	mov	r3, r0
 8008286:	461a      	mov	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	3301      	adds	r3, #1
 8008290:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3301      	adds	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f7ff fac6 	bl	800782a <SWAPBYTE>
 800829e:	4603      	mov	r3, r0
 80082a0:	461a      	mov	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	3301      	adds	r3, #1
 80082aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	3301      	adds	r3, #1
 80082b0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f7ff fab9 	bl	800782a <SWAPBYTE>
 80082b8:	4603      	mov	r3, r0
 80082ba:	461a      	mov	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	80da      	strh	r2, [r3, #6]
}
 80082c0:	bf00      	nop
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80082d2:	2180      	movs	r1, #128	; 0x80
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fcb9 	bl	8008c4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80082da:	2100      	movs	r1, #0
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fcb5 	bl	8008c4c <USBD_LL_StallEP>
}
 80082e2:	bf00      	nop
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b086      	sub	sp, #24
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	60b9      	str	r1, [r7, #8]
 80082f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d036      	beq.n	800836e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008304:	6938      	ldr	r0, [r7, #16]
 8008306:	f000 f836 	bl	8008376 <USBD_GetLen>
 800830a:	4603      	mov	r3, r0
 800830c:	3301      	adds	r3, #1
 800830e:	b29b      	uxth	r3, r3
 8008310:	005b      	lsls	r3, r3, #1
 8008312:	b29a      	uxth	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008318:	7dfb      	ldrb	r3, [r7, #23]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	4413      	add	r3, r2
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	7812      	ldrb	r2, [r2, #0]
 8008322:	701a      	strb	r2, [r3, #0]
  idx++;
 8008324:	7dfb      	ldrb	r3, [r7, #23]
 8008326:	3301      	adds	r3, #1
 8008328:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800832a:	7dfb      	ldrb	r3, [r7, #23]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	4413      	add	r3, r2
 8008330:	2203      	movs	r2, #3
 8008332:	701a      	strb	r2, [r3, #0]
  idx++;
 8008334:	7dfb      	ldrb	r3, [r7, #23]
 8008336:	3301      	adds	r3, #1
 8008338:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800833a:	e013      	b.n	8008364 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800833c:	7dfb      	ldrb	r3, [r7, #23]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	4413      	add	r3, r2
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	7812      	ldrb	r2, [r2, #0]
 8008346:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	3301      	adds	r3, #1
 800834c:	613b      	str	r3, [r7, #16]
    idx++;
 800834e:	7dfb      	ldrb	r3, [r7, #23]
 8008350:	3301      	adds	r3, #1
 8008352:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008354:	7dfb      	ldrb	r3, [r7, #23]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	4413      	add	r3, r2
 800835a:	2200      	movs	r2, #0
 800835c:	701a      	strb	r2, [r3, #0]
    idx++;
 800835e:	7dfb      	ldrb	r3, [r7, #23]
 8008360:	3301      	adds	r3, #1
 8008362:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1e7      	bne.n	800833c <USBD_GetString+0x52>
 800836c:	e000      	b.n	8008370 <USBD_GetString+0x86>
    return;
 800836e:	bf00      	nop
  }
}
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008376:	b480      	push	{r7}
 8008378:	b085      	sub	sp, #20
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800837e:	2300      	movs	r3, #0
 8008380:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008386:	e005      	b.n	8008394 <USBD_GetLen+0x1e>
  {
    len++;
 8008388:	7bfb      	ldrb	r3, [r7, #15]
 800838a:	3301      	adds	r3, #1
 800838c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	3301      	adds	r3, #1
 8008392:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1f5      	bne.n	8008388 <USBD_GetLen+0x12>
  }

  return len;
 800839c:	7bfb      	ldrb	r3, [r7, #15]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2202      	movs	r2, #2
 80083ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	2100      	movs	r1, #0
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f000 fcc4 	bl	8008d5e <USBD_LL_Transmit>

  return USBD_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	2100      	movs	r1, #0
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 fcb3 	bl	8008d5e <USBD_LL_Transmit>

  return USBD_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2203      	movs	r2, #3
 8008412:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	2100      	movs	r1, #0
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 fcb7 	bl	8008da0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	2100      	movs	r1, #0
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f000 fca6 	bl	8008da0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2204      	movs	r2, #4
 800846a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800846e:	2300      	movs	r3, #0
 8008470:	2200      	movs	r2, #0
 8008472:	2100      	movs	r1, #0
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fc72 	bl	8008d5e <USBD_LL_Transmit>

  return USBD_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2205      	movs	r2, #5
 8008490:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008494:	2300      	movs	r3, #0
 8008496:	2200      	movs	r2, #0
 8008498:	2100      	movs	r1, #0
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fc80 	bl	8008da0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084b0:	2200      	movs	r2, #0
 80084b2:	4912      	ldr	r1, [pc, #72]	; (80084fc <MX_USB_DEVICE_Init+0x50>)
 80084b4:	4812      	ldr	r0, [pc, #72]	; (8008500 <MX_USB_DEVICE_Init+0x54>)
 80084b6:	f7fe fef3 	bl	80072a0 <USBD_Init>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80084c0:	f7f8 ffae 	bl	8001420 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80084c4:	490f      	ldr	r1, [pc, #60]	; (8008504 <MX_USB_DEVICE_Init+0x58>)
 80084c6:	480e      	ldr	r0, [pc, #56]	; (8008500 <MX_USB_DEVICE_Init+0x54>)
 80084c8:	f7fe ff20 	bl	800730c <USBD_RegisterClass>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80084d2:	f7f8 ffa5 	bl	8001420 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80084d6:	490c      	ldr	r1, [pc, #48]	; (8008508 <MX_USB_DEVICE_Init+0x5c>)
 80084d8:	4809      	ldr	r0, [pc, #36]	; (8008500 <MX_USB_DEVICE_Init+0x54>)
 80084da:	f7fe fe75 	bl	80071c8 <USBD_CDC_RegisterInterface>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80084e4:	f7f8 ff9c 	bl	8001420 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084e8:	4805      	ldr	r0, [pc, #20]	; (8008500 <MX_USB_DEVICE_Init+0x54>)
 80084ea:	f7fe ff30 	bl	800734e <USBD_Start>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d001      	beq.n	80084f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80084f4:	f7f8 ff94 	bl	8001420 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084f8:	bf00      	nop
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	20000134 	.word	0x20000134
 8008500:	200003d8 	.word	0x200003d8
 8008504:	2000001c 	.word	0x2000001c
 8008508:	20000120 	.word	0x20000120

0800850c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008510:	2200      	movs	r2, #0
 8008512:	4905      	ldr	r1, [pc, #20]	; (8008528 <CDC_Init_FS+0x1c>)
 8008514:	4805      	ldr	r0, [pc, #20]	; (800852c <CDC_Init_FS+0x20>)
 8008516:	f7fe fe6c 	bl	80071f2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800851a:	4905      	ldr	r1, [pc, #20]	; (8008530 <CDC_Init_FS+0x24>)
 800851c:	4803      	ldr	r0, [pc, #12]	; (800852c <CDC_Init_FS+0x20>)
 800851e:	f7fe fe81 	bl	8007224 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008522:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008524:	4618      	mov	r0, r3
 8008526:	bd80      	pop	{r7, pc}
 8008528:	20000ea8 	.word	0x20000ea8
 800852c:	200003d8 	.word	0x200003d8
 8008530:	200006a8 	.word	0x200006a8

08008534 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008534:	b480      	push	{r7}
 8008536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008538:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800853a:	4618      	mov	r0, r3
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	6039      	str	r1, [r7, #0]
 800854e:	71fb      	strb	r3, [r7, #7]
 8008550:	4613      	mov	r3, r2
 8008552:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	2b23      	cmp	r3, #35	; 0x23
 8008558:	d84a      	bhi.n	80085f0 <CDC_Control_FS+0xac>
 800855a:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <CDC_Control_FS+0x1c>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	080085f1 	.word	0x080085f1
 8008564:	080085f1 	.word	0x080085f1
 8008568:	080085f1 	.word	0x080085f1
 800856c:	080085f1 	.word	0x080085f1
 8008570:	080085f1 	.word	0x080085f1
 8008574:	080085f1 	.word	0x080085f1
 8008578:	080085f1 	.word	0x080085f1
 800857c:	080085f1 	.word	0x080085f1
 8008580:	080085f1 	.word	0x080085f1
 8008584:	080085f1 	.word	0x080085f1
 8008588:	080085f1 	.word	0x080085f1
 800858c:	080085f1 	.word	0x080085f1
 8008590:	080085f1 	.word	0x080085f1
 8008594:	080085f1 	.word	0x080085f1
 8008598:	080085f1 	.word	0x080085f1
 800859c:	080085f1 	.word	0x080085f1
 80085a0:	080085f1 	.word	0x080085f1
 80085a4:	080085f1 	.word	0x080085f1
 80085a8:	080085f1 	.word	0x080085f1
 80085ac:	080085f1 	.word	0x080085f1
 80085b0:	080085f1 	.word	0x080085f1
 80085b4:	080085f1 	.word	0x080085f1
 80085b8:	080085f1 	.word	0x080085f1
 80085bc:	080085f1 	.word	0x080085f1
 80085c0:	080085f1 	.word	0x080085f1
 80085c4:	080085f1 	.word	0x080085f1
 80085c8:	080085f1 	.word	0x080085f1
 80085cc:	080085f1 	.word	0x080085f1
 80085d0:	080085f1 	.word	0x080085f1
 80085d4:	080085f1 	.word	0x080085f1
 80085d8:	080085f1 	.word	0x080085f1
 80085dc:	080085f1 	.word	0x080085f1
 80085e0:	080085f1 	.word	0x080085f1
 80085e4:	080085f1 	.word	0x080085f1
 80085e8:	080085f1 	.word	0x080085f1
 80085ec:	080085f1 	.word	0x080085f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80085f0:	bf00      	nop
  }

  return (USBD_OK);
 80085f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800860a:	6879      	ldr	r1, [r7, #4]
 800860c:	4805      	ldr	r0, [pc, #20]	; (8008624 <CDC_Receive_FS+0x24>)
 800860e:	f7fe fe09 	bl	8007224 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008612:	4804      	ldr	r0, [pc, #16]	; (8008624 <CDC_Receive_FS+0x24>)
 8008614:	f7fe fe1a 	bl	800724c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008618:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	200003d8 	.word	0x200003d8

08008628 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008628:	b480      	push	{r7}
 800862a:	b087      	sub	sp, #28
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	4613      	mov	r3, r2
 8008634:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800863a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800863e:	4618      	mov	r0, r3
 8008640:	371c      	adds	r7, #28
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
	...

0800864c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	6039      	str	r1, [r7, #0]
 8008656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2212      	movs	r2, #18
 800865c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800865e:	4b03      	ldr	r3, [pc, #12]	; (800866c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008660:	4618      	mov	r0, r3
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	20000150 	.word	0x20000150

08008670 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	6039      	str	r1, [r7, #0]
 800867a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2204      	movs	r2, #4
 8008680:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008682:	4b03      	ldr	r3, [pc, #12]	; (8008690 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008684:	4618      	mov	r0, r3
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	20000164 	.word	0x20000164

08008694 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	6039      	str	r1, [r7, #0]
 800869e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086a0:	79fb      	ldrb	r3, [r7, #7]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d105      	bne.n	80086b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	4907      	ldr	r1, [pc, #28]	; (80086c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80086aa:	4808      	ldr	r0, [pc, #32]	; (80086cc <USBD_FS_ProductStrDescriptor+0x38>)
 80086ac:	f7ff fe1d 	bl	80082ea <USBD_GetString>
 80086b0:	e004      	b.n	80086bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	4904      	ldr	r1, [pc, #16]	; (80086c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80086b6:	4805      	ldr	r0, [pc, #20]	; (80086cc <USBD_FS_ProductStrDescriptor+0x38>)
 80086b8:	f7ff fe17 	bl	80082ea <USBD_GetString>
  }
  return USBD_StrDesc;
 80086bc:	4b02      	ldr	r3, [pc, #8]	; (80086c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	200016a8 	.word	0x200016a8
 80086cc:	08009718 	.word	0x08009718

080086d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	6039      	str	r1, [r7, #0]
 80086da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	4904      	ldr	r1, [pc, #16]	; (80086f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086e0:	4804      	ldr	r0, [pc, #16]	; (80086f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086e2:	f7ff fe02 	bl	80082ea <USBD_GetString>
  return USBD_StrDesc;
 80086e6:	4b02      	ldr	r3, [pc, #8]	; (80086f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	200016a8 	.word	0x200016a8
 80086f4:	08009730 	.word	0x08009730

080086f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	6039      	str	r1, [r7, #0]
 8008702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	221a      	movs	r2, #26
 8008708:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800870a:	f000 f843 	bl	8008794 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800870e:	4b02      	ldr	r3, [pc, #8]	; (8008718 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008710:	4618      	mov	r0, r3
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	20000168 	.word	0x20000168

0800871c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	6039      	str	r1, [r7, #0]
 8008726:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008728:	79fb      	ldrb	r3, [r7, #7]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d105      	bne.n	800873a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	4907      	ldr	r1, [pc, #28]	; (8008750 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008732:	4808      	ldr	r0, [pc, #32]	; (8008754 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008734:	f7ff fdd9 	bl	80082ea <USBD_GetString>
 8008738:	e004      	b.n	8008744 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	4904      	ldr	r1, [pc, #16]	; (8008750 <USBD_FS_ConfigStrDescriptor+0x34>)
 800873e:	4805      	ldr	r0, [pc, #20]	; (8008754 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008740:	f7ff fdd3 	bl	80082ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008744:	4b02      	ldr	r3, [pc, #8]	; (8008750 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	200016a8 	.word	0x200016a8
 8008754:	08009744 	.word	0x08009744

08008758 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	4603      	mov	r3, r0
 8008760:	6039      	str	r1, [r7, #0]
 8008762:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008764:	79fb      	ldrb	r3, [r7, #7]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d105      	bne.n	8008776 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	4907      	ldr	r1, [pc, #28]	; (800878c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800876e:	4808      	ldr	r0, [pc, #32]	; (8008790 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008770:	f7ff fdbb 	bl	80082ea <USBD_GetString>
 8008774:	e004      	b.n	8008780 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	4904      	ldr	r1, [pc, #16]	; (800878c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800877a:	4805      	ldr	r0, [pc, #20]	; (8008790 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800877c:	f7ff fdb5 	bl	80082ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008780:	4b02      	ldr	r3, [pc, #8]	; (800878c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008782:	4618      	mov	r0, r3
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	200016a8 	.word	0x200016a8
 8008790:	08009750 	.word	0x08009750

08008794 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800879a:	4b0f      	ldr	r3, [pc, #60]	; (80087d8 <Get_SerialNum+0x44>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80087a0:	4b0e      	ldr	r3, [pc, #56]	; (80087dc <Get_SerialNum+0x48>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80087a6:	4b0e      	ldr	r3, [pc, #56]	; (80087e0 <Get_SerialNum+0x4c>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4413      	add	r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d009      	beq.n	80087ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087ba:	2208      	movs	r2, #8
 80087bc:	4909      	ldr	r1, [pc, #36]	; (80087e4 <Get_SerialNum+0x50>)
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f000 f814 	bl	80087ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087c4:	2204      	movs	r2, #4
 80087c6:	4908      	ldr	r1, [pc, #32]	; (80087e8 <Get_SerialNum+0x54>)
 80087c8:	68b8      	ldr	r0, [r7, #8]
 80087ca:	f000 f80f 	bl	80087ec <IntToUnicode>
  }
}
 80087ce:	bf00      	nop
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	1fff7a10 	.word	0x1fff7a10
 80087dc:	1fff7a14 	.word	0x1fff7a14
 80087e0:	1fff7a18 	.word	0x1fff7a18
 80087e4:	2000016a 	.word	0x2000016a
 80087e8:	2000017a 	.word	0x2000017a

080087ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b087      	sub	sp, #28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	4613      	mov	r3, r2
 80087f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087fe:	2300      	movs	r3, #0
 8008800:	75fb      	strb	r3, [r7, #23]
 8008802:	e027      	b.n	8008854 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	0f1b      	lsrs	r3, r3, #28
 8008808:	2b09      	cmp	r3, #9
 800880a:	d80b      	bhi.n	8008824 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	0f1b      	lsrs	r3, r3, #28
 8008810:	b2da      	uxtb	r2, r3
 8008812:	7dfb      	ldrb	r3, [r7, #23]
 8008814:	005b      	lsls	r3, r3, #1
 8008816:	4619      	mov	r1, r3
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	440b      	add	r3, r1
 800881c:	3230      	adds	r2, #48	; 0x30
 800881e:	b2d2      	uxtb	r2, r2
 8008820:	701a      	strb	r2, [r3, #0]
 8008822:	e00a      	b.n	800883a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	0f1b      	lsrs	r3, r3, #28
 8008828:	b2da      	uxtb	r2, r3
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	4619      	mov	r1, r3
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	440b      	add	r3, r1
 8008834:	3237      	adds	r2, #55	; 0x37
 8008836:	b2d2      	uxtb	r2, r2
 8008838:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	011b      	lsls	r3, r3, #4
 800883e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008840:	7dfb      	ldrb	r3, [r7, #23]
 8008842:	005b      	lsls	r3, r3, #1
 8008844:	3301      	adds	r3, #1
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	4413      	add	r3, r2
 800884a:	2200      	movs	r2, #0
 800884c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800884e:	7dfb      	ldrb	r3, [r7, #23]
 8008850:	3301      	adds	r3, #1
 8008852:	75fb      	strb	r3, [r7, #23]
 8008854:	7dfa      	ldrb	r2, [r7, #23]
 8008856:	79fb      	ldrb	r3, [r7, #7]
 8008858:	429a      	cmp	r2, r3
 800885a:	d3d3      	bcc.n	8008804 <IntToUnicode+0x18>
  }
}
 800885c:	bf00      	nop
 800885e:	371c      	adds	r7, #28
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b08a      	sub	sp, #40	; 0x28
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008870:	f107 0314 	add.w	r3, r7, #20
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]
 8008878:	605a      	str	r2, [r3, #4]
 800887a:	609a      	str	r2, [r3, #8]
 800887c:	60da      	str	r2, [r3, #12]
 800887e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008888:	d13a      	bne.n	8008900 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800888a:	2300      	movs	r3, #0
 800888c:	613b      	str	r3, [r7, #16]
 800888e:	4b1e      	ldr	r3, [pc, #120]	; (8008908 <HAL_PCD_MspInit+0xa0>)
 8008890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008892:	4a1d      	ldr	r2, [pc, #116]	; (8008908 <HAL_PCD_MspInit+0xa0>)
 8008894:	f043 0301 	orr.w	r3, r3, #1
 8008898:	6313      	str	r3, [r2, #48]	; 0x30
 800889a:	4b1b      	ldr	r3, [pc, #108]	; (8008908 <HAL_PCD_MspInit+0xa0>)
 800889c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	613b      	str	r3, [r7, #16]
 80088a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80088a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80088aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088ac:	2302      	movs	r3, #2
 80088ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b0:	2300      	movs	r3, #0
 80088b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088b4:	2303      	movs	r3, #3
 80088b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088b8:	230a      	movs	r3, #10
 80088ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088bc:	f107 0314 	add.w	r3, r7, #20
 80088c0:	4619      	mov	r1, r3
 80088c2:	4812      	ldr	r0, [pc, #72]	; (800890c <HAL_PCD_MspInit+0xa4>)
 80088c4:	f7f9 fd24 	bl	8002310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088c8:	4b0f      	ldr	r3, [pc, #60]	; (8008908 <HAL_PCD_MspInit+0xa0>)
 80088ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088cc:	4a0e      	ldr	r2, [pc, #56]	; (8008908 <HAL_PCD_MspInit+0xa0>)
 80088ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d2:	6353      	str	r3, [r2, #52]	; 0x34
 80088d4:	2300      	movs	r3, #0
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	4b0b      	ldr	r3, [pc, #44]	; (8008908 <HAL_PCD_MspInit+0xa0>)
 80088da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088dc:	4a0a      	ldr	r2, [pc, #40]	; (8008908 <HAL_PCD_MspInit+0xa0>)
 80088de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088e2:	6453      	str	r3, [r2, #68]	; 0x44
 80088e4:	4b08      	ldr	r3, [pc, #32]	; (8008908 <HAL_PCD_MspInit+0xa0>)
 80088e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088f0:	2200      	movs	r2, #0
 80088f2:	2100      	movs	r1, #0
 80088f4:	2043      	movs	r0, #67	; 0x43
 80088f6:	f7f9 fcb2 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088fa:	2043      	movs	r0, #67	; 0x43
 80088fc:	f7f9 fccb 	bl	8002296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008900:	bf00      	nop
 8008902:	3728      	adds	r7, #40	; 0x28
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	40023800 	.word	0x40023800
 800890c:	40020000 	.word	0x40020000

08008910 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008924:	4619      	mov	r1, r3
 8008926:	4610      	mov	r0, r2
 8008928:	f7fe fd5c 	bl	80073e4 <USBD_LL_SetupStage>
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008946:	78fa      	ldrb	r2, [r7, #3]
 8008948:	6879      	ldr	r1, [r7, #4]
 800894a:	4613      	mov	r3, r2
 800894c:	00db      	lsls	r3, r3, #3
 800894e:	1a9b      	subs	r3, r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	440b      	add	r3, r1
 8008954:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	78fb      	ldrb	r3, [r7, #3]
 800895c:	4619      	mov	r1, r3
 800895e:	f7fe fd94 	bl	800748a <USBD_LL_DataOutStage>
}
 8008962:	bf00      	nop
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	460b      	mov	r3, r1
 8008974:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800897c:	78fa      	ldrb	r2, [r7, #3]
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	4613      	mov	r3, r2
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	1a9b      	subs	r3, r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	440b      	add	r3, r1
 800898a:	3348      	adds	r3, #72	; 0x48
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	78fb      	ldrb	r3, [r7, #3]
 8008990:	4619      	mov	r1, r3
 8008992:	f7fe fddd 	bl	8007550 <USBD_LL_DataInStage>
}
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b082      	sub	sp, #8
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fe fee1 	bl	8007774 <USBD_LL_SOF>
}
 80089b2:	bf00      	nop
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089c2:	2301      	movs	r3, #1
 80089c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d102      	bne.n	80089d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]
 80089d2:	e008      	b.n	80089e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d102      	bne.n	80089e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80089dc:	2301      	movs	r3, #1
 80089de:	73fb      	strb	r3, [r7, #15]
 80089e0:	e001      	b.n	80089e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80089e2:	f7f8 fd1d 	bl	8001420 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089ec:	7bfa      	ldrb	r2, [r7, #15]
 80089ee:	4611      	mov	r1, r2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fe fe84 	bl	80076fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fe fe3d 	bl	800767c <USBD_LL_Reset>
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
	...

08008a0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe fe7f 	bl	800771e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	6812      	ldr	r2, [r2, #0]
 8008a2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a32:	f043 0301 	orr.w	r3, r3, #1
 8008a36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a1b      	ldr	r3, [r3, #32]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a40:	4b04      	ldr	r3, [pc, #16]	; (8008a54 <HAL_PCD_SuspendCallback+0x48>)
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	4a03      	ldr	r2, [pc, #12]	; (8008a54 <HAL_PCD_SuspendCallback+0x48>)
 8008a46:	f043 0306 	orr.w	r3, r3, #6
 8008a4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a4c:	bf00      	nop
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	e000ed00 	.word	0xe000ed00

08008a58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe fe6e 	bl	8007748 <USBD_LL_Resume>
}
 8008a6c:	bf00      	nop
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a86:	78fa      	ldrb	r2, [r7, #3]
 8008a88:	4611      	mov	r1, r2
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fe99 	bl	80077c2 <USBD_LL_IsoOUTIncomplete>
}
 8008a90:	bf00      	nop
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008aaa:	78fa      	ldrb	r2, [r7, #3]
 8008aac:	4611      	mov	r1, r2
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fe7a 	bl	80077a8 <USBD_LL_IsoINIncomplete>
}
 8008ab4:	bf00      	nop
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fe fe86 	bl	80077dc <USBD_LL_DevConnected>
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fe fe83 	bl	80077f2 <USBD_LL_DevDisconnected>
}
 8008aec:	bf00      	nop
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d13c      	bne.n	8008b7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008b04:	4a20      	ldr	r2, [pc, #128]	; (8008b88 <USBD_LL_Init+0x94>)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a1e      	ldr	r2, [pc, #120]	; (8008b88 <USBD_LL_Init+0x94>)
 8008b10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b14:	4b1c      	ldr	r3, [pc, #112]	; (8008b88 <USBD_LL_Init+0x94>)
 8008b16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008b1c:	4b1a      	ldr	r3, [pc, #104]	; (8008b88 <USBD_LL_Init+0x94>)
 8008b1e:	2204      	movs	r2, #4
 8008b20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008b22:	4b19      	ldr	r3, [pc, #100]	; (8008b88 <USBD_LL_Init+0x94>)
 8008b24:	2202      	movs	r2, #2
 8008b26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b28:	4b17      	ldr	r3, [pc, #92]	; (8008b88 <USBD_LL_Init+0x94>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b2e:	4b16      	ldr	r3, [pc, #88]	; (8008b88 <USBD_LL_Init+0x94>)
 8008b30:	2202      	movs	r2, #2
 8008b32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b34:	4b14      	ldr	r3, [pc, #80]	; (8008b88 <USBD_LL_Init+0x94>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b3a:	4b13      	ldr	r3, [pc, #76]	; (8008b88 <USBD_LL_Init+0x94>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b40:	4b11      	ldr	r3, [pc, #68]	; (8008b88 <USBD_LL_Init+0x94>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b46:	4b10      	ldr	r3, [pc, #64]	; (8008b88 <USBD_LL_Init+0x94>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b4c:	4b0e      	ldr	r3, [pc, #56]	; (8008b88 <USBD_LL_Init+0x94>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b52:	480d      	ldr	r0, [pc, #52]	; (8008b88 <USBD_LL_Init+0x94>)
 8008b54:	f7f9 fec8 	bl	80028e8 <HAL_PCD_Init>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b5e:	f7f8 fc5f 	bl	8001420 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b62:	2180      	movs	r1, #128	; 0x80
 8008b64:	4808      	ldr	r0, [pc, #32]	; (8008b88 <USBD_LL_Init+0x94>)
 8008b66:	f7fb f826 	bl	8003bb6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b6a:	2240      	movs	r2, #64	; 0x40
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	4806      	ldr	r0, [pc, #24]	; (8008b88 <USBD_LL_Init+0x94>)
 8008b70:	f7fa ffda 	bl	8003b28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b74:	2280      	movs	r2, #128	; 0x80
 8008b76:	2101      	movs	r1, #1
 8008b78:	4803      	ldr	r0, [pc, #12]	; (8008b88 <USBD_LL_Init+0x94>)
 8008b7a:	f7fa ffd5 	bl	8003b28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	200018a8 	.word	0x200018a8

08008b8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7f9 ffbd 	bl	8002b22 <HAL_PCD_Start>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 f92a 	bl	8008e08 <USBD_Get_USB_Status>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	4608      	mov	r0, r1
 8008bcc:	4611      	mov	r1, r2
 8008bce:	461a      	mov	r2, r3
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	70fb      	strb	r3, [r7, #3]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	70bb      	strb	r3, [r7, #2]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bea:	78bb      	ldrb	r3, [r7, #2]
 8008bec:	883a      	ldrh	r2, [r7, #0]
 8008bee:	78f9      	ldrb	r1, [r7, #3]
 8008bf0:	f7fa fba1 	bl	8003336 <HAL_PCD_EP_Open>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 f904 	bl	8008e08 <USBD_Get_USB_Status>
 8008c00:	4603      	mov	r3, r0
 8008c02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	460b      	mov	r3, r1
 8008c18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c28:	78fa      	ldrb	r2, [r7, #3]
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fa fbea 	bl	8003406 <HAL_PCD_EP_Close>
 8008c32:	4603      	mov	r3, r0
 8008c34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 f8e5 	bl	8008e08 <USBD_Get_USB_Status>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c66:	78fa      	ldrb	r2, [r7, #3]
 8008c68:	4611      	mov	r1, r2
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fa fcc2 	bl	80035f4 <HAL_PCD_EP_SetStall>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 f8c6 	bl	8008e08 <USBD_Get_USB_Status>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	460b      	mov	r3, r1
 8008c94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ca4:	78fa      	ldrb	r2, [r7, #3]
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7fa fd07 	bl	80036bc <HAL_PCD_EP_ClrStall>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 f8a7 	bl	8008e08 <USBD_Get_USB_Status>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	da0b      	bge.n	8008cfc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ce4:	78fb      	ldrb	r3, [r7, #3]
 8008ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cea:	68f9      	ldr	r1, [r7, #12]
 8008cec:	4613      	mov	r3, r2
 8008cee:	00db      	lsls	r3, r3, #3
 8008cf0:	1a9b      	subs	r3, r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	440b      	add	r3, r1
 8008cf6:	333e      	adds	r3, #62	; 0x3e
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	e00b      	b.n	8008d14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cfc:	78fb      	ldrb	r3, [r7, #3]
 8008cfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d02:	68f9      	ldr	r1, [r7, #12]
 8008d04:	4613      	mov	r3, r2
 8008d06:	00db      	lsls	r3, r3, #3
 8008d08:	1a9b      	subs	r3, r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	440b      	add	r3, r1
 8008d0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008d12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d3a:	78fa      	ldrb	r2, [r7, #3]
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fa fad4 	bl	80032ec <HAL_PCD_SetAddress>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 f85c 	bl	8008e08 <USBD_Get_USB_Status>
 8008d50:	4603      	mov	r3, r0
 8008d52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b086      	sub	sp, #24
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	603b      	str	r3, [r7, #0]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d7c:	7af9      	ldrb	r1, [r7, #11]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	f7fa fbed 	bl	8003560 <HAL_PCD_EP_Transmit>
 8008d86:	4603      	mov	r3, r0
 8008d88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 f83b 	bl	8008e08 <USBD_Get_USB_Status>
 8008d92:	4603      	mov	r3, r0
 8008d94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d96:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3718      	adds	r7, #24
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	607a      	str	r2, [r7, #4]
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	460b      	mov	r3, r1
 8008dae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008dbe:	7af9      	ldrb	r1, [r7, #11]
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	f7fa fb69 	bl	800349a <HAL_PCD_EP_Receive>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 f81a 	bl	8008e08 <USBD_Get_USB_Status>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008dd8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b082      	sub	sp, #8
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	460b      	mov	r3, r1
 8008dec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008df4:	78fa      	ldrb	r2, [r7, #3]
 8008df6:	4611      	mov	r1, r2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fa fb99 	bl	8003530 <HAL_PCD_EP_GetRxCount>
 8008dfe:	4603      	mov	r3, r0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e16:	79fb      	ldrb	r3, [r7, #7]
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d817      	bhi.n	8008e4c <USBD_Get_USB_Status+0x44>
 8008e1c:	a201      	add	r2, pc, #4	; (adr r2, 8008e24 <USBD_Get_USB_Status+0x1c>)
 8008e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e22:	bf00      	nop
 8008e24:	08008e35 	.word	0x08008e35
 8008e28:	08008e3b 	.word	0x08008e3b
 8008e2c:	08008e41 	.word	0x08008e41
 8008e30:	08008e47 	.word	0x08008e47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73fb      	strb	r3, [r7, #15]
    break;
 8008e38:	e00b      	b.n	8008e52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3e:	e008      	b.n	8008e52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e40:	2301      	movs	r3, #1
 8008e42:	73fb      	strb	r3, [r7, #15]
    break;
 8008e44:	e005      	b.n	8008e52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e46:	2303      	movs	r3, #3
 8008e48:	73fb      	strb	r3, [r7, #15]
    break;
 8008e4a:	e002      	b.n	8008e52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e50:	bf00      	nop
  }
  return usb_status;
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <__errno>:
 8008e60:	4b01      	ldr	r3, [pc, #4]	; (8008e68 <__errno+0x8>)
 8008e62:	6818      	ldr	r0, [r3, #0]
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	20000184 	.word	0x20000184

08008e6c <__libc_init_array>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	4e0d      	ldr	r6, [pc, #52]	; (8008ea4 <__libc_init_array+0x38>)
 8008e70:	4c0d      	ldr	r4, [pc, #52]	; (8008ea8 <__libc_init_array+0x3c>)
 8008e72:	1ba4      	subs	r4, r4, r6
 8008e74:	10a4      	asrs	r4, r4, #2
 8008e76:	2500      	movs	r5, #0
 8008e78:	42a5      	cmp	r5, r4
 8008e7a:	d109      	bne.n	8008e90 <__libc_init_array+0x24>
 8008e7c:	4e0b      	ldr	r6, [pc, #44]	; (8008eac <__libc_init_array+0x40>)
 8008e7e:	4c0c      	ldr	r4, [pc, #48]	; (8008eb0 <__libc_init_array+0x44>)
 8008e80:	f000 fc36 	bl	80096f0 <_init>
 8008e84:	1ba4      	subs	r4, r4, r6
 8008e86:	10a4      	asrs	r4, r4, #2
 8008e88:	2500      	movs	r5, #0
 8008e8a:	42a5      	cmp	r5, r4
 8008e8c:	d105      	bne.n	8008e9a <__libc_init_array+0x2e>
 8008e8e:	bd70      	pop	{r4, r5, r6, pc}
 8008e90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e94:	4798      	blx	r3
 8008e96:	3501      	adds	r5, #1
 8008e98:	e7ee      	b.n	8008e78 <__libc_init_array+0xc>
 8008e9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e9e:	4798      	blx	r3
 8008ea0:	3501      	adds	r5, #1
 8008ea2:	e7f2      	b.n	8008e8a <__libc_init_array+0x1e>
 8008ea4:	080097bc 	.word	0x080097bc
 8008ea8:	080097bc 	.word	0x080097bc
 8008eac:	080097bc 	.word	0x080097bc
 8008eb0:	080097c0 	.word	0x080097c0

08008eb4 <malloc>:
 8008eb4:	4b02      	ldr	r3, [pc, #8]	; (8008ec0 <malloc+0xc>)
 8008eb6:	4601      	mov	r1, r0
 8008eb8:	6818      	ldr	r0, [r3, #0]
 8008eba:	f000 b861 	b.w	8008f80 <_malloc_r>
 8008ebe:	bf00      	nop
 8008ec0:	20000184 	.word	0x20000184

08008ec4 <free>:
 8008ec4:	4b02      	ldr	r3, [pc, #8]	; (8008ed0 <free+0xc>)
 8008ec6:	4601      	mov	r1, r0
 8008ec8:	6818      	ldr	r0, [r3, #0]
 8008eca:	f000 b80b 	b.w	8008ee4 <_free_r>
 8008ece:	bf00      	nop
 8008ed0:	20000184 	.word	0x20000184

08008ed4 <memset>:
 8008ed4:	4402      	add	r2, r0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d100      	bne.n	8008ede <memset+0xa>
 8008edc:	4770      	bx	lr
 8008ede:	f803 1b01 	strb.w	r1, [r3], #1
 8008ee2:	e7f9      	b.n	8008ed8 <memset+0x4>

08008ee4 <_free_r>:
 8008ee4:	b538      	push	{r3, r4, r5, lr}
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	2900      	cmp	r1, #0
 8008eea:	d045      	beq.n	8008f78 <_free_r+0x94>
 8008eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef0:	1f0c      	subs	r4, r1, #4
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	bfb8      	it	lt
 8008ef6:	18e4      	addlt	r4, r4, r3
 8008ef8:	f000 f8cc 	bl	8009094 <__malloc_lock>
 8008efc:	4a1f      	ldr	r2, [pc, #124]	; (8008f7c <_free_r+0x98>)
 8008efe:	6813      	ldr	r3, [r2, #0]
 8008f00:	4610      	mov	r0, r2
 8008f02:	b933      	cbnz	r3, 8008f12 <_free_r+0x2e>
 8008f04:	6063      	str	r3, [r4, #4]
 8008f06:	6014      	str	r4, [r2, #0]
 8008f08:	4628      	mov	r0, r5
 8008f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f0e:	f000 b8c2 	b.w	8009096 <__malloc_unlock>
 8008f12:	42a3      	cmp	r3, r4
 8008f14:	d90c      	bls.n	8008f30 <_free_r+0x4c>
 8008f16:	6821      	ldr	r1, [r4, #0]
 8008f18:	1862      	adds	r2, r4, r1
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	bf04      	itt	eq
 8008f1e:	681a      	ldreq	r2, [r3, #0]
 8008f20:	685b      	ldreq	r3, [r3, #4]
 8008f22:	6063      	str	r3, [r4, #4]
 8008f24:	bf04      	itt	eq
 8008f26:	1852      	addeq	r2, r2, r1
 8008f28:	6022      	streq	r2, [r4, #0]
 8008f2a:	6004      	str	r4, [r0, #0]
 8008f2c:	e7ec      	b.n	8008f08 <_free_r+0x24>
 8008f2e:	4613      	mov	r3, r2
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	b10a      	cbz	r2, 8008f38 <_free_r+0x54>
 8008f34:	42a2      	cmp	r2, r4
 8008f36:	d9fa      	bls.n	8008f2e <_free_r+0x4a>
 8008f38:	6819      	ldr	r1, [r3, #0]
 8008f3a:	1858      	adds	r0, r3, r1
 8008f3c:	42a0      	cmp	r0, r4
 8008f3e:	d10b      	bne.n	8008f58 <_free_r+0x74>
 8008f40:	6820      	ldr	r0, [r4, #0]
 8008f42:	4401      	add	r1, r0
 8008f44:	1858      	adds	r0, r3, r1
 8008f46:	4282      	cmp	r2, r0
 8008f48:	6019      	str	r1, [r3, #0]
 8008f4a:	d1dd      	bne.n	8008f08 <_free_r+0x24>
 8008f4c:	6810      	ldr	r0, [r2, #0]
 8008f4e:	6852      	ldr	r2, [r2, #4]
 8008f50:	605a      	str	r2, [r3, #4]
 8008f52:	4401      	add	r1, r0
 8008f54:	6019      	str	r1, [r3, #0]
 8008f56:	e7d7      	b.n	8008f08 <_free_r+0x24>
 8008f58:	d902      	bls.n	8008f60 <_free_r+0x7c>
 8008f5a:	230c      	movs	r3, #12
 8008f5c:	602b      	str	r3, [r5, #0]
 8008f5e:	e7d3      	b.n	8008f08 <_free_r+0x24>
 8008f60:	6820      	ldr	r0, [r4, #0]
 8008f62:	1821      	adds	r1, r4, r0
 8008f64:	428a      	cmp	r2, r1
 8008f66:	bf04      	itt	eq
 8008f68:	6811      	ldreq	r1, [r2, #0]
 8008f6a:	6852      	ldreq	r2, [r2, #4]
 8008f6c:	6062      	str	r2, [r4, #4]
 8008f6e:	bf04      	itt	eq
 8008f70:	1809      	addeq	r1, r1, r0
 8008f72:	6021      	streq	r1, [r4, #0]
 8008f74:	605c      	str	r4, [r3, #4]
 8008f76:	e7c7      	b.n	8008f08 <_free_r+0x24>
 8008f78:	bd38      	pop	{r3, r4, r5, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000298 	.word	0x20000298

08008f80 <_malloc_r>:
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	1ccd      	adds	r5, r1, #3
 8008f84:	f025 0503 	bic.w	r5, r5, #3
 8008f88:	3508      	adds	r5, #8
 8008f8a:	2d0c      	cmp	r5, #12
 8008f8c:	bf38      	it	cc
 8008f8e:	250c      	movcc	r5, #12
 8008f90:	2d00      	cmp	r5, #0
 8008f92:	4606      	mov	r6, r0
 8008f94:	db01      	blt.n	8008f9a <_malloc_r+0x1a>
 8008f96:	42a9      	cmp	r1, r5
 8008f98:	d903      	bls.n	8008fa2 <_malloc_r+0x22>
 8008f9a:	230c      	movs	r3, #12
 8008f9c:	6033      	str	r3, [r6, #0]
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	bd70      	pop	{r4, r5, r6, pc}
 8008fa2:	f000 f877 	bl	8009094 <__malloc_lock>
 8008fa6:	4a21      	ldr	r2, [pc, #132]	; (800902c <_malloc_r+0xac>)
 8008fa8:	6814      	ldr	r4, [r2, #0]
 8008faa:	4621      	mov	r1, r4
 8008fac:	b991      	cbnz	r1, 8008fd4 <_malloc_r+0x54>
 8008fae:	4c20      	ldr	r4, [pc, #128]	; (8009030 <_malloc_r+0xb0>)
 8008fb0:	6823      	ldr	r3, [r4, #0]
 8008fb2:	b91b      	cbnz	r3, 8008fbc <_malloc_r+0x3c>
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f000 f83d 	bl	8009034 <_sbrk_r>
 8008fba:	6020      	str	r0, [r4, #0]
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f000 f838 	bl	8009034 <_sbrk_r>
 8008fc4:	1c43      	adds	r3, r0, #1
 8008fc6:	d124      	bne.n	8009012 <_malloc_r+0x92>
 8008fc8:	230c      	movs	r3, #12
 8008fca:	6033      	str	r3, [r6, #0]
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f000 f862 	bl	8009096 <__malloc_unlock>
 8008fd2:	e7e4      	b.n	8008f9e <_malloc_r+0x1e>
 8008fd4:	680b      	ldr	r3, [r1, #0]
 8008fd6:	1b5b      	subs	r3, r3, r5
 8008fd8:	d418      	bmi.n	800900c <_malloc_r+0x8c>
 8008fda:	2b0b      	cmp	r3, #11
 8008fdc:	d90f      	bls.n	8008ffe <_malloc_r+0x7e>
 8008fde:	600b      	str	r3, [r1, #0]
 8008fe0:	50cd      	str	r5, [r1, r3]
 8008fe2:	18cc      	adds	r4, r1, r3
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f000 f856 	bl	8009096 <__malloc_unlock>
 8008fea:	f104 000b 	add.w	r0, r4, #11
 8008fee:	1d23      	adds	r3, r4, #4
 8008ff0:	f020 0007 	bic.w	r0, r0, #7
 8008ff4:	1ac3      	subs	r3, r0, r3
 8008ff6:	d0d3      	beq.n	8008fa0 <_malloc_r+0x20>
 8008ff8:	425a      	negs	r2, r3
 8008ffa:	50e2      	str	r2, [r4, r3]
 8008ffc:	e7d0      	b.n	8008fa0 <_malloc_r+0x20>
 8008ffe:	428c      	cmp	r4, r1
 8009000:	684b      	ldr	r3, [r1, #4]
 8009002:	bf16      	itet	ne
 8009004:	6063      	strne	r3, [r4, #4]
 8009006:	6013      	streq	r3, [r2, #0]
 8009008:	460c      	movne	r4, r1
 800900a:	e7eb      	b.n	8008fe4 <_malloc_r+0x64>
 800900c:	460c      	mov	r4, r1
 800900e:	6849      	ldr	r1, [r1, #4]
 8009010:	e7cc      	b.n	8008fac <_malloc_r+0x2c>
 8009012:	1cc4      	adds	r4, r0, #3
 8009014:	f024 0403 	bic.w	r4, r4, #3
 8009018:	42a0      	cmp	r0, r4
 800901a:	d005      	beq.n	8009028 <_malloc_r+0xa8>
 800901c:	1a21      	subs	r1, r4, r0
 800901e:	4630      	mov	r0, r6
 8009020:	f000 f808 	bl	8009034 <_sbrk_r>
 8009024:	3001      	adds	r0, #1
 8009026:	d0cf      	beq.n	8008fc8 <_malloc_r+0x48>
 8009028:	6025      	str	r5, [r4, #0]
 800902a:	e7db      	b.n	8008fe4 <_malloc_r+0x64>
 800902c:	20000298 	.word	0x20000298
 8009030:	2000029c 	.word	0x2000029c

08009034 <_sbrk_r>:
 8009034:	b538      	push	{r3, r4, r5, lr}
 8009036:	4c06      	ldr	r4, [pc, #24]	; (8009050 <_sbrk_r+0x1c>)
 8009038:	2300      	movs	r3, #0
 800903a:	4605      	mov	r5, r0
 800903c:	4608      	mov	r0, r1
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	f7f8 fb6e 	bl	8001720 <_sbrk>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d102      	bne.n	800904e <_sbrk_r+0x1a>
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	b103      	cbz	r3, 800904e <_sbrk_r+0x1a>
 800904c:	602b      	str	r3, [r5, #0]
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	20001cb0 	.word	0x20001cb0

08009054 <siprintf>:
 8009054:	b40e      	push	{r1, r2, r3}
 8009056:	b500      	push	{lr}
 8009058:	b09c      	sub	sp, #112	; 0x70
 800905a:	ab1d      	add	r3, sp, #116	; 0x74
 800905c:	9002      	str	r0, [sp, #8]
 800905e:	9006      	str	r0, [sp, #24]
 8009060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009064:	4809      	ldr	r0, [pc, #36]	; (800908c <siprintf+0x38>)
 8009066:	9107      	str	r1, [sp, #28]
 8009068:	9104      	str	r1, [sp, #16]
 800906a:	4909      	ldr	r1, [pc, #36]	; (8009090 <siprintf+0x3c>)
 800906c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009070:	9105      	str	r1, [sp, #20]
 8009072:	6800      	ldr	r0, [r0, #0]
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	a902      	add	r1, sp, #8
 8009078:	f000 f868 	bl	800914c <_svfiprintf_r>
 800907c:	9b02      	ldr	r3, [sp, #8]
 800907e:	2200      	movs	r2, #0
 8009080:	701a      	strb	r2, [r3, #0]
 8009082:	b01c      	add	sp, #112	; 0x70
 8009084:	f85d eb04 	ldr.w	lr, [sp], #4
 8009088:	b003      	add	sp, #12
 800908a:	4770      	bx	lr
 800908c:	20000184 	.word	0x20000184
 8009090:	ffff0208 	.word	0xffff0208

08009094 <__malloc_lock>:
 8009094:	4770      	bx	lr

08009096 <__malloc_unlock>:
 8009096:	4770      	bx	lr

08009098 <__ssputs_r>:
 8009098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800909c:	688e      	ldr	r6, [r1, #8]
 800909e:	429e      	cmp	r6, r3
 80090a0:	4682      	mov	sl, r0
 80090a2:	460c      	mov	r4, r1
 80090a4:	4690      	mov	r8, r2
 80090a6:	4699      	mov	r9, r3
 80090a8:	d837      	bhi.n	800911a <__ssputs_r+0x82>
 80090aa:	898a      	ldrh	r2, [r1, #12]
 80090ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090b0:	d031      	beq.n	8009116 <__ssputs_r+0x7e>
 80090b2:	6825      	ldr	r5, [r4, #0]
 80090b4:	6909      	ldr	r1, [r1, #16]
 80090b6:	1a6f      	subs	r7, r5, r1
 80090b8:	6965      	ldr	r5, [r4, #20]
 80090ba:	2302      	movs	r3, #2
 80090bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80090c4:	f109 0301 	add.w	r3, r9, #1
 80090c8:	443b      	add	r3, r7
 80090ca:	429d      	cmp	r5, r3
 80090cc:	bf38      	it	cc
 80090ce:	461d      	movcc	r5, r3
 80090d0:	0553      	lsls	r3, r2, #21
 80090d2:	d530      	bpl.n	8009136 <__ssputs_r+0x9e>
 80090d4:	4629      	mov	r1, r5
 80090d6:	f7ff ff53 	bl	8008f80 <_malloc_r>
 80090da:	4606      	mov	r6, r0
 80090dc:	b950      	cbnz	r0, 80090f4 <__ssputs_r+0x5c>
 80090de:	230c      	movs	r3, #12
 80090e0:	f8ca 3000 	str.w	r3, [sl]
 80090e4:	89a3      	ldrh	r3, [r4, #12]
 80090e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ea:	81a3      	strh	r3, [r4, #12]
 80090ec:	f04f 30ff 	mov.w	r0, #4294967295
 80090f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f4:	463a      	mov	r2, r7
 80090f6:	6921      	ldr	r1, [r4, #16]
 80090f8:	f000 faa8 	bl	800964c <memcpy>
 80090fc:	89a3      	ldrh	r3, [r4, #12]
 80090fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009106:	81a3      	strh	r3, [r4, #12]
 8009108:	6126      	str	r6, [r4, #16]
 800910a:	6165      	str	r5, [r4, #20]
 800910c:	443e      	add	r6, r7
 800910e:	1bed      	subs	r5, r5, r7
 8009110:	6026      	str	r6, [r4, #0]
 8009112:	60a5      	str	r5, [r4, #8]
 8009114:	464e      	mov	r6, r9
 8009116:	454e      	cmp	r6, r9
 8009118:	d900      	bls.n	800911c <__ssputs_r+0x84>
 800911a:	464e      	mov	r6, r9
 800911c:	4632      	mov	r2, r6
 800911e:	4641      	mov	r1, r8
 8009120:	6820      	ldr	r0, [r4, #0]
 8009122:	f000 fa9e 	bl	8009662 <memmove>
 8009126:	68a3      	ldr	r3, [r4, #8]
 8009128:	1b9b      	subs	r3, r3, r6
 800912a:	60a3      	str	r3, [r4, #8]
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	441e      	add	r6, r3
 8009130:	6026      	str	r6, [r4, #0]
 8009132:	2000      	movs	r0, #0
 8009134:	e7dc      	b.n	80090f0 <__ssputs_r+0x58>
 8009136:	462a      	mov	r2, r5
 8009138:	f000 faac 	bl	8009694 <_realloc_r>
 800913c:	4606      	mov	r6, r0
 800913e:	2800      	cmp	r0, #0
 8009140:	d1e2      	bne.n	8009108 <__ssputs_r+0x70>
 8009142:	6921      	ldr	r1, [r4, #16]
 8009144:	4650      	mov	r0, sl
 8009146:	f7ff fecd 	bl	8008ee4 <_free_r>
 800914a:	e7c8      	b.n	80090de <__ssputs_r+0x46>

0800914c <_svfiprintf_r>:
 800914c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009150:	461d      	mov	r5, r3
 8009152:	898b      	ldrh	r3, [r1, #12]
 8009154:	061f      	lsls	r7, r3, #24
 8009156:	b09d      	sub	sp, #116	; 0x74
 8009158:	4680      	mov	r8, r0
 800915a:	460c      	mov	r4, r1
 800915c:	4616      	mov	r6, r2
 800915e:	d50f      	bpl.n	8009180 <_svfiprintf_r+0x34>
 8009160:	690b      	ldr	r3, [r1, #16]
 8009162:	b96b      	cbnz	r3, 8009180 <_svfiprintf_r+0x34>
 8009164:	2140      	movs	r1, #64	; 0x40
 8009166:	f7ff ff0b 	bl	8008f80 <_malloc_r>
 800916a:	6020      	str	r0, [r4, #0]
 800916c:	6120      	str	r0, [r4, #16]
 800916e:	b928      	cbnz	r0, 800917c <_svfiprintf_r+0x30>
 8009170:	230c      	movs	r3, #12
 8009172:	f8c8 3000 	str.w	r3, [r8]
 8009176:	f04f 30ff 	mov.w	r0, #4294967295
 800917a:	e0c8      	b.n	800930e <_svfiprintf_r+0x1c2>
 800917c:	2340      	movs	r3, #64	; 0x40
 800917e:	6163      	str	r3, [r4, #20]
 8009180:	2300      	movs	r3, #0
 8009182:	9309      	str	r3, [sp, #36]	; 0x24
 8009184:	2320      	movs	r3, #32
 8009186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800918a:	2330      	movs	r3, #48	; 0x30
 800918c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009190:	9503      	str	r5, [sp, #12]
 8009192:	f04f 0b01 	mov.w	fp, #1
 8009196:	4637      	mov	r7, r6
 8009198:	463d      	mov	r5, r7
 800919a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800919e:	b10b      	cbz	r3, 80091a4 <_svfiprintf_r+0x58>
 80091a0:	2b25      	cmp	r3, #37	; 0x25
 80091a2:	d13e      	bne.n	8009222 <_svfiprintf_r+0xd6>
 80091a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80091a8:	d00b      	beq.n	80091c2 <_svfiprintf_r+0x76>
 80091aa:	4653      	mov	r3, sl
 80091ac:	4632      	mov	r2, r6
 80091ae:	4621      	mov	r1, r4
 80091b0:	4640      	mov	r0, r8
 80091b2:	f7ff ff71 	bl	8009098 <__ssputs_r>
 80091b6:	3001      	adds	r0, #1
 80091b8:	f000 80a4 	beq.w	8009304 <_svfiprintf_r+0x1b8>
 80091bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091be:	4453      	add	r3, sl
 80091c0:	9309      	str	r3, [sp, #36]	; 0x24
 80091c2:	783b      	ldrb	r3, [r7, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 809d 	beq.w	8009304 <_svfiprintf_r+0x1b8>
 80091ca:	2300      	movs	r3, #0
 80091cc:	f04f 32ff 	mov.w	r2, #4294967295
 80091d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091d4:	9304      	str	r3, [sp, #16]
 80091d6:	9307      	str	r3, [sp, #28]
 80091d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091dc:	931a      	str	r3, [sp, #104]	; 0x68
 80091de:	462f      	mov	r7, r5
 80091e0:	2205      	movs	r2, #5
 80091e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80091e6:	4850      	ldr	r0, [pc, #320]	; (8009328 <_svfiprintf_r+0x1dc>)
 80091e8:	f7f6 fff2 	bl	80001d0 <memchr>
 80091ec:	9b04      	ldr	r3, [sp, #16]
 80091ee:	b9d0      	cbnz	r0, 8009226 <_svfiprintf_r+0xda>
 80091f0:	06d9      	lsls	r1, r3, #27
 80091f2:	bf44      	itt	mi
 80091f4:	2220      	movmi	r2, #32
 80091f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80091fa:	071a      	lsls	r2, r3, #28
 80091fc:	bf44      	itt	mi
 80091fe:	222b      	movmi	r2, #43	; 0x2b
 8009200:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009204:	782a      	ldrb	r2, [r5, #0]
 8009206:	2a2a      	cmp	r2, #42	; 0x2a
 8009208:	d015      	beq.n	8009236 <_svfiprintf_r+0xea>
 800920a:	9a07      	ldr	r2, [sp, #28]
 800920c:	462f      	mov	r7, r5
 800920e:	2000      	movs	r0, #0
 8009210:	250a      	movs	r5, #10
 8009212:	4639      	mov	r1, r7
 8009214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009218:	3b30      	subs	r3, #48	; 0x30
 800921a:	2b09      	cmp	r3, #9
 800921c:	d94d      	bls.n	80092ba <_svfiprintf_r+0x16e>
 800921e:	b1b8      	cbz	r0, 8009250 <_svfiprintf_r+0x104>
 8009220:	e00f      	b.n	8009242 <_svfiprintf_r+0xf6>
 8009222:	462f      	mov	r7, r5
 8009224:	e7b8      	b.n	8009198 <_svfiprintf_r+0x4c>
 8009226:	4a40      	ldr	r2, [pc, #256]	; (8009328 <_svfiprintf_r+0x1dc>)
 8009228:	1a80      	subs	r0, r0, r2
 800922a:	fa0b f000 	lsl.w	r0, fp, r0
 800922e:	4318      	orrs	r0, r3
 8009230:	9004      	str	r0, [sp, #16]
 8009232:	463d      	mov	r5, r7
 8009234:	e7d3      	b.n	80091de <_svfiprintf_r+0x92>
 8009236:	9a03      	ldr	r2, [sp, #12]
 8009238:	1d11      	adds	r1, r2, #4
 800923a:	6812      	ldr	r2, [r2, #0]
 800923c:	9103      	str	r1, [sp, #12]
 800923e:	2a00      	cmp	r2, #0
 8009240:	db01      	blt.n	8009246 <_svfiprintf_r+0xfa>
 8009242:	9207      	str	r2, [sp, #28]
 8009244:	e004      	b.n	8009250 <_svfiprintf_r+0x104>
 8009246:	4252      	negs	r2, r2
 8009248:	f043 0302 	orr.w	r3, r3, #2
 800924c:	9207      	str	r2, [sp, #28]
 800924e:	9304      	str	r3, [sp, #16]
 8009250:	783b      	ldrb	r3, [r7, #0]
 8009252:	2b2e      	cmp	r3, #46	; 0x2e
 8009254:	d10c      	bne.n	8009270 <_svfiprintf_r+0x124>
 8009256:	787b      	ldrb	r3, [r7, #1]
 8009258:	2b2a      	cmp	r3, #42	; 0x2a
 800925a:	d133      	bne.n	80092c4 <_svfiprintf_r+0x178>
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	1d1a      	adds	r2, r3, #4
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	9203      	str	r2, [sp, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	bfb8      	it	lt
 8009268:	f04f 33ff 	movlt.w	r3, #4294967295
 800926c:	3702      	adds	r7, #2
 800926e:	9305      	str	r3, [sp, #20]
 8009270:	4d2e      	ldr	r5, [pc, #184]	; (800932c <_svfiprintf_r+0x1e0>)
 8009272:	7839      	ldrb	r1, [r7, #0]
 8009274:	2203      	movs	r2, #3
 8009276:	4628      	mov	r0, r5
 8009278:	f7f6 ffaa 	bl	80001d0 <memchr>
 800927c:	b138      	cbz	r0, 800928e <_svfiprintf_r+0x142>
 800927e:	2340      	movs	r3, #64	; 0x40
 8009280:	1b40      	subs	r0, r0, r5
 8009282:	fa03 f000 	lsl.w	r0, r3, r0
 8009286:	9b04      	ldr	r3, [sp, #16]
 8009288:	4303      	orrs	r3, r0
 800928a:	3701      	adds	r7, #1
 800928c:	9304      	str	r3, [sp, #16]
 800928e:	7839      	ldrb	r1, [r7, #0]
 8009290:	4827      	ldr	r0, [pc, #156]	; (8009330 <_svfiprintf_r+0x1e4>)
 8009292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009296:	2206      	movs	r2, #6
 8009298:	1c7e      	adds	r6, r7, #1
 800929a:	f7f6 ff99 	bl	80001d0 <memchr>
 800929e:	2800      	cmp	r0, #0
 80092a0:	d038      	beq.n	8009314 <_svfiprintf_r+0x1c8>
 80092a2:	4b24      	ldr	r3, [pc, #144]	; (8009334 <_svfiprintf_r+0x1e8>)
 80092a4:	bb13      	cbnz	r3, 80092ec <_svfiprintf_r+0x1a0>
 80092a6:	9b03      	ldr	r3, [sp, #12]
 80092a8:	3307      	adds	r3, #7
 80092aa:	f023 0307 	bic.w	r3, r3, #7
 80092ae:	3308      	adds	r3, #8
 80092b0:	9303      	str	r3, [sp, #12]
 80092b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b4:	444b      	add	r3, r9
 80092b6:	9309      	str	r3, [sp, #36]	; 0x24
 80092b8:	e76d      	b.n	8009196 <_svfiprintf_r+0x4a>
 80092ba:	fb05 3202 	mla	r2, r5, r2, r3
 80092be:	2001      	movs	r0, #1
 80092c0:	460f      	mov	r7, r1
 80092c2:	e7a6      	b.n	8009212 <_svfiprintf_r+0xc6>
 80092c4:	2300      	movs	r3, #0
 80092c6:	3701      	adds	r7, #1
 80092c8:	9305      	str	r3, [sp, #20]
 80092ca:	4619      	mov	r1, r3
 80092cc:	250a      	movs	r5, #10
 80092ce:	4638      	mov	r0, r7
 80092d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092d4:	3a30      	subs	r2, #48	; 0x30
 80092d6:	2a09      	cmp	r2, #9
 80092d8:	d903      	bls.n	80092e2 <_svfiprintf_r+0x196>
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d0c8      	beq.n	8009270 <_svfiprintf_r+0x124>
 80092de:	9105      	str	r1, [sp, #20]
 80092e0:	e7c6      	b.n	8009270 <_svfiprintf_r+0x124>
 80092e2:	fb05 2101 	mla	r1, r5, r1, r2
 80092e6:	2301      	movs	r3, #1
 80092e8:	4607      	mov	r7, r0
 80092ea:	e7f0      	b.n	80092ce <_svfiprintf_r+0x182>
 80092ec:	ab03      	add	r3, sp, #12
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	4622      	mov	r2, r4
 80092f2:	4b11      	ldr	r3, [pc, #68]	; (8009338 <_svfiprintf_r+0x1ec>)
 80092f4:	a904      	add	r1, sp, #16
 80092f6:	4640      	mov	r0, r8
 80092f8:	f3af 8000 	nop.w
 80092fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009300:	4681      	mov	r9, r0
 8009302:	d1d6      	bne.n	80092b2 <_svfiprintf_r+0x166>
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	065b      	lsls	r3, r3, #25
 8009308:	f53f af35 	bmi.w	8009176 <_svfiprintf_r+0x2a>
 800930c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800930e:	b01d      	add	sp, #116	; 0x74
 8009310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009314:	ab03      	add	r3, sp, #12
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	4622      	mov	r2, r4
 800931a:	4b07      	ldr	r3, [pc, #28]	; (8009338 <_svfiprintf_r+0x1ec>)
 800931c:	a904      	add	r1, sp, #16
 800931e:	4640      	mov	r0, r8
 8009320:	f000 f882 	bl	8009428 <_printf_i>
 8009324:	e7ea      	b.n	80092fc <_svfiprintf_r+0x1b0>
 8009326:	bf00      	nop
 8009328:	08009780 	.word	0x08009780
 800932c:	08009786 	.word	0x08009786
 8009330:	0800978a 	.word	0x0800978a
 8009334:	00000000 	.word	0x00000000
 8009338:	08009099 	.word	0x08009099

0800933c <_printf_common>:
 800933c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009340:	4691      	mov	r9, r2
 8009342:	461f      	mov	r7, r3
 8009344:	688a      	ldr	r2, [r1, #8]
 8009346:	690b      	ldr	r3, [r1, #16]
 8009348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800934c:	4293      	cmp	r3, r2
 800934e:	bfb8      	it	lt
 8009350:	4613      	movlt	r3, r2
 8009352:	f8c9 3000 	str.w	r3, [r9]
 8009356:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800935a:	4606      	mov	r6, r0
 800935c:	460c      	mov	r4, r1
 800935e:	b112      	cbz	r2, 8009366 <_printf_common+0x2a>
 8009360:	3301      	adds	r3, #1
 8009362:	f8c9 3000 	str.w	r3, [r9]
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	0699      	lsls	r1, r3, #26
 800936a:	bf42      	ittt	mi
 800936c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009370:	3302      	addmi	r3, #2
 8009372:	f8c9 3000 	strmi.w	r3, [r9]
 8009376:	6825      	ldr	r5, [r4, #0]
 8009378:	f015 0506 	ands.w	r5, r5, #6
 800937c:	d107      	bne.n	800938e <_printf_common+0x52>
 800937e:	f104 0a19 	add.w	sl, r4, #25
 8009382:	68e3      	ldr	r3, [r4, #12]
 8009384:	f8d9 2000 	ldr.w	r2, [r9]
 8009388:	1a9b      	subs	r3, r3, r2
 800938a:	42ab      	cmp	r3, r5
 800938c:	dc28      	bgt.n	80093e0 <_printf_common+0xa4>
 800938e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009392:	6822      	ldr	r2, [r4, #0]
 8009394:	3300      	adds	r3, #0
 8009396:	bf18      	it	ne
 8009398:	2301      	movne	r3, #1
 800939a:	0692      	lsls	r2, r2, #26
 800939c:	d42d      	bmi.n	80093fa <_printf_common+0xbe>
 800939e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093a2:	4639      	mov	r1, r7
 80093a4:	4630      	mov	r0, r6
 80093a6:	47c0      	blx	r8
 80093a8:	3001      	adds	r0, #1
 80093aa:	d020      	beq.n	80093ee <_printf_common+0xb2>
 80093ac:	6823      	ldr	r3, [r4, #0]
 80093ae:	68e5      	ldr	r5, [r4, #12]
 80093b0:	f8d9 2000 	ldr.w	r2, [r9]
 80093b4:	f003 0306 	and.w	r3, r3, #6
 80093b8:	2b04      	cmp	r3, #4
 80093ba:	bf08      	it	eq
 80093bc:	1aad      	subeq	r5, r5, r2
 80093be:	68a3      	ldr	r3, [r4, #8]
 80093c0:	6922      	ldr	r2, [r4, #16]
 80093c2:	bf0c      	ite	eq
 80093c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093c8:	2500      	movne	r5, #0
 80093ca:	4293      	cmp	r3, r2
 80093cc:	bfc4      	itt	gt
 80093ce:	1a9b      	subgt	r3, r3, r2
 80093d0:	18ed      	addgt	r5, r5, r3
 80093d2:	f04f 0900 	mov.w	r9, #0
 80093d6:	341a      	adds	r4, #26
 80093d8:	454d      	cmp	r5, r9
 80093da:	d11a      	bne.n	8009412 <_printf_common+0xd6>
 80093dc:	2000      	movs	r0, #0
 80093de:	e008      	b.n	80093f2 <_printf_common+0xb6>
 80093e0:	2301      	movs	r3, #1
 80093e2:	4652      	mov	r2, sl
 80093e4:	4639      	mov	r1, r7
 80093e6:	4630      	mov	r0, r6
 80093e8:	47c0      	blx	r8
 80093ea:	3001      	adds	r0, #1
 80093ec:	d103      	bne.n	80093f6 <_printf_common+0xba>
 80093ee:	f04f 30ff 	mov.w	r0, #4294967295
 80093f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f6:	3501      	adds	r5, #1
 80093f8:	e7c3      	b.n	8009382 <_printf_common+0x46>
 80093fa:	18e1      	adds	r1, r4, r3
 80093fc:	1c5a      	adds	r2, r3, #1
 80093fe:	2030      	movs	r0, #48	; 0x30
 8009400:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009404:	4422      	add	r2, r4
 8009406:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800940a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800940e:	3302      	adds	r3, #2
 8009410:	e7c5      	b.n	800939e <_printf_common+0x62>
 8009412:	2301      	movs	r3, #1
 8009414:	4622      	mov	r2, r4
 8009416:	4639      	mov	r1, r7
 8009418:	4630      	mov	r0, r6
 800941a:	47c0      	blx	r8
 800941c:	3001      	adds	r0, #1
 800941e:	d0e6      	beq.n	80093ee <_printf_common+0xb2>
 8009420:	f109 0901 	add.w	r9, r9, #1
 8009424:	e7d8      	b.n	80093d8 <_printf_common+0x9c>
	...

08009428 <_printf_i>:
 8009428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800942c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009430:	460c      	mov	r4, r1
 8009432:	7e09      	ldrb	r1, [r1, #24]
 8009434:	b085      	sub	sp, #20
 8009436:	296e      	cmp	r1, #110	; 0x6e
 8009438:	4617      	mov	r7, r2
 800943a:	4606      	mov	r6, r0
 800943c:	4698      	mov	r8, r3
 800943e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009440:	f000 80b3 	beq.w	80095aa <_printf_i+0x182>
 8009444:	d822      	bhi.n	800948c <_printf_i+0x64>
 8009446:	2963      	cmp	r1, #99	; 0x63
 8009448:	d036      	beq.n	80094b8 <_printf_i+0x90>
 800944a:	d80a      	bhi.n	8009462 <_printf_i+0x3a>
 800944c:	2900      	cmp	r1, #0
 800944e:	f000 80b9 	beq.w	80095c4 <_printf_i+0x19c>
 8009452:	2958      	cmp	r1, #88	; 0x58
 8009454:	f000 8083 	beq.w	800955e <_printf_i+0x136>
 8009458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800945c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009460:	e032      	b.n	80094c8 <_printf_i+0xa0>
 8009462:	2964      	cmp	r1, #100	; 0x64
 8009464:	d001      	beq.n	800946a <_printf_i+0x42>
 8009466:	2969      	cmp	r1, #105	; 0x69
 8009468:	d1f6      	bne.n	8009458 <_printf_i+0x30>
 800946a:	6820      	ldr	r0, [r4, #0]
 800946c:	6813      	ldr	r3, [r2, #0]
 800946e:	0605      	lsls	r5, r0, #24
 8009470:	f103 0104 	add.w	r1, r3, #4
 8009474:	d52a      	bpl.n	80094cc <_printf_i+0xa4>
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6011      	str	r1, [r2, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	da03      	bge.n	8009486 <_printf_i+0x5e>
 800947e:	222d      	movs	r2, #45	; 0x2d
 8009480:	425b      	negs	r3, r3
 8009482:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009486:	486f      	ldr	r0, [pc, #444]	; (8009644 <_printf_i+0x21c>)
 8009488:	220a      	movs	r2, #10
 800948a:	e039      	b.n	8009500 <_printf_i+0xd8>
 800948c:	2973      	cmp	r1, #115	; 0x73
 800948e:	f000 809d 	beq.w	80095cc <_printf_i+0x1a4>
 8009492:	d808      	bhi.n	80094a6 <_printf_i+0x7e>
 8009494:	296f      	cmp	r1, #111	; 0x6f
 8009496:	d020      	beq.n	80094da <_printf_i+0xb2>
 8009498:	2970      	cmp	r1, #112	; 0x70
 800949a:	d1dd      	bne.n	8009458 <_printf_i+0x30>
 800949c:	6823      	ldr	r3, [r4, #0]
 800949e:	f043 0320 	orr.w	r3, r3, #32
 80094a2:	6023      	str	r3, [r4, #0]
 80094a4:	e003      	b.n	80094ae <_printf_i+0x86>
 80094a6:	2975      	cmp	r1, #117	; 0x75
 80094a8:	d017      	beq.n	80094da <_printf_i+0xb2>
 80094aa:	2978      	cmp	r1, #120	; 0x78
 80094ac:	d1d4      	bne.n	8009458 <_printf_i+0x30>
 80094ae:	2378      	movs	r3, #120	; 0x78
 80094b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094b4:	4864      	ldr	r0, [pc, #400]	; (8009648 <_printf_i+0x220>)
 80094b6:	e055      	b.n	8009564 <_printf_i+0x13c>
 80094b8:	6813      	ldr	r3, [r2, #0]
 80094ba:	1d19      	adds	r1, r3, #4
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6011      	str	r1, [r2, #0]
 80094c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094c8:	2301      	movs	r3, #1
 80094ca:	e08c      	b.n	80095e6 <_printf_i+0x1be>
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6011      	str	r1, [r2, #0]
 80094d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094d4:	bf18      	it	ne
 80094d6:	b21b      	sxthne	r3, r3
 80094d8:	e7cf      	b.n	800947a <_printf_i+0x52>
 80094da:	6813      	ldr	r3, [r2, #0]
 80094dc:	6825      	ldr	r5, [r4, #0]
 80094de:	1d18      	adds	r0, r3, #4
 80094e0:	6010      	str	r0, [r2, #0]
 80094e2:	0628      	lsls	r0, r5, #24
 80094e4:	d501      	bpl.n	80094ea <_printf_i+0xc2>
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	e002      	b.n	80094f0 <_printf_i+0xc8>
 80094ea:	0668      	lsls	r0, r5, #25
 80094ec:	d5fb      	bpl.n	80094e6 <_printf_i+0xbe>
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	4854      	ldr	r0, [pc, #336]	; (8009644 <_printf_i+0x21c>)
 80094f2:	296f      	cmp	r1, #111	; 0x6f
 80094f4:	bf14      	ite	ne
 80094f6:	220a      	movne	r2, #10
 80094f8:	2208      	moveq	r2, #8
 80094fa:	2100      	movs	r1, #0
 80094fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009500:	6865      	ldr	r5, [r4, #4]
 8009502:	60a5      	str	r5, [r4, #8]
 8009504:	2d00      	cmp	r5, #0
 8009506:	f2c0 8095 	blt.w	8009634 <_printf_i+0x20c>
 800950a:	6821      	ldr	r1, [r4, #0]
 800950c:	f021 0104 	bic.w	r1, r1, #4
 8009510:	6021      	str	r1, [r4, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d13d      	bne.n	8009592 <_printf_i+0x16a>
 8009516:	2d00      	cmp	r5, #0
 8009518:	f040 808e 	bne.w	8009638 <_printf_i+0x210>
 800951c:	4665      	mov	r5, ip
 800951e:	2a08      	cmp	r2, #8
 8009520:	d10b      	bne.n	800953a <_printf_i+0x112>
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	07db      	lsls	r3, r3, #31
 8009526:	d508      	bpl.n	800953a <_printf_i+0x112>
 8009528:	6923      	ldr	r3, [r4, #16]
 800952a:	6862      	ldr	r2, [r4, #4]
 800952c:	429a      	cmp	r2, r3
 800952e:	bfde      	ittt	le
 8009530:	2330      	movle	r3, #48	; 0x30
 8009532:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009536:	f105 35ff 	addle.w	r5, r5, #4294967295
 800953a:	ebac 0305 	sub.w	r3, ip, r5
 800953e:	6123      	str	r3, [r4, #16]
 8009540:	f8cd 8000 	str.w	r8, [sp]
 8009544:	463b      	mov	r3, r7
 8009546:	aa03      	add	r2, sp, #12
 8009548:	4621      	mov	r1, r4
 800954a:	4630      	mov	r0, r6
 800954c:	f7ff fef6 	bl	800933c <_printf_common>
 8009550:	3001      	adds	r0, #1
 8009552:	d14d      	bne.n	80095f0 <_printf_i+0x1c8>
 8009554:	f04f 30ff 	mov.w	r0, #4294967295
 8009558:	b005      	add	sp, #20
 800955a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800955e:	4839      	ldr	r0, [pc, #228]	; (8009644 <_printf_i+0x21c>)
 8009560:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009564:	6813      	ldr	r3, [r2, #0]
 8009566:	6821      	ldr	r1, [r4, #0]
 8009568:	1d1d      	adds	r5, r3, #4
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6015      	str	r5, [r2, #0]
 800956e:	060a      	lsls	r2, r1, #24
 8009570:	d50b      	bpl.n	800958a <_printf_i+0x162>
 8009572:	07ca      	lsls	r2, r1, #31
 8009574:	bf44      	itt	mi
 8009576:	f041 0120 	orrmi.w	r1, r1, #32
 800957a:	6021      	strmi	r1, [r4, #0]
 800957c:	b91b      	cbnz	r3, 8009586 <_printf_i+0x15e>
 800957e:	6822      	ldr	r2, [r4, #0]
 8009580:	f022 0220 	bic.w	r2, r2, #32
 8009584:	6022      	str	r2, [r4, #0]
 8009586:	2210      	movs	r2, #16
 8009588:	e7b7      	b.n	80094fa <_printf_i+0xd2>
 800958a:	064d      	lsls	r5, r1, #25
 800958c:	bf48      	it	mi
 800958e:	b29b      	uxthmi	r3, r3
 8009590:	e7ef      	b.n	8009572 <_printf_i+0x14a>
 8009592:	4665      	mov	r5, ip
 8009594:	fbb3 f1f2 	udiv	r1, r3, r2
 8009598:	fb02 3311 	mls	r3, r2, r1, r3
 800959c:	5cc3      	ldrb	r3, [r0, r3]
 800959e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80095a2:	460b      	mov	r3, r1
 80095a4:	2900      	cmp	r1, #0
 80095a6:	d1f5      	bne.n	8009594 <_printf_i+0x16c>
 80095a8:	e7b9      	b.n	800951e <_printf_i+0xf6>
 80095aa:	6813      	ldr	r3, [r2, #0]
 80095ac:	6825      	ldr	r5, [r4, #0]
 80095ae:	6961      	ldr	r1, [r4, #20]
 80095b0:	1d18      	adds	r0, r3, #4
 80095b2:	6010      	str	r0, [r2, #0]
 80095b4:	0628      	lsls	r0, r5, #24
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	d501      	bpl.n	80095be <_printf_i+0x196>
 80095ba:	6019      	str	r1, [r3, #0]
 80095bc:	e002      	b.n	80095c4 <_printf_i+0x19c>
 80095be:	066a      	lsls	r2, r5, #25
 80095c0:	d5fb      	bpl.n	80095ba <_printf_i+0x192>
 80095c2:	8019      	strh	r1, [r3, #0]
 80095c4:	2300      	movs	r3, #0
 80095c6:	6123      	str	r3, [r4, #16]
 80095c8:	4665      	mov	r5, ip
 80095ca:	e7b9      	b.n	8009540 <_printf_i+0x118>
 80095cc:	6813      	ldr	r3, [r2, #0]
 80095ce:	1d19      	adds	r1, r3, #4
 80095d0:	6011      	str	r1, [r2, #0]
 80095d2:	681d      	ldr	r5, [r3, #0]
 80095d4:	6862      	ldr	r2, [r4, #4]
 80095d6:	2100      	movs	r1, #0
 80095d8:	4628      	mov	r0, r5
 80095da:	f7f6 fdf9 	bl	80001d0 <memchr>
 80095de:	b108      	cbz	r0, 80095e4 <_printf_i+0x1bc>
 80095e0:	1b40      	subs	r0, r0, r5
 80095e2:	6060      	str	r0, [r4, #4]
 80095e4:	6863      	ldr	r3, [r4, #4]
 80095e6:	6123      	str	r3, [r4, #16]
 80095e8:	2300      	movs	r3, #0
 80095ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095ee:	e7a7      	b.n	8009540 <_printf_i+0x118>
 80095f0:	6923      	ldr	r3, [r4, #16]
 80095f2:	462a      	mov	r2, r5
 80095f4:	4639      	mov	r1, r7
 80095f6:	4630      	mov	r0, r6
 80095f8:	47c0      	blx	r8
 80095fa:	3001      	adds	r0, #1
 80095fc:	d0aa      	beq.n	8009554 <_printf_i+0x12c>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	079b      	lsls	r3, r3, #30
 8009602:	d413      	bmi.n	800962c <_printf_i+0x204>
 8009604:	68e0      	ldr	r0, [r4, #12]
 8009606:	9b03      	ldr	r3, [sp, #12]
 8009608:	4298      	cmp	r0, r3
 800960a:	bfb8      	it	lt
 800960c:	4618      	movlt	r0, r3
 800960e:	e7a3      	b.n	8009558 <_printf_i+0x130>
 8009610:	2301      	movs	r3, #1
 8009612:	464a      	mov	r2, r9
 8009614:	4639      	mov	r1, r7
 8009616:	4630      	mov	r0, r6
 8009618:	47c0      	blx	r8
 800961a:	3001      	adds	r0, #1
 800961c:	d09a      	beq.n	8009554 <_printf_i+0x12c>
 800961e:	3501      	adds	r5, #1
 8009620:	68e3      	ldr	r3, [r4, #12]
 8009622:	9a03      	ldr	r2, [sp, #12]
 8009624:	1a9b      	subs	r3, r3, r2
 8009626:	42ab      	cmp	r3, r5
 8009628:	dcf2      	bgt.n	8009610 <_printf_i+0x1e8>
 800962a:	e7eb      	b.n	8009604 <_printf_i+0x1dc>
 800962c:	2500      	movs	r5, #0
 800962e:	f104 0919 	add.w	r9, r4, #25
 8009632:	e7f5      	b.n	8009620 <_printf_i+0x1f8>
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1ac      	bne.n	8009592 <_printf_i+0x16a>
 8009638:	7803      	ldrb	r3, [r0, #0]
 800963a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800963e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009642:	e76c      	b.n	800951e <_printf_i+0xf6>
 8009644:	08009791 	.word	0x08009791
 8009648:	080097a2 	.word	0x080097a2

0800964c <memcpy>:
 800964c:	b510      	push	{r4, lr}
 800964e:	1e43      	subs	r3, r0, #1
 8009650:	440a      	add	r2, r1
 8009652:	4291      	cmp	r1, r2
 8009654:	d100      	bne.n	8009658 <memcpy+0xc>
 8009656:	bd10      	pop	{r4, pc}
 8009658:	f811 4b01 	ldrb.w	r4, [r1], #1
 800965c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009660:	e7f7      	b.n	8009652 <memcpy+0x6>

08009662 <memmove>:
 8009662:	4288      	cmp	r0, r1
 8009664:	b510      	push	{r4, lr}
 8009666:	eb01 0302 	add.w	r3, r1, r2
 800966a:	d807      	bhi.n	800967c <memmove+0x1a>
 800966c:	1e42      	subs	r2, r0, #1
 800966e:	4299      	cmp	r1, r3
 8009670:	d00a      	beq.n	8009688 <memmove+0x26>
 8009672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009676:	f802 4f01 	strb.w	r4, [r2, #1]!
 800967a:	e7f8      	b.n	800966e <memmove+0xc>
 800967c:	4283      	cmp	r3, r0
 800967e:	d9f5      	bls.n	800966c <memmove+0xa>
 8009680:	1881      	adds	r1, r0, r2
 8009682:	1ad2      	subs	r2, r2, r3
 8009684:	42d3      	cmn	r3, r2
 8009686:	d100      	bne.n	800968a <memmove+0x28>
 8009688:	bd10      	pop	{r4, pc}
 800968a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800968e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009692:	e7f7      	b.n	8009684 <memmove+0x22>

08009694 <_realloc_r>:
 8009694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009696:	4607      	mov	r7, r0
 8009698:	4614      	mov	r4, r2
 800969a:	460e      	mov	r6, r1
 800969c:	b921      	cbnz	r1, 80096a8 <_realloc_r+0x14>
 800969e:	4611      	mov	r1, r2
 80096a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80096a4:	f7ff bc6c 	b.w	8008f80 <_malloc_r>
 80096a8:	b922      	cbnz	r2, 80096b4 <_realloc_r+0x20>
 80096aa:	f7ff fc1b 	bl	8008ee4 <_free_r>
 80096ae:	4625      	mov	r5, r4
 80096b0:	4628      	mov	r0, r5
 80096b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b4:	f000 f814 	bl	80096e0 <_malloc_usable_size_r>
 80096b8:	42a0      	cmp	r0, r4
 80096ba:	d20f      	bcs.n	80096dc <_realloc_r+0x48>
 80096bc:	4621      	mov	r1, r4
 80096be:	4638      	mov	r0, r7
 80096c0:	f7ff fc5e 	bl	8008f80 <_malloc_r>
 80096c4:	4605      	mov	r5, r0
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d0f2      	beq.n	80096b0 <_realloc_r+0x1c>
 80096ca:	4631      	mov	r1, r6
 80096cc:	4622      	mov	r2, r4
 80096ce:	f7ff ffbd 	bl	800964c <memcpy>
 80096d2:	4631      	mov	r1, r6
 80096d4:	4638      	mov	r0, r7
 80096d6:	f7ff fc05 	bl	8008ee4 <_free_r>
 80096da:	e7e9      	b.n	80096b0 <_realloc_r+0x1c>
 80096dc:	4635      	mov	r5, r6
 80096de:	e7e7      	b.n	80096b0 <_realloc_r+0x1c>

080096e0 <_malloc_usable_size_r>:
 80096e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e4:	1f18      	subs	r0, r3, #4
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bfbc      	itt	lt
 80096ea:	580b      	ldrlt	r3, [r1, r0]
 80096ec:	18c0      	addlt	r0, r0, r3
 80096ee:	4770      	bx	lr

080096f0 <_init>:
 80096f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f2:	bf00      	nop
 80096f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f6:	bc08      	pop	{r3}
 80096f8:	469e      	mov	lr, r3
 80096fa:	4770      	bx	lr

080096fc <_fini>:
 80096fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fe:	bf00      	nop
 8009700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009702:	bc08      	pop	{r3}
 8009704:	469e      	mov	lr, r3
 8009706:	4770      	bx	lr
