
STM32F4_Eval_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008920  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08008ab0  08008ab0  00018ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b58  08008b58  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008b58  08008b58  00018b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b60  08008b60  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b60  08008b60  00018b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b64  08008b64  00018b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ab8  200001e4  08008d4c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c9c  08008d4c  00021c9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d88f  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b5d  00000000  00000000  0003daa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016a0  00000000  00000000  00041600  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001510  00000000  00000000  00042ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024035  00000000  00000000  000441b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014418  00000000  00000000  000681e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca2e7  00000000  00000000  0007c5fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001468e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062fc  00000000  00000000  00146960  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a98 	.word	0x08008a98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008a98 	.word	0x08008a98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <System_Control>:
 * Runs the system infinite loop
 * Args: N/A
 * Returns: N/A
 */
void System_Control()
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0

	while(INFINITY)
	{
		Update_Timers();
 8000574:	f000 f808 	bl	8000588 <Update_Timers>
		UART_Service();
 8000578:	f000 f824 	bl	80005c4 <UART_Service>
		Blink_LED(BLINK_PERIOD_500MS);
 800057c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000580:	f000 f844 	bl	800060c <Blink_LED>
		Update_Timers();
 8000584:	e7f6      	b.n	8000574 <System_Control+0x4>
	...

08000588 <Update_Timers>:
 * Updates global 1ms counters attached to hwtim11
 * Args: N/A
 * Returns: N/A
 */
void Update_Timers(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
	if(tim11_OvrFlo_Flag)
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <Update_Timers+0x30>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d00c      	beq.n	80005ae <Update_Timers+0x26>
	{
		tim11_OvrFlo_Flag = FALSE;
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <Update_Timers+0x30>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]

		blinkCounter_1ms++;
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <Update_Timers+0x34>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <Update_Timers+0x34>)
 80005a2:	6013      	str	r3, [r2, #0]

		UART_Counter_1ms++;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <Update_Timers+0x38>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <Update_Timers+0x38>)
 80005ac:	6013      	str	r3, [r2, #0]
	}
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	20000200 	.word	0x20000200
 80005bc:	20000204 	.word	0x20000204
 80005c0:	20000208 	.word	0x20000208

080005c4 <UART_Service>:


void UART_Service()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	if(UART_PERIOD_1S <= UART_Counter_1ms)
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <UART_Service+0x34>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005d0:	d30f      	bcc.n	80005f2 <UART_Service+0x2e>
	{
		UART_Counter_1ms = 0U;
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <UART_Service+0x34>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]

		snprintf(msg, MESSAGE_LENGTH, "Blink Count: %d\n\r", blinkCnt);
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <UART_Service+0x38>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	4a08      	ldr	r2, [pc, #32]	; (8000600 <UART_Service+0x3c>)
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <UART_Service+0x40>)
 80005e2:	f007 fef7 	bl	80083d4 <sniprintf>

		HAL_UART_Transmit(&huart3, &msg, sizeof(msg), 100);
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	4906      	ldr	r1, [pc, #24]	; (8000604 <UART_Service+0x40>)
 80005ec:	4806      	ldr	r0, [pc, #24]	; (8000608 <UART_Service+0x44>)
 80005ee:	f003 fb7c 	bl	8003cea <HAL_UART_Transmit>
	}
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000208 	.word	0x20000208
 80005fc:	2000028c 	.word	0x2000028c
 8000600:	08008ab0 	.word	0x08008ab0
 8000604:	2000020c 	.word	0x2000020c
 8000608:	200002a0 	.word	0x200002a0

0800060c <Blink_LED>:
 * Blinks R2D2's led at given period
 * Args: period (unsigned 16 bit)
 * Returns: N/A
 */
void Blink_LED(uint16_t period)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	static _Bool led_level = LEVEL_LOW;

	if(period <= blinkCounter_1ms)
 8000616:	88fa      	ldrh	r2, [r7, #6]
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <Blink_LED+0x64>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	429a      	cmp	r2, r3
 800061e:	d822      	bhi.n	8000666 <Blink_LED+0x5a>
	{
		blinkCounter_1ms = 0U;
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <Blink_LED+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]

		led_level = !led_level;
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <Blink_LED+0x68>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	bf14      	ite	ne
 800062e:	2301      	movne	r3, #1
 8000630:	2300      	moveq	r3, #0
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f083 0301 	eor.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <Blink_LED+0x68>)
 8000642:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, led_level);
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <Blink_LED+0x68>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	2104      	movs	r1, #4
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <Blink_LED+0x6c>)
 800064e:	f001 f9b9 	bl	80019c4 <HAL_GPIO_WritePin>

		if(LEVEL_HIGH == led_level)
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <Blink_LED+0x68>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d005      	beq.n	8000666 <Blink_LED+0x5a>
		{
			blinkCnt++;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <Blink_LED+0x70>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	b29a      	uxth	r2, r3
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <Blink_LED+0x70>)
 8000664:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000204 	.word	0x20000204
 8000674:	2000028e 	.word	0x2000028e
 8000678:	40020000 	.word	0x40020000
 800067c:	2000028c 	.word	0x2000028c

08000680 <HAL_TIM_PeriodElapsedCallback>:
 * General Timer Overflow ISR
 * Args: htim (TIM_HandleTypeDef)
 * Returns: N/A
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	tim11_OvrFlo_Flag = TRUE;
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000200 	.word	0x20000200

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 fbca 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f816 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 f94e 	bl	800094c <MX_GPIO_Init>
  MX_I2C1_Init();
 80006b0:	f000 f8d0 	bl	8000854 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80006b4:	f000 f920 	bl	80008f8 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80006b8:	f007 f8b8 	bl	800782c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80006bc:	f000 f878 	bl	80007b0 <MX_ADC1_Init>
  MX_TIM11_Init();
 80006c0:	f000 f8f6 	bl	80008b0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <main+0x34>)
 80006c6:	f003 f8ba 	bl	800383e <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  System_Control();
 80006ca:	f7ff ff51 	bl	8000570 <System_Control>
 80006ce:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000037c 	.word	0x2000037c

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f007 fdb4 	bl	8008254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <SystemClock_Config+0xd0>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a28      	ldr	r2, [pc, #160]	; (80007a8 <SystemClock_Config+0xd0>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <SystemClock_Config+0xd0>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b23      	ldr	r3, [pc, #140]	; (80007ac <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a22      	ldr	r2, [pc, #136]	; (80007ac <SystemClock_Config+0xd4>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b20      	ldr	r3, [pc, #128]	; (80007ac <SystemClock_Config+0xd4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000734:	2303      	movs	r3, #3
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073e:	2301      	movs	r3, #1
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000742:	2310      	movs	r3, #16
 8000744:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000750:	230f      	movs	r3, #15
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000754:	2390      	movs	r3, #144	; 0x90
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800075c:	2305      	movs	r3, #5
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	4618      	mov	r0, r3
 8000766:	f002 fc03 	bl	8002f70 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000770:	f000 f96e 	bl	8000a50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f002 fe5e 	bl	8003450 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800079a:	f000 f959 	bl	8000a50 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_ADC1_Init+0x98>)
 80007c4:	4a21      	ldr	r2, [pc, #132]	; (800084c <MX_ADC1_Init+0x9c>)
 80007c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_ADC1_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_ADC1_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_ADC1_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_ADC1_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_ADC1_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_ADC1_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_ADC1_Init+0x98>)
 80007f0:	4a17      	ldr	r2, [pc, #92]	; (8000850 <MX_ADC1_Init+0xa0>)
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_ADC1_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_ADC1_Init+0x98>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_ADC1_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_ADC1_Init+0x98>)
 800080a:	2201      	movs	r2, #1
 800080c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800080e:	480e      	ldr	r0, [pc, #56]	; (8000848 <MX_ADC1_Init+0x98>)
 8000810:	f000 fba8 	bl	8000f64 <HAL_ADC_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800081a:	f000 f919 	bl	8000a50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_ADC1_Init+0x98>)
 8000830:	f000 fbdc 	bl	8000fec <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800083a:	f000 f909 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000334 	.word	0x20000334
 800084c:	40012000 	.word	0x40012000
 8000850:	0f000001 	.word	0x0f000001

08000854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_I2C1_Init+0x50>)
 800085a:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <MX_I2C1_Init+0x54>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000860:	4a12      	ldr	r2, [pc, #72]	; (80008ac <MX_I2C1_Init+0x58>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_I2C1_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_I2C1_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000892:	f001 f8b1 	bl	80019f8 <HAL_I2C_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800089c:	f000 f8d8 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200002e0 	.word	0x200002e0
 80008a8:	40005400 	.word	0x40005400
 80008ac:	000186a0 	.word	0x000186a0

080008b0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_TIM11_Init+0x40>)
 80008b6:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <MX_TIM11_Init+0x44>)
 80008b8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <MX_TIM11_Init+0x40>)
 80008bc:	2200      	movs	r2, #0
 80008be:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_TIM11_Init+0x40>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 15850;
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_TIM11_Init+0x40>)
 80008c8:	f643 52ea 	movw	r2, #15850	; 0x3dea
 80008cc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_TIM11_Init+0x40>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_TIM11_Init+0x40>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_TIM11_Init+0x40>)
 80008dc:	f002 ff84 	bl	80037e8 <HAL_TIM_Base_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80008e6:	f000 f8b3 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000037c 	.word	0x2000037c
 80008f4:	40014800 	.word	0x40014800

080008f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <MX_USART3_UART_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000930:	f003 f98e 	bl	8003c50 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800093a:	f000 f889 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200002a0 	.word	0x200002a0
 8000948:	40004800 	.word	0x40004800

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b36      	ldr	r3, [pc, #216]	; (8000a40 <MX_GPIO_Init+0xf4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a35      	ldr	r2, [pc, #212]	; (8000a40 <MX_GPIO_Init+0xf4>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b33      	ldr	r3, [pc, #204]	; (8000a40 <MX_GPIO_Init+0xf4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <MX_GPIO_Init+0xf4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a2e      	ldr	r2, [pc, #184]	; (8000a40 <MX_GPIO_Init+0xf4>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <MX_GPIO_Init+0xf4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <MX_GPIO_Init+0xf4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a27      	ldr	r2, [pc, #156]	; (8000a40 <MX_GPIO_Init+0xf4>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <MX_GPIO_Init+0xf4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <MX_GPIO_Init+0xf4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a20      	ldr	r2, [pc, #128]	; (8000a40 <MX_GPIO_Init+0xf4>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <MX_GPIO_Init+0xf4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2104      	movs	r1, #4
 80009d6:	481b      	ldr	r0, [pc, #108]	; (8000a44 <MX_GPIO_Init+0xf8>)
 80009d8:	f000 fff4 	bl	80019c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2140      	movs	r1, #64	; 0x40
 80009e0:	4819      	ldr	r0, [pc, #100]	; (8000a48 <MX_GPIO_Init+0xfc>)
 80009e2:	f000 ffef 	bl	80019c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Status_Pin */
  GPIO_InitStruct.Pin = LED_Status_Pin;
 80009e6:	2304      	movs	r3, #4
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Status_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4811      	ldr	r0, [pc, #68]	; (8000a44 <MX_GPIO_Init+0xf8>)
 80009fe:	f000 fe47 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|IMU_INT1_Pin;
 8000a02:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_GPIO_Init+0x100>)
 8000a18:	f000 fe3a 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8000a1c:	2340      	movs	r3, #64	; 0x40
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_GPIO_Init+0xfc>)
 8000a34:	f000 fe2c 	bl	8001690 <HAL_GPIO_Init>

}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020400 	.word	0x40020400

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
	...

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_MspInit+0x4c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <HAL_MspInit+0x4c>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a74:	6453      	str	r3, [r2, #68]	; 0x44
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <HAL_MspInit+0x4c>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <HAL_ADC_MspInit+0x7c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d127      	bne.n	8000b22 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_ADC_MspInit+0x80>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a15      	ldr	r2, [pc, #84]	; (8000b30 <HAL_ADC_MspInit+0x80>)
 8000adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <HAL_ADC_MspInit+0x80>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <HAL_ADC_MspInit+0x80>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_ADC_MspInit+0x80>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_ADC_MspInit+0x80>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <HAL_ADC_MspInit+0x84>)
 8000b1e:	f000 fdb7 	bl	8001690 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40012000 	.word	0x40012000
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000

08000b38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <HAL_I2C_MspInit+0x84>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12b      	bne.n	8000bb2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b76:	23c0      	movs	r3, #192	; 0xc0
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7a:	2312      	movs	r3, #18
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b86:	2304      	movs	r3, #4
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <HAL_I2C_MspInit+0x8c>)
 8000b92:	f000 fd7d 	bl	8001690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000ba0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020400 	.word	0x40020400

08000bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <HAL_TIM_Base_MspInit+0x48>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d115      	bne.n	8000c06 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <HAL_TIM_Base_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <HAL_TIM_Base_MspInit+0x4c>)
 8000be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_TIM_Base_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	201a      	movs	r0, #26
 8000bfc:	f000 fcef 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000c00:	201a      	movs	r0, #26
 8000c02:	f000 fd08 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40014800 	.word	0x40014800
 8000c14:	40023800 	.word	0x40023800

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a1d      	ldr	r2, [pc, #116]	; (8000cac <HAL_UART_MspInit+0x94>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d134      	bne.n	8000ca4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HAL_UART_MspInit+0x98>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <HAL_UART_MspInit+0x98>)
 8000c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_UART_MspInit+0x98>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_UART_MspInit+0x98>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <HAL_UART_MspInit+0x98>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_UART_MspInit+0x98>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c72:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c84:	2307      	movs	r3, #7
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <HAL_UART_MspInit+0x9c>)
 8000c90:	f000 fcfe 	bl	8001690 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2027      	movs	r0, #39	; 0x27
 8000c9a:	f000 fca0 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c9e:	2027      	movs	r0, #39	; 0x27
 8000ca0:	f000 fcb9 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	; 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40004800 	.word	0x40004800
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f8e8 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000d1a:	f002 fdb4 	bl	8003886 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000037c 	.word	0x2000037c

08000d28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <USART3_IRQHandler+0x10>)
 8000d2e:	f003 f875 	bl	8003e1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200002a0 	.word	0x200002a0

08000d3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <OTG_FS_IRQHandler+0x10>)
 8000d42:	f001 f8e1 	bl	8001f08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20001890 	.word	0x20001890

08000d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d58:	4a14      	ldr	r2, [pc, #80]	; (8000dac <_sbrk+0x5c>)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <_sbrk+0x60>)
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <_sbrk+0x64>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <_sbrk+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d207      	bcs.n	8000d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d80:	f007 fa2e 	bl	80081e0 <__errno>
 8000d84:	4602      	mov	r2, r0
 8000d86:	230c      	movs	r3, #12
 8000d88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	e009      	b.n	8000da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <_sbrk+0x64>)
 8000da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20020000 	.word	0x20020000
 8000db0:	00000400 	.word	0x00000400
 8000db4:	20000290 	.word	0x20000290
 8000db8:	20001ca0 	.word	0x20001ca0

08000dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <SystemInit+0x28>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc6:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <SystemInit+0x28>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <SystemInit+0x28>)
 8000dd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dd6:	609a      	str	r2, [r3, #8]
#endif
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dee:	e003      	b.n	8000df8 <LoopCopyDataInit>

08000df0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000df2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000df4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000df6:	3104      	adds	r1, #4

08000df8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000dfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e00:	d3f6      	bcc.n	8000df0 <CopyDataInit>
  ldr  r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e04:	e002      	b.n	8000e0c <LoopFillZerobss>

08000e06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e08:	f842 3b04 	str.w	r3, [r2], #4

08000e0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e10:	d3f9      	bcc.n	8000e06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e12:	f7ff ffd3 	bl	8000dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f007 f9e9 	bl	80081ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fc41 	bl	80006a0 <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e24:	08008b68 	.word	0x08008b68
  ldr  r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e2c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000e30:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000e34:	20001c9c 	.word	0x20001c9c

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_Init+0x40>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_Init+0x40>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_Init+0x40>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 fbaf 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f808 	bl	8000e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f7ff fdf6 	bl	8000a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x54>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x58>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fbc7 	bl	8001632 <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d80a      	bhi.n	8000eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 fb8f 	bl	80015de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_InitTick+0x5c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	200003bc 	.word	0x200003bc

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	200003bc 	.word	0x200003bc

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff ffee 	bl	8000f08 <HAL_GetTick>
 8000f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f38:	d005      	beq.n	8000f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_Delay+0x40>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f46:	bf00      	nop
 8000f48:	f7ff ffde 	bl	8000f08 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8f7      	bhi.n	8000f48 <HAL_Delay+0x28>
  {
  }
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000008 	.word	0x20000008

08000f64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e033      	b.n	8000fe2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d109      	bne.n	8000f96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff fd94 	bl	8000ab0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 0310 	and.w	r3, r3, #16
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d118      	bne.n	8000fd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000faa:	f023 0302 	bic.w	r3, r3, #2
 8000fae:	f043 0202 	orr.w	r2, r3, #2
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f93a 	bl	8001230 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f023 0303 	bic.w	r3, r3, #3
 8000fca:	f043 0201 	orr.w	r2, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	; 0x40
 8000fd2:	e001      	b.n	8000fd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001000:	2b01      	cmp	r3, #1
 8001002:	d101      	bne.n	8001008 <HAL_ADC_ConfigChannel+0x1c>
 8001004:	2302      	movs	r3, #2
 8001006:	e105      	b.n	8001214 <HAL_ADC_ConfigChannel+0x228>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2201      	movs	r2, #1
 800100c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b09      	cmp	r3, #9
 8001016:	d925      	bls.n	8001064 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68d9      	ldr	r1, [r3, #12]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	461a      	mov	r2, r3
 8001026:	4613      	mov	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	3b1e      	subs	r3, #30
 800102e:	2207      	movs	r2, #7
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43da      	mvns	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	400a      	ands	r2, r1
 800103c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	68d9      	ldr	r1, [r3, #12]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	b29b      	uxth	r3, r3
 800104e:	4618      	mov	r0, r3
 8001050:	4603      	mov	r3, r0
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4403      	add	r3, r0
 8001056:	3b1e      	subs	r3, #30
 8001058:	409a      	lsls	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	430a      	orrs	r2, r1
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	e022      	b.n	80010aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6919      	ldr	r1, [r3, #16]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	461a      	mov	r2, r3
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	2207      	movs	r2, #7
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	400a      	ands	r2, r1
 8001086:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6919      	ldr	r1, [r3, #16]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	b29b      	uxth	r3, r3
 8001098:	4618      	mov	r0, r3
 800109a:	4603      	mov	r3, r0
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4403      	add	r3, r0
 80010a0:	409a      	lsls	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	430a      	orrs	r2, r1
 80010a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d824      	bhi.n	80010fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	3b05      	subs	r3, #5
 80010c4:	221f      	movs	r2, #31
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	400a      	ands	r2, r1
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	3b05      	subs	r3, #5
 80010ee:	fa00 f203 	lsl.w	r2, r0, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	635a      	str	r2, [r3, #52]	; 0x34
 80010fa:	e04c      	b.n	8001196 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b0c      	cmp	r3, #12
 8001102:	d824      	bhi.n	800114e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	3b23      	subs	r3, #35	; 0x23
 8001116:	221f      	movs	r2, #31
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43da      	mvns	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	400a      	ands	r2, r1
 8001124:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	b29b      	uxth	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	3b23      	subs	r3, #35	; 0x23
 8001140:	fa00 f203 	lsl.w	r2, r0, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	430a      	orrs	r2, r1
 800114a:	631a      	str	r2, [r3, #48]	; 0x30
 800114c:	e023      	b.n	8001196 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	3b41      	subs	r3, #65	; 0x41
 8001160:	221f      	movs	r2, #31
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	400a      	ands	r2, r1
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	b29b      	uxth	r3, r3
 800117c:	4618      	mov	r0, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	3b41      	subs	r3, #65	; 0x41
 800118a:	fa00 f203 	lsl.w	r2, r0, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001196:	4b22      	ldr	r3, [pc, #136]	; (8001220 <HAL_ADC_ConfigChannel+0x234>)
 8001198:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a21      	ldr	r2, [pc, #132]	; (8001224 <HAL_ADC_ConfigChannel+0x238>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d109      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x1cc>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b12      	cmp	r3, #18
 80011aa:	d105      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a19      	ldr	r2, [pc, #100]	; (8001224 <HAL_ADC_ConfigChannel+0x238>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d123      	bne.n	800120a <HAL_ADC_ConfigChannel+0x21e>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b10      	cmp	r3, #16
 80011c8:	d003      	beq.n	80011d2 <HAL_ADC_ConfigChannel+0x1e6>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b11      	cmp	r3, #17
 80011d0:	d11b      	bne.n	800120a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b10      	cmp	r3, #16
 80011e4:	d111      	bne.n	800120a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <HAL_ADC_ConfigChannel+0x23c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a10      	ldr	r2, [pc, #64]	; (800122c <HAL_ADC_ConfigChannel+0x240>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	0c9a      	lsrs	r2, r3, #18
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011fc:	e002      	b.n	8001204 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	3b01      	subs	r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f9      	bne.n	80011fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	40012300 	.word	0x40012300
 8001224:	40012000 	.word	0x40012000
 8001228:	20000000 	.word	0x20000000
 800122c:	431bde83 	.word	0x431bde83

08001230 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001238:	4b79      	ldr	r3, [pc, #484]	; (8001420 <ADC_Init+0x1f0>)
 800123a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	431a      	orrs	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001264:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6859      	ldr	r1, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	021a      	lsls	r2, r3, #8
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001288:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6859      	ldr	r1, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6899      	ldr	r1, [r3, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c2:	4a58      	ldr	r2, [pc, #352]	; (8001424 <ADC_Init+0x1f4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d022      	beq.n	800130e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6899      	ldr	r1, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6899      	ldr	r1, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	e00f      	b.n	800132e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800131c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800132c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0202 	bic.w	r2, r2, #2
 800133c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6899      	ldr	r1, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7e1b      	ldrb	r3, [r3, #24]
 8001348:	005a      	lsls	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d01b      	beq.n	8001394 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800136a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800137a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6859      	ldr	r1, [r3, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	3b01      	subs	r3, #1
 8001388:	035a      	lsls	r2, r3, #13
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	e007      	b.n	80013a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	3b01      	subs	r3, #1
 80013c0:	051a      	lsls	r2, r3, #20
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6899      	ldr	r1, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013e6:	025a      	lsls	r2, r3, #9
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6899      	ldr	r1, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	029a      	lsls	r2, r3, #10
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	609a      	str	r2, [r3, #8]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40012300 	.word	0x40012300
 8001424:	0f000001 	.word	0x0f000001

08001428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <__NVIC_GetPriorityGrouping+0x18>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0307 	and.w	r3, r3, #7
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	db0b      	blt.n	80014b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 021f 	and.w	r2, r3, #31
 80014a4:	4907      	ldr	r1, [pc, #28]	; (80014c4 <__NVIC_EnableIRQ+0x38>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	2001      	movs	r0, #1
 80014ae:	fa00 f202 	lsl.w	r2, r0, r2
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	; (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
         );
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001594:	d301      	bcc.n	800159a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2301      	movs	r3, #1
 8001598:	e00f      	b.n	80015ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <SysTick_Config+0x40>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a2:	210f      	movs	r1, #15
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f7ff ff8e 	bl	80014c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <SysTick_Config+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <SysTick_Config+0x40>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff29 	bl	8001428 <__NVIC_SetPriorityGrouping>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f0:	f7ff ff3e 	bl	8001470 <__NVIC_GetPriorityGrouping>
 80015f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7ff ff8e 	bl	800151c <NVIC_EncodePriority>
 8001600:	4602      	mov	r2, r0
 8001602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff5d 	bl	80014c8 <__NVIC_SetPriority>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff31 	bl	800148c <__NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffa2 	bl	8001584 <SysTick_Config>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d004      	beq.n	8001668 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2280      	movs	r2, #128	; 0x80
 8001662:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e00c      	b.n	8001682 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2205      	movs	r2, #5
 800166c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0201 	bic.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	e16b      	b.n	8001984 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f040 815a 	bne.w	800197e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d00b      	beq.n	80016ea <HAL_GPIO_Init+0x5a>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d007      	beq.n	80016ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016de:	2b11      	cmp	r3, #17
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d130      	bne.n	800174c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	2203      	movs	r2, #3
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001720:	2201      	movs	r2, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 0201 	and.w	r2, r3, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0xfc>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b12      	cmp	r3, #18
 800178a:	d123      	bne.n	80017d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	08da      	lsrs	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3208      	adds	r2, #8
 8001794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	69b9      	ldr	r1, [r7, #24]
 80017d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0203 	and.w	r2, r3, #3
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80b4 	beq.w	800197e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b5f      	ldr	r3, [pc, #380]	; (8001998 <HAL_GPIO_Init+0x308>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	4a5e      	ldr	r2, [pc, #376]	; (8001998 <HAL_GPIO_Init+0x308>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001824:	6453      	str	r3, [r2, #68]	; 0x44
 8001826:	4b5c      	ldr	r3, [pc, #368]	; (8001998 <HAL_GPIO_Init+0x308>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001832:	4a5a      	ldr	r2, [pc, #360]	; (800199c <HAL_GPIO_Init+0x30c>)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	089b      	lsrs	r3, r3, #2
 8001838:	3302      	adds	r3, #2
 800183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	220f      	movs	r2, #15
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a51      	ldr	r2, [pc, #324]	; (80019a0 <HAL_GPIO_Init+0x310>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d02b      	beq.n	80018b6 <HAL_GPIO_Init+0x226>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a50      	ldr	r2, [pc, #320]	; (80019a4 <HAL_GPIO_Init+0x314>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d025      	beq.n	80018b2 <HAL_GPIO_Init+0x222>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4f      	ldr	r2, [pc, #316]	; (80019a8 <HAL_GPIO_Init+0x318>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d01f      	beq.n	80018ae <HAL_GPIO_Init+0x21e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4e      	ldr	r2, [pc, #312]	; (80019ac <HAL_GPIO_Init+0x31c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d019      	beq.n	80018aa <HAL_GPIO_Init+0x21a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4d      	ldr	r2, [pc, #308]	; (80019b0 <HAL_GPIO_Init+0x320>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d013      	beq.n	80018a6 <HAL_GPIO_Init+0x216>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4c      	ldr	r2, [pc, #304]	; (80019b4 <HAL_GPIO_Init+0x324>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00d      	beq.n	80018a2 <HAL_GPIO_Init+0x212>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4b      	ldr	r2, [pc, #300]	; (80019b8 <HAL_GPIO_Init+0x328>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d007      	beq.n	800189e <HAL_GPIO_Init+0x20e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4a      	ldr	r2, [pc, #296]	; (80019bc <HAL_GPIO_Init+0x32c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d101      	bne.n	800189a <HAL_GPIO_Init+0x20a>
 8001896:	2307      	movs	r3, #7
 8001898:	e00e      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 800189a:	2308      	movs	r3, #8
 800189c:	e00c      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 800189e:	2306      	movs	r3, #6
 80018a0:	e00a      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018a2:	2305      	movs	r3, #5
 80018a4:	e008      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018a6:	2304      	movs	r3, #4
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018aa:	2303      	movs	r3, #3
 80018ac:	e004      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e002      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018b6:	2300      	movs	r3, #0
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f002 0203 	and.w	r2, r2, #3
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	4093      	lsls	r3, r2
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c8:	4934      	ldr	r1, [pc, #208]	; (800199c <HAL_GPIO_Init+0x30c>)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d6:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <HAL_GPIO_Init+0x330>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018fa:	4a31      	ldr	r2, [pc, #196]	; (80019c0 <HAL_GPIO_Init+0x330>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001900:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <HAL_GPIO_Init+0x330>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001924:	4a26      	ldr	r2, [pc, #152]	; (80019c0 <HAL_GPIO_Init+0x330>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800192a:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_GPIO_Init+0x330>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800194e:	4a1c      	ldr	r2, [pc, #112]	; (80019c0 <HAL_GPIO_Init+0x330>)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <HAL_GPIO_Init+0x330>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001978:	4a11      	ldr	r2, [pc, #68]	; (80019c0 <HAL_GPIO_Init+0x330>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3301      	adds	r3, #1
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	2b0f      	cmp	r3, #15
 8001988:	f67f ae90 	bls.w	80016ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800198c:	bf00      	nop
 800198e:	3724      	adds	r7, #36	; 0x24
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	40023800 	.word	0x40023800
 800199c:	40013800 	.word	0x40013800
 80019a0:	40020000 	.word	0x40020000
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40020800 	.word	0x40020800
 80019ac:	40020c00 	.word	0x40020c00
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40021400 	.word	0x40021400
 80019b8:	40021800 	.word	0x40021800
 80019bc:	40021c00 	.word	0x40021c00
 80019c0:	40013c00 	.word	0x40013c00

080019c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]
 80019d0:	4613      	mov	r3, r2
 80019d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d4:	787b      	ldrb	r3, [r7, #1]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019da:	887a      	ldrh	r2, [r7, #2]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019e0:	e003      	b.n	80019ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019e2:	887b      	ldrh	r3, [r7, #2]
 80019e4:	041a      	lsls	r2, r3, #16
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	619a      	str	r2, [r3, #24]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e11f      	b.n	8001c4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff f88a 	bl	8000b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2224      	movs	r2, #36	; 0x24
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a5c:	f001 fe9c 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8001a60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4a7b      	ldr	r2, [pc, #492]	; (8001c54 <HAL_I2C_Init+0x25c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d807      	bhi.n	8001a7c <HAL_I2C_Init+0x84>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4a7a      	ldr	r2, [pc, #488]	; (8001c58 <HAL_I2C_Init+0x260>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	bf94      	ite	ls
 8001a74:	2301      	movls	r3, #1
 8001a76:	2300      	movhi	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	e006      	b.n	8001a8a <HAL_I2C_Init+0x92>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4a77      	ldr	r2, [pc, #476]	; (8001c5c <HAL_I2C_Init+0x264>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	bf94      	ite	ls
 8001a84:	2301      	movls	r3, #1
 8001a86:	2300      	movhi	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0db      	b.n	8001c4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4a72      	ldr	r2, [pc, #456]	; (8001c60 <HAL_I2C_Init+0x268>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0c9b      	lsrs	r3, r3, #18
 8001a9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a64      	ldr	r2, [pc, #400]	; (8001c54 <HAL_I2C_Init+0x25c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d802      	bhi.n	8001acc <HAL_I2C_Init+0xd4>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	e009      	b.n	8001ae0 <HAL_I2C_Init+0xe8>
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	4a63      	ldr	r2, [pc, #396]	; (8001c64 <HAL_I2C_Init+0x26c>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	099b      	lsrs	r3, r3, #6
 8001ade:	3301      	adds	r3, #1
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001af2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4956      	ldr	r1, [pc, #344]	; (8001c54 <HAL_I2C_Init+0x25c>)
 8001afc:	428b      	cmp	r3, r1
 8001afe:	d80d      	bhi.n	8001b1c <HAL_I2C_Init+0x124>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1e59      	subs	r1, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	bf38      	it	cc
 8001b18:	2304      	movcc	r3, #4
 8001b1a:	e04f      	b.n	8001bbc <HAL_I2C_Init+0x1c4>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d111      	bne.n	8001b48 <HAL_I2C_Init+0x150>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1e58      	subs	r0, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	440b      	add	r3, r1
 8001b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf0c      	ite	eq
 8001b40:	2301      	moveq	r3, #1
 8001b42:	2300      	movne	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	e012      	b.n	8001b6e <HAL_I2C_Init+0x176>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1e58      	subs	r0, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	0099      	lsls	r1, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_I2C_Init+0x17e>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e022      	b.n	8001bbc <HAL_I2C_Init+0x1c4>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10e      	bne.n	8001b9c <HAL_I2C_Init+0x1a4>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1e58      	subs	r0, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6859      	ldr	r1, [r3, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	440b      	add	r3, r1
 8001b8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b9a:	e00f      	b.n	8001bbc <HAL_I2C_Init+0x1c4>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1e58      	subs	r0, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	0099      	lsls	r1, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	6809      	ldr	r1, [r1, #0]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6911      	ldr	r1, [r2, #16]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68d2      	ldr	r2, [r2, #12]
 8001bf6:	4311      	orrs	r1, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2220      	movs	r2, #32
 8001c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	000186a0 	.word	0x000186a0
 8001c58:	001e847f 	.word	0x001e847f
 8001c5c:	003d08ff 	.word	0x003d08ff
 8001c60:	431bde83 	.word	0x431bde83
 8001c64:	10624dd3 	.word	0x10624dd3

08001c68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6a:	b08f      	sub	sp, #60	; 0x3c
 8001c6c:	af0a      	add	r7, sp, #40	; 0x28
 8001c6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e10f      	b.n	8001e9a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d106      	bne.n	8001c9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f005 ffa7 	bl	8007be8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d102      	bne.n	8001cb4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f002 ffca 	bl	8004c52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	687e      	ldr	r6, [r7, #4]
 8001cc6:	466d      	mov	r5, sp
 8001cc8:	f106 0410 	add.w	r4, r6, #16
 8001ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cdc:	1d33      	adds	r3, r6, #4
 8001cde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ce0:	6838      	ldr	r0, [r7, #0]
 8001ce2:	f002 fea1 	bl	8004a28 <USB_CoreInit>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0d0      	b.n	8001e9a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f002 ffb8 	bl	8004c74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	e04a      	b.n	8001da0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	333d      	adds	r3, #61	; 0x3d
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d1e:	7bfa      	ldrb	r2, [r7, #15]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	1a9b      	subs	r3, r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	333c      	adds	r3, #60	; 0x3c
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	b298      	uxth	r0, r3
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	3342      	adds	r3, #66	; 0x42
 8001d46:	4602      	mov	r2, r0
 8001d48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	1a9b      	subs	r3, r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	333f      	adds	r3, #63	; 0x3f
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	1a9b      	subs	r3, r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	3344      	adds	r3, #68	; 0x44
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	1a9b      	subs	r3, r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	3348      	adds	r3, #72	; 0x48
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d86:	7bfa      	ldrb	r2, [r7, #15]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	1a9b      	subs	r3, r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	3350      	adds	r3, #80	; 0x50
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d3af      	bcc.n	8001d0a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
 8001dae:	e044      	b.n	8001e3a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001df2:	7bfa      	ldrb	r2, [r7, #15]
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	1a9b      	subs	r3, r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	3301      	adds	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d3b5      	bcc.n	8001db0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	687e      	ldr	r6, [r7, #4]
 8001e4c:	466d      	mov	r5, sp
 8001e4e:	f106 0410 	add.w	r4, r6, #16
 8001e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e62:	1d33      	adds	r3, r6, #4
 8001e64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e66:	6838      	ldr	r0, [r7, #0]
 8001e68:	f002 ff2e 	bl	8004cc8 <USB_DevInit>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2202      	movs	r2, #2
 8001e76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00d      	b.n	8001e9a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 ff76 	bl	8005d84 <USB_DevDisconnect>

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ea2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_PCD_Start+0x1c>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e020      	b.n	8001f00 <HAL_PCD_Start+0x5e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d109      	bne.n	8001ee2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d005      	beq.n	8001ee2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f002 fea2 	bl	8004c30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 ff26 	bl	8005d42 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b08d      	sub	sp, #52	; 0x34
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 ffe4 	bl	8005eec <USB_GetMode>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 839d 	bne.w	8002666 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 ff48 	bl	8005dc6 <USB_ReadInterrupts>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8393 	beq.w	8002664 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 ff3f 	bl	8005dc6 <USB_ReadInterrupts>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d107      	bne.n	8001f62 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f002 0202 	and.w	r2, r2, #2
 8001f60:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 ff2d 	bl	8005dc6 <USB_ReadInterrupts>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b10      	cmp	r3, #16
 8001f74:	d161      	bne.n	800203a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699a      	ldr	r2, [r3, #24]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0210 	bic.w	r2, r2, #16
 8001f84:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	f003 020f 	and.w	r2, r3, #15
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	0c5b      	lsrs	r3, r3, #17
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d124      	bne.n	8001ffc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d035      	beq.n	800202a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	6a38      	ldr	r0, [r7, #32]
 8001fd2:	f003 fd93 	bl	8005afc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fe2:	441a      	add	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	699a      	ldr	r2, [r3, #24]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ff4:	441a      	add	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	619a      	str	r2, [r3, #24]
 8001ffa:	e016      	b.n	800202a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	0c5b      	lsrs	r3, r3, #17
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	2b06      	cmp	r3, #6
 8002006:	d110      	bne.n	800202a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800200e:	2208      	movs	r2, #8
 8002010:	4619      	mov	r1, r3
 8002012:	6a38      	ldr	r0, [r7, #32]
 8002014:	f003 fd72 	bl	8005afc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	699a      	ldr	r2, [r3, #24]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002024:	441a      	add	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699a      	ldr	r2, [r3, #24]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0210 	orr.w	r2, r2, #16
 8002038:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f003 fec1 	bl	8005dc6 <USB_ReadInterrupts>
 8002044:	4603      	mov	r3, r0
 8002046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800204a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800204e:	d16e      	bne.n	800212e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f003 fec7 	bl	8005dec <USB_ReadDevAllOutEpInterrupt>
 800205e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002060:	e062      	b.n	8002128 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d057      	beq.n	800211c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f003 feec 	bl	8005e54 <USB_ReadDevOutEPInterrupt>
 800207c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00c      	beq.n	80020a2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	4413      	add	r3, r2
 8002090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002094:	461a      	mov	r2, r3
 8002096:	2301      	movs	r3, #1
 8002098:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800209a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fdb1 	bl	8002c04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00c      	beq.n	80020c6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b8:	461a      	mov	r2, r3
 80020ba:	2308      	movs	r3, #8
 80020bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 feab 	bl	8002e1c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020dc:	461a      	mov	r2, r3
 80020de:	2310      	movs	r3, #16
 80020e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f8:	461a      	mov	r2, r3
 80020fa:	2320      	movs	r3, #32
 80020fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d009      	beq.n	800211c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	4413      	add	r3, r2
 8002110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002114:	461a      	mov	r2, r3
 8002116:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800211a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	3301      	adds	r3, #1
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002124:	085b      	lsrs	r3, r3, #1
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	2b00      	cmp	r3, #0
 800212c:	d199      	bne.n	8002062 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f003 fe47 	bl	8005dc6 <USB_ReadInterrupts>
 8002138:	4603      	mov	r3, r0
 800213a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800213e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002142:	f040 80c0 	bne.w	80022c6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f003 fe68 	bl	8005e20 <USB_ReadDevAllInEpInterrupt>
 8002150:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002156:	e0b2      	b.n	80022be <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80a7 	beq.w	80022b2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	4611      	mov	r1, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f003 fe8e 	bl	8005e90 <USB_ReadDevInEPInterrupt>
 8002174:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d057      	beq.n	8002230 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	2201      	movs	r2, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	43db      	mvns	r3, r3
 800219a:	69f9      	ldr	r1, [r7, #28]
 800219c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021a0:	4013      	ands	r3, r2
 80021a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021b0:	461a      	mov	r2, r3
 80021b2:	2301      	movs	r3, #1
 80021b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d132      	bne.n	8002224 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	1a9b      	subs	r3, r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	3348      	adds	r3, #72	; 0x48
 80021ce:	6819      	ldr	r1, [r3, #0]
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4403      	add	r3, r0
 80021de:	3344      	adds	r3, #68	; 0x44
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4419      	add	r1, r3
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4403      	add	r3, r0
 80021f2:	3348      	adds	r3, #72	; 0x48
 80021f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d113      	bne.n	8002224 <HAL_PCD_IRQHandler+0x31c>
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	3350      	adds	r3, #80	; 0x50
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d108      	bne.n	8002224 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800221c:	461a      	mov	r2, r3
 800221e:	2101      	movs	r1, #1
 8002220:	f003 fe96 	bl	8005f50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4619      	mov	r1, r3
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f005 fd5d 	bl	8007cea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	4413      	add	r3, r2
 8002242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002246:	461a      	mov	r2, r3
 8002248:	2308      	movs	r3, #8
 800224a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	4413      	add	r3, r2
 800225e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002262:	461a      	mov	r2, r3
 8002264:	2310      	movs	r3, #16
 8002266:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	4413      	add	r3, r2
 800227a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800227e:	461a      	mov	r2, r3
 8002280:	2340      	movs	r3, #64	; 0x40
 8002282:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229a:	461a      	mov	r2, r3
 800229c:	2302      	movs	r3, #2
 800229e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fc1b 	bl	8002ae8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	3301      	adds	r3, #1
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f47f af49 	bne.w	8002158 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f003 fd7b 	bl	8005dc6 <USB_ReadInterrupts>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022da:	d122      	bne.n	8002322 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d108      	bne.n	800230c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002302:	2100      	movs	r1, #0
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 fe27 	bl	8002f58 <HAL_PCDEx_LPM_Callback>
 800230a:	e002      	b.n	8002312 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f005 fd63 	bl	8007dd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f003 fd4d 	bl	8005dc6 <USB_ReadInterrupts>
 800232c:	4603      	mov	r3, r0
 800232e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002336:	d112      	bne.n	800235e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	d102      	bne.n	800234e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f005 fd1f 	bl	8007d8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800235c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f003 fd2f 	bl	8005dc6 <USB_ReadInterrupts>
 8002368:	4603      	mov	r3, r0
 800236a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800236e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002372:	f040 80c7 	bne.w	8002504 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2110      	movs	r1, #16
 8002390:	4618      	mov	r0, r3
 8002392:	f002 fdfd 	bl	8004f90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002396:	2300      	movs	r3, #0
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800239a:	e056      	b.n	800244a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a8:	461a      	mov	r2, r3
 80023aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c0:	0151      	lsls	r1, r2, #5
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	440a      	add	r2, r1
 80023c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023ce:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80023d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e0:	0151      	lsls	r1, r2, #5
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	440a      	add	r2, r1
 80023e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023fc:	461a      	mov	r2, r3
 80023fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002402:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	4413      	add	r3, r2
 800240c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002414:	0151      	lsls	r1, r2, #5
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	440a      	add	r2, r1
 800241a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800241e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002422:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	4413      	add	r3, r2
 800242c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002434:	0151      	lsls	r1, r2, #5
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	440a      	add	r2, r1
 800243a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800243e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002442:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	3301      	adds	r3, #1
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002450:	429a      	cmp	r2, r3
 8002452:	d3a3      	bcc.n	800239c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002462:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002466:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	2b00      	cmp	r3, #0
 800246e:	d016      	beq.n	800249e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002480:	f043 030b 	orr.w	r3, r3, #11
 8002484:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002496:	f043 030b 	orr.w	r3, r3, #11
 800249a:	6453      	str	r3, [r2, #68]	; 0x44
 800249c:	e015      	b.n	80024ca <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024b0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80024b4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024c4:	f043 030b 	orr.w	r3, r3, #11
 80024c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80024dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024ee:	461a      	mov	r2, r3
 80024f0:	f003 fd2e 	bl	8005f50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002502:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f003 fc5c 	bl	8005dc6 <USB_ReadInterrupts>
 800250e:	4603      	mov	r3, r0
 8002510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002518:	d124      	bne.n	8002564 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fcf2 	bl	8005f08 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f002 fd92 	bl	8005052 <USB_GetDevSpeed>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681c      	ldr	r4, [r3, #0]
 800253a:	f001 f921 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 800253e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	4620      	mov	r0, r4
 800254a:	f002 facf 	bl	8004aec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f005 fbf3 	bl	8007d3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002562:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f003 fc2c 	bl	8005dc6 <USB_ReadInterrupts>
 800256e:	4603      	mov	r3, r0
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b08      	cmp	r3, #8
 8002576:	d10a      	bne.n	800258e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f005 fbd0 	bl	8007d1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f002 0208 	and.w	r2, r2, #8
 800258c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f003 fc17 	bl	8005dc6 <USB_ReadInterrupts>
 8002598:	4603      	mov	r3, r0
 800259a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025a2:	d10f      	bne.n	80025c4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	4619      	mov	r1, r3
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f005 fc32 	bl	8007e18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80025c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f003 fbfc 	bl	8005dc6 <USB_ReadInterrupts>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025d8:	d10f      	bne.n	80025fa <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	4619      	mov	r1, r3
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f005 fc05 	bl	8007df4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80025f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 fbe1 	bl	8005dc6 <USB_ReadInterrupts>
 8002604:	4603      	mov	r3, r0
 8002606:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800260a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260e:	d10a      	bne.n	8002626 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f005 fc13 	bl	8007e3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002624:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f003 fbcb 	bl	8005dc6 <USB_ReadInterrupts>
 8002630:	4603      	mov	r3, r0
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	2b04      	cmp	r3, #4
 8002638:	d115      	bne.n	8002666 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f005 fc03 	bl	8007e58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	430a      	orrs	r2, r1
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	e000      	b.n	8002666 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002664:	bf00      	nop
    }
  }
}
 8002666:	3734      	adds	r7, #52	; 0x34
 8002668:	46bd      	mov	sp, r7
 800266a:	bd90      	pop	{r4, r7, pc}

0800266c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_PCD_SetAddress+0x1a>
 8002682:	2302      	movs	r3, #2
 8002684:	e013      	b.n	80026ae <HAL_PCD_SetAddress+0x42>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 fb29 	bl	8005cf6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	4608      	mov	r0, r1
 80026c0:	4611      	mov	r1, r2
 80026c2:	461a      	mov	r2, r3
 80026c4:	4603      	mov	r3, r0
 80026c6:	70fb      	strb	r3, [r7, #3]
 80026c8:	460b      	mov	r3, r1
 80026ca:	803b      	strh	r3, [r7, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	da0f      	bge.n	80026fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	f003 020f 	and.w	r2, r3, #15
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	3338      	adds	r3, #56	; 0x38
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	3304      	adds	r3, #4
 80026f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	705a      	strb	r2, [r3, #1]
 80026fa:	e00f      	b.n	800271c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	f003 020f 	and.w	r2, r3, #15
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	3304      	adds	r3, #4
 8002714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	b2da      	uxtb	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002728:	883a      	ldrh	r2, [r7, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	78ba      	ldrb	r2, [r7, #2]
 8002732:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	785b      	ldrb	r3, [r3, #1]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d004      	beq.n	8002746 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002746:	78bb      	ldrb	r3, [r7, #2]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d102      	bne.n	8002752 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_PCD_EP_Open+0xaa>
 800275c:	2302      	movs	r3, #2
 800275e:	e00e      	b.n	800277e <HAL_PCD_EP_Open+0xc8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68f9      	ldr	r1, [r7, #12]
 800276e:	4618      	mov	r0, r3
 8002770:	f002 fc94 	bl	800509c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800277c:	7afb      	ldrb	r3, [r7, #11]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002792:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002796:	2b00      	cmp	r3, #0
 8002798:	da0f      	bge.n	80027ba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	f003 020f 	and.w	r2, r3, #15
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	3338      	adds	r3, #56	; 0x38
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	3304      	adds	r3, #4
 80027b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	705a      	strb	r2, [r3, #1]
 80027b8:	e00f      	b.n	80027da <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	f003 020f 	and.w	r2, r3, #15
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	4413      	add	r3, r2
 80027d0:	3304      	adds	r3, #4
 80027d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027da:	78fb      	ldrb	r3, [r7, #3]
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_PCD_EP_Close+0x6e>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e00e      	b.n	8002812 <HAL_PCD_EP_Close+0x8c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	4618      	mov	r0, r3
 8002804:	f002 fcd2 	bl	80051ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	460b      	mov	r3, r1
 8002828:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800282a:	7afb      	ldrb	r3, [r7, #11]
 800282c:	f003 020f 	and.w	r2, r3, #15
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	3304      	adds	r3, #4
 8002842:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800285c:	7afb      	ldrb	r3, [r7, #11]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	b2da      	uxtb	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d102      	bne.n	8002876 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002876:	7afb      	ldrb	r3, [r7, #11]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	2b00      	cmp	r3, #0
 800287e:	d109      	bne.n	8002894 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	461a      	mov	r2, r3
 800288c:	6979      	ldr	r1, [r7, #20]
 800288e:	f002 ffad 	bl	80057ec <USB_EP0StartXfer>
 8002892:	e008      	b.n	80028a6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	6979      	ldr	r1, [r7, #20]
 80028a2:	f002 fd5f 	bl	8005364 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	f003 020f 	and.w	r2, r3, #15
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	460b      	mov	r3, r1
 80028ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f0:	7afb      	ldrb	r3, [r7, #11]
 80028f2:	f003 020f 	and.w	r2, r3, #15
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	3338      	adds	r3, #56	; 0x38
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	3304      	adds	r3, #4
 8002906:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2200      	movs	r2, #0
 8002918:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2201      	movs	r2, #1
 800291e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002920:	7afb      	ldrb	r3, [r7, #11]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	b2da      	uxtb	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d102      	bne.n	800293a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800293a:	7afb      	ldrb	r3, [r7, #11]
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	2b00      	cmp	r3, #0
 8002942:	d109      	bne.n	8002958 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	6979      	ldr	r1, [r7, #20]
 8002952:	f002 ff4b 	bl	80057ec <USB_EP0StartXfer>
 8002956:	e008      	b.n	800296a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	6979      	ldr	r1, [r7, #20]
 8002966:	f002 fcfd 	bl	8005364 <USB_EPStartXfer>
  }

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	f003 020f 	and.w	r2, r3, #15
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	429a      	cmp	r2, r3
 800298c:	d901      	bls.n	8002992 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e050      	b.n	8002a34 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002996:	2b00      	cmp	r3, #0
 8002998:	da0f      	bge.n	80029ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	f003 020f 	and.w	r2, r3, #15
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	3338      	adds	r3, #56	; 0x38
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	3304      	adds	r3, #4
 80029b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	705a      	strb	r2, [r3, #1]
 80029b8:	e00d      	b.n	80029d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	4413      	add	r3, r2
 80029cc:	3304      	adds	r3, #4
 80029ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_PCD_EP_SetStall+0x82>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e01e      	b.n	8002a34 <HAL_PCD_EP_SetStall+0xc0>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68f9      	ldr	r1, [r7, #12]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f003 f8a2 	bl	8005b4e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a0a:	78fb      	ldrb	r3, [r7, #3]
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10a      	bne.n	8002a2a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	b2d9      	uxtb	r1, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a24:	461a      	mov	r2, r3
 8002a26:	f003 fa93 	bl	8005f50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	f003 020f 	and.w	r2, r3, #15
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d901      	bls.n	8002a5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e042      	b.n	8002ae0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	da0f      	bge.n	8002a82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	f003 020f 	and.w	r2, r3, #15
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	3338      	adds	r3, #56	; 0x38
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	3304      	adds	r3, #4
 8002a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	705a      	strb	r2, [r3, #1]
 8002a80:	e00f      	b.n	8002aa2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	f003 020f 	and.w	r2, r3, #15
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	4413      	add	r3, r2
 8002a98:	3304      	adds	r3, #4
 8002a9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_PCD_EP_ClrStall+0x86>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e00e      	b.n	8002ae0 <HAL_PCD_EP_ClrStall+0xa4>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68f9      	ldr	r1, [r7, #12]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f003 f8aa 	bl	8005c2a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	; 0x28
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	3338      	adds	r3, #56	; 0x38
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	699a      	ldr	r2, [r3, #24]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d901      	bls.n	8002b20 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e06c      	b.n	8002bfa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	69fa      	ldr	r2, [r7, #28]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d902      	bls.n	8002b3c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	3303      	adds	r3, #3
 8002b40:	089b      	lsrs	r3, r3, #2
 8002b42:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b44:	e02b      	b.n	8002b9e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d902      	bls.n	8002b62 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3303      	adds	r3, #3
 8002b66:	089b      	lsrs	r3, r3, #2
 8002b68:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	68d9      	ldr	r1, [r3, #12]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6978      	ldr	r0, [r7, #20]
 8002b82:	f002 ff86 	bl	8005a92 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	441a      	add	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	441a      	add	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d809      	bhi.n	8002bc8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d203      	bcs.n	8002bc8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1be      	bne.n	8002b46 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d811      	bhi.n	8002bf8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	2201      	movs	r2, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	6939      	ldr	r1, [r7, #16]
 8002bf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3720      	adds	r7, #32
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	333c      	adds	r3, #60	; 0x3c
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	f040 80a0 	bne.w	8002d7c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d015      	beq.n	8002c72 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4a72      	ldr	r2, [pc, #456]	; (8002e14 <PCD_EP_OutXfrComplete_int+0x210>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	f240 80dd 	bls.w	8002e0a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80d7 	beq.w	8002e0a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c6e:	6093      	str	r3, [r2, #8]
 8002c70:	e0cb      	b.n	8002e0a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d009      	beq.n	8002c90 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2320      	movs	r3, #32
 8002c8c:	6093      	str	r3, [r2, #8]
 8002c8e:	e0bc      	b.n	8002e0a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 80b7 	bne.w	8002e0a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a5d      	ldr	r2, [pc, #372]	; (8002e14 <PCD_EP_OutXfrComplete_int+0x210>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d90f      	bls.n	8002cc4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cc0:	6093      	str	r3, [r2, #8]
 8002cc2:	e0a2      	b.n	8002e0a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cd6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	0159      	lsls	r1, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	440b      	add	r3, r1
 8002ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002cea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4403      	add	r3, r0
 8002cfa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002cfe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4403      	add	r3, r0
 8002d22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4419      	add	r1, r3
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4403      	add	r3, r0
 8002d38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d3c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d114      	bne.n	8002d6e <PCD_EP_OutXfrComplete_int+0x16a>
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d108      	bne.n	8002d6e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d66:	461a      	mov	r2, r3
 8002d68:	2101      	movs	r1, #1
 8002d6a:	f003 f8f1 	bl	8005f50 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	4619      	mov	r1, r3
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f004 ff9d 	bl	8007cb4 <HAL_PCD_DataOutStageCallback>
 8002d7a:	e046      	b.n	8002e0a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4a26      	ldr	r2, [pc, #152]	; (8002e18 <PCD_EP_OutXfrComplete_int+0x214>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d124      	bne.n	8002dce <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002da0:	6093      	str	r3, [r2, #8]
 8002da2:	e032      	b.n	8002e0a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dba:	461a      	mov	r2, r3
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f004 ff74 	bl	8007cb4 <HAL_PCD_DataOutStageCallback>
 8002dcc:	e01d      	b.n	8002e0a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d114      	bne.n	8002dfe <PCD_EP_OutXfrComplete_int+0x1fa>
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d108      	bne.n	8002dfe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002df6:	461a      	mov	r2, r3
 8002df8:	2100      	movs	r1, #0
 8002dfa:	f003 f8a9 	bl	8005f50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	4619      	mov	r1, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f004 ff55 	bl	8007cb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	4f54300a 	.word	0x4f54300a
 8002e18:	4f54310a 	.word	0x4f54310a

08002e1c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	333c      	adds	r3, #60	; 0x3c
 8002e34:	3304      	adds	r3, #4
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4a15      	ldr	r2, [pc, #84]	; (8002ea4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d90e      	bls.n	8002e70 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e6e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f004 ff0d 	bl	8007c90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d90c      	bls.n	8002e98 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d108      	bne.n	8002e98 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e90:	461a      	mov	r2, r3
 8002e92:	2101      	movs	r1, #1
 8002e94:	f003 f85c 	bl	8005f50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	4f54300a 	.word	0x4f54300a

08002ea8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	70fb      	strb	r3, [r7, #3]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ec6:	883b      	ldrh	r3, [r7, #0]
 8002ec8:	0419      	lsls	r1, r3, #16
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ed4:	e028      	b.n	8002f28 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	0c1b      	lsrs	r3, r3, #16
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	73fb      	strb	r3, [r7, #15]
 8002ee8:	e00d      	b.n	8002f06 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	3340      	adds	r3, #64	; 0x40
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	0c1b      	lsrs	r3, r3, #16
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	4413      	add	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	3301      	adds	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
 8002f06:	7bfa      	ldrb	r2, [r7, #15]
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d3ec      	bcc.n	8002eea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f10:	883b      	ldrh	r3, [r7, #0]
 8002f12:	0418      	lsls	r0, r3, #16
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6819      	ldr	r1, [r3, #0]
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	4302      	orrs	r2, r0
 8002f20:	3340      	adds	r3, #64	; 0x40
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	887a      	ldrh	r2, [r7, #2]
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e25b      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d075      	beq.n	800307a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f8e:	4ba3      	ldr	r3, [pc, #652]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d00c      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f9a:	4ba0      	ldr	r3, [pc, #640]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d112      	bne.n	8002fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fa6:	4b9d      	ldr	r3, [pc, #628]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb2:	d10b      	bne.n	8002fcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb4:	4b99      	ldr	r3, [pc, #612]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d05b      	beq.n	8003078 <HAL_RCC_OscConfig+0x108>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d157      	bne.n	8003078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e236      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd4:	d106      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x74>
 8002fd6:	4b91      	ldr	r3, [pc, #580]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a90      	ldr	r2, [pc, #576]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	e01d      	b.n	8003020 <HAL_RCC_OscConfig+0xb0>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x98>
 8002fee:	4b8b      	ldr	r3, [pc, #556]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a8a      	ldr	r2, [pc, #552]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	4b88      	ldr	r3, [pc, #544]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a87      	ldr	r2, [pc, #540]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8003000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e00b      	b.n	8003020 <HAL_RCC_OscConfig+0xb0>
 8003008:	4b84      	ldr	r3, [pc, #528]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a83      	ldr	r2, [pc, #524]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 800300e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	4b81      	ldr	r3, [pc, #516]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a80      	ldr	r2, [pc, #512]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 800301a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800301e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d013      	beq.n	8003050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fd ff6e 	bl	8000f08 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003030:	f7fd ff6a 	bl	8000f08 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e1fb      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	4b76      	ldr	r3, [pc, #472]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0xc0>
 800304e:	e014      	b.n	800307a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fd ff5a 	bl	8000f08 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003058:	f7fd ff56 	bl	8000f08 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b64      	cmp	r3, #100	; 0x64
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e1e7      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306a:	4b6c      	ldr	r3, [pc, #432]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0xe8>
 8003076:	e000      	b.n	800307a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d063      	beq.n	800314e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003086:	4b65      	ldr	r3, [pc, #404]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00b      	beq.n	80030aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003092:	4b62      	ldr	r3, [pc, #392]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800309a:	2b08      	cmp	r3, #8
 800309c:	d11c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800309e:	4b5f      	ldr	r3, [pc, #380]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d116      	bne.n	80030d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030aa:	4b5c      	ldr	r3, [pc, #368]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_RCC_OscConfig+0x152>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d001      	beq.n	80030c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e1bb      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c2:	4b56      	ldr	r3, [pc, #344]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4952      	ldr	r1, [pc, #328]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d6:	e03a      	b.n	800314e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d020      	beq.n	8003122 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e0:	4b4f      	ldr	r3, [pc, #316]	; (8003220 <HAL_RCC_OscConfig+0x2b0>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fd ff0f 	bl	8000f08 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ee:	f7fd ff0b 	bl	8000f08 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e19c      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003100:	4b46      	ldr	r3, [pc, #280]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310c:	4b43      	ldr	r3, [pc, #268]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4940      	ldr	r1, [pc, #256]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 800311c:	4313      	orrs	r3, r2
 800311e:	600b      	str	r3, [r1, #0]
 8003120:	e015      	b.n	800314e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003122:	4b3f      	ldr	r3, [pc, #252]	; (8003220 <HAL_RCC_OscConfig+0x2b0>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7fd feee 	bl	8000f08 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003130:	f7fd feea 	bl	8000f08 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e17b      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003142:	4b36      	ldr	r3, [pc, #216]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d030      	beq.n	80031bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d016      	beq.n	8003190 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003162:	4b30      	ldr	r3, [pc, #192]	; (8003224 <HAL_RCC_OscConfig+0x2b4>)
 8003164:	2201      	movs	r2, #1
 8003166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003168:	f7fd fece 	bl	8000f08 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003170:	f7fd feca 	bl	8000f08 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e15b      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003182:	4b26      	ldr	r3, [pc, #152]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 8003184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x200>
 800318e:	e015      	b.n	80031bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003190:	4b24      	ldr	r3, [pc, #144]	; (8003224 <HAL_RCC_OscConfig+0x2b4>)
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003196:	f7fd feb7 	bl	8000f08 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800319e:	f7fd feb3 	bl	8000f08 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e144      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b0:	4b1a      	ldr	r3, [pc, #104]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 80031b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1f0      	bne.n	800319e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80a0 	beq.w	800330a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ca:	2300      	movs	r3, #0
 80031cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ce:	4b13      	ldr	r3, [pc, #76]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10f      	bne.n	80031fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	4b0f      	ldr	r3, [pc, #60]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	4a0e      	ldr	r2, [pc, #56]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ea:	4b0c      	ldr	r3, [pc, #48]	; (800321c <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f6:	2301      	movs	r3, #1
 80031f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fa:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCC_OscConfig+0x2b8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003202:	2b00      	cmp	r3, #0
 8003204:	d121      	bne.n	800324a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_RCC_OscConfig+0x2b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a07      	ldr	r2, [pc, #28]	; (8003228 <HAL_RCC_OscConfig+0x2b8>)
 800320c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003212:	f7fd fe79 	bl	8000f08 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003218:	e011      	b.n	800323e <HAL_RCC_OscConfig+0x2ce>
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800
 8003220:	42470000 	.word	0x42470000
 8003224:	42470e80 	.word	0x42470e80
 8003228:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322c:	f7fd fe6c 	bl	8000f08 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e0fd      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323e:	4b81      	ldr	r3, [pc, #516]	; (8003444 <HAL_RCC_OscConfig+0x4d4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d106      	bne.n	8003260 <HAL_RCC_OscConfig+0x2f0>
 8003252:	4b7d      	ldr	r3, [pc, #500]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	4a7c      	ldr	r2, [pc, #496]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6713      	str	r3, [r2, #112]	; 0x70
 800325e:	e01c      	b.n	800329a <HAL_RCC_OscConfig+0x32a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b05      	cmp	r3, #5
 8003266:	d10c      	bne.n	8003282 <HAL_RCC_OscConfig+0x312>
 8003268:	4b77      	ldr	r3, [pc, #476]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	4a76      	ldr	r2, [pc, #472]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 800326e:	f043 0304 	orr.w	r3, r3, #4
 8003272:	6713      	str	r3, [r2, #112]	; 0x70
 8003274:	4b74      	ldr	r3, [pc, #464]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	4a73      	ldr	r2, [pc, #460]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	6713      	str	r3, [r2, #112]	; 0x70
 8003280:	e00b      	b.n	800329a <HAL_RCC_OscConfig+0x32a>
 8003282:	4b71      	ldr	r3, [pc, #452]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	4a70      	ldr	r2, [pc, #448]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	6713      	str	r3, [r2, #112]	; 0x70
 800328e:	4b6e      	ldr	r3, [pc, #440]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	4a6d      	ldr	r2, [pc, #436]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 8003294:	f023 0304 	bic.w	r3, r3, #4
 8003298:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d015      	beq.n	80032ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fd fe31 	bl	8000f08 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f7fd fe2d 	bl	8000f08 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e0bc      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c0:	4b61      	ldr	r3, [pc, #388]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0ee      	beq.n	80032aa <HAL_RCC_OscConfig+0x33a>
 80032cc:	e014      	b.n	80032f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ce:	f7fd fe1b 	bl	8000f08 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fd fe17 	bl	8000f08 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e0a6      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ec:	4b56      	ldr	r3, [pc, #344]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1ee      	bne.n	80032d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d105      	bne.n	800330a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fe:	4b52      	ldr	r3, [pc, #328]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	4a51      	ldr	r2, [pc, #324]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 8003304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003308:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8092 	beq.w	8003438 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003314:	4b4c      	ldr	r3, [pc, #304]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 030c 	and.w	r3, r3, #12
 800331c:	2b08      	cmp	r3, #8
 800331e:	d05c      	beq.n	80033da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d141      	bne.n	80033ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003328:	4b48      	ldr	r3, [pc, #288]	; (800344c <HAL_RCC_OscConfig+0x4dc>)
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332e:	f7fd fdeb 	bl	8000f08 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003336:	f7fd fde7 	bl	8000f08 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e078      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003348:	4b3f      	ldr	r3, [pc, #252]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f0      	bne.n	8003336 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	019b      	lsls	r3, r3, #6
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	085b      	lsrs	r3, r3, #1
 800336c:	3b01      	subs	r3, #1
 800336e:	041b      	lsls	r3, r3, #16
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	061b      	lsls	r3, r3, #24
 8003378:	4933      	ldr	r1, [pc, #204]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800337e:	4b33      	ldr	r3, [pc, #204]	; (800344c <HAL_RCC_OscConfig+0x4dc>)
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003384:	f7fd fdc0 	bl	8000f08 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800338c:	f7fd fdbc 	bl	8000f08 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e04d      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339e:	4b2a      	ldr	r3, [pc, #168]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x41c>
 80033aa:	e045      	b.n	8003438 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ac:	4b27      	ldr	r3, [pc, #156]	; (800344c <HAL_RCC_OscConfig+0x4dc>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b2:	f7fd fda9 	bl	8000f08 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ba:	f7fd fda5 	bl	8000f08 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e036      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033cc:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f0      	bne.n	80033ba <HAL_RCC_OscConfig+0x44a>
 80033d8:	e02e      	b.n	8003438 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e029      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033e6:	4b18      	ldr	r3, [pc, #96]	; (8003448 <HAL_RCC_OscConfig+0x4d8>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d11c      	bne.n	8003434 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d115      	bne.n	8003434 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800340e:	4013      	ands	r3, r2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003414:	4293      	cmp	r3, r2
 8003416:	d10d      	bne.n	8003434 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d106      	bne.n	8003434 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d001      	beq.n	8003438 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40007000 	.word	0x40007000
 8003448:	40023800 	.word	0x40023800
 800344c:	42470060 	.word	0x42470060

08003450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0cc      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003464:	4b68      	ldr	r3, [pc, #416]	; (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d90c      	bls.n	800348c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b65      	ldr	r3, [pc, #404]	; (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b63      	ldr	r3, [pc, #396]	; (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0b8      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d020      	beq.n	80034da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034a4:	4b59      	ldr	r3, [pc, #356]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	4a58      	ldr	r2, [pc, #352]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034bc:	4b53      	ldr	r3, [pc, #332]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4a52      	ldr	r2, [pc, #328]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c8:	4b50      	ldr	r3, [pc, #320]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	494d      	ldr	r1, [pc, #308]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d044      	beq.n	8003570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d107      	bne.n	80034fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	4b47      	ldr	r3, [pc, #284]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d119      	bne.n	800352e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e07f      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d003      	beq.n	800350e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800350a:	2b03      	cmp	r3, #3
 800350c:	d107      	bne.n	800351e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350e:	4b3f      	ldr	r3, [pc, #252]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e06f      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351e:	4b3b      	ldr	r3, [pc, #236]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e067      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800352e:	4b37      	ldr	r3, [pc, #220]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f023 0203 	bic.w	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	4934      	ldr	r1, [pc, #208]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	4313      	orrs	r3, r2
 800353e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003540:	f7fd fce2 	bl	8000f08 <HAL_GetTick>
 8003544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003546:	e00a      	b.n	800355e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003548:	f7fd fcde 	bl	8000f08 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	; 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e04f      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355e:	4b2b      	ldr	r3, [pc, #172]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 020c 	and.w	r2, r3, #12
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	429a      	cmp	r2, r3
 800356e:	d1eb      	bne.n	8003548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003570:	4b25      	ldr	r3, [pc, #148]	; (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d20c      	bcs.n	8003598 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b22      	ldr	r3, [pc, #136]	; (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003586:	4b20      	ldr	r3, [pc, #128]	; (8003608 <HAL_RCC_ClockConfig+0x1b8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e032      	b.n	80035fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a4:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4916      	ldr	r1, [pc, #88]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	490e      	ldr	r1, [pc, #56]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035d6:	f000 f821 	bl	800361c <HAL_RCC_GetSysClockFreq>
 80035da:	4601      	mov	r1, r0
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <HAL_RCC_ClockConfig+0x1c0>)
 80035e8:	5cd3      	ldrb	r3, [r2, r3]
 80035ea:	fa21 f303 	lsr.w	r3, r1, r3
 80035ee:	4a09      	ldr	r2, [pc, #36]	; (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035f2:	4b09      	ldr	r3, [pc, #36]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fd fc42 	bl	8000e80 <HAL_InitTick>

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40023c00 	.word	0x40023c00
 800360c:	40023800 	.word	0x40023800
 8003610:	08008b0c 	.word	0x08008b0c
 8003614:	20000000 	.word	0x20000000
 8003618:	20000004 	.word	0x20000004

0800361c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800361c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	607b      	str	r3, [r7, #4]
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	2300      	movs	r3, #0
 800362c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003632:	4b50      	ldr	r3, [pc, #320]	; (8003774 <HAL_RCC_GetSysClockFreq+0x158>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b04      	cmp	r3, #4
 800363c:	d007      	beq.n	800364e <HAL_RCC_GetSysClockFreq+0x32>
 800363e:	2b08      	cmp	r3, #8
 8003640:	d008      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0x38>
 8003642:	2b00      	cmp	r3, #0
 8003644:	f040 808d 	bne.w	8003762 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003648:	4b4b      	ldr	r3, [pc, #300]	; (8003778 <HAL_RCC_GetSysClockFreq+0x15c>)
 800364a:	60bb      	str	r3, [r7, #8]
       break;
 800364c:	e08c      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800364e:	4b4b      	ldr	r3, [pc, #300]	; (800377c <HAL_RCC_GetSysClockFreq+0x160>)
 8003650:	60bb      	str	r3, [r7, #8]
      break;
 8003652:	e089      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003654:	4b47      	ldr	r3, [pc, #284]	; (8003774 <HAL_RCC_GetSysClockFreq+0x158>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800365c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800365e:	4b45      	ldr	r3, [pc, #276]	; (8003774 <HAL_RCC_GetSysClockFreq+0x158>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d023      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800366a:	4b42      	ldr	r3, [pc, #264]	; (8003774 <HAL_RCC_GetSysClockFreq+0x158>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	099b      	lsrs	r3, r3, #6
 8003670:	f04f 0400 	mov.w	r4, #0
 8003674:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	ea03 0501 	and.w	r5, r3, r1
 8003680:	ea04 0602 	and.w	r6, r4, r2
 8003684:	4a3d      	ldr	r2, [pc, #244]	; (800377c <HAL_RCC_GetSysClockFreq+0x160>)
 8003686:	fb02 f106 	mul.w	r1, r2, r6
 800368a:	2200      	movs	r2, #0
 800368c:	fb02 f205 	mul.w	r2, r2, r5
 8003690:	440a      	add	r2, r1
 8003692:	493a      	ldr	r1, [pc, #232]	; (800377c <HAL_RCC_GetSysClockFreq+0x160>)
 8003694:	fba5 0101 	umull	r0, r1, r5, r1
 8003698:	1853      	adds	r3, r2, r1
 800369a:	4619      	mov	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f04f 0400 	mov.w	r4, #0
 80036a2:	461a      	mov	r2, r3
 80036a4:	4623      	mov	r3, r4
 80036a6:	f7fc fde3 	bl	8000270 <__aeabi_uldivmod>
 80036aa:	4603      	mov	r3, r0
 80036ac:	460c      	mov	r4, r1
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	e049      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b2:	4b30      	ldr	r3, [pc, #192]	; (8003774 <HAL_RCC_GetSysClockFreq+0x158>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	099b      	lsrs	r3, r3, #6
 80036b8:	f04f 0400 	mov.w	r4, #0
 80036bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	ea03 0501 	and.w	r5, r3, r1
 80036c8:	ea04 0602 	and.w	r6, r4, r2
 80036cc:	4629      	mov	r1, r5
 80036ce:	4632      	mov	r2, r6
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	f04f 0400 	mov.w	r4, #0
 80036d8:	0154      	lsls	r4, r2, #5
 80036da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036de:	014b      	lsls	r3, r1, #5
 80036e0:	4619      	mov	r1, r3
 80036e2:	4622      	mov	r2, r4
 80036e4:	1b49      	subs	r1, r1, r5
 80036e6:	eb62 0206 	sbc.w	r2, r2, r6
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	f04f 0400 	mov.w	r4, #0
 80036f2:	0194      	lsls	r4, r2, #6
 80036f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036f8:	018b      	lsls	r3, r1, #6
 80036fa:	1a5b      	subs	r3, r3, r1
 80036fc:	eb64 0402 	sbc.w	r4, r4, r2
 8003700:	f04f 0100 	mov.w	r1, #0
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	00e2      	lsls	r2, r4, #3
 800370a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800370e:	00d9      	lsls	r1, r3, #3
 8003710:	460b      	mov	r3, r1
 8003712:	4614      	mov	r4, r2
 8003714:	195b      	adds	r3, r3, r5
 8003716:	eb44 0406 	adc.w	r4, r4, r6
 800371a:	f04f 0100 	mov.w	r1, #0
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	02a2      	lsls	r2, r4, #10
 8003724:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003728:	0299      	lsls	r1, r3, #10
 800372a:	460b      	mov	r3, r1
 800372c:	4614      	mov	r4, r2
 800372e:	4618      	mov	r0, r3
 8003730:	4621      	mov	r1, r4
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f04f 0400 	mov.w	r4, #0
 8003738:	461a      	mov	r2, r3
 800373a:	4623      	mov	r3, r4
 800373c:	f7fc fd98 	bl	8000270 <__aeabi_uldivmod>
 8003740:	4603      	mov	r3, r0
 8003742:	460c      	mov	r4, r1
 8003744:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_GetSysClockFreq+0x158>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	0c1b      	lsrs	r3, r3, #16
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	3301      	adds	r3, #1
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	fbb2 f3f3 	udiv	r3, r2, r3
 800375e:	60bb      	str	r3, [r7, #8]
      break;
 8003760:	e002      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003764:	60bb      	str	r3, [r7, #8]
      break;
 8003766:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003768:	68bb      	ldr	r3, [r7, #8]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800
 8003778:	00f42400 	.word	0x00f42400
 800377c:	017d7840 	.word	0x017d7840

08003780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCC_GetHCLKFreq+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000000 	.word	0x20000000

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800379c:	f7ff fff0 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037a0:	4601      	mov	r1, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0a9b      	lsrs	r3, r3, #10
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4a03      	ldr	r2, [pc, #12]	; (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ae:	5cd3      	ldrb	r3, [r2, r3]
 80037b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	08008b1c 	.word	0x08008b1c

080037c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037c4:	f7ff ffdc 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037c8:	4601      	mov	r1, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0b5b      	lsrs	r3, r3, #13
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4a03      	ldr	r2, [pc, #12]	; (80037e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d6:	5cd3      	ldrb	r3, [r2, r3]
 80037d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40023800 	.word	0x40023800
 80037e4:	08008b1c 	.word	0x08008b1c

080037e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e01d      	b.n	8003836 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd f9da 	bl	8000bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3304      	adds	r3, #4
 8003824:	4619      	mov	r1, r3
 8003826:	4610      	mov	r0, r2
 8003828:	f000 f95e 	bl	8003ae8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b085      	sub	sp, #20
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0201 	orr.w	r2, r2, #1
 8003854:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b06      	cmp	r3, #6
 8003866:	d007      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b02      	cmp	r3, #2
 800389a:	d122      	bne.n	80038e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d11b      	bne.n	80038e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f06f 0202 	mvn.w	r2, #2
 80038b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f8ee 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 80038ce:	e005      	b.n	80038dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f8e0 	bl	8003a96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f8f1 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d122      	bne.n	8003936 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d11b      	bne.n	8003936 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f06f 0204 	mvn.w	r2, #4
 8003906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f8c4 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 8003922:	e005      	b.n	8003930 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f8b6 	bl	8003a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f8c7 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b08      	cmp	r3, #8
 8003942:	d122      	bne.n	800398a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b08      	cmp	r3, #8
 8003950:	d11b      	bne.n	800398a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f06f 0208 	mvn.w	r2, #8
 800395a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2204      	movs	r2, #4
 8003960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f89a 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 8003976:	e005      	b.n	8003984 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f88c 	bl	8003a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f89d 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b10      	cmp	r3, #16
 8003996:	d122      	bne.n	80039de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d11b      	bne.n	80039de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f06f 0210 	mvn.w	r2, #16
 80039ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2208      	movs	r2, #8
 80039b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f870 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 80039ca:	e005      	b.n	80039d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f862 	bl	8003a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f873 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d10e      	bne.n	8003a0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d107      	bne.n	8003a0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f06f 0201 	mvn.w	r2, #1
 8003a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7fc fe3b 	bl	8000680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a14:	2b80      	cmp	r3, #128	; 0x80
 8003a16:	d10e      	bne.n	8003a36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a22:	2b80      	cmp	r3, #128	; 0x80
 8003a24:	d107      	bne.n	8003a36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f903 	bl	8003c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d10e      	bne.n	8003a62 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	d107      	bne.n	8003a62 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f838 	bl	8003ad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d10e      	bne.n	8003a8e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d107      	bne.n	8003a8e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f06f 0220 	mvn.w	r2, #32
 8003a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f8cd 	bl	8003c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a40      	ldr	r2, [pc, #256]	; (8003bfc <TIM_Base_SetConfig+0x114>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d013      	beq.n	8003b28 <TIM_Base_SetConfig+0x40>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b06:	d00f      	beq.n	8003b28 <TIM_Base_SetConfig+0x40>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a3d      	ldr	r2, [pc, #244]	; (8003c00 <TIM_Base_SetConfig+0x118>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00b      	beq.n	8003b28 <TIM_Base_SetConfig+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a3c      	ldr	r2, [pc, #240]	; (8003c04 <TIM_Base_SetConfig+0x11c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d007      	beq.n	8003b28 <TIM_Base_SetConfig+0x40>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a3b      	ldr	r2, [pc, #236]	; (8003c08 <TIM_Base_SetConfig+0x120>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d003      	beq.n	8003b28 <TIM_Base_SetConfig+0x40>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a3a      	ldr	r2, [pc, #232]	; (8003c0c <TIM_Base_SetConfig+0x124>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d108      	bne.n	8003b3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a2f      	ldr	r2, [pc, #188]	; (8003bfc <TIM_Base_SetConfig+0x114>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d02b      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b48:	d027      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a2c      	ldr	r2, [pc, #176]	; (8003c00 <TIM_Base_SetConfig+0x118>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d023      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a2b      	ldr	r2, [pc, #172]	; (8003c04 <TIM_Base_SetConfig+0x11c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01f      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a2a      	ldr	r2, [pc, #168]	; (8003c08 <TIM_Base_SetConfig+0x120>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01b      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a29      	ldr	r2, [pc, #164]	; (8003c0c <TIM_Base_SetConfig+0x124>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d017      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a28      	ldr	r2, [pc, #160]	; (8003c10 <TIM_Base_SetConfig+0x128>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a27      	ldr	r2, [pc, #156]	; (8003c14 <TIM_Base_SetConfig+0x12c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00f      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a26      	ldr	r2, [pc, #152]	; (8003c18 <TIM_Base_SetConfig+0x130>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00b      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a25      	ldr	r2, [pc, #148]	; (8003c1c <TIM_Base_SetConfig+0x134>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d007      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a24      	ldr	r2, [pc, #144]	; (8003c20 <TIM_Base_SetConfig+0x138>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d003      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a23      	ldr	r2, [pc, #140]	; (8003c24 <TIM_Base_SetConfig+0x13c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d108      	bne.n	8003bac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <TIM_Base_SetConfig+0x114>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <TIM_Base_SetConfig+0xf8>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a0c      	ldr	r2, [pc, #48]	; (8003c0c <TIM_Base_SetConfig+0x124>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d103      	bne.n	8003be8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	615a      	str	r2, [r3, #20]
}
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800
 8003c08:	40000c00 	.word	0x40000c00
 8003c0c:	40010400 	.word	0x40010400
 8003c10:	40014000 	.word	0x40014000
 8003c14:	40014400 	.word	0x40014400
 8003c18:	40014800 	.word	0x40014800
 8003c1c:	40001800 	.word	0x40001800
 8003c20:	40001c00 	.word	0x40001c00
 8003c24:	40002000 	.word	0x40002000

08003c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e03f      	b.n	8003ce2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fc ffce 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2224      	movs	r2, #36	; 0x24
 8003c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fb4b 	bl	8004330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b088      	sub	sp, #32
 8003cee:	af02      	add	r7, sp, #8
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	603b      	str	r3, [r7, #0]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	f040 8083 	bne.w	8003e12 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_UART_Transmit+0x2e>
 8003d12:	88fb      	ldrh	r3, [r7, #6]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e07b      	b.n	8003e14 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_UART_Transmit+0x40>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e074      	b.n	8003e14 <HAL_UART_Transmit+0x12a>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2221      	movs	r2, #33	; 0x21
 8003d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d40:	f7fd f8e2 	bl	8000f08 <HAL_GetTick>
 8003d44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	88fa      	ldrh	r2, [r7, #6]
 8003d4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	88fa      	ldrh	r2, [r7, #6]
 8003d50:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003d5a:	e042      	b.n	8003de2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d72:	d122      	bne.n	8003dba <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2180      	movs	r1, #128	; 0x80
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f96a 	bl	8004058 <UART_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e042      	b.n	8003e14 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d103      	bne.n	8003db2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	3302      	adds	r3, #2
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	e017      	b.n	8003de2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3301      	adds	r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	e013      	b.n	8003de2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2180      	movs	r1, #128	; 0x80
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f947 	bl	8004058 <UART_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e01f      	b.n	8003e14 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	60ba      	str	r2, [r7, #8]
 8003dda:	781a      	ldrb	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1b7      	bne.n	8003d5c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2200      	movs	r2, #0
 8003df4:	2140      	movs	r1, #64	; 0x40
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f92e 	bl	8004058 <UART_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e006      	b.n	8003e14 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10d      	bne.n	8003e6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <HAL_UART_IRQHandler+0x52>
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f9e0 	bl	800422c <UART_Receive_IT>
      return;
 8003e6c:	e0d1      	b.n	8004012 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 80b0 	beq.w	8003fd6 <HAL_UART_IRQHandler+0x1ba>
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <HAL_UART_IRQHandler+0x70>
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 80a5 	beq.w	8003fd6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_UART_IRQHandler+0x90>
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea4:	f043 0201 	orr.w	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_UART_IRQHandler+0xb0>
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	f043 0202 	orr.w	r2, r3, #2
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_UART_IRQHandler+0xd0>
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee4:	f043 0204 	orr.w	r2, r3, #4
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00f      	beq.n	8003f16 <HAL_UART_IRQHandler+0xfa>
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d104      	bne.n	8003f0a <HAL_UART_IRQHandler+0xee>
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0e:	f043 0208 	orr.w	r2, r3, #8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d078      	beq.n	8004010 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d007      	beq.n	8003f38 <HAL_UART_IRQHandler+0x11c>
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f97a 	bl	800422c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	2b40      	cmp	r3, #64	; 0x40
 8003f44:	bf0c      	ite	eq
 8003f46:	2301      	moveq	r3, #1
 8003f48:	2300      	movne	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d102      	bne.n	8003f60 <HAL_UART_IRQHandler+0x144>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d031      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f8c3 	bl	80040ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f70:	2b40      	cmp	r3, #64	; 0x40
 8003f72:	d123      	bne.n	8003fbc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695a      	ldr	r2, [r3, #20]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f82:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d013      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f90:	4a21      	ldr	r2, [pc, #132]	; (8004018 <HAL_UART_IRQHandler+0x1fc>)
 8003f92:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fd fb56 	bl	800164a <HAL_DMA_Abort_IT>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d016      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fae:	4610      	mov	r0, r2
 8003fb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb2:	e00e      	b.n	8003fd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f845 	bl	8004044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fba:	e00a      	b.n	8003fd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f841 	bl	8004044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc2:	e006      	b.n	8003fd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f83d 	bl	8004044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003fd0:	e01e      	b.n	8004010 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd2:	bf00      	nop
    return;
 8003fd4:	e01c      	b.n	8004010 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x1d6>
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f8b0 	bl	8004150 <UART_Transmit_IT>
    return;
 8003ff0:	e00f      	b.n	8004012 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <HAL_UART_IRQHandler+0x1f6>
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d005      	beq.n	8004012 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f8f8 	bl	80041fc <UART_EndTransmit_IT>
    return;
 800400c:	bf00      	nop
 800400e:	e000      	b.n	8004012 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004010:	bf00      	nop
  }
}
 8004012:	3720      	adds	r7, #32
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	08004129 	.word	0x08004129

0800401c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004068:	e02c      	b.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004070:	d028      	beq.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <UART_WaitOnFlagUntilTimeout+0x30>
 8004078:	f7fc ff46 	bl	8000f08 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	429a      	cmp	r2, r3
 8004086:	d21d      	bcs.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004096:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e00f      	b.n	80040e4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4013      	ands	r3, r2
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	79fb      	ldrb	r3, [r7, #7]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d0c3      	beq.n	800406a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004102:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695a      	ldr	r2, [r3, #20]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0201 	bic.w	r2, r2, #1
 8004112:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f7ff ff7e 	bl	8004044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b21      	cmp	r3, #33	; 0x21
 8004162:	d144      	bne.n	80041ee <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416c:	d11a      	bne.n	80041a4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004182:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	1c9a      	adds	r2, r3, #2
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	621a      	str	r2, [r3, #32]
 8004196:	e00e      	b.n	80041b6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	621a      	str	r2, [r3, #32]
 80041a2:	e008      	b.n	80041b6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	1c59      	adds	r1, r3, #1
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6211      	str	r1, [r2, #32]
 80041ae:	781a      	ldrb	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29b      	uxth	r3, r3
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	4619      	mov	r1, r3
 80041c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10f      	bne.n	80041ea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	e000      	b.n	80041f0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80041ee:	2302      	movs	r3, #2
  }
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004212:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff fefd 	bl	800401c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b22      	cmp	r3, #34	; 0x22
 800423e:	d171      	bne.n	8004324 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004248:	d123      	bne.n	8004292 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10e      	bne.n	8004276 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	1c9a      	adds	r2, r3, #2
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	629a      	str	r2, [r3, #40]	; 0x28
 8004274:	e029      	b.n	80042ca <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	b29b      	uxth	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	629a      	str	r2, [r3, #40]	; 0x28
 8004290:	e01b      	b.n	80042ca <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6858      	ldr	r0, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	1c59      	adds	r1, r3, #1
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6291      	str	r1, [r2, #40]	; 0x28
 80042aa:	b2c2      	uxtb	r2, r0
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e00c      	b.n	80042ca <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	1c58      	adds	r0, r3, #1
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	6288      	str	r0, [r1, #40]	; 0x28
 80042c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	4619      	mov	r1, r3
 80042d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d120      	bne.n	8004320 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0220 	bic.w	r2, r2, #32
 80042ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff fe8a 	bl	8004030 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e002      	b.n	8004326 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	e000      	b.n	8004326 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004324:	2302      	movs	r3, #2
  }
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004372:	f023 030c 	bic.w	r3, r3, #12
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	430b      	orrs	r3, r1
 800437e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439e:	f040 818b 	bne.w	80046b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4ac1      	ldr	r2, [pc, #772]	; (80046ac <UART_SetConfig+0x37c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d005      	beq.n	80043b8 <UART_SetConfig+0x88>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4abf      	ldr	r2, [pc, #764]	; (80046b0 <UART_SetConfig+0x380>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	f040 80bd 	bne.w	8004532 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043b8:	f7ff fa02 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 80043bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	461d      	mov	r5, r3
 80043c2:	f04f 0600 	mov.w	r6, #0
 80043c6:	46a8      	mov	r8, r5
 80043c8:	46b1      	mov	r9, r6
 80043ca:	eb18 0308 	adds.w	r3, r8, r8
 80043ce:	eb49 0409 	adc.w	r4, r9, r9
 80043d2:	4698      	mov	r8, r3
 80043d4:	46a1      	mov	r9, r4
 80043d6:	eb18 0805 	adds.w	r8, r8, r5
 80043da:	eb49 0906 	adc.w	r9, r9, r6
 80043de:	f04f 0100 	mov.w	r1, #0
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043f2:	4688      	mov	r8, r1
 80043f4:	4691      	mov	r9, r2
 80043f6:	eb18 0005 	adds.w	r0, r8, r5
 80043fa:	eb49 0106 	adc.w	r1, r9, r6
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	461d      	mov	r5, r3
 8004404:	f04f 0600 	mov.w	r6, #0
 8004408:	196b      	adds	r3, r5, r5
 800440a:	eb46 0406 	adc.w	r4, r6, r6
 800440e:	461a      	mov	r2, r3
 8004410:	4623      	mov	r3, r4
 8004412:	f7fb ff2d 	bl	8000270 <__aeabi_uldivmod>
 8004416:	4603      	mov	r3, r0
 8004418:	460c      	mov	r4, r1
 800441a:	461a      	mov	r2, r3
 800441c:	4ba5      	ldr	r3, [pc, #660]	; (80046b4 <UART_SetConfig+0x384>)
 800441e:	fba3 2302 	umull	r2, r3, r3, r2
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	461d      	mov	r5, r3
 800442c:	f04f 0600 	mov.w	r6, #0
 8004430:	46a9      	mov	r9, r5
 8004432:	46b2      	mov	sl, r6
 8004434:	eb19 0309 	adds.w	r3, r9, r9
 8004438:	eb4a 040a 	adc.w	r4, sl, sl
 800443c:	4699      	mov	r9, r3
 800443e:	46a2      	mov	sl, r4
 8004440:	eb19 0905 	adds.w	r9, r9, r5
 8004444:	eb4a 0a06 	adc.w	sl, sl, r6
 8004448:	f04f 0100 	mov.w	r1, #0
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004454:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004458:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800445c:	4689      	mov	r9, r1
 800445e:	4692      	mov	sl, r2
 8004460:	eb19 0005 	adds.w	r0, r9, r5
 8004464:	eb4a 0106 	adc.w	r1, sl, r6
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	461d      	mov	r5, r3
 800446e:	f04f 0600 	mov.w	r6, #0
 8004472:	196b      	adds	r3, r5, r5
 8004474:	eb46 0406 	adc.w	r4, r6, r6
 8004478:	461a      	mov	r2, r3
 800447a:	4623      	mov	r3, r4
 800447c:	f7fb fef8 	bl	8000270 <__aeabi_uldivmod>
 8004480:	4603      	mov	r3, r0
 8004482:	460c      	mov	r4, r1
 8004484:	461a      	mov	r2, r3
 8004486:	4b8b      	ldr	r3, [pc, #556]	; (80046b4 <UART_SetConfig+0x384>)
 8004488:	fba3 1302 	umull	r1, r3, r3, r2
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	2164      	movs	r1, #100	; 0x64
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	3332      	adds	r3, #50	; 0x32
 800449a:	4a86      	ldr	r2, [pc, #536]	; (80046b4 <UART_SetConfig+0x384>)
 800449c:	fba2 2303 	umull	r2, r3, r2, r3
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044a8:	4498      	add	r8, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	461d      	mov	r5, r3
 80044ae:	f04f 0600 	mov.w	r6, #0
 80044b2:	46a9      	mov	r9, r5
 80044b4:	46b2      	mov	sl, r6
 80044b6:	eb19 0309 	adds.w	r3, r9, r9
 80044ba:	eb4a 040a 	adc.w	r4, sl, sl
 80044be:	4699      	mov	r9, r3
 80044c0:	46a2      	mov	sl, r4
 80044c2:	eb19 0905 	adds.w	r9, r9, r5
 80044c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044de:	4689      	mov	r9, r1
 80044e0:	4692      	mov	sl, r2
 80044e2:	eb19 0005 	adds.w	r0, r9, r5
 80044e6:	eb4a 0106 	adc.w	r1, sl, r6
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	461d      	mov	r5, r3
 80044f0:	f04f 0600 	mov.w	r6, #0
 80044f4:	196b      	adds	r3, r5, r5
 80044f6:	eb46 0406 	adc.w	r4, r6, r6
 80044fa:	461a      	mov	r2, r3
 80044fc:	4623      	mov	r3, r4
 80044fe:	f7fb feb7 	bl	8000270 <__aeabi_uldivmod>
 8004502:	4603      	mov	r3, r0
 8004504:	460c      	mov	r4, r1
 8004506:	461a      	mov	r2, r3
 8004508:	4b6a      	ldr	r3, [pc, #424]	; (80046b4 <UART_SetConfig+0x384>)
 800450a:	fba3 1302 	umull	r1, r3, r3, r2
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	2164      	movs	r1, #100	; 0x64
 8004512:	fb01 f303 	mul.w	r3, r1, r3
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	3332      	adds	r3, #50	; 0x32
 800451c:	4a65      	ldr	r2, [pc, #404]	; (80046b4 <UART_SetConfig+0x384>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	f003 0207 	and.w	r2, r3, #7
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4442      	add	r2, r8
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	e26f      	b.n	8004a12 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004532:	f7ff f931 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8004536:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	461d      	mov	r5, r3
 800453c:	f04f 0600 	mov.w	r6, #0
 8004540:	46a8      	mov	r8, r5
 8004542:	46b1      	mov	r9, r6
 8004544:	eb18 0308 	adds.w	r3, r8, r8
 8004548:	eb49 0409 	adc.w	r4, r9, r9
 800454c:	4698      	mov	r8, r3
 800454e:	46a1      	mov	r9, r4
 8004550:	eb18 0805 	adds.w	r8, r8, r5
 8004554:	eb49 0906 	adc.w	r9, r9, r6
 8004558:	f04f 0100 	mov.w	r1, #0
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004564:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004568:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800456c:	4688      	mov	r8, r1
 800456e:	4691      	mov	r9, r2
 8004570:	eb18 0005 	adds.w	r0, r8, r5
 8004574:	eb49 0106 	adc.w	r1, r9, r6
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	461d      	mov	r5, r3
 800457e:	f04f 0600 	mov.w	r6, #0
 8004582:	196b      	adds	r3, r5, r5
 8004584:	eb46 0406 	adc.w	r4, r6, r6
 8004588:	461a      	mov	r2, r3
 800458a:	4623      	mov	r3, r4
 800458c:	f7fb fe70 	bl	8000270 <__aeabi_uldivmod>
 8004590:	4603      	mov	r3, r0
 8004592:	460c      	mov	r4, r1
 8004594:	461a      	mov	r2, r3
 8004596:	4b47      	ldr	r3, [pc, #284]	; (80046b4 <UART_SetConfig+0x384>)
 8004598:	fba3 2302 	umull	r2, r3, r3, r2
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	461d      	mov	r5, r3
 80045a6:	f04f 0600 	mov.w	r6, #0
 80045aa:	46a9      	mov	r9, r5
 80045ac:	46b2      	mov	sl, r6
 80045ae:	eb19 0309 	adds.w	r3, r9, r9
 80045b2:	eb4a 040a 	adc.w	r4, sl, sl
 80045b6:	4699      	mov	r9, r3
 80045b8:	46a2      	mov	sl, r4
 80045ba:	eb19 0905 	adds.w	r9, r9, r5
 80045be:	eb4a 0a06 	adc.w	sl, sl, r6
 80045c2:	f04f 0100 	mov.w	r1, #0
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045d6:	4689      	mov	r9, r1
 80045d8:	4692      	mov	sl, r2
 80045da:	eb19 0005 	adds.w	r0, r9, r5
 80045de:	eb4a 0106 	adc.w	r1, sl, r6
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	461d      	mov	r5, r3
 80045e8:	f04f 0600 	mov.w	r6, #0
 80045ec:	196b      	adds	r3, r5, r5
 80045ee:	eb46 0406 	adc.w	r4, r6, r6
 80045f2:	461a      	mov	r2, r3
 80045f4:	4623      	mov	r3, r4
 80045f6:	f7fb fe3b 	bl	8000270 <__aeabi_uldivmod>
 80045fa:	4603      	mov	r3, r0
 80045fc:	460c      	mov	r4, r1
 80045fe:	461a      	mov	r2, r3
 8004600:	4b2c      	ldr	r3, [pc, #176]	; (80046b4 <UART_SetConfig+0x384>)
 8004602:	fba3 1302 	umull	r1, r3, r3, r2
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	2164      	movs	r1, #100	; 0x64
 800460a:	fb01 f303 	mul.w	r3, r1, r3
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	3332      	adds	r3, #50	; 0x32
 8004614:	4a27      	ldr	r2, [pc, #156]	; (80046b4 <UART_SetConfig+0x384>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004622:	4498      	add	r8, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	461d      	mov	r5, r3
 8004628:	f04f 0600 	mov.w	r6, #0
 800462c:	46a9      	mov	r9, r5
 800462e:	46b2      	mov	sl, r6
 8004630:	eb19 0309 	adds.w	r3, r9, r9
 8004634:	eb4a 040a 	adc.w	r4, sl, sl
 8004638:	4699      	mov	r9, r3
 800463a:	46a2      	mov	sl, r4
 800463c:	eb19 0905 	adds.w	r9, r9, r5
 8004640:	eb4a 0a06 	adc.w	sl, sl, r6
 8004644:	f04f 0100 	mov.w	r1, #0
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004650:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004654:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004658:	4689      	mov	r9, r1
 800465a:	4692      	mov	sl, r2
 800465c:	eb19 0005 	adds.w	r0, r9, r5
 8004660:	eb4a 0106 	adc.w	r1, sl, r6
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	461d      	mov	r5, r3
 800466a:	f04f 0600 	mov.w	r6, #0
 800466e:	196b      	adds	r3, r5, r5
 8004670:	eb46 0406 	adc.w	r4, r6, r6
 8004674:	461a      	mov	r2, r3
 8004676:	4623      	mov	r3, r4
 8004678:	f7fb fdfa 	bl	8000270 <__aeabi_uldivmod>
 800467c:	4603      	mov	r3, r0
 800467e:	460c      	mov	r4, r1
 8004680:	461a      	mov	r2, r3
 8004682:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <UART_SetConfig+0x384>)
 8004684:	fba3 1302 	umull	r1, r3, r3, r2
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	2164      	movs	r1, #100	; 0x64
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	3332      	adds	r3, #50	; 0x32
 8004696:	4a07      	ldr	r2, [pc, #28]	; (80046b4 <UART_SetConfig+0x384>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	f003 0207 	and.w	r2, r3, #7
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4442      	add	r2, r8
 80046a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80046aa:	e1b2      	b.n	8004a12 <UART_SetConfig+0x6e2>
 80046ac:	40011000 	.word	0x40011000
 80046b0:	40011400 	.word	0x40011400
 80046b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4ad7      	ldr	r2, [pc, #860]	; (8004a1c <UART_SetConfig+0x6ec>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d005      	beq.n	80046ce <UART_SetConfig+0x39e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4ad6      	ldr	r2, [pc, #856]	; (8004a20 <UART_SetConfig+0x6f0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	f040 80d1 	bne.w	8004870 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80046ce:	f7ff f877 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 80046d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	469a      	mov	sl, r3
 80046d8:	f04f 0b00 	mov.w	fp, #0
 80046dc:	46d0      	mov	r8, sl
 80046de:	46d9      	mov	r9, fp
 80046e0:	eb18 0308 	adds.w	r3, r8, r8
 80046e4:	eb49 0409 	adc.w	r4, r9, r9
 80046e8:	4698      	mov	r8, r3
 80046ea:	46a1      	mov	r9, r4
 80046ec:	eb18 080a 	adds.w	r8, r8, sl
 80046f0:	eb49 090b 	adc.w	r9, r9, fp
 80046f4:	f04f 0100 	mov.w	r1, #0
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004700:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004704:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004708:	4688      	mov	r8, r1
 800470a:	4691      	mov	r9, r2
 800470c:	eb1a 0508 	adds.w	r5, sl, r8
 8004710:	eb4b 0609 	adc.w	r6, fp, r9
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4619      	mov	r1, r3
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	f04f 0400 	mov.w	r4, #0
 8004726:	0094      	lsls	r4, r2, #2
 8004728:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800472c:	008b      	lsls	r3, r1, #2
 800472e:	461a      	mov	r2, r3
 8004730:	4623      	mov	r3, r4
 8004732:	4628      	mov	r0, r5
 8004734:	4631      	mov	r1, r6
 8004736:	f7fb fd9b 	bl	8000270 <__aeabi_uldivmod>
 800473a:	4603      	mov	r3, r0
 800473c:	460c      	mov	r4, r1
 800473e:	461a      	mov	r2, r3
 8004740:	4bb8      	ldr	r3, [pc, #736]	; (8004a24 <UART_SetConfig+0x6f4>)
 8004742:	fba3 2302 	umull	r2, r3, r3, r2
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	469b      	mov	fp, r3
 8004750:	f04f 0c00 	mov.w	ip, #0
 8004754:	46d9      	mov	r9, fp
 8004756:	46e2      	mov	sl, ip
 8004758:	eb19 0309 	adds.w	r3, r9, r9
 800475c:	eb4a 040a 	adc.w	r4, sl, sl
 8004760:	4699      	mov	r9, r3
 8004762:	46a2      	mov	sl, r4
 8004764:	eb19 090b 	adds.w	r9, r9, fp
 8004768:	eb4a 0a0c 	adc.w	sl, sl, ip
 800476c:	f04f 0100 	mov.w	r1, #0
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004778:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800477c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004780:	4689      	mov	r9, r1
 8004782:	4692      	mov	sl, r2
 8004784:	eb1b 0509 	adds.w	r5, fp, r9
 8004788:	eb4c 060a 	adc.w	r6, ip, sl
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4619      	mov	r1, r3
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	f04f 0400 	mov.w	r4, #0
 800479e:	0094      	lsls	r4, r2, #2
 80047a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047a4:	008b      	lsls	r3, r1, #2
 80047a6:	461a      	mov	r2, r3
 80047a8:	4623      	mov	r3, r4
 80047aa:	4628      	mov	r0, r5
 80047ac:	4631      	mov	r1, r6
 80047ae:	f7fb fd5f 	bl	8000270 <__aeabi_uldivmod>
 80047b2:	4603      	mov	r3, r0
 80047b4:	460c      	mov	r4, r1
 80047b6:	461a      	mov	r2, r3
 80047b8:	4b9a      	ldr	r3, [pc, #616]	; (8004a24 <UART_SetConfig+0x6f4>)
 80047ba:	fba3 1302 	umull	r1, r3, r3, r2
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	2164      	movs	r1, #100	; 0x64
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	3332      	adds	r3, #50	; 0x32
 80047cc:	4a95      	ldr	r2, [pc, #596]	; (8004a24 <UART_SetConfig+0x6f4>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047d8:	4498      	add	r8, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	469b      	mov	fp, r3
 80047de:	f04f 0c00 	mov.w	ip, #0
 80047e2:	46d9      	mov	r9, fp
 80047e4:	46e2      	mov	sl, ip
 80047e6:	eb19 0309 	adds.w	r3, r9, r9
 80047ea:	eb4a 040a 	adc.w	r4, sl, sl
 80047ee:	4699      	mov	r9, r3
 80047f0:	46a2      	mov	sl, r4
 80047f2:	eb19 090b 	adds.w	r9, r9, fp
 80047f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047fa:	f04f 0100 	mov.w	r1, #0
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004806:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800480a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800480e:	4689      	mov	r9, r1
 8004810:	4692      	mov	sl, r2
 8004812:	eb1b 0509 	adds.w	r5, fp, r9
 8004816:	eb4c 060a 	adc.w	r6, ip, sl
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	4619      	mov	r1, r3
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	f04f 0400 	mov.w	r4, #0
 800482c:	0094      	lsls	r4, r2, #2
 800482e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004832:	008b      	lsls	r3, r1, #2
 8004834:	461a      	mov	r2, r3
 8004836:	4623      	mov	r3, r4
 8004838:	4628      	mov	r0, r5
 800483a:	4631      	mov	r1, r6
 800483c:	f7fb fd18 	bl	8000270 <__aeabi_uldivmod>
 8004840:	4603      	mov	r3, r0
 8004842:	460c      	mov	r4, r1
 8004844:	461a      	mov	r2, r3
 8004846:	4b77      	ldr	r3, [pc, #476]	; (8004a24 <UART_SetConfig+0x6f4>)
 8004848:	fba3 1302 	umull	r1, r3, r3, r2
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	2164      	movs	r1, #100	; 0x64
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	3332      	adds	r3, #50	; 0x32
 800485a:	4a72      	ldr	r2, [pc, #456]	; (8004a24 <UART_SetConfig+0x6f4>)
 800485c:	fba2 2303 	umull	r2, r3, r2, r3
 8004860:	095b      	lsrs	r3, r3, #5
 8004862:	f003 020f 	and.w	r2, r3, #15
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4442      	add	r2, r8
 800486c:	609a      	str	r2, [r3, #8]
 800486e:	e0d0      	b.n	8004a12 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004870:	f7fe ff92 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8004874:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	469a      	mov	sl, r3
 800487a:	f04f 0b00 	mov.w	fp, #0
 800487e:	46d0      	mov	r8, sl
 8004880:	46d9      	mov	r9, fp
 8004882:	eb18 0308 	adds.w	r3, r8, r8
 8004886:	eb49 0409 	adc.w	r4, r9, r9
 800488a:	4698      	mov	r8, r3
 800488c:	46a1      	mov	r9, r4
 800488e:	eb18 080a 	adds.w	r8, r8, sl
 8004892:	eb49 090b 	adc.w	r9, r9, fp
 8004896:	f04f 0100 	mov.w	r1, #0
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80048aa:	4688      	mov	r8, r1
 80048ac:	4691      	mov	r9, r2
 80048ae:	eb1a 0508 	adds.w	r5, sl, r8
 80048b2:	eb4b 0609 	adc.w	r6, fp, r9
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	4619      	mov	r1, r3
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	f04f 0400 	mov.w	r4, #0
 80048c8:	0094      	lsls	r4, r2, #2
 80048ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048ce:	008b      	lsls	r3, r1, #2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4623      	mov	r3, r4
 80048d4:	4628      	mov	r0, r5
 80048d6:	4631      	mov	r1, r6
 80048d8:	f7fb fcca 	bl	8000270 <__aeabi_uldivmod>
 80048dc:	4603      	mov	r3, r0
 80048de:	460c      	mov	r4, r1
 80048e0:	461a      	mov	r2, r3
 80048e2:	4b50      	ldr	r3, [pc, #320]	; (8004a24 <UART_SetConfig+0x6f4>)
 80048e4:	fba3 2302 	umull	r2, r3, r3, r2
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	469b      	mov	fp, r3
 80048f2:	f04f 0c00 	mov.w	ip, #0
 80048f6:	46d9      	mov	r9, fp
 80048f8:	46e2      	mov	sl, ip
 80048fa:	eb19 0309 	adds.w	r3, r9, r9
 80048fe:	eb4a 040a 	adc.w	r4, sl, sl
 8004902:	4699      	mov	r9, r3
 8004904:	46a2      	mov	sl, r4
 8004906:	eb19 090b 	adds.w	r9, r9, fp
 800490a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800490e:	f04f 0100 	mov.w	r1, #0
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800491a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800491e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004922:	4689      	mov	r9, r1
 8004924:	4692      	mov	sl, r2
 8004926:	eb1b 0509 	adds.w	r5, fp, r9
 800492a:	eb4c 060a 	adc.w	r6, ip, sl
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4619      	mov	r1, r3
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	f04f 0400 	mov.w	r4, #0
 8004940:	0094      	lsls	r4, r2, #2
 8004942:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004946:	008b      	lsls	r3, r1, #2
 8004948:	461a      	mov	r2, r3
 800494a:	4623      	mov	r3, r4
 800494c:	4628      	mov	r0, r5
 800494e:	4631      	mov	r1, r6
 8004950:	f7fb fc8e 	bl	8000270 <__aeabi_uldivmod>
 8004954:	4603      	mov	r3, r0
 8004956:	460c      	mov	r4, r1
 8004958:	461a      	mov	r2, r3
 800495a:	4b32      	ldr	r3, [pc, #200]	; (8004a24 <UART_SetConfig+0x6f4>)
 800495c:	fba3 1302 	umull	r1, r3, r3, r2
 8004960:	095b      	lsrs	r3, r3, #5
 8004962:	2164      	movs	r1, #100	; 0x64
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	3332      	adds	r3, #50	; 0x32
 800496e:	4a2d      	ldr	r2, [pc, #180]	; (8004a24 <UART_SetConfig+0x6f4>)
 8004970:	fba2 2303 	umull	r2, r3, r2, r3
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800497a:	4498      	add	r8, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	469b      	mov	fp, r3
 8004980:	f04f 0c00 	mov.w	ip, #0
 8004984:	46d9      	mov	r9, fp
 8004986:	46e2      	mov	sl, ip
 8004988:	eb19 0309 	adds.w	r3, r9, r9
 800498c:	eb4a 040a 	adc.w	r4, sl, sl
 8004990:	4699      	mov	r9, r3
 8004992:	46a2      	mov	sl, r4
 8004994:	eb19 090b 	adds.w	r9, r9, fp
 8004998:	eb4a 0a0c 	adc.w	sl, sl, ip
 800499c:	f04f 0100 	mov.w	r1, #0
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049b0:	4689      	mov	r9, r1
 80049b2:	4692      	mov	sl, r2
 80049b4:	eb1b 0509 	adds.w	r5, fp, r9
 80049b8:	eb4c 060a 	adc.w	r6, ip, sl
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	4619      	mov	r1, r3
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	f04f 0400 	mov.w	r4, #0
 80049ce:	0094      	lsls	r4, r2, #2
 80049d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049d4:	008b      	lsls	r3, r1, #2
 80049d6:	461a      	mov	r2, r3
 80049d8:	4623      	mov	r3, r4
 80049da:	4628      	mov	r0, r5
 80049dc:	4631      	mov	r1, r6
 80049de:	f7fb fc47 	bl	8000270 <__aeabi_uldivmod>
 80049e2:	4603      	mov	r3, r0
 80049e4:	460c      	mov	r4, r1
 80049e6:	461a      	mov	r2, r3
 80049e8:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <UART_SetConfig+0x6f4>)
 80049ea:	fba3 1302 	umull	r1, r3, r3, r2
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	2164      	movs	r1, #100	; 0x64
 80049f2:	fb01 f303 	mul.w	r3, r1, r3
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	3332      	adds	r3, #50	; 0x32
 80049fc:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <UART_SetConfig+0x6f4>)
 80049fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	f003 020f 	and.w	r2, r3, #15
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4442      	add	r2, r8
 8004a0e:	609a      	str	r2, [r3, #8]
}
 8004a10:	e7ff      	b.n	8004a12 <UART_SetConfig+0x6e2>
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a1c:	40011000 	.word	0x40011000
 8004a20:	40011400 	.word	0x40011400
 8004a24:	51eb851f 	.word	0x51eb851f

08004a28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a28:	b084      	sub	sp, #16
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	f107 001c 	add.w	r0, r7, #28
 8004a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d122      	bne.n	8004a86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d105      	bne.n	8004a7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f001 fac6 	bl	800600c <USB_CoreReset>
 8004a80:	4603      	mov	r3, r0
 8004a82:	73fb      	strb	r3, [r7, #15]
 8004a84:	e01a      	b.n	8004abc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f001 faba 	bl	800600c <USB_CoreReset>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
 8004aae:	e005      	b.n	8004abc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d10b      	bne.n	8004ada <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f043 0206 	orr.w	r2, r3, #6
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ae6:	b004      	add	sp, #16
 8004ae8:	4770      	bx	lr
	...

08004aec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	4613      	mov	r3, r2
 8004af8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d165      	bne.n	8004bcc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4a41      	ldr	r2, [pc, #260]	; (8004c08 <USB_SetTurnaroundTime+0x11c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d906      	bls.n	8004b16 <USB_SetTurnaroundTime+0x2a>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4a40      	ldr	r2, [pc, #256]	; (8004c0c <USB_SetTurnaroundTime+0x120>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d802      	bhi.n	8004b16 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b10:	230f      	movs	r3, #15
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	e062      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	4a3c      	ldr	r2, [pc, #240]	; (8004c0c <USB_SetTurnaroundTime+0x120>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d906      	bls.n	8004b2c <USB_SetTurnaroundTime+0x40>
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	4a3b      	ldr	r2, [pc, #236]	; (8004c10 <USB_SetTurnaroundTime+0x124>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d802      	bhi.n	8004b2c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b26:	230e      	movs	r3, #14
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	e057      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4a38      	ldr	r2, [pc, #224]	; (8004c10 <USB_SetTurnaroundTime+0x124>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d906      	bls.n	8004b42 <USB_SetTurnaroundTime+0x56>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4a37      	ldr	r2, [pc, #220]	; (8004c14 <USB_SetTurnaroundTime+0x128>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d802      	bhi.n	8004b42 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b3c:	230d      	movs	r3, #13
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	e04c      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4a33      	ldr	r2, [pc, #204]	; (8004c14 <USB_SetTurnaroundTime+0x128>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d906      	bls.n	8004b58 <USB_SetTurnaroundTime+0x6c>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	4a32      	ldr	r2, [pc, #200]	; (8004c18 <USB_SetTurnaroundTime+0x12c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d802      	bhi.n	8004b58 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b52:	230c      	movs	r3, #12
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e041      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4a2f      	ldr	r2, [pc, #188]	; (8004c18 <USB_SetTurnaroundTime+0x12c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d906      	bls.n	8004b6e <USB_SetTurnaroundTime+0x82>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4a2e      	ldr	r2, [pc, #184]	; (8004c1c <USB_SetTurnaroundTime+0x130>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d802      	bhi.n	8004b6e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b68:	230b      	movs	r3, #11
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	e036      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4a2a      	ldr	r2, [pc, #168]	; (8004c1c <USB_SetTurnaroundTime+0x130>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d906      	bls.n	8004b84 <USB_SetTurnaroundTime+0x98>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	4a29      	ldr	r2, [pc, #164]	; (8004c20 <USB_SetTurnaroundTime+0x134>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d802      	bhi.n	8004b84 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b7e:	230a      	movs	r3, #10
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	e02b      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4a26      	ldr	r2, [pc, #152]	; (8004c20 <USB_SetTurnaroundTime+0x134>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d906      	bls.n	8004b9a <USB_SetTurnaroundTime+0xae>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4a25      	ldr	r2, [pc, #148]	; (8004c24 <USB_SetTurnaroundTime+0x138>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d802      	bhi.n	8004b9a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b94:	2309      	movs	r3, #9
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e020      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4a21      	ldr	r2, [pc, #132]	; (8004c24 <USB_SetTurnaroundTime+0x138>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d906      	bls.n	8004bb0 <USB_SetTurnaroundTime+0xc4>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4a20      	ldr	r2, [pc, #128]	; (8004c28 <USB_SetTurnaroundTime+0x13c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d802      	bhi.n	8004bb0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004baa:	2308      	movs	r3, #8
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e015      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <USB_SetTurnaroundTime+0x13c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d906      	bls.n	8004bc6 <USB_SetTurnaroundTime+0xda>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4a1c      	ldr	r2, [pc, #112]	; (8004c2c <USB_SetTurnaroundTime+0x140>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d802      	bhi.n	8004bc6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004bc0:	2307      	movs	r3, #7
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e00a      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004bc6:	2306      	movs	r3, #6
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	e007      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d102      	bne.n	8004bd8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004bd2:	2309      	movs	r3, #9
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	e001      	b.n	8004bdc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004bd8:	2309      	movs	r3, #9
 8004bda:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	029b      	lsls	r3, r3, #10
 8004bf0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	00d8acbf 	.word	0x00d8acbf
 8004c0c:	00e4e1bf 	.word	0x00e4e1bf
 8004c10:	00f423ff 	.word	0x00f423ff
 8004c14:	0106737f 	.word	0x0106737f
 8004c18:	011a499f 	.word	0x011a499f
 8004c1c:	01312cff 	.word	0x01312cff
 8004c20:	014ca43f 	.word	0x014ca43f
 8004c24:	016e35ff 	.word	0x016e35ff
 8004c28:	01a6ab1f 	.word	0x01a6ab1f
 8004c2c:	01e847ff 	.word	0x01e847ff

08004c30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f043 0201 	orr.w	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f023 0201 	bic.w	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d106      	bne.n	8004ca0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	e00b      	b.n	8004cb8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	e001      	b.n	8004cb8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e003      	b.n	8004cc0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004cb8:	2032      	movs	r0, #50	; 0x32
 8004cba:	f7fc f931 	bl	8000f20 <HAL_Delay>

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cc8:	b084      	sub	sp, #16
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b086      	sub	sp, #24
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	e009      	b.n	8004cfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	3340      	adds	r3, #64	; 0x40
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	2b0e      	cmp	r3, #14
 8004d00:	d9f2      	bls.n	8004ce8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d11c      	bne.n	8004d42 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d16:	f043 0302 	orr.w	r3, r3, #2
 8004d1a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	639a      	str	r2, [r3, #56]	; 0x38
 8004d40:	e00b      	b.n	8004d5a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d60:	461a      	mov	r2, r3
 8004d62:	2300      	movs	r3, #0
 8004d64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d74:	461a      	mov	r2, r3
 8004d76:	680b      	ldr	r3, [r1, #0]
 8004d78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d10c      	bne.n	8004d9a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d104      	bne.n	8004d90 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d86:	2100      	movs	r1, #0
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f949 	bl	8005020 <USB_SetDevSpeed>
 8004d8e:	e008      	b.n	8004da2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d90:	2101      	movs	r1, #1
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f944 	bl	8005020 <USB_SetDevSpeed>
 8004d98:	e003      	b.n	8004da2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d9a:	2103      	movs	r1, #3
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f93f 	bl	8005020 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004da2:	2110      	movs	r1, #16
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f8f3 	bl	8004f90 <USB_FlushTxFifo>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f911 	bl	8004fdc <USB_FlushRxFifo>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dca:	461a      	mov	r2, r3
 8004dcc:	2300      	movs	r3, #0
 8004dce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	2300      	movs	r3, #0
 8004dda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de2:	461a      	mov	r2, r3
 8004de4:	2300      	movs	r3, #0
 8004de6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004de8:	2300      	movs	r3, #0
 8004dea:	613b      	str	r3, [r7, #16]
 8004dec:	e043      	b.n	8004e76 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e04:	d118      	bne.n	8004e38 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	e013      	b.n	8004e4a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e008      	b.n	8004e4a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	461a      	mov	r2, r3
 8004e46:	2300      	movs	r3, #0
 8004e48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e56:	461a      	mov	r2, r3
 8004e58:	2300      	movs	r3, #0
 8004e5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	3301      	adds	r3, #1
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d3b7      	bcc.n	8004dee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e7e:	2300      	movs	r3, #0
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	e043      	b.n	8004f0c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e9a:	d118      	bne.n	8004ece <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10a      	bne.n	8004eb8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	e013      	b.n	8004ee0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	e008      	b.n	8004ee0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eda:	461a      	mov	r2, r3
 8004edc:	2300      	movs	r3, #0
 8004ede:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eec:	461a      	mov	r2, r3
 8004eee:	2300      	movs	r3, #0
 8004ef0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efe:	461a      	mov	r2, r3
 8004f00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d3b7      	bcc.n	8004e84 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d105      	bne.n	8004f48 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f043 0210 	orr.w	r2, r3, #16
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699a      	ldr	r2, [r3, #24]
 8004f4c:	4b0f      	ldr	r3, [pc, #60]	; (8004f8c <USB_DevInit+0x2c4>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f043 0208 	orr.w	r2, r3, #8
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d107      	bne.n	8004f7c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f74:	f043 0304 	orr.w	r3, r3, #4
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f88:	b004      	add	sp, #16
 8004f8a:	4770      	bx	lr
 8004f8c:	803c3800 	.word	0x803c3800

08004f90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	019b      	lsls	r3, r3, #6
 8004fa2:	f043 0220 	orr.w	r2, r3, #32
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3301      	adds	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4a09      	ldr	r2, [pc, #36]	; (8004fd8 <USB_FlushTxFifo+0x48>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d901      	bls.n	8004fbc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e006      	b.n	8004fca <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f003 0320 	and.w	r3, r3, #32
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d0f0      	beq.n	8004faa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	00030d40 	.word	0x00030d40

08004fdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2210      	movs	r2, #16
 8004fec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <USB_FlushRxFifo+0x40>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d901      	bls.n	8005000 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e006      	b.n	800500e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b10      	cmp	r3, #16
 800500a:	d0f0      	beq.n	8004fee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	00030d40 	.word	0x00030d40

08005020 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	68f9      	ldr	r1, [r7, #12]
 800503c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005040:	4313      	orrs	r3, r2
 8005042:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005052:	b480      	push	{r7}
 8005054:	b087      	sub	sp, #28
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 0306 	and.w	r3, r3, #6
 800506a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d102      	bne.n	8005078 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005072:	2300      	movs	r3, #0
 8005074:	75fb      	strb	r3, [r7, #23]
 8005076:	e00a      	b.n	800508e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d002      	beq.n	8005084 <USB_GetDevSpeed+0x32>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b06      	cmp	r3, #6
 8005082:	d102      	bne.n	800508a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005084:	2302      	movs	r3, #2
 8005086:	75fb      	strb	r3, [r7, #23]
 8005088:	e001      	b.n	800508e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800508a:	230f      	movs	r3, #15
 800508c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800508e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005090:	4618      	mov	r0, r3
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d13a      	bne.n	800512e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050be:	69da      	ldr	r2, [r3, #28]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	f003 030f 	and.w	r3, r3, #15
 80050c8:	2101      	movs	r1, #1
 80050ca:	fa01 f303 	lsl.w	r3, r1, r3
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	68f9      	ldr	r1, [r7, #12]
 80050d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050d6:	4313      	orrs	r3, r2
 80050d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d155      	bne.n	800519c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	78db      	ldrb	r3, [r3, #3]
 800510a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800510c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	059b      	lsls	r3, r3, #22
 8005112:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005114:	4313      	orrs	r3, r2
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	0151      	lsls	r1, r2, #5
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	440a      	add	r2, r1
 800511e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	e036      	b.n	800519c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005134:	69da      	ldr	r2, [r3, #28]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	2101      	movs	r1, #1
 8005140:	fa01 f303 	lsl.w	r3, r1, r3
 8005144:	041b      	lsls	r3, r3, #16
 8005146:	68f9      	ldr	r1, [r7, #12]
 8005148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800514c:	4313      	orrs	r3, r2
 800514e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d11a      	bne.n	800519c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	78db      	ldrb	r3, [r3, #3]
 8005180:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005182:	430b      	orrs	r3, r1
 8005184:	4313      	orrs	r3, r2
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	0151      	lsls	r1, r2, #5
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	440a      	add	r2, r1
 800518e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800519a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	785b      	ldrb	r3, [r3, #1]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d161      	bne.n	800528c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051de:	d11f      	bne.n	8005220 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800521e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	2101      	movs	r1, #1
 8005232:	fa01 f303 	lsl.w	r3, r1, r3
 8005236:	b29b      	uxth	r3, r3
 8005238:	43db      	mvns	r3, r3
 800523a:	68f9      	ldr	r1, [r7, #12]
 800523c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005240:	4013      	ands	r3, r2
 8005242:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	2101      	movs	r1, #1
 8005256:	fa01 f303 	lsl.w	r3, r1, r3
 800525a:	b29b      	uxth	r3, r3
 800525c:	43db      	mvns	r3, r3
 800525e:	68f9      	ldr	r1, [r7, #12]
 8005260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005264:	4013      	ands	r3, r2
 8005266:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	0159      	lsls	r1, r3, #5
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	440b      	add	r3, r1
 800527e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005282:	4619      	mov	r1, r3
 8005284:	4b35      	ldr	r3, [pc, #212]	; (800535c <USB_DeactivateEndpoint+0x1b0>)
 8005286:	4013      	ands	r3, r2
 8005288:	600b      	str	r3, [r1, #0]
 800528a:	e060      	b.n	800534e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800529e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052a2:	d11f      	bne.n	80052e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	0151      	lsls	r1, r2, #5
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	440a      	add	r2, r1
 80052da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	f003 030f 	and.w	r3, r3, #15
 80052f4:	2101      	movs	r1, #1
 80052f6:	fa01 f303 	lsl.w	r3, r1, r3
 80052fa:	041b      	lsls	r3, r3, #16
 80052fc:	43db      	mvns	r3, r3
 80052fe:	68f9      	ldr	r1, [r7, #12]
 8005300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005304:	4013      	ands	r3, r2
 8005306:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	69da      	ldr	r2, [r3, #28]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	2101      	movs	r1, #1
 800531a:	fa01 f303 	lsl.w	r3, r1, r3
 800531e:	041b      	lsls	r3, r3, #16
 8005320:	43db      	mvns	r3, r3
 8005322:	68f9      	ldr	r1, [r7, #12]
 8005324:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005328:	4013      	ands	r3, r2
 800532a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	0159      	lsls	r1, r3, #5
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	440b      	add	r3, r1
 8005342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005346:	4619      	mov	r1, r3
 8005348:	4b05      	ldr	r3, [pc, #20]	; (8005360 <USB_DeactivateEndpoint+0x1b4>)
 800534a:	4013      	ands	r3, r2
 800534c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	ec337800 	.word	0xec337800
 8005360:	eff37800 	.word	0xeff37800

08005364 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	; 0x28
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	4613      	mov	r3, r2
 8005370:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	2b01      	cmp	r3, #1
 8005382:	f040 815c 	bne.w	800563e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d132      	bne.n	80053f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	0151      	lsls	r1, r2, #5
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	440a      	add	r2, r1
 80053c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	0151      	lsls	r1, r2, #5
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	440a      	add	r2, r1
 80053e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ec:	0cdb      	lsrs	r3, r3, #19
 80053ee:	04db      	lsls	r3, r3, #19
 80053f0:	6113      	str	r3, [r2, #16]
 80053f2:	e074      	b.n	80054de <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	0151      	lsls	r1, r2, #5
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	440a      	add	r2, r1
 800540a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540e:	0cdb      	lsrs	r3, r3, #19
 8005410:	04db      	lsls	r3, r3, #19
 8005412:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	0151      	lsls	r1, r2, #5
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	440a      	add	r2, r1
 800542a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005432:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005436:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6959      	ldr	r1, [r3, #20]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	440b      	add	r3, r1
 8005450:	1e59      	subs	r1, r3, #1
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	fbb1 f3f3 	udiv	r3, r1, r3
 800545a:	04d9      	lsls	r1, r3, #19
 800545c:	4b9d      	ldr	r3, [pc, #628]	; (80056d4 <USB_EPStartXfer+0x370>)
 800545e:	400b      	ands	r3, r1
 8005460:	69b9      	ldr	r1, [r7, #24]
 8005462:	0148      	lsls	r0, r1, #5
 8005464:	69f9      	ldr	r1, [r7, #28]
 8005466:	4401      	add	r1, r0
 8005468:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800546c:	4313      	orrs	r3, r2
 800546e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005486:	69b9      	ldr	r1, [r7, #24]
 8005488:	0148      	lsls	r0, r1, #5
 800548a:	69f9      	ldr	r1, [r7, #28]
 800548c:	4401      	add	r1, r0
 800548e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005492:	4313      	orrs	r3, r2
 8005494:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	78db      	ldrb	r3, [r3, #3]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d11f      	bne.n	80054de <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	0151      	lsls	r1, r2, #5
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	440a      	add	r2, r1
 80054d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d14b      	bne.n	800557c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d009      	beq.n	8005500 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f8:	461a      	mov	r2, r3
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	78db      	ldrb	r3, [r3, #3]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d128      	bne.n	800555a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005514:	2b00      	cmp	r3, #0
 8005516:	d110      	bne.n	800553a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	0151      	lsls	r1, r2, #5
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	440a      	add	r2, r1
 800552e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005532:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	e00f      	b.n	800555a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	0151      	lsls	r1, r2, #5
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	440a      	add	r2, r1
 8005550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005558:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	69fa      	ldr	r2, [r7, #28]
 800556e:	440a      	add	r2, r1
 8005570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005574:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	e12f      	b.n	80057dc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	440a      	add	r2, r1
 8005592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005596:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800559a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	78db      	ldrb	r3, [r3, #3]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d015      	beq.n	80055d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 8117 	beq.w	80057dc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	2101      	movs	r1, #1
 80055c0:	fa01 f303 	lsl.w	r3, r1, r3
 80055c4:	69f9      	ldr	r1, [r7, #28]
 80055c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ca:	4313      	orrs	r3, r2
 80055cc:	634b      	str	r3, [r1, #52]	; 0x34
 80055ce:	e105      	b.n	80057dc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d110      	bne.n	8005602 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	e00f      	b.n	8005622 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005620:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	68d9      	ldr	r1, [r3, #12]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	781a      	ldrb	r2, [r3, #0]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	b298      	uxth	r0, r3
 8005630:	79fb      	ldrb	r3, [r7, #7]
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	4603      	mov	r3, r0
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 fa2b 	bl	8005a92 <USB_WritePacket>
 800563c:	e0ce      	b.n	80057dc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	0151      	lsls	r1, r2, #5
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	440a      	add	r2, r1
 8005654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005658:	0cdb      	lsrs	r3, r3, #19
 800565a:	04db      	lsls	r3, r3, #19
 800565c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	0151      	lsls	r1, r2, #5
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	440a      	add	r2, r1
 8005674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005678:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800567c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005680:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d126      	bne.n	80056d8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a0:	69b9      	ldr	r1, [r7, #24]
 80056a2:	0148      	lsls	r0, r1, #5
 80056a4:	69f9      	ldr	r1, [r7, #28]
 80056a6:	4401      	add	r1, r0
 80056a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056ac:	4313      	orrs	r3, r2
 80056ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	0151      	lsls	r1, r2, #5
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	440a      	add	r2, r1
 80056c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056ce:	6113      	str	r3, [r2, #16]
 80056d0:	e036      	b.n	8005740 <USB_EPStartXfer+0x3dc>
 80056d2:	bf00      	nop
 80056d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	695a      	ldr	r2, [r3, #20]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4413      	add	r3, r2
 80056e2:	1e5a      	subs	r2, r3, #1
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ec:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	8afb      	ldrh	r3, [r7, #22]
 80056fe:	04d9      	lsls	r1, r3, #19
 8005700:	4b39      	ldr	r3, [pc, #228]	; (80057e8 <USB_EPStartXfer+0x484>)
 8005702:	400b      	ands	r3, r1
 8005704:	69b9      	ldr	r1, [r7, #24]
 8005706:	0148      	lsls	r0, r1, #5
 8005708:	69f9      	ldr	r1, [r7, #28]
 800570a:	4401      	add	r1, r0
 800570c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005710:	4313      	orrs	r3, r2
 8005712:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	8af9      	ldrh	r1, [r7, #22]
 8005728:	fb01 f303 	mul.w	r3, r1, r3
 800572c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005730:	69b9      	ldr	r1, [r7, #24]
 8005732:	0148      	lsls	r0, r1, #5
 8005734:	69f9      	ldr	r1, [r7, #28]
 8005736:	4401      	add	r1, r0
 8005738:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800573c:	4313      	orrs	r3, r2
 800573e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d10d      	bne.n	8005762 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	68d9      	ldr	r1, [r3, #12]
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575e:	460a      	mov	r2, r1
 8005760:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	78db      	ldrb	r3, [r3, #3]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d128      	bne.n	80057bc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005776:	2b00      	cmp	r3, #0
 8005778:	d110      	bne.n	800579c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	0151      	lsls	r1, r2, #5
 800578c:	69fa      	ldr	r2, [r7, #28]
 800578e:	440a      	add	r2, r1
 8005790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005794:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	e00f      	b.n	80057bc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	1ff80000 	.word	0x1ff80000

080057ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	4613      	mov	r3, r2
 80057f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	2b01      	cmp	r3, #1
 800580a:	f040 80cd 	bne.w	80059a8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d132      	bne.n	800587c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	440a      	add	r2, r1
 800582c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005830:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005834:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005838:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	440a      	add	r2, r1
 8005850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005858:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	440a      	add	r2, r1
 8005870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005874:	0cdb      	lsrs	r3, r3, #19
 8005876:	04db      	lsls	r3, r3, #19
 8005878:	6113      	str	r3, [r2, #16]
 800587a:	e04e      	b.n	800591a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	0151      	lsls	r1, r2, #5
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	440a      	add	r2, r1
 8005892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005896:	0cdb      	lsrs	r3, r3, #19
 8005898:	04db      	lsls	r3, r3, #19
 800589a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	695a      	ldr	r2, [r3, #20]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d903      	bls.n	80058d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	0151      	lsls	r1, r2, #5
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	440a      	add	r2, r1
 80058ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800590a:	6939      	ldr	r1, [r7, #16]
 800590c:	0148      	lsls	r0, r1, #5
 800590e:	6979      	ldr	r1, [r7, #20]
 8005910:	4401      	add	r1, r0
 8005912:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005916:	4313      	orrs	r3, r2
 8005918:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d11e      	bne.n	800595e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d009      	beq.n	800593c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	461a      	mov	r2, r3
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	440a      	add	r2, r1
 8005952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005956:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	e092      	b.n	8005a84 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	0151      	lsls	r1, r2, #5
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	440a      	add	r2, r1
 8005974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005978:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800597c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d07e      	beq.n	8005a84 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	2101      	movs	r1, #1
 8005998:	fa01 f303 	lsl.w	r3, r1, r3
 800599c:	6979      	ldr	r1, [r7, #20]
 800599e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a2:	4313      	orrs	r3, r2
 80059a4:	634b      	str	r3, [r1, #52]	; 0x34
 80059a6:	e06d      	b.n	8005a84 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c2:	0cdb      	lsrs	r3, r3, #19
 80059c4:	04db      	lsls	r3, r3, #19
 80059c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059ea:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a32:	6939      	ldr	r1, [r7, #16]
 8005a34:	0148      	lsls	r0, r1, #5
 8005a36:	6979      	ldr	r1, [r7, #20]
 8005a38:	4401      	add	r1, r0
 8005a3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d10d      	bne.n	8005a64 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d009      	beq.n	8005a64 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	68d9      	ldr	r1, [r3, #12]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a60:	460a      	mov	r2, r1
 8005a62:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b089      	sub	sp, #36	; 0x24
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	60f8      	str	r0, [r7, #12]
 8005a9a:	60b9      	str	r1, [r7, #8]
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	71fb      	strb	r3, [r7, #7]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005ab0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d11a      	bne.n	8005aee <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ab8:	88bb      	ldrh	r3, [r7, #4]
 8005aba:	3303      	adds	r3, #3
 8005abc:	089b      	lsrs	r3, r3, #2
 8005abe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	e00f      	b.n	8005ae6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	031a      	lsls	r2, r3, #12
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	3304      	adds	r3, #4
 8005ade:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d3eb      	bcc.n	8005ac6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3724      	adds	r7, #36	; 0x24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b089      	sub	sp, #36	; 0x24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	4613      	mov	r3, r2
 8005b08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	3303      	adds	r3, #3
 8005b16:	089b      	lsrs	r3, r3, #2
 8005b18:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	e00b      	b.n	8005b38 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	3301      	adds	r3, #1
 8005b36:	61bb      	str	r3, [r7, #24]
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d3ef      	bcc.n	8005b20 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005b40:	69fb      	ldr	r3, [r7, #28]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3724      	adds	r7, #36	; 0x24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	785b      	ldrb	r3, [r3, #1]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d12c      	bne.n	8005bc4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	db12      	blt.n	8005ba2 <USB_EPSetStall+0x54>
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00f      	beq.n	8005ba2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	0151      	lsls	r1, r2, #5
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	440a      	add	r2, r1
 8005b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ba0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	e02b      	b.n	8005c1c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	db12      	blt.n	8005bfc <USB_EPSetStall+0xae>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00f      	beq.n	8005bfc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	0151      	lsls	r1, r2, #5
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bfa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	0151      	lsls	r1, r2, #5
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	440a      	add	r2, r1
 8005c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	785b      	ldrb	r3, [r3, #1]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d128      	bne.n	8005c98 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	78db      	ldrb	r3, [r3, #3]
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d003      	beq.n	8005c76 <USB_EPClearStall+0x4c>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	78db      	ldrb	r3, [r3, #3]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d138      	bne.n	8005ce8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	0151      	lsls	r1, r2, #5
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	440a      	add	r2, r1
 8005c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	e027      	b.n	8005ce8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cb6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	78db      	ldrb	r3, [r3, #3]
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d003      	beq.n	8005cc8 <USB_EPClearStall+0x9e>
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	78db      	ldrb	r3, [r3, #3]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d10f      	bne.n	8005ce8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	0151      	lsls	r1, r2, #5
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	440a      	add	r2, r1
 8005cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	460b      	mov	r3, r1
 8005d00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d14:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d18:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d2a:	68f9      	ldr	r1, [r7, #12]
 8005d2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d30:	4313      	orrs	r3, r2
 8005d32:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d5c:	f023 0303 	bic.w	r3, r3, #3
 8005d60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d70:	f023 0302 	bic.w	r3, r3, #2
 8005d74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d9e:	f023 0303 	bic.w	r3, r3, #3
 8005da2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db2:	f043 0302 	orr.w	r3, r3, #2
 8005db6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b085      	sub	sp, #20
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005dde:	68fb      	ldr	r3, [r7, #12]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	0c1b      	lsrs	r3, r3, #16
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	4013      	ands	r3, r2
 8005e42:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	b29b      	uxth	r3, r3
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e82:	68bb      	ldr	r3, [r7, #8]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec0:	01db      	lsls	r3, r3, #7
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	4013      	ands	r3, r2
 8005edc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ede:	68bb      	ldr	r3, [r7, #8]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	f003 0301 	and.w	r3, r3, #1
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f22:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f26:	f023 0307 	bic.w	r3, r3, #7
 8005f2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
	...

08005f50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	333c      	adds	r3, #60	; 0x3c
 8005f66:	3304      	adds	r3, #4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4a26      	ldr	r2, [pc, #152]	; (8006008 <USB_EP0_OutStart+0xb8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d90a      	bls.n	8005f8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f84:	d101      	bne.n	8005f8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	e037      	b.n	8005ffa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f90:	461a      	mov	r2, r3
 8005f92:	2300      	movs	r3, #0
 8005f94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb8:	f043 0318 	orr.w	r3, r3, #24
 8005fbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fcc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005fd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005fd2:	7afb      	ldrb	r3, [r7, #11]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d10f      	bne.n	8005ff8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fde:	461a      	mov	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ff6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	4f54300a 	.word	0x4f54300a

0800600c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3301      	adds	r3, #1
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4a13      	ldr	r2, [pc, #76]	; (8006070 <USB_CoreReset+0x64>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d901      	bls.n	800602a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e01b      	b.n	8006062 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	daf2      	bge.n	8006018 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f043 0201 	orr.w	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3301      	adds	r3, #1
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4a09      	ldr	r2, [pc, #36]	; (8006070 <USB_CoreReset+0x64>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d901      	bls.n	8006054 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e006      	b.n	8006062 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b01      	cmp	r3, #1
 800605e:	d0f0      	beq.n	8006042 <USB_CoreReset+0x36>

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	00030d40 	.word	0x00030d40

08006074 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006080:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006084:	f002 f8d6 	bl	8008234 <malloc>
 8006088:	4603      	mov	r3, r0
 800608a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d105      	bne.n	800609e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800609a:	2302      	movs	r3, #2
 800609c:	e066      	b.n	800616c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	7c1b      	ldrb	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d119      	bne.n	80060e2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060b2:	2202      	movs	r2, #2
 80060b4:	2181      	movs	r1, #129	; 0x81
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 ff43 	bl	8007f42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060c6:	2202      	movs	r2, #2
 80060c8:	2101      	movs	r1, #1
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f001 ff39 	bl	8007f42 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2210      	movs	r2, #16
 80060dc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80060e0:	e016      	b.n	8006110 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060e2:	2340      	movs	r3, #64	; 0x40
 80060e4:	2202      	movs	r2, #2
 80060e6:	2181      	movs	r1, #129	; 0x81
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 ff2a 	bl	8007f42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060f4:	2340      	movs	r3, #64	; 0x40
 80060f6:	2202      	movs	r2, #2
 80060f8:	2101      	movs	r1, #1
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f001 ff21 	bl	8007f42 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2210      	movs	r2, #16
 800610c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006110:	2308      	movs	r3, #8
 8006112:	2203      	movs	r2, #3
 8006114:	2182      	movs	r1, #130	; 0x82
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 ff13 	bl	8007f42 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	7c1b      	ldrb	r3, [r3, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800614c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006150:	2101      	movs	r1, #1
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 ffe4 	bl	8008120 <USBD_LL_PrepareReceive>
 8006158:	e007      	b.n	800616a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006160:	2340      	movs	r3, #64	; 0x40
 8006162:	2101      	movs	r1, #1
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 ffdb 	bl	8008120 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006184:	2181      	movs	r1, #129	; 0x81
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 ff01 	bl	8007f8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006192:	2101      	movs	r1, #1
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f001 fefa 	bl	8007f8e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80061a2:	2182      	movs	r1, #130	; 0x82
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 fef2 	bl	8007f8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00e      	beq.n	80061e2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061d4:	4618      	mov	r0, r3
 80061d6:	f002 f835 	bl	8008244 <free>
    pdev->pClassData = NULL;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061fc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006212:	2b00      	cmp	r3, #0
 8006214:	d03a      	beq.n	800628c <USBD_CDC_Setup+0xa0>
 8006216:	2b20      	cmp	r3, #32
 8006218:	f040 8097 	bne.w	800634a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	88db      	ldrh	r3, [r3, #6]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d029      	beq.n	8006278 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	b25b      	sxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	da11      	bge.n	8006252 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800623a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	88d2      	ldrh	r2, [r2, #6]
 8006240:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006242:	6939      	ldr	r1, [r7, #16]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	88db      	ldrh	r3, [r3, #6]
 8006248:	461a      	mov	r2, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f001 fa6d 	bl	800772a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006250:	e082      	b.n	8006358 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	785a      	ldrb	r2, [r3, #1]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	88db      	ldrh	r3, [r3, #6]
 8006260:	b2da      	uxtb	r2, r3
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006268:	6939      	ldr	r1, [r7, #16]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	88db      	ldrh	r3, [r3, #6]
 800626e:	461a      	mov	r2, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f001 fa86 	bl	8007782 <USBD_CtlPrepareRx>
    break;
 8006276:	e06f      	b.n	8006358 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	7850      	ldrb	r0, [r2, #1]
 8006284:	2200      	movs	r2, #0
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	4798      	blx	r3
    break;
 800628a:	e065      	b.n	8006358 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	785b      	ldrb	r3, [r3, #1]
 8006290:	2b0b      	cmp	r3, #11
 8006292:	d84f      	bhi.n	8006334 <USBD_CDC_Setup+0x148>
 8006294:	a201      	add	r2, pc, #4	; (adr r2, 800629c <USBD_CDC_Setup+0xb0>)
 8006296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629a:	bf00      	nop
 800629c:	080062cd 	.word	0x080062cd
 80062a0:	08006343 	.word	0x08006343
 80062a4:	08006335 	.word	0x08006335
 80062a8:	08006335 	.word	0x08006335
 80062ac:	08006335 	.word	0x08006335
 80062b0:	08006335 	.word	0x08006335
 80062b4:	08006335 	.word	0x08006335
 80062b8:	08006335 	.word	0x08006335
 80062bc:	08006335 	.word	0x08006335
 80062c0:	08006335 	.word	0x08006335
 80062c4:	080062f5 	.word	0x080062f5
 80062c8:	0800631d 	.word	0x0800631d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d107      	bne.n	80062e6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062d6:	f107 030c 	add.w	r3, r7, #12
 80062da:	2202      	movs	r2, #2
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f001 fa23 	bl	800772a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80062e4:	e030      	b.n	8006348 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f001 f9ad 	bl	8007648 <USBD_CtlError>
        ret = USBD_FAIL;
 80062ee:	2303      	movs	r3, #3
 80062f0:	75fb      	strb	r3, [r7, #23]
      break;
 80062f2:	e029      	b.n	8006348 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d107      	bne.n	800630e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80062fe:	f107 030f 	add.w	r3, r7, #15
 8006302:	2201      	movs	r2, #1
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f001 fa0f 	bl	800772a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800630c:	e01c      	b.n	8006348 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 f999 	bl	8007648 <USBD_CtlError>
        ret = USBD_FAIL;
 8006316:	2303      	movs	r3, #3
 8006318:	75fb      	strb	r3, [r7, #23]
      break;
 800631a:	e015      	b.n	8006348 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006322:	2b03      	cmp	r3, #3
 8006324:	d00f      	beq.n	8006346 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 f98d 	bl	8007648 <USBD_CtlError>
        ret = USBD_FAIL;
 800632e:	2303      	movs	r3, #3
 8006330:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006332:	e008      	b.n	8006346 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f001 f986 	bl	8007648 <USBD_CtlError>
      ret = USBD_FAIL;
 800633c:	2303      	movs	r3, #3
 800633e:	75fb      	strb	r3, [r7, #23]
      break;
 8006340:	e002      	b.n	8006348 <USBD_CDC_Setup+0x15c>
      break;
 8006342:	bf00      	nop
 8006344:	e008      	b.n	8006358 <USBD_CDC_Setup+0x16c>
      break;
 8006346:	bf00      	nop
    }
    break;
 8006348:	e006      	b.n	8006358 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 f97b 	bl	8007648 <USBD_CtlError>
    ret = USBD_FAIL;
 8006352:	2303      	movs	r3, #3
 8006354:	75fb      	strb	r3, [r7, #23]
    break;
 8006356:	bf00      	nop
  }

  return (uint8_t)ret;
 8006358:	7dfb      	ldrb	r3, [r7, #23]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop

08006364 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006376:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006382:	2303      	movs	r3, #3
 8006384:	e049      	b.n	800641a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800638c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800638e:	78fa      	ldrb	r2, [r7, #3]
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	440b      	add	r3, r1
 800639c:	3318      	adds	r3, #24
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d029      	beq.n	80063f8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80063a4:	78fa      	ldrb	r2, [r7, #3]
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	440b      	add	r3, r1
 80063b2:	3318      	adds	r3, #24
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	78f9      	ldrb	r1, [r7, #3]
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	460b      	mov	r3, r1
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	1a5b      	subs	r3, r3, r1
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4403      	add	r3, r0
 80063c4:	3344      	adds	r3, #68	; 0x44
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80063cc:	fb03 f301 	mul.w	r3, r3, r1
 80063d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d110      	bne.n	80063f8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80063d6:	78fa      	ldrb	r2, [r7, #3]
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	440b      	add	r3, r1
 80063e4:	3318      	adds	r3, #24
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063ea:	78f9      	ldrb	r1, [r7, #3]
 80063ec:	2300      	movs	r3, #0
 80063ee:	2200      	movs	r2, #0
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 fe74 	bl	80080de <USBD_LL_Transmit>
 80063f6:	e00f      	b.n	8006418 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006414:	78fa      	ldrb	r2, [r7, #3]
 8006416:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	460b      	mov	r3, r1
 800642c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006434:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006440:	2303      	movs	r3, #3
 8006442:	e015      	b.n	8006470 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 fe8a 	bl	8008162 <USBD_LL_GetRxDataSize>
 800644e:	4602      	mov	r2, r0
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800646a:	4611      	mov	r1, r2
 800646c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006486:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d015      	beq.n	80064be <USBD_CDC_EP0_RxReady+0x46>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006498:	2bff      	cmp	r3, #255	; 0xff
 800649a:	d010      	beq.n	80064be <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80064aa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064b2:	b292      	uxth	r2, r2
 80064b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	22ff      	movs	r2, #255	; 0xff
 80064ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2243      	movs	r2, #67	; 0x43
 80064d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80064d6:	4b03      	ldr	r3, [pc, #12]	; (80064e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80064d8:	4618      	mov	r0, r3
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	20000094 	.word	0x20000094

080064e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2243      	movs	r2, #67	; 0x43
 80064f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80064f6:	4b03      	ldr	r3, [pc, #12]	; (8006504 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	20000050 	.word	0x20000050

08006508 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2243      	movs	r2, #67	; 0x43
 8006514:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006516:	4b03      	ldr	r3, [pc, #12]	; (8006524 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	200000d8 	.word	0x200000d8

08006528 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	220a      	movs	r2, #10
 8006534:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006536:	4b03      	ldr	r3, [pc, #12]	; (8006544 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	2000000c 	.word	0x2000000c

08006548 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006558:	2303      	movs	r3, #3
 800655a:	e004      	b.n	8006566 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006572:	b480      	push	{r7}
 8006574:	b087      	sub	sp, #28
 8006576:	af00      	add	r7, sp, #0
 8006578:	60f8      	str	r0, [r7, #12]
 800657a:	60b9      	str	r1, [r7, #8]
 800657c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006584:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	371c      	adds	r7, #28
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065b4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e016      	b.n	8006618 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	7c1b      	ldrb	r3, [r3, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d109      	bne.n	8006606 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065fc:	2101      	movs	r1, #1
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 fd8e 	bl	8008120 <USBD_LL_PrepareReceive>
 8006604:	e007      	b.n	8006616 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800660c:	2340      	movs	r3, #64	; 0x40
 800660e:	2101      	movs	r1, #1
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 fd85 	bl	8008120 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	4613      	mov	r3, r2
 800662c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006634:	2303      	movs	r3, #3
 8006636:	e025      	b.n	8006684 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	79fa      	ldrb	r2, [r7, #7]
 8006676:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f001 fbfb 	bl	8007e74 <USBD_LL_Init>
 800667e:	4603      	mov	r3, r0
 8006680:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006682:	7dfb      	ldrb	r3, [r7, #23]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e010      	b.n	80066c6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b4:	f107 020e 	add.w	r2, r7, #14
 80066b8:	4610      	mov	r0, r2
 80066ba:	4798      	blx	r3
 80066bc:	4602      	mov	r2, r0
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 fc18 	bl	8007f0c <USBD_LL_Start>
 80066dc:	4603      	mov	r3, r0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	460b      	mov	r3, r1
 8006706:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006708:	2303      	movs	r3, #3
 800670a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006712:	2b00      	cmp	r3, #0
 8006714:	d009      	beq.n	800672a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	78fa      	ldrb	r2, [r7, #3]
 8006720:	4611      	mov	r1, r2
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	4798      	blx	r3
 8006726:	4603      	mov	r3, r0
 8006728:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800672a:	7bfb      	ldrb	r3, [r7, #15]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	78fa      	ldrb	r2, [r7, #3]
 8006754:	4611      	mov	r1, r2
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
  }

  return USBD_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	4618      	mov	r0, r3
 8006778:	f000 ff2c 	bl	80075d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800678a:	461a      	mov	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006798:	f003 031f 	and.w	r3, r3, #31
 800679c:	2b01      	cmp	r3, #1
 800679e:	d00e      	beq.n	80067be <USBD_LL_SetupStage+0x5a>
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d302      	bcc.n	80067aa <USBD_LL_SetupStage+0x46>
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d014      	beq.n	80067d2 <USBD_LL_SetupStage+0x6e>
 80067a8:	e01d      	b.n	80067e6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fa18 	bl	8006be8 <USBD_StdDevReq>
 80067b8:	4603      	mov	r3, r0
 80067ba:	73fb      	strb	r3, [r7, #15]
      break;
 80067bc:	e020      	b.n	8006800 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fa7c 	bl	8006cc4 <USBD_StdItfReq>
 80067cc:	4603      	mov	r3, r0
 80067ce:	73fb      	strb	r3, [r7, #15]
      break;
 80067d0:	e016      	b.n	8006800 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fab8 	bl	8006d50 <USBD_StdEPReq>
 80067e0:	4603      	mov	r3, r0
 80067e2:	73fb      	strb	r3, [r7, #15]
      break;
 80067e4:	e00c      	b.n	8006800 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 fbe9 	bl	8007fcc <USBD_LL_StallEP>
 80067fa:	4603      	mov	r3, r0
 80067fc:	73fb      	strb	r3, [r7, #15]
      break;
 80067fe:	bf00      	nop
  }

  return ret;
 8006800:	7bfb      	ldrb	r3, [r7, #15]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b086      	sub	sp, #24
 800680e:	af00      	add	r7, sp, #0
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	460b      	mov	r3, r1
 8006814:	607a      	str	r2, [r7, #4]
 8006816:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006818:	7afb      	ldrb	r3, [r7, #11]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d137      	bne.n	800688e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006824:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800682c:	2b03      	cmp	r3, #3
 800682e:	d14a      	bne.n	80068c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	429a      	cmp	r2, r3
 800683a:	d913      	bls.n	8006864 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	1ad2      	subs	r2, r2, r3
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	4293      	cmp	r3, r2
 8006854:	bf28      	it	cs
 8006856:	4613      	movcs	r3, r2
 8006858:	461a      	mov	r2, r3
 800685a:	6879      	ldr	r1, [r7, #4]
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 ffad 	bl	80077bc <USBD_CtlContinueRx>
 8006862:	e030      	b.n	80068c6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00a      	beq.n	8006886 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006876:	2b03      	cmp	r3, #3
 8006878:	d105      	bne.n	8006886 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 ffa9 	bl	80077de <USBD_CtlSendStatus>
 800688c:	e01b      	b.n	80068c6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d013      	beq.n	80068c2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d10e      	bne.n	80068c2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	7afa      	ldrb	r2, [r7, #11]
 80068ae:	4611      	mov	r1, r2
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	4798      	blx	r3
 80068b4:	4603      	mov	r3, r0
 80068b6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80068b8:	7dfb      	ldrb	r3, [r7, #23]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80068be:	7dfb      	ldrb	r3, [r7, #23]
 80068c0:	e002      	b.n	80068c8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e000      	b.n	80068c8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	460b      	mov	r3, r1
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80068de:	7afb      	ldrb	r3, [r7, #11]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d16a      	bne.n	80069ba <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3314      	adds	r3, #20
 80068e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d155      	bne.n	80069a0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d914      	bls.n	800692a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	1ad2      	subs	r2, r2, r3
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	461a      	mov	r2, r3
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f000 ff22 	bl	8007760 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800691c:	2300      	movs	r3, #0
 800691e:	2200      	movs	r2, #0
 8006920:	2100      	movs	r1, #0
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f001 fbfc 	bl	8008120 <USBD_LL_PrepareReceive>
 8006928:	e03a      	b.n	80069a0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	429a      	cmp	r2, r3
 8006934:	d11c      	bne.n	8006970 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800693e:	429a      	cmp	r2, r3
 8006940:	d316      	bcc.n	8006970 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800694c:	429a      	cmp	r2, r3
 800694e:	d20f      	bcs.n	8006970 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006950:	2200      	movs	r2, #0
 8006952:	2100      	movs	r1, #0
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 ff03 	bl	8007760 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006962:	2300      	movs	r3, #0
 8006964:	2200      	movs	r2, #0
 8006966:	2100      	movs	r1, #0
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f001 fbd9 	bl	8008120 <USBD_LL_PrepareReceive>
 800696e:	e017      	b.n	80069a0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00a      	beq.n	8006992 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006982:	2b03      	cmp	r3, #3
 8006984:	d105      	bne.n	8006992 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006992:	2180      	movs	r1, #128	; 0x80
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f001 fb19 	bl	8007fcc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 ff32 	bl	8007804 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d123      	bne.n	80069f2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff fe9b 	bl	80066e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80069b8:	e01b      	b.n	80069f2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d013      	beq.n	80069ee <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d10e      	bne.n	80069ee <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	7afa      	ldrb	r2, [r7, #11]
 80069da:	4611      	mov	r1, r2
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	4798      	blx	r3
 80069e0:	4603      	mov	r3, r0
 80069e2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80069ea:	7dfb      	ldrb	r3, [r7, #23]
 80069ec:	e002      	b.n	80069f4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e000      	b.n	80069f4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3718      	adds	r7, #24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d009      	beq.n	8006a40 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6852      	ldr	r2, [r2, #4]
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a40:	2340      	movs	r3, #64	; 0x40
 8006a42:	2200      	movs	r2, #0
 8006a44:	2100      	movs	r1, #0
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 fa7b 	bl	8007f42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2240      	movs	r2, #64	; 0x40
 8006a58:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a5c:	2340      	movs	r3, #64	; 0x40
 8006a5e:	2200      	movs	r2, #0
 8006a60:	2180      	movs	r1, #128	; 0x80
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f001 fa6d 	bl	8007f42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2240      	movs	r2, #64	; 0x40
 8006a72:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	460b      	mov	r3, r1
 8006a88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	78fa      	ldrb	r2, [r7, #3]
 8006a8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2204      	movs	r2, #4
 8006ab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d105      	bne.n	8006ae6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d10b      	bne.n	8006b1e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d009      	beq.n	8006ba0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6852      	ldr	r2, [r2, #4]
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	4798      	blx	r3
  }

  return USBD_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b087      	sub	sp, #28
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006bc8:	8a3b      	ldrh	r3, [r7, #16]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	b21a      	sxth	r2, r3
 8006bce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	b21b      	sxth	r3, r3
 8006bd6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006bd8:	89fb      	ldrh	r3, [r7, #14]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
	...

08006be8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	d004      	beq.n	8006c0c <USBD_StdDevReq+0x24>
 8006c02:	2b40      	cmp	r3, #64	; 0x40
 8006c04:	d002      	beq.n	8006c0c <USBD_StdDevReq+0x24>
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <USBD_StdDevReq+0x38>
 8006c0a:	e050      	b.n	8006cae <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	4798      	blx	r3
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c1e:	e04b      	b.n	8006cb8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	785b      	ldrb	r3, [r3, #1]
 8006c24:	2b09      	cmp	r3, #9
 8006c26:	d83c      	bhi.n	8006ca2 <USBD_StdDevReq+0xba>
 8006c28:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <USBD_StdDevReq+0x48>)
 8006c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2e:	bf00      	nop
 8006c30:	08006c85 	.word	0x08006c85
 8006c34:	08006c99 	.word	0x08006c99
 8006c38:	08006ca3 	.word	0x08006ca3
 8006c3c:	08006c8f 	.word	0x08006c8f
 8006c40:	08006ca3 	.word	0x08006ca3
 8006c44:	08006c63 	.word	0x08006c63
 8006c48:	08006c59 	.word	0x08006c59
 8006c4c:	08006ca3 	.word	0x08006ca3
 8006c50:	08006c7b 	.word	0x08006c7b
 8006c54:	08006c6d 	.word	0x08006c6d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f9ce 	bl	8006ffc <USBD_GetDescriptor>
      break;
 8006c60:	e024      	b.n	8006cac <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fb33 	bl	80072d0 <USBD_SetAddress>
      break;
 8006c6a:	e01f      	b.n	8006cac <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fb70 	bl	8007354 <USBD_SetConfig>
 8006c74:	4603      	mov	r3, r0
 8006c76:	73fb      	strb	r3, [r7, #15]
      break;
 8006c78:	e018      	b.n	8006cac <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fc0d 	bl	800749c <USBD_GetConfig>
      break;
 8006c82:	e013      	b.n	8006cac <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fc3c 	bl	8007504 <USBD_GetStatus>
      break;
 8006c8c:	e00e      	b.n	8006cac <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fc6a 	bl	800756a <USBD_SetFeature>
      break;
 8006c96:	e009      	b.n	8006cac <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fc79 	bl	8007592 <USBD_ClrFeature>
      break;
 8006ca0:	e004      	b.n	8006cac <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fccf 	bl	8007648 <USBD_CtlError>
      break;
 8006caa:	bf00      	nop
    }
    break;
 8006cac:	e004      	b.n	8006cb8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fcc9 	bl	8007648 <USBD_CtlError>
    break;
 8006cb6:	bf00      	nop
  }

  return ret;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop

08006cc4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	d003      	beq.n	8006ce6 <USBD_StdItfReq+0x22>
 8006cde:	2b40      	cmp	r3, #64	; 0x40
 8006ce0:	d001      	beq.n	8006ce6 <USBD_StdItfReq+0x22>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d12a      	bne.n	8006d3c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cec:	3b01      	subs	r3, #1
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d81d      	bhi.n	8006d2e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	889b      	ldrh	r3, [r3, #4]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d813      	bhi.n	8006d24 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	4798      	blx	r3
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	88db      	ldrh	r3, [r3, #6]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d110      	bne.n	8006d38 <USBD_StdItfReq+0x74>
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10d      	bne.n	8006d38 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fd5e 	bl	80077de <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006d22:	e009      	b.n	8006d38 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fc8e 	bl	8007648 <USBD_CtlError>
      break;
 8006d2c:	e004      	b.n	8006d38 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fc89 	bl	8007648 <USBD_CtlError>
      break;
 8006d36:	e000      	b.n	8006d3a <USBD_StdItfReq+0x76>
      break;
 8006d38:	bf00      	nop
    }
    break;
 8006d3a:	e004      	b.n	8006d46 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fc82 	bl	8007648 <USBD_CtlError>
    break;
 8006d44:	bf00      	nop
  }

  return ret;
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	889b      	ldrh	r3, [r3, #4]
 8006d62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d004      	beq.n	8006d7a <USBD_StdEPReq+0x2a>
 8006d70:	2b40      	cmp	r3, #64	; 0x40
 8006d72:	d002      	beq.n	8006d7a <USBD_StdEPReq+0x2a>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <USBD_StdEPReq+0x3e>
 8006d78:	e135      	b.n	8006fe6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4798      	blx	r3
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d8c:	e130      	b.n	8006ff0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d03e      	beq.n	8006e14 <USBD_StdEPReq+0xc4>
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d002      	beq.n	8006da0 <USBD_StdEPReq+0x50>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d077      	beq.n	8006e8e <USBD_StdEPReq+0x13e>
 8006d9e:	e11c      	b.n	8006fda <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d002      	beq.n	8006db0 <USBD_StdEPReq+0x60>
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d015      	beq.n	8006dda <USBD_StdEPReq+0x8a>
 8006dae:	e02b      	b.n	8006e08 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00c      	beq.n	8006dd0 <USBD_StdEPReq+0x80>
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	2b80      	cmp	r3, #128	; 0x80
 8006dba:	d009      	beq.n	8006dd0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 f903 	bl	8007fcc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dc6:	2180      	movs	r1, #128	; 0x80
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 f8ff 	bl	8007fcc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006dce:	e020      	b.n	8006e12 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fc38 	bl	8007648 <USBD_CtlError>
        break;
 8006dd8:	e01b      	b.n	8006e12 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	885b      	ldrh	r3, [r3, #2]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10e      	bne.n	8006e00 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00b      	beq.n	8006e00 <USBD_StdEPReq+0xb0>
 8006de8:	7bbb      	ldrb	r3, [r7, #14]
 8006dea:	2b80      	cmp	r3, #128	; 0x80
 8006dec:	d008      	beq.n	8006e00 <USBD_StdEPReq+0xb0>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	88db      	ldrh	r3, [r3, #6]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d104      	bne.n	8006e00 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f001 f8e6 	bl	8007fcc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fcec 	bl	80077de <USBD_CtlSendStatus>

        break;
 8006e06:	e004      	b.n	8006e12 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fc1c 	bl	8007648 <USBD_CtlError>
        break;
 8006e10:	bf00      	nop
      }
      break;
 8006e12:	e0e7      	b.n	8006fe4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d002      	beq.n	8006e24 <USBD_StdEPReq+0xd4>
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d015      	beq.n	8006e4e <USBD_StdEPReq+0xfe>
 8006e22:	e02d      	b.n	8006e80 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e24:	7bbb      	ldrb	r3, [r7, #14]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00c      	beq.n	8006e44 <USBD_StdEPReq+0xf4>
 8006e2a:	7bbb      	ldrb	r3, [r7, #14]
 8006e2c:	2b80      	cmp	r3, #128	; 0x80
 8006e2e:	d009      	beq.n	8006e44 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e30:	7bbb      	ldrb	r3, [r7, #14]
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f001 f8c9 	bl	8007fcc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e3a:	2180      	movs	r1, #128	; 0x80
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 f8c5 	bl	8007fcc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006e42:	e023      	b.n	8006e8c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fbfe 	bl	8007648 <USBD_CtlError>
        break;
 8006e4c:	e01e      	b.n	8006e8c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	885b      	ldrh	r3, [r3, #2]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d119      	bne.n	8006e8a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006e56:	7bbb      	ldrb	r3, [r7, #14]
 8006e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d004      	beq.n	8006e6a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e60:	7bbb      	ldrb	r3, [r7, #14]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 f8d0 	bl	800800a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fcb7 	bl	80077de <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	4798      	blx	r3
        }
        break;
 8006e7e:	e004      	b.n	8006e8a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fbe0 	bl	8007648 <USBD_CtlError>
        break;
 8006e88:	e000      	b.n	8006e8c <USBD_StdEPReq+0x13c>
        break;
 8006e8a:	bf00      	nop
      }
      break;
 8006e8c:	e0aa      	b.n	8006fe4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d002      	beq.n	8006e9e <USBD_StdEPReq+0x14e>
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d032      	beq.n	8006f02 <USBD_StdEPReq+0x1b2>
 8006e9c:	e097      	b.n	8006fce <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d007      	beq.n	8006eb4 <USBD_StdEPReq+0x164>
 8006ea4:	7bbb      	ldrb	r3, [r7, #14]
 8006ea6:	2b80      	cmp	r3, #128	; 0x80
 8006ea8:	d004      	beq.n	8006eb4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fbcb 	bl	8007648 <USBD_CtlError>
          break;
 8006eb2:	e091      	b.n	8006fd8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	da0b      	bge.n	8006ed4 <USBD_StdEPReq+0x184>
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	3310      	adds	r3, #16
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	4413      	add	r3, r2
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	e00b      	b.n	8006eec <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eda:	4613      	mov	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	4413      	add	r3, r2
 8006eea:	3304      	adds	r3, #4
 8006eec:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fc15 	bl	800772a <USBD_CtlSendData>
        break;
 8006f00:	e06a      	b.n	8006fd8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	da11      	bge.n	8006f2e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
 8006f0c:	f003 020f 	and.w	r2, r3, #15
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	440b      	add	r3, r1
 8006f1c:	3324      	adds	r3, #36	; 0x24
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d117      	bne.n	8006f54 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fb8e 	bl	8007648 <USBD_CtlError>
            break;
 8006f2c:	e054      	b.n	8006fd8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f2e:	7bbb      	ldrb	r3, [r7, #14]
 8006f30:	f003 020f 	and.w	r2, r3, #15
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	440b      	add	r3, r1
 8006f40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d104      	bne.n	8006f54 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fb7b 	bl	8007648 <USBD_CtlError>
            break;
 8006f52:	e041      	b.n	8006fd8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	da0b      	bge.n	8006f74 <USBD_StdEPReq+0x224>
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f62:	4613      	mov	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	3310      	adds	r3, #16
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	4413      	add	r3, r2
 8006f70:	3304      	adds	r3, #4
 8006f72:	e00b      	b.n	8006f8c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006f74:	7bbb      	ldrb	r3, [r7, #14]
 8006f76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	4413      	add	r3, r2
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <USBD_StdEPReq+0x24a>
 8006f94:	7bbb      	ldrb	r3, [r7, #14]
 8006f96:	2b80      	cmp	r3, #128	; 0x80
 8006f98:	d103      	bne.n	8006fa2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	e00e      	b.n	8006fc0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f001 f84e 	bl	8008048 <USBD_LL_IsStallEP>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	e002      	b.n	8006fc0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fbaf 	bl	800772a <USBD_CtlSendData>
          break;
 8006fcc:	e004      	b.n	8006fd8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006fce:	6839      	ldr	r1, [r7, #0]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fb39 	bl	8007648 <USBD_CtlError>
        break;
 8006fd6:	bf00      	nop
      }
      break;
 8006fd8:	e004      	b.n	8006fe4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fb33 	bl	8007648 <USBD_CtlError>
      break;
 8006fe2:	bf00      	nop
    }
    break;
 8006fe4:	e004      	b.n	8006ff0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fb2d 	bl	8007648 <USBD_CtlError>
    break;
 8006fee:	bf00      	nop
  }

  return ret;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	885b      	ldrh	r3, [r3, #2]
 8007016:	0a1b      	lsrs	r3, r3, #8
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	2b06      	cmp	r3, #6
 800701e:	f200 8128 	bhi.w	8007272 <USBD_GetDescriptor+0x276>
 8007022:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <USBD_GetDescriptor+0x2c>)
 8007024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007028:	08007045 	.word	0x08007045
 800702c:	0800705d 	.word	0x0800705d
 8007030:	0800709d 	.word	0x0800709d
 8007034:	08007273 	.word	0x08007273
 8007038:	08007273 	.word	0x08007273
 800703c:	08007213 	.word	0x08007213
 8007040:	0800723f 	.word	0x0800723f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	7c12      	ldrb	r2, [r2, #16]
 8007050:	f107 0108 	add.w	r1, r7, #8
 8007054:	4610      	mov	r0, r2
 8007056:	4798      	blx	r3
 8007058:	60f8      	str	r0, [r7, #12]
    break;
 800705a:	e112      	b.n	8007282 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	7c1b      	ldrb	r3, [r3, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10d      	bne.n	8007080 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706c:	f107 0208 	add.w	r2, r7, #8
 8007070:	4610      	mov	r0, r2
 8007072:	4798      	blx	r3
 8007074:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3301      	adds	r3, #1
 800707a:	2202      	movs	r2, #2
 800707c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800707e:	e100      	b.n	8007282 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007088:	f107 0208 	add.w	r2, r7, #8
 800708c:	4610      	mov	r0, r2
 800708e:	4798      	blx	r3
 8007090:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3301      	adds	r3, #1
 8007096:	2202      	movs	r2, #2
 8007098:	701a      	strb	r2, [r3, #0]
    break;
 800709a:	e0f2      	b.n	8007282 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	885b      	ldrh	r3, [r3, #2]
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b05      	cmp	r3, #5
 80070a4:	f200 80ac 	bhi.w	8007200 <USBD_GetDescriptor+0x204>
 80070a8:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <USBD_GetDescriptor+0xb4>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	080070c9 	.word	0x080070c9
 80070b4:	080070fd 	.word	0x080070fd
 80070b8:	08007131 	.word	0x08007131
 80070bc:	08007165 	.word	0x08007165
 80070c0:	08007199 	.word	0x08007199
 80070c4:	080071cd 	.word	0x080071cd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	7c12      	ldrb	r2, [r2, #16]
 80070e0:	f107 0108 	add.w	r1, r7, #8
 80070e4:	4610      	mov	r0, r2
 80070e6:	4798      	blx	r3
 80070e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070ea:	e091      	b.n	8007210 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 faaa 	bl	8007648 <USBD_CtlError>
        err++;
 80070f4:	7afb      	ldrb	r3, [r7, #11]
 80070f6:	3301      	adds	r3, #1
 80070f8:	72fb      	strb	r3, [r7, #11]
      break;
 80070fa:	e089      	b.n	8007210 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00b      	beq.n	8007120 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	7c12      	ldrb	r2, [r2, #16]
 8007114:	f107 0108 	add.w	r1, r7, #8
 8007118:	4610      	mov	r0, r2
 800711a:	4798      	blx	r3
 800711c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800711e:	e077      	b.n	8007210 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fa90 	bl	8007648 <USBD_CtlError>
        err++;
 8007128:	7afb      	ldrb	r3, [r7, #11]
 800712a:	3301      	adds	r3, #1
 800712c:	72fb      	strb	r3, [r7, #11]
      break;
 800712e:	e06f      	b.n	8007210 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00b      	beq.n	8007154 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	7c12      	ldrb	r2, [r2, #16]
 8007148:	f107 0108 	add.w	r1, r7, #8
 800714c:	4610      	mov	r0, r2
 800714e:	4798      	blx	r3
 8007150:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007152:	e05d      	b.n	8007210 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fa76 	bl	8007648 <USBD_CtlError>
        err++;
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	3301      	adds	r3, #1
 8007160:	72fb      	strb	r3, [r7, #11]
      break;
 8007162:	e055      	b.n	8007210 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	7c12      	ldrb	r2, [r2, #16]
 800717c:	f107 0108 	add.w	r1, r7, #8
 8007180:	4610      	mov	r0, r2
 8007182:	4798      	blx	r3
 8007184:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007186:	e043      	b.n	8007210 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fa5c 	bl	8007648 <USBD_CtlError>
        err++;
 8007190:	7afb      	ldrb	r3, [r7, #11]
 8007192:	3301      	adds	r3, #1
 8007194:	72fb      	strb	r3, [r7, #11]
      break;
 8007196:	e03b      	b.n	8007210 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00b      	beq.n	80071bc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	7c12      	ldrb	r2, [r2, #16]
 80071b0:	f107 0108 	add.w	r1, r7, #8
 80071b4:	4610      	mov	r0, r2
 80071b6:	4798      	blx	r3
 80071b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071ba:	e029      	b.n	8007210 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa42 	bl	8007648 <USBD_CtlError>
        err++;
 80071c4:	7afb      	ldrb	r3, [r7, #11]
 80071c6:	3301      	adds	r3, #1
 80071c8:	72fb      	strb	r3, [r7, #11]
      break;
 80071ca:	e021      	b.n	8007210 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00b      	beq.n	80071f0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	7c12      	ldrb	r2, [r2, #16]
 80071e4:	f107 0108 	add.w	r1, r7, #8
 80071e8:	4610      	mov	r0, r2
 80071ea:	4798      	blx	r3
 80071ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071ee:	e00f      	b.n	8007210 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fa28 	bl	8007648 <USBD_CtlError>
        err++;
 80071f8:	7afb      	ldrb	r3, [r7, #11]
 80071fa:	3301      	adds	r3, #1
 80071fc:	72fb      	strb	r3, [r7, #11]
      break;
 80071fe:	e007      	b.n	8007210 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa20 	bl	8007648 <USBD_CtlError>
      err++;
 8007208:	7afb      	ldrb	r3, [r7, #11]
 800720a:	3301      	adds	r3, #1
 800720c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800720e:	bf00      	nop
    }
    break;
 8007210:	e037      	b.n	8007282 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	7c1b      	ldrb	r3, [r3, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d109      	bne.n	800722e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007222:	f107 0208 	add.w	r2, r7, #8
 8007226:	4610      	mov	r0, r2
 8007228:	4798      	blx	r3
 800722a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800722c:	e029      	b.n	8007282 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fa09 	bl	8007648 <USBD_CtlError>
      err++;
 8007236:	7afb      	ldrb	r3, [r7, #11]
 8007238:	3301      	adds	r3, #1
 800723a:	72fb      	strb	r3, [r7, #11]
    break;
 800723c:	e021      	b.n	8007282 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	7c1b      	ldrb	r3, [r3, #16]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10d      	bne.n	8007262 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724e:	f107 0208 	add.w	r2, r7, #8
 8007252:	4610      	mov	r0, r2
 8007254:	4798      	blx	r3
 8007256:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3301      	adds	r3, #1
 800725c:	2207      	movs	r2, #7
 800725e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007260:	e00f      	b.n	8007282 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f9ef 	bl	8007648 <USBD_CtlError>
      err++;
 800726a:	7afb      	ldrb	r3, [r7, #11]
 800726c:	3301      	adds	r3, #1
 800726e:	72fb      	strb	r3, [r7, #11]
    break;
 8007270:	e007      	b.n	8007282 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f9e7 	bl	8007648 <USBD_CtlError>
    err++;
 800727a:	7afb      	ldrb	r3, [r7, #11]
 800727c:	3301      	adds	r3, #1
 800727e:	72fb      	strb	r3, [r7, #11]
    break;
 8007280:	bf00      	nop
  }

  if (err != 0U)
 8007282:	7afb      	ldrb	r3, [r7, #11]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d11e      	bne.n	80072c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	88db      	ldrh	r3, [r3, #6]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d016      	beq.n	80072be <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007290:	893b      	ldrh	r3, [r7, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00e      	beq.n	80072b4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	88da      	ldrh	r2, [r3, #6]
 800729a:	893b      	ldrh	r3, [r7, #8]
 800729c:	4293      	cmp	r3, r2
 800729e:	bf28      	it	cs
 80072a0:	4613      	movcs	r3, r2
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80072a6:	893b      	ldrh	r3, [r7, #8]
 80072a8:	461a      	mov	r2, r3
 80072aa:	68f9      	ldr	r1, [r7, #12]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fa3c 	bl	800772a <USBD_CtlSendData>
 80072b2:	e009      	b.n	80072c8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f9c6 	bl	8007648 <USBD_CtlError>
 80072bc:	e004      	b.n	80072c8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fa8d 	bl	80077de <USBD_CtlSendStatus>
 80072c4:	e000      	b.n	80072c8 <USBD_GetDescriptor+0x2cc>
    return;
 80072c6:	bf00      	nop
    }
  }
}
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop

080072d0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	889b      	ldrh	r3, [r3, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d130      	bne.n	8007344 <USBD_SetAddress+0x74>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	88db      	ldrh	r3, [r3, #6]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d12c      	bne.n	8007344 <USBD_SetAddress+0x74>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	885b      	ldrh	r3, [r3, #2]
 80072ee:	2b7f      	cmp	r3, #127	; 0x7f
 80072f0:	d828      	bhi.n	8007344 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	885b      	ldrh	r3, [r3, #2]
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007304:	2b03      	cmp	r3, #3
 8007306:	d104      	bne.n	8007312 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f99c 	bl	8007648 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007310:	e01c      	b.n	800734c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	7bfa      	ldrb	r2, [r7, #15]
 8007316:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 febe 	bl	80080a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fa5a 	bl	80077de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d004      	beq.n	800733a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007338:	e008      	b.n	800734c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007342:	e003      	b.n	800734c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f97e 	bl	8007648 <USBD_CtlError>
  }
}
 800734c:	bf00      	nop
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	885b      	ldrh	r3, [r3, #2]
 8007366:	b2da      	uxtb	r2, r3
 8007368:	4b4b      	ldr	r3, [pc, #300]	; (8007498 <USBD_SetConfig+0x144>)
 800736a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800736c:	4b4a      	ldr	r3, [pc, #296]	; (8007498 <USBD_SetConfig+0x144>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d905      	bls.n	8007380 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f966 	bl	8007648 <USBD_CtlError>
    return USBD_FAIL;
 800737c:	2303      	movs	r3, #3
 800737e:	e087      	b.n	8007490 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007386:	2b02      	cmp	r3, #2
 8007388:	d002      	beq.n	8007390 <USBD_SetConfig+0x3c>
 800738a:	2b03      	cmp	r3, #3
 800738c:	d025      	beq.n	80073da <USBD_SetConfig+0x86>
 800738e:	e071      	b.n	8007474 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007390:	4b41      	ldr	r3, [pc, #260]	; (8007498 <USBD_SetConfig+0x144>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01c      	beq.n	80073d2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007398:	4b3f      	ldr	r3, [pc, #252]	; (8007498 <USBD_SetConfig+0x144>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	461a      	mov	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80073a2:	4b3d      	ldr	r3, [pc, #244]	; (8007498 <USBD_SetConfig+0x144>)
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff f9a7 	bl	80066fc <USBD_SetClassConfig>
 80073ae:	4603      	mov	r3, r0
 80073b0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d004      	beq.n	80073c2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f944 	bl	8007648 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80073c0:	e065      	b.n	800748e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa0b 	bl	80077de <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2203      	movs	r2, #3
 80073cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80073d0:	e05d      	b.n	800748e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fa03 	bl	80077de <USBD_CtlSendStatus>
    break;
 80073d8:	e059      	b.n	800748e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80073da:	4b2f      	ldr	r3, [pc, #188]	; (8007498 <USBD_SetConfig+0x144>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d112      	bne.n	8007408 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2202      	movs	r2, #2
 80073e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80073ea:	4b2b      	ldr	r3, [pc, #172]	; (8007498 <USBD_SetConfig+0x144>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073f4:	4b28      	ldr	r3, [pc, #160]	; (8007498 <USBD_SetConfig+0x144>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff f99a 	bl	8006734 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f9ec 	bl	80077de <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007406:	e042      	b.n	800748e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007408:	4b23      	ldr	r3, [pc, #140]	; (8007498 <USBD_SetConfig+0x144>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	461a      	mov	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	429a      	cmp	r2, r3
 8007414:	d02a      	beq.n	800746c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7ff f988 	bl	8006734 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007424:	4b1c      	ldr	r3, [pc, #112]	; (8007498 <USBD_SetConfig+0x144>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800742e:	4b1a      	ldr	r3, [pc, #104]	; (8007498 <USBD_SetConfig+0x144>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff f961 	bl	80066fc <USBD_SetClassConfig>
 800743a:	4603      	mov	r3, r0
 800743c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00f      	beq.n	8007464 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f8fe 	bl	8007648 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	b2db      	uxtb	r3, r3
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff f96d 	bl	8006734 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2202      	movs	r2, #2
 800745e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007462:	e014      	b.n	800748e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f9ba 	bl	80077de <USBD_CtlSendStatus>
    break;
 800746a:	e010      	b.n	800748e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f9b6 	bl	80077de <USBD_CtlSendStatus>
    break;
 8007472:	e00c      	b.n	800748e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f8e6 	bl	8007648 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800747c:	4b06      	ldr	r3, [pc, #24]	; (8007498 <USBD_SetConfig+0x144>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff f956 	bl	8006734 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007488:	2303      	movs	r3, #3
 800748a:	73fb      	strb	r3, [r7, #15]
    break;
 800748c:	bf00      	nop
  }

  return ret;
 800748e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	20000294 	.word	0x20000294

0800749c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	88db      	ldrh	r3, [r3, #6]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d004      	beq.n	80074b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f8c9 	bl	8007648 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80074b6:	e021      	b.n	80074fc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074be:	2b01      	cmp	r3, #1
 80074c0:	db17      	blt.n	80074f2 <USBD_GetConfig+0x56>
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	dd02      	ble.n	80074cc <USBD_GetConfig+0x30>
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d00b      	beq.n	80074e2 <USBD_GetConfig+0x46>
 80074ca:	e012      	b.n	80074f2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3308      	adds	r3, #8
 80074d6:	2201      	movs	r2, #1
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f925 	bl	800772a <USBD_CtlSendData>
      break;
 80074e0:	e00c      	b.n	80074fc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3304      	adds	r3, #4
 80074e6:	2201      	movs	r2, #1
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f91d 	bl	800772a <USBD_CtlSendData>
      break;
 80074f0:	e004      	b.n	80074fc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f8a7 	bl	8007648 <USBD_CtlError>
      break;
 80074fa:	bf00      	nop
}
 80074fc:	bf00      	nop
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007514:	3b01      	subs	r3, #1
 8007516:	2b02      	cmp	r3, #2
 8007518:	d81e      	bhi.n	8007558 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	88db      	ldrh	r3, [r3, #6]
 800751e:	2b02      	cmp	r3, #2
 8007520:	d004      	beq.n	800752c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f88f 	bl	8007648 <USBD_CtlError>
      break;
 800752a:	e01a      	b.n	8007562 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007538:	2b00      	cmp	r3, #0
 800753a:	d005      	beq.n	8007548 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f043 0202 	orr.w	r2, r3, #2
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	330c      	adds	r3, #12
 800754c:	2202      	movs	r2, #2
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f8ea 	bl	800772a <USBD_CtlSendData>
    break;
 8007556:	e004      	b.n	8007562 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f874 	bl	8007648 <USBD_CtlError>
    break;
 8007560:	bf00      	nop
  }
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	885b      	ldrh	r3, [r3, #2]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d106      	bne.n	800758a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f92a 	bl	80077de <USBD_CtlSendStatus>
  }
}
 800758a:	bf00      	nop
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b082      	sub	sp, #8
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a2:	3b01      	subs	r3, #1
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d80b      	bhi.n	80075c0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	885b      	ldrh	r3, [r3, #2]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d10c      	bne.n	80075ca <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f910 	bl	80077de <USBD_CtlSendStatus>
      }
      break;
 80075be:	e004      	b.n	80075ca <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f840 	bl	8007648 <USBD_CtlError>
      break;
 80075c8:	e000      	b.n	80075cc <USBD_ClrFeature+0x3a>
      break;
 80075ca:	bf00      	nop
  }
}
 80075cc:	bf00      	nop
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	781a      	ldrb	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3301      	adds	r3, #1
 80075ee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	781a      	ldrb	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3301      	adds	r3, #1
 80075fc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7ff fad3 	bl	8006baa <SWAPBYTE>
 8007604:	4603      	mov	r3, r0
 8007606:	461a      	mov	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	3301      	adds	r3, #1
 8007610:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3301      	adds	r3, #1
 8007616:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f7ff fac6 	bl	8006baa <SWAPBYTE>
 800761e:	4603      	mov	r3, r0
 8007620:	461a      	mov	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3301      	adds	r3, #1
 800762a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3301      	adds	r3, #1
 8007630:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f7ff fab9 	bl	8006baa <SWAPBYTE>
 8007638:	4603      	mov	r3, r0
 800763a:	461a      	mov	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	80da      	strh	r2, [r3, #6]
}
 8007640:	bf00      	nop
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007652:	2180      	movs	r1, #128	; 0x80
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fcb9 	bl	8007fcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800765a:	2100      	movs	r1, #0
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fcb5 	bl	8007fcc <USBD_LL_StallEP>
}
 8007662:	bf00      	nop
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b086      	sub	sp, #24
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d036      	beq.n	80076ee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007684:	6938      	ldr	r0, [r7, #16]
 8007686:	f000 f836 	bl	80076f6 <USBD_GetLen>
 800768a:	4603      	mov	r3, r0
 800768c:	3301      	adds	r3, #1
 800768e:	b29b      	uxth	r3, r3
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007698:	7dfb      	ldrb	r3, [r7, #23]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	4413      	add	r3, r2
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	7812      	ldrb	r2, [r2, #0]
 80076a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	3301      	adds	r3, #1
 80076a8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	4413      	add	r3, r2
 80076b0:	2203      	movs	r2, #3
 80076b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
 80076b6:	3301      	adds	r3, #1
 80076b8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80076ba:	e013      	b.n	80076e4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80076bc:	7dfb      	ldrb	r3, [r7, #23]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	4413      	add	r3, r2
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	7812      	ldrb	r2, [r2, #0]
 80076c6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	3301      	adds	r3, #1
 80076cc:	613b      	str	r3, [r7, #16]
    idx++;
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
 80076d0:	3301      	adds	r3, #1
 80076d2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	4413      	add	r3, r2
 80076da:	2200      	movs	r2, #0
 80076dc:	701a      	strb	r2, [r3, #0]
    idx++;
 80076de:	7dfb      	ldrb	r3, [r7, #23]
 80076e0:	3301      	adds	r3, #1
 80076e2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e7      	bne.n	80076bc <USBD_GetString+0x52>
 80076ec:	e000      	b.n	80076f0 <USBD_GetString+0x86>
    return;
 80076ee:	bf00      	nop
  }
}
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b085      	sub	sp, #20
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007706:	e005      	b.n	8007714 <USBD_GetLen+0x1e>
  {
    len++;
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	3301      	adds	r3, #1
 800770c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	3301      	adds	r3, #1
 8007712:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1f5      	bne.n	8007708 <USBD_GetLen+0x12>
  }

  return len;
 800771c:	7bfb      	ldrb	r3, [r7, #15]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b084      	sub	sp, #16
 800772e:	af00      	add	r7, sp, #0
 8007730:	60f8      	str	r0, [r7, #12]
 8007732:	60b9      	str	r1, [r7, #8]
 8007734:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2202      	movs	r2, #2
 800773a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	2100      	movs	r1, #0
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 fcc4 	bl	80080de <USBD_LL_Transmit>

  return USBD_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	2100      	movs	r1, #0
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f000 fcb3 	bl	80080de <USBD_LL_Transmit>

  return USBD_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2203      	movs	r2, #3
 8007792:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	2100      	movs	r1, #0
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 fcb7 	bl	8008120 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	2100      	movs	r1, #0
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 fca6 	bl	8008120 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b082      	sub	sp, #8
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2204      	movs	r2, #4
 80077ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077ee:	2300      	movs	r3, #0
 80077f0:	2200      	movs	r2, #0
 80077f2:	2100      	movs	r1, #0
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fc72 	bl	80080de <USBD_LL_Transmit>

  return USBD_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2205      	movs	r2, #5
 8007810:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007814:	2300      	movs	r3, #0
 8007816:	2200      	movs	r2, #0
 8007818:	2100      	movs	r1, #0
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fc80 	bl	8008120 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007830:	2200      	movs	r2, #0
 8007832:	4912      	ldr	r1, [pc, #72]	; (800787c <MX_USB_DEVICE_Init+0x50>)
 8007834:	4812      	ldr	r0, [pc, #72]	; (8007880 <MX_USB_DEVICE_Init+0x54>)
 8007836:	f7fe fef3 	bl	8006620 <USBD_Init>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007840:	f7f9 f906 	bl	8000a50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007844:	490f      	ldr	r1, [pc, #60]	; (8007884 <MX_USB_DEVICE_Init+0x58>)
 8007846:	480e      	ldr	r0, [pc, #56]	; (8007880 <MX_USB_DEVICE_Init+0x54>)
 8007848:	f7fe ff20 	bl	800668c <USBD_RegisterClass>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007852:	f7f9 f8fd 	bl	8000a50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007856:	490c      	ldr	r1, [pc, #48]	; (8007888 <MX_USB_DEVICE_Init+0x5c>)
 8007858:	4809      	ldr	r0, [pc, #36]	; (8007880 <MX_USB_DEVICE_Init+0x54>)
 800785a:	f7fe fe75 	bl	8006548 <USBD_CDC_RegisterInterface>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007864:	f7f9 f8f4 	bl	8000a50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007868:	4805      	ldr	r0, [pc, #20]	; (8007880 <MX_USB_DEVICE_Init+0x54>)
 800786a:	f7fe ff30 	bl	80066ce <USBD_Start>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007874:	f7f9 f8ec 	bl	8000a50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007878:	bf00      	nop
 800787a:	bd80      	pop	{r7, pc}
 800787c:	20000130 	.word	0x20000130
 8007880:	200003c0 	.word	0x200003c0
 8007884:	20000018 	.word	0x20000018
 8007888:	2000011c 	.word	0x2000011c

0800788c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007890:	2200      	movs	r2, #0
 8007892:	4905      	ldr	r1, [pc, #20]	; (80078a8 <CDC_Init_FS+0x1c>)
 8007894:	4805      	ldr	r0, [pc, #20]	; (80078ac <CDC_Init_FS+0x20>)
 8007896:	f7fe fe6c 	bl	8006572 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800789a:	4905      	ldr	r1, [pc, #20]	; (80078b0 <CDC_Init_FS+0x24>)
 800789c:	4803      	ldr	r0, [pc, #12]	; (80078ac <CDC_Init_FS+0x20>)
 800789e:	f7fe fe81 	bl	80065a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80078a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	20000e90 	.word	0x20000e90
 80078ac:	200003c0 	.word	0x200003c0
 80078b0:	20000690 	.word	0x20000690

080078b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80078b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	6039      	str	r1, [r7, #0]
 80078ce:	71fb      	strb	r3, [r7, #7]
 80078d0:	4613      	mov	r3, r2
 80078d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80078d4:	79fb      	ldrb	r3, [r7, #7]
 80078d6:	2b23      	cmp	r3, #35	; 0x23
 80078d8:	d84a      	bhi.n	8007970 <CDC_Control_FS+0xac>
 80078da:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <CDC_Control_FS+0x1c>)
 80078dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e0:	08007971 	.word	0x08007971
 80078e4:	08007971 	.word	0x08007971
 80078e8:	08007971 	.word	0x08007971
 80078ec:	08007971 	.word	0x08007971
 80078f0:	08007971 	.word	0x08007971
 80078f4:	08007971 	.word	0x08007971
 80078f8:	08007971 	.word	0x08007971
 80078fc:	08007971 	.word	0x08007971
 8007900:	08007971 	.word	0x08007971
 8007904:	08007971 	.word	0x08007971
 8007908:	08007971 	.word	0x08007971
 800790c:	08007971 	.word	0x08007971
 8007910:	08007971 	.word	0x08007971
 8007914:	08007971 	.word	0x08007971
 8007918:	08007971 	.word	0x08007971
 800791c:	08007971 	.word	0x08007971
 8007920:	08007971 	.word	0x08007971
 8007924:	08007971 	.word	0x08007971
 8007928:	08007971 	.word	0x08007971
 800792c:	08007971 	.word	0x08007971
 8007930:	08007971 	.word	0x08007971
 8007934:	08007971 	.word	0x08007971
 8007938:	08007971 	.word	0x08007971
 800793c:	08007971 	.word	0x08007971
 8007940:	08007971 	.word	0x08007971
 8007944:	08007971 	.word	0x08007971
 8007948:	08007971 	.word	0x08007971
 800794c:	08007971 	.word	0x08007971
 8007950:	08007971 	.word	0x08007971
 8007954:	08007971 	.word	0x08007971
 8007958:	08007971 	.word	0x08007971
 800795c:	08007971 	.word	0x08007971
 8007960:	08007971 	.word	0x08007971
 8007964:	08007971 	.word	0x08007971
 8007968:	08007971 	.word	0x08007971
 800796c:	08007971 	.word	0x08007971
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007970:	bf00      	nop
  }

  return (USBD_OK);
 8007972:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007974:	4618      	mov	r0, r3
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	4805      	ldr	r0, [pc, #20]	; (80079a4 <CDC_Receive_FS+0x24>)
 800798e:	f7fe fe09 	bl	80065a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007992:	4804      	ldr	r0, [pc, #16]	; (80079a4 <CDC_Receive_FS+0x24>)
 8007994:	f7fe fe1a 	bl	80065cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007998:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	200003c0 	.word	0x200003c0

080079a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	4613      	mov	r3, r2
 80079b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80079ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
	...

080079cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	4603      	mov	r3, r0
 80079d4:	6039      	str	r1, [r7, #0]
 80079d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2212      	movs	r2, #18
 80079dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80079de:	4b03      	ldr	r3, [pc, #12]	; (80079ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	2000014c 	.word	0x2000014c

080079f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	6039      	str	r1, [r7, #0]
 80079fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	2204      	movs	r2, #4
 8007a00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a02:	4b03      	ldr	r3, [pc, #12]	; (8007a10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	20000160 	.word	0x20000160

08007a14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	6039      	str	r1, [r7, #0]
 8007a1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a20:	79fb      	ldrb	r3, [r7, #7]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d105      	bne.n	8007a32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	4907      	ldr	r1, [pc, #28]	; (8007a48 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a2a:	4808      	ldr	r0, [pc, #32]	; (8007a4c <USBD_FS_ProductStrDescriptor+0x38>)
 8007a2c:	f7ff fe1d 	bl	800766a <USBD_GetString>
 8007a30:	e004      	b.n	8007a3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	4904      	ldr	r1, [pc, #16]	; (8007a48 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a36:	4805      	ldr	r0, [pc, #20]	; (8007a4c <USBD_FS_ProductStrDescriptor+0x38>)
 8007a38:	f7ff fe17 	bl	800766a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a3c:	4b02      	ldr	r3, [pc, #8]	; (8007a48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20001690 	.word	0x20001690
 8007a4c:	08008ac4 	.word	0x08008ac4

08007a50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	4603      	mov	r3, r0
 8007a58:	6039      	str	r1, [r7, #0]
 8007a5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	4904      	ldr	r1, [pc, #16]	; (8007a70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a60:	4804      	ldr	r0, [pc, #16]	; (8007a74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a62:	f7ff fe02 	bl	800766a <USBD_GetString>
  return USBD_StrDesc;
 8007a66:	4b02      	ldr	r3, [pc, #8]	; (8007a70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20001690 	.word	0x20001690
 8007a74:	08008adc 	.word	0x08008adc

08007a78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	6039      	str	r1, [r7, #0]
 8007a82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	221a      	movs	r2, #26
 8007a88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a8a:	f000 f843 	bl	8007b14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a8e:	4b02      	ldr	r3, [pc, #8]	; (8007a98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	20000164 	.word	0x20000164

08007a9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	6039      	str	r1, [r7, #0]
 8007aa6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007aa8:	79fb      	ldrb	r3, [r7, #7]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d105      	bne.n	8007aba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	4907      	ldr	r1, [pc, #28]	; (8007ad0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ab2:	4808      	ldr	r0, [pc, #32]	; (8007ad4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ab4:	f7ff fdd9 	bl	800766a <USBD_GetString>
 8007ab8:	e004      	b.n	8007ac4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	4904      	ldr	r1, [pc, #16]	; (8007ad0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007abe:	4805      	ldr	r0, [pc, #20]	; (8007ad4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ac0:	f7ff fdd3 	bl	800766a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ac4:	4b02      	ldr	r3, [pc, #8]	; (8007ad0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20001690 	.word	0x20001690
 8007ad4:	08008af0 	.word	0x08008af0

08007ad8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	6039      	str	r1, [r7, #0]
 8007ae2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ae4:	79fb      	ldrb	r3, [r7, #7]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d105      	bne.n	8007af6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	4907      	ldr	r1, [pc, #28]	; (8007b0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007aee:	4808      	ldr	r0, [pc, #32]	; (8007b10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007af0:	f7ff fdbb 	bl	800766a <USBD_GetString>
 8007af4:	e004      	b.n	8007b00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	4904      	ldr	r1, [pc, #16]	; (8007b0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007afa:	4805      	ldr	r0, [pc, #20]	; (8007b10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007afc:	f7ff fdb5 	bl	800766a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b00:	4b02      	ldr	r3, [pc, #8]	; (8007b0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20001690 	.word	0x20001690
 8007b10:	08008afc 	.word	0x08008afc

08007b14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b1a:	4b0f      	ldr	r3, [pc, #60]	; (8007b58 <Get_SerialNum+0x44>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b20:	4b0e      	ldr	r3, [pc, #56]	; (8007b5c <Get_SerialNum+0x48>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b26:	4b0e      	ldr	r3, [pc, #56]	; (8007b60 <Get_SerialNum+0x4c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4413      	add	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d009      	beq.n	8007b4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b3a:	2208      	movs	r2, #8
 8007b3c:	4909      	ldr	r1, [pc, #36]	; (8007b64 <Get_SerialNum+0x50>)
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 f814 	bl	8007b6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b44:	2204      	movs	r2, #4
 8007b46:	4908      	ldr	r1, [pc, #32]	; (8007b68 <Get_SerialNum+0x54>)
 8007b48:	68b8      	ldr	r0, [r7, #8]
 8007b4a:	f000 f80f 	bl	8007b6c <IntToUnicode>
  }
}
 8007b4e:	bf00      	nop
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	1fff7a10 	.word	0x1fff7a10
 8007b5c:	1fff7a14 	.word	0x1fff7a14
 8007b60:	1fff7a18 	.word	0x1fff7a18
 8007b64:	20000166 	.word	0x20000166
 8007b68:	20000176 	.word	0x20000176

08007b6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	4613      	mov	r3, r2
 8007b78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b7e:	2300      	movs	r3, #0
 8007b80:	75fb      	strb	r3, [r7, #23]
 8007b82:	e027      	b.n	8007bd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	0f1b      	lsrs	r3, r3, #28
 8007b88:	2b09      	cmp	r3, #9
 8007b8a:	d80b      	bhi.n	8007ba4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	0f1b      	lsrs	r3, r3, #28
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	005b      	lsls	r3, r3, #1
 8007b96:	4619      	mov	r1, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	440b      	add	r3, r1
 8007b9c:	3230      	adds	r2, #48	; 0x30
 8007b9e:	b2d2      	uxtb	r2, r2
 8007ba0:	701a      	strb	r2, [r3, #0]
 8007ba2:	e00a      	b.n	8007bba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	0f1b      	lsrs	r3, r3, #28
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	7dfb      	ldrb	r3, [r7, #23]
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	4619      	mov	r1, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	440b      	add	r3, r1
 8007bb4:	3237      	adds	r2, #55	; 0x37
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	011b      	lsls	r3, r3, #4
 8007bbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007bc0:	7dfb      	ldrb	r3, [r7, #23]
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	4413      	add	r3, r2
 8007bca:	2200      	movs	r2, #0
 8007bcc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	75fb      	strb	r3, [r7, #23]
 8007bd4:	7dfa      	ldrb	r2, [r7, #23]
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d3d3      	bcc.n	8007b84 <IntToUnicode+0x18>
  }
}
 8007bdc:	bf00      	nop
 8007bde:	371c      	adds	r7, #28
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b08a      	sub	sp, #40	; 0x28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bf0:	f107 0314 	add.w	r3, r7, #20
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]
 8007bf8:	605a      	str	r2, [r3, #4]
 8007bfa:	609a      	str	r2, [r3, #8]
 8007bfc:	60da      	str	r2, [r3, #12]
 8007bfe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c08:	d13a      	bne.n	8007c80 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	613b      	str	r3, [r7, #16]
 8007c0e:	4b1e      	ldr	r3, [pc, #120]	; (8007c88 <HAL_PCD_MspInit+0xa0>)
 8007c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c12:	4a1d      	ldr	r2, [pc, #116]	; (8007c88 <HAL_PCD_MspInit+0xa0>)
 8007c14:	f043 0301 	orr.w	r3, r3, #1
 8007c18:	6313      	str	r3, [r2, #48]	; 0x30
 8007c1a:	4b1b      	ldr	r3, [pc, #108]	; (8007c88 <HAL_PCD_MspInit+0xa0>)
 8007c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	613b      	str	r3, [r7, #16]
 8007c24:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007c26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c30:	2300      	movs	r3, #0
 8007c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c34:	2303      	movs	r3, #3
 8007c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c38:	230a      	movs	r3, #10
 8007c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c3c:	f107 0314 	add.w	r3, r7, #20
 8007c40:	4619      	mov	r1, r3
 8007c42:	4812      	ldr	r0, [pc, #72]	; (8007c8c <HAL_PCD_MspInit+0xa4>)
 8007c44:	f7f9 fd24 	bl	8001690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c48:	4b0f      	ldr	r3, [pc, #60]	; (8007c88 <HAL_PCD_MspInit+0xa0>)
 8007c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4c:	4a0e      	ldr	r2, [pc, #56]	; (8007c88 <HAL_PCD_MspInit+0xa0>)
 8007c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c52:	6353      	str	r3, [r2, #52]	; 0x34
 8007c54:	2300      	movs	r3, #0
 8007c56:	60fb      	str	r3, [r7, #12]
 8007c58:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <HAL_PCD_MspInit+0xa0>)
 8007c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c5c:	4a0a      	ldr	r2, [pc, #40]	; (8007c88 <HAL_PCD_MspInit+0xa0>)
 8007c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c62:	6453      	str	r3, [r2, #68]	; 0x44
 8007c64:	4b08      	ldr	r3, [pc, #32]	; (8007c88 <HAL_PCD_MspInit+0xa0>)
 8007c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c70:	2200      	movs	r2, #0
 8007c72:	2100      	movs	r1, #0
 8007c74:	2043      	movs	r0, #67	; 0x43
 8007c76:	f7f9 fcb2 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c7a:	2043      	movs	r0, #67	; 0x43
 8007c7c:	f7f9 fccb 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c80:	bf00      	nop
 8007c82:	3728      	adds	r7, #40	; 0x28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	40023800 	.word	0x40023800
 8007c8c:	40020000 	.word	0x40020000

08007c90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	f7fe fd5c 	bl	8006764 <USBD_LL_SetupStage>
}
 8007cac:	bf00      	nop
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007cc6:	78fa      	ldrb	r2, [r7, #3]
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	00db      	lsls	r3, r3, #3
 8007cce:	1a9b      	subs	r3, r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	440b      	add	r3, r1
 8007cd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	78fb      	ldrb	r3, [r7, #3]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	f7fe fd94 	bl	800680a <USBD_LL_DataOutStage>
}
 8007ce2:	bf00      	nop
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b082      	sub	sp, #8
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007cfc:	78fa      	ldrb	r2, [r7, #3]
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	4613      	mov	r3, r2
 8007d02:	00db      	lsls	r3, r3, #3
 8007d04:	1a9b      	subs	r3, r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	440b      	add	r3, r1
 8007d0a:	3348      	adds	r3, #72	; 0x48
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	78fb      	ldrb	r3, [r7, #3]
 8007d10:	4619      	mov	r1, r3
 8007d12:	f7fe fddd 	bl	80068d0 <USBD_LL_DataInStage>
}
 8007d16:	bf00      	nop
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fe fee1 	bl	8006af4 <USBD_LL_SOF>
}
 8007d32:	bf00      	nop
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d42:	2301      	movs	r3, #1
 8007d44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d102      	bne.n	8007d54 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]
 8007d52:	e008      	b.n	8007d66 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d102      	bne.n	8007d62 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	73fb      	strb	r3, [r7, #15]
 8007d60:	e001      	b.n	8007d66 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007d62:	f7f8 fe75 	bl	8000a50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d6c:	7bfa      	ldrb	r2, [r7, #15]
 8007d6e:	4611      	mov	r1, r2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fe fe84 	bl	8006a7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe fe3d 	bl	80069fc <USBD_LL_Reset>
}
 8007d82:	bf00      	nop
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fe fe7f 	bl	8006a9e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	6812      	ldr	r2, [r2, #0]
 8007dae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007db2:	f043 0301 	orr.w	r3, r3, #1
 8007db6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d005      	beq.n	8007dcc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007dc0:	4b04      	ldr	r3, [pc, #16]	; (8007dd4 <HAL_PCD_SuspendCallback+0x48>)
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	4a03      	ldr	r2, [pc, #12]	; (8007dd4 <HAL_PCD_SuspendCallback+0x48>)
 8007dc6:	f043 0306 	orr.w	r3, r3, #6
 8007dca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007dcc:	bf00      	nop
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	e000ed00 	.word	0xe000ed00

08007dd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe fe6e 	bl	8006ac8 <USBD_LL_Resume>
}
 8007dec:	bf00      	nop
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e06:	78fa      	ldrb	r2, [r7, #3]
 8007e08:	4611      	mov	r1, r2
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe fe99 	bl	8006b42 <USBD_LL_IsoOUTIncomplete>
}
 8007e10:	bf00      	nop
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e2a:	78fa      	ldrb	r2, [r7, #3]
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fe fe7a 	bl	8006b28 <USBD_LL_IsoINIncomplete>
}
 8007e34:	bf00      	nop
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fe fe86 	bl	8006b5c <USBD_LL_DevConnected>
}
 8007e50:	bf00      	nop
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fe fe83 	bl	8006b72 <USBD_LL_DevDisconnected>
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d13c      	bne.n	8007efe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007e84:	4a20      	ldr	r2, [pc, #128]	; (8007f08 <USBD_LL_Init+0x94>)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a1e      	ldr	r2, [pc, #120]	; (8007f08 <USBD_LL_Init+0x94>)
 8007e90:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e94:	4b1c      	ldr	r3, [pc, #112]	; (8007f08 <USBD_LL_Init+0x94>)
 8007e96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007e9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007e9c:	4b1a      	ldr	r3, [pc, #104]	; (8007f08 <USBD_LL_Init+0x94>)
 8007e9e:	2204      	movs	r2, #4
 8007ea0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007ea2:	4b19      	ldr	r3, [pc, #100]	; (8007f08 <USBD_LL_Init+0x94>)
 8007ea4:	2202      	movs	r2, #2
 8007ea6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ea8:	4b17      	ldr	r3, [pc, #92]	; (8007f08 <USBD_LL_Init+0x94>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007eae:	4b16      	ldr	r3, [pc, #88]	; (8007f08 <USBD_LL_Init+0x94>)
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007eb4:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <USBD_LL_Init+0x94>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007eba:	4b13      	ldr	r3, [pc, #76]	; (8007f08 <USBD_LL_Init+0x94>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ec0:	4b11      	ldr	r3, [pc, #68]	; (8007f08 <USBD_LL_Init+0x94>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007ec6:	4b10      	ldr	r3, [pc, #64]	; (8007f08 <USBD_LL_Init+0x94>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ecc:	4b0e      	ldr	r3, [pc, #56]	; (8007f08 <USBD_LL_Init+0x94>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007ed2:	480d      	ldr	r0, [pc, #52]	; (8007f08 <USBD_LL_Init+0x94>)
 8007ed4:	f7f9 fec8 	bl	8001c68 <HAL_PCD_Init>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ede:	f7f8 fdb7 	bl	8000a50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ee2:	2180      	movs	r1, #128	; 0x80
 8007ee4:	4808      	ldr	r0, [pc, #32]	; (8007f08 <USBD_LL_Init+0x94>)
 8007ee6:	f7fb f826 	bl	8002f36 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007eea:	2240      	movs	r2, #64	; 0x40
 8007eec:	2100      	movs	r1, #0
 8007eee:	4806      	ldr	r0, [pc, #24]	; (8007f08 <USBD_LL_Init+0x94>)
 8007ef0:	f7fa ffda 	bl	8002ea8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007ef4:	2280      	movs	r2, #128	; 0x80
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	4803      	ldr	r0, [pc, #12]	; (8007f08 <USBD_LL_Init+0x94>)
 8007efa:	f7fa ffd5 	bl	8002ea8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	20001890 	.word	0x20001890

08007f0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7f9 ffbd 	bl	8001ea2 <HAL_PCD_Start>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 f92a 	bl	8008188 <USBD_Get_USB_Status>
 8007f34:	4603      	mov	r3, r0
 8007f36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	4608      	mov	r0, r1
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	461a      	mov	r2, r3
 8007f50:	4603      	mov	r3, r0
 8007f52:	70fb      	strb	r3, [r7, #3]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70bb      	strb	r3, [r7, #2]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f6a:	78bb      	ldrb	r3, [r7, #2]
 8007f6c:	883a      	ldrh	r2, [r7, #0]
 8007f6e:	78f9      	ldrb	r1, [r7, #3]
 8007f70:	f7fa fba1 	bl	80026b6 <HAL_PCD_EP_Open>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 f904 	bl	8008188 <USBD_Get_USB_Status>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	460b      	mov	r3, r1
 8007f98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fa8:	78fa      	ldrb	r2, [r7, #3]
 8007faa:	4611      	mov	r1, r2
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fa fbea 	bl	8002786 <HAL_PCD_EP_Close>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 f8e5 	bl	8008188 <USBD_Get_USB_Status>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fe6:	78fa      	ldrb	r2, [r7, #3]
 8007fe8:	4611      	mov	r1, r2
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fa fcc2 	bl	8002974 <HAL_PCD_EP_SetStall>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 f8c6 	bl	8008188 <USBD_Get_USB_Status>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008000:	7bbb      	ldrb	r3, [r7, #14]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b084      	sub	sp, #16
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	460b      	mov	r3, r1
 8008014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008024:	78fa      	ldrb	r2, [r7, #3]
 8008026:	4611      	mov	r1, r2
 8008028:	4618      	mov	r0, r3
 800802a:	f7fa fd07 	bl	8002a3c <HAL_PCD_EP_ClrStall>
 800802e:	4603      	mov	r3, r0
 8008030:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	4618      	mov	r0, r3
 8008036:	f000 f8a7 	bl	8008188 <USBD_Get_USB_Status>
 800803a:	4603      	mov	r3, r0
 800803c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800803e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800805a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800805c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008060:	2b00      	cmp	r3, #0
 8008062:	da0b      	bge.n	800807c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008064:	78fb      	ldrb	r3, [r7, #3]
 8008066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800806a:	68f9      	ldr	r1, [r7, #12]
 800806c:	4613      	mov	r3, r2
 800806e:	00db      	lsls	r3, r3, #3
 8008070:	1a9b      	subs	r3, r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	440b      	add	r3, r1
 8008076:	333e      	adds	r3, #62	; 0x3e
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	e00b      	b.n	8008094 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008082:	68f9      	ldr	r1, [r7, #12]
 8008084:	4613      	mov	r3, r2
 8008086:	00db      	lsls	r3, r3, #3
 8008088:	1a9b      	subs	r3, r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	440b      	add	r3, r1
 800808e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008092:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008094:	4618      	mov	r0, r3
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080ba:	78fa      	ldrb	r2, [r7, #3]
 80080bc:	4611      	mov	r1, r2
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fa fad4 	bl	800266c <HAL_PCD_SetAddress>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 f85c 	bl	8008188 <USBD_Get_USB_Status>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b086      	sub	sp, #24
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	607a      	str	r2, [r7, #4]
 80080e8:	603b      	str	r3, [r7, #0]
 80080ea:	460b      	mov	r3, r1
 80080ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80080fc:	7af9      	ldrb	r1, [r7, #11]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	f7fa fbed 	bl	80028e0 <HAL_PCD_EP_Transmit>
 8008106:	4603      	mov	r3, r0
 8008108:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	4618      	mov	r0, r3
 800810e:	f000 f83b 	bl	8008188 <USBD_Get_USB_Status>
 8008112:	4603      	mov	r3, r0
 8008114:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008116:	7dbb      	ldrb	r3, [r7, #22]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	607a      	str	r2, [r7, #4]
 800812a:	603b      	str	r3, [r7, #0]
 800812c:	460b      	mov	r3, r1
 800812e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800813e:	7af9      	ldrb	r1, [r7, #11]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	f7fa fb69 	bl	800281a <HAL_PCD_EP_Receive>
 8008148:	4603      	mov	r3, r0
 800814a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800814c:	7dfb      	ldrb	r3, [r7, #23]
 800814e:	4618      	mov	r0, r3
 8008150:	f000 f81a 	bl	8008188 <USBD_Get_USB_Status>
 8008154:	4603      	mov	r3, r0
 8008156:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008158:	7dbb      	ldrb	r3, [r7, #22]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b082      	sub	sp, #8
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	460b      	mov	r3, r1
 800816c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008174:	78fa      	ldrb	r2, [r7, #3]
 8008176:	4611      	mov	r1, r2
 8008178:	4618      	mov	r0, r3
 800817a:	f7fa fb99 	bl	80028b0 <HAL_PCD_EP_GetRxCount>
 800817e:	4603      	mov	r3, r0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	4603      	mov	r3, r0
 8008190:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008196:	79fb      	ldrb	r3, [r7, #7]
 8008198:	2b03      	cmp	r3, #3
 800819a:	d817      	bhi.n	80081cc <USBD_Get_USB_Status+0x44>
 800819c:	a201      	add	r2, pc, #4	; (adr r2, 80081a4 <USBD_Get_USB_Status+0x1c>)
 800819e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a2:	bf00      	nop
 80081a4:	080081b5 	.word	0x080081b5
 80081a8:	080081bb 	.word	0x080081bb
 80081ac:	080081c1 	.word	0x080081c1
 80081b0:	080081c7 	.word	0x080081c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73fb      	strb	r3, [r7, #15]
    break;
 80081b8:	e00b      	b.n	80081d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081ba:	2303      	movs	r3, #3
 80081bc:	73fb      	strb	r3, [r7, #15]
    break;
 80081be:	e008      	b.n	80081d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081c0:	2301      	movs	r3, #1
 80081c2:	73fb      	strb	r3, [r7, #15]
    break;
 80081c4:	e005      	b.n	80081d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081c6:	2303      	movs	r3, #3
 80081c8:	73fb      	strb	r3, [r7, #15]
    break;
 80081ca:	e002      	b.n	80081d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081cc:	2303      	movs	r3, #3
 80081ce:	73fb      	strb	r3, [r7, #15]
    break;
 80081d0:	bf00      	nop
  }
  return usb_status;
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <__errno>:
 80081e0:	4b01      	ldr	r3, [pc, #4]	; (80081e8 <__errno+0x8>)
 80081e2:	6818      	ldr	r0, [r3, #0]
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	20000180 	.word	0x20000180

080081ec <__libc_init_array>:
 80081ec:	b570      	push	{r4, r5, r6, lr}
 80081ee:	4e0d      	ldr	r6, [pc, #52]	; (8008224 <__libc_init_array+0x38>)
 80081f0:	4c0d      	ldr	r4, [pc, #52]	; (8008228 <__libc_init_array+0x3c>)
 80081f2:	1ba4      	subs	r4, r4, r6
 80081f4:	10a4      	asrs	r4, r4, #2
 80081f6:	2500      	movs	r5, #0
 80081f8:	42a5      	cmp	r5, r4
 80081fa:	d109      	bne.n	8008210 <__libc_init_array+0x24>
 80081fc:	4e0b      	ldr	r6, [pc, #44]	; (800822c <__libc_init_array+0x40>)
 80081fe:	4c0c      	ldr	r4, [pc, #48]	; (8008230 <__libc_init_array+0x44>)
 8008200:	f000 fc4a 	bl	8008a98 <_init>
 8008204:	1ba4      	subs	r4, r4, r6
 8008206:	10a4      	asrs	r4, r4, #2
 8008208:	2500      	movs	r5, #0
 800820a:	42a5      	cmp	r5, r4
 800820c:	d105      	bne.n	800821a <__libc_init_array+0x2e>
 800820e:	bd70      	pop	{r4, r5, r6, pc}
 8008210:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008214:	4798      	blx	r3
 8008216:	3501      	adds	r5, #1
 8008218:	e7ee      	b.n	80081f8 <__libc_init_array+0xc>
 800821a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800821e:	4798      	blx	r3
 8008220:	3501      	adds	r5, #1
 8008222:	e7f2      	b.n	800820a <__libc_init_array+0x1e>
 8008224:	08008b60 	.word	0x08008b60
 8008228:	08008b60 	.word	0x08008b60
 800822c:	08008b60 	.word	0x08008b60
 8008230:	08008b64 	.word	0x08008b64

08008234 <malloc>:
 8008234:	4b02      	ldr	r3, [pc, #8]	; (8008240 <malloc+0xc>)
 8008236:	4601      	mov	r1, r0
 8008238:	6818      	ldr	r0, [r3, #0]
 800823a:	f000 b861 	b.w	8008300 <_malloc_r>
 800823e:	bf00      	nop
 8008240:	20000180 	.word	0x20000180

08008244 <free>:
 8008244:	4b02      	ldr	r3, [pc, #8]	; (8008250 <free+0xc>)
 8008246:	4601      	mov	r1, r0
 8008248:	6818      	ldr	r0, [r3, #0]
 800824a:	f000 b80b 	b.w	8008264 <_free_r>
 800824e:	bf00      	nop
 8008250:	20000180 	.word	0x20000180

08008254 <memset>:
 8008254:	4402      	add	r2, r0
 8008256:	4603      	mov	r3, r0
 8008258:	4293      	cmp	r3, r2
 800825a:	d100      	bne.n	800825e <memset+0xa>
 800825c:	4770      	bx	lr
 800825e:	f803 1b01 	strb.w	r1, [r3], #1
 8008262:	e7f9      	b.n	8008258 <memset+0x4>

08008264 <_free_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	4605      	mov	r5, r0
 8008268:	2900      	cmp	r1, #0
 800826a:	d045      	beq.n	80082f8 <_free_r+0x94>
 800826c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008270:	1f0c      	subs	r4, r1, #4
 8008272:	2b00      	cmp	r3, #0
 8008274:	bfb8      	it	lt
 8008276:	18e4      	addlt	r4, r4, r3
 8008278:	f000 f8e0 	bl	800843c <__malloc_lock>
 800827c:	4a1f      	ldr	r2, [pc, #124]	; (80082fc <_free_r+0x98>)
 800827e:	6813      	ldr	r3, [r2, #0]
 8008280:	4610      	mov	r0, r2
 8008282:	b933      	cbnz	r3, 8008292 <_free_r+0x2e>
 8008284:	6063      	str	r3, [r4, #4]
 8008286:	6014      	str	r4, [r2, #0]
 8008288:	4628      	mov	r0, r5
 800828a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800828e:	f000 b8d6 	b.w	800843e <__malloc_unlock>
 8008292:	42a3      	cmp	r3, r4
 8008294:	d90c      	bls.n	80082b0 <_free_r+0x4c>
 8008296:	6821      	ldr	r1, [r4, #0]
 8008298:	1862      	adds	r2, r4, r1
 800829a:	4293      	cmp	r3, r2
 800829c:	bf04      	itt	eq
 800829e:	681a      	ldreq	r2, [r3, #0]
 80082a0:	685b      	ldreq	r3, [r3, #4]
 80082a2:	6063      	str	r3, [r4, #4]
 80082a4:	bf04      	itt	eq
 80082a6:	1852      	addeq	r2, r2, r1
 80082a8:	6022      	streq	r2, [r4, #0]
 80082aa:	6004      	str	r4, [r0, #0]
 80082ac:	e7ec      	b.n	8008288 <_free_r+0x24>
 80082ae:	4613      	mov	r3, r2
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	b10a      	cbz	r2, 80082b8 <_free_r+0x54>
 80082b4:	42a2      	cmp	r2, r4
 80082b6:	d9fa      	bls.n	80082ae <_free_r+0x4a>
 80082b8:	6819      	ldr	r1, [r3, #0]
 80082ba:	1858      	adds	r0, r3, r1
 80082bc:	42a0      	cmp	r0, r4
 80082be:	d10b      	bne.n	80082d8 <_free_r+0x74>
 80082c0:	6820      	ldr	r0, [r4, #0]
 80082c2:	4401      	add	r1, r0
 80082c4:	1858      	adds	r0, r3, r1
 80082c6:	4282      	cmp	r2, r0
 80082c8:	6019      	str	r1, [r3, #0]
 80082ca:	d1dd      	bne.n	8008288 <_free_r+0x24>
 80082cc:	6810      	ldr	r0, [r2, #0]
 80082ce:	6852      	ldr	r2, [r2, #4]
 80082d0:	605a      	str	r2, [r3, #4]
 80082d2:	4401      	add	r1, r0
 80082d4:	6019      	str	r1, [r3, #0]
 80082d6:	e7d7      	b.n	8008288 <_free_r+0x24>
 80082d8:	d902      	bls.n	80082e0 <_free_r+0x7c>
 80082da:	230c      	movs	r3, #12
 80082dc:	602b      	str	r3, [r5, #0]
 80082de:	e7d3      	b.n	8008288 <_free_r+0x24>
 80082e0:	6820      	ldr	r0, [r4, #0]
 80082e2:	1821      	adds	r1, r4, r0
 80082e4:	428a      	cmp	r2, r1
 80082e6:	bf04      	itt	eq
 80082e8:	6811      	ldreq	r1, [r2, #0]
 80082ea:	6852      	ldreq	r2, [r2, #4]
 80082ec:	6062      	str	r2, [r4, #4]
 80082ee:	bf04      	itt	eq
 80082f0:	1809      	addeq	r1, r1, r0
 80082f2:	6021      	streq	r1, [r4, #0]
 80082f4:	605c      	str	r4, [r3, #4]
 80082f6:	e7c7      	b.n	8008288 <_free_r+0x24>
 80082f8:	bd38      	pop	{r3, r4, r5, pc}
 80082fa:	bf00      	nop
 80082fc:	20000298 	.word	0x20000298

08008300 <_malloc_r>:
 8008300:	b570      	push	{r4, r5, r6, lr}
 8008302:	1ccd      	adds	r5, r1, #3
 8008304:	f025 0503 	bic.w	r5, r5, #3
 8008308:	3508      	adds	r5, #8
 800830a:	2d0c      	cmp	r5, #12
 800830c:	bf38      	it	cc
 800830e:	250c      	movcc	r5, #12
 8008310:	2d00      	cmp	r5, #0
 8008312:	4606      	mov	r6, r0
 8008314:	db01      	blt.n	800831a <_malloc_r+0x1a>
 8008316:	42a9      	cmp	r1, r5
 8008318:	d903      	bls.n	8008322 <_malloc_r+0x22>
 800831a:	230c      	movs	r3, #12
 800831c:	6033      	str	r3, [r6, #0]
 800831e:	2000      	movs	r0, #0
 8008320:	bd70      	pop	{r4, r5, r6, pc}
 8008322:	f000 f88b 	bl	800843c <__malloc_lock>
 8008326:	4a21      	ldr	r2, [pc, #132]	; (80083ac <_malloc_r+0xac>)
 8008328:	6814      	ldr	r4, [r2, #0]
 800832a:	4621      	mov	r1, r4
 800832c:	b991      	cbnz	r1, 8008354 <_malloc_r+0x54>
 800832e:	4c20      	ldr	r4, [pc, #128]	; (80083b0 <_malloc_r+0xb0>)
 8008330:	6823      	ldr	r3, [r4, #0]
 8008332:	b91b      	cbnz	r3, 800833c <_malloc_r+0x3c>
 8008334:	4630      	mov	r0, r6
 8008336:	f000 f83d 	bl	80083b4 <_sbrk_r>
 800833a:	6020      	str	r0, [r4, #0]
 800833c:	4629      	mov	r1, r5
 800833e:	4630      	mov	r0, r6
 8008340:	f000 f838 	bl	80083b4 <_sbrk_r>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d124      	bne.n	8008392 <_malloc_r+0x92>
 8008348:	230c      	movs	r3, #12
 800834a:	6033      	str	r3, [r6, #0]
 800834c:	4630      	mov	r0, r6
 800834e:	f000 f876 	bl	800843e <__malloc_unlock>
 8008352:	e7e4      	b.n	800831e <_malloc_r+0x1e>
 8008354:	680b      	ldr	r3, [r1, #0]
 8008356:	1b5b      	subs	r3, r3, r5
 8008358:	d418      	bmi.n	800838c <_malloc_r+0x8c>
 800835a:	2b0b      	cmp	r3, #11
 800835c:	d90f      	bls.n	800837e <_malloc_r+0x7e>
 800835e:	600b      	str	r3, [r1, #0]
 8008360:	50cd      	str	r5, [r1, r3]
 8008362:	18cc      	adds	r4, r1, r3
 8008364:	4630      	mov	r0, r6
 8008366:	f000 f86a 	bl	800843e <__malloc_unlock>
 800836a:	f104 000b 	add.w	r0, r4, #11
 800836e:	1d23      	adds	r3, r4, #4
 8008370:	f020 0007 	bic.w	r0, r0, #7
 8008374:	1ac3      	subs	r3, r0, r3
 8008376:	d0d3      	beq.n	8008320 <_malloc_r+0x20>
 8008378:	425a      	negs	r2, r3
 800837a:	50e2      	str	r2, [r4, r3]
 800837c:	e7d0      	b.n	8008320 <_malloc_r+0x20>
 800837e:	428c      	cmp	r4, r1
 8008380:	684b      	ldr	r3, [r1, #4]
 8008382:	bf16      	itet	ne
 8008384:	6063      	strne	r3, [r4, #4]
 8008386:	6013      	streq	r3, [r2, #0]
 8008388:	460c      	movne	r4, r1
 800838a:	e7eb      	b.n	8008364 <_malloc_r+0x64>
 800838c:	460c      	mov	r4, r1
 800838e:	6849      	ldr	r1, [r1, #4]
 8008390:	e7cc      	b.n	800832c <_malloc_r+0x2c>
 8008392:	1cc4      	adds	r4, r0, #3
 8008394:	f024 0403 	bic.w	r4, r4, #3
 8008398:	42a0      	cmp	r0, r4
 800839a:	d005      	beq.n	80083a8 <_malloc_r+0xa8>
 800839c:	1a21      	subs	r1, r4, r0
 800839e:	4630      	mov	r0, r6
 80083a0:	f000 f808 	bl	80083b4 <_sbrk_r>
 80083a4:	3001      	adds	r0, #1
 80083a6:	d0cf      	beq.n	8008348 <_malloc_r+0x48>
 80083a8:	6025      	str	r5, [r4, #0]
 80083aa:	e7db      	b.n	8008364 <_malloc_r+0x64>
 80083ac:	20000298 	.word	0x20000298
 80083b0:	2000029c 	.word	0x2000029c

080083b4 <_sbrk_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4c06      	ldr	r4, [pc, #24]	; (80083d0 <_sbrk_r+0x1c>)
 80083b8:	2300      	movs	r3, #0
 80083ba:	4605      	mov	r5, r0
 80083bc:	4608      	mov	r0, r1
 80083be:	6023      	str	r3, [r4, #0]
 80083c0:	f7f8 fcc6 	bl	8000d50 <_sbrk>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d102      	bne.n	80083ce <_sbrk_r+0x1a>
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	b103      	cbz	r3, 80083ce <_sbrk_r+0x1a>
 80083cc:	602b      	str	r3, [r5, #0]
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	20001c98 	.word	0x20001c98

080083d4 <sniprintf>:
 80083d4:	b40c      	push	{r2, r3}
 80083d6:	b530      	push	{r4, r5, lr}
 80083d8:	4b17      	ldr	r3, [pc, #92]	; (8008438 <sniprintf+0x64>)
 80083da:	1e0c      	subs	r4, r1, #0
 80083dc:	b09d      	sub	sp, #116	; 0x74
 80083de:	681d      	ldr	r5, [r3, #0]
 80083e0:	da08      	bge.n	80083f4 <sniprintf+0x20>
 80083e2:	238b      	movs	r3, #139	; 0x8b
 80083e4:	602b      	str	r3, [r5, #0]
 80083e6:	f04f 30ff 	mov.w	r0, #4294967295
 80083ea:	b01d      	add	sp, #116	; 0x74
 80083ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083f0:	b002      	add	sp, #8
 80083f2:	4770      	bx	lr
 80083f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80083f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80083fc:	bf14      	ite	ne
 80083fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008402:	4623      	moveq	r3, r4
 8008404:	9304      	str	r3, [sp, #16]
 8008406:	9307      	str	r3, [sp, #28]
 8008408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800840c:	9002      	str	r0, [sp, #8]
 800840e:	9006      	str	r0, [sp, #24]
 8008410:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008414:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008416:	ab21      	add	r3, sp, #132	; 0x84
 8008418:	a902      	add	r1, sp, #8
 800841a:	4628      	mov	r0, r5
 800841c:	9301      	str	r3, [sp, #4]
 800841e:	f000 f869 	bl	80084f4 <_svfiprintf_r>
 8008422:	1c43      	adds	r3, r0, #1
 8008424:	bfbc      	itt	lt
 8008426:	238b      	movlt	r3, #139	; 0x8b
 8008428:	602b      	strlt	r3, [r5, #0]
 800842a:	2c00      	cmp	r4, #0
 800842c:	d0dd      	beq.n	80083ea <sniprintf+0x16>
 800842e:	9b02      	ldr	r3, [sp, #8]
 8008430:	2200      	movs	r2, #0
 8008432:	701a      	strb	r2, [r3, #0]
 8008434:	e7d9      	b.n	80083ea <sniprintf+0x16>
 8008436:	bf00      	nop
 8008438:	20000180 	.word	0x20000180

0800843c <__malloc_lock>:
 800843c:	4770      	bx	lr

0800843e <__malloc_unlock>:
 800843e:	4770      	bx	lr

08008440 <__ssputs_r>:
 8008440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008444:	688e      	ldr	r6, [r1, #8]
 8008446:	429e      	cmp	r6, r3
 8008448:	4682      	mov	sl, r0
 800844a:	460c      	mov	r4, r1
 800844c:	4690      	mov	r8, r2
 800844e:	4699      	mov	r9, r3
 8008450:	d837      	bhi.n	80084c2 <__ssputs_r+0x82>
 8008452:	898a      	ldrh	r2, [r1, #12]
 8008454:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008458:	d031      	beq.n	80084be <__ssputs_r+0x7e>
 800845a:	6825      	ldr	r5, [r4, #0]
 800845c:	6909      	ldr	r1, [r1, #16]
 800845e:	1a6f      	subs	r7, r5, r1
 8008460:	6965      	ldr	r5, [r4, #20]
 8008462:	2302      	movs	r3, #2
 8008464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008468:	fb95 f5f3 	sdiv	r5, r5, r3
 800846c:	f109 0301 	add.w	r3, r9, #1
 8008470:	443b      	add	r3, r7
 8008472:	429d      	cmp	r5, r3
 8008474:	bf38      	it	cc
 8008476:	461d      	movcc	r5, r3
 8008478:	0553      	lsls	r3, r2, #21
 800847a:	d530      	bpl.n	80084de <__ssputs_r+0x9e>
 800847c:	4629      	mov	r1, r5
 800847e:	f7ff ff3f 	bl	8008300 <_malloc_r>
 8008482:	4606      	mov	r6, r0
 8008484:	b950      	cbnz	r0, 800849c <__ssputs_r+0x5c>
 8008486:	230c      	movs	r3, #12
 8008488:	f8ca 3000 	str.w	r3, [sl]
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008492:	81a3      	strh	r3, [r4, #12]
 8008494:	f04f 30ff 	mov.w	r0, #4294967295
 8008498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849c:	463a      	mov	r2, r7
 800849e:	6921      	ldr	r1, [r4, #16]
 80084a0:	f000 faa8 	bl	80089f4 <memcpy>
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ae:	81a3      	strh	r3, [r4, #12]
 80084b0:	6126      	str	r6, [r4, #16]
 80084b2:	6165      	str	r5, [r4, #20]
 80084b4:	443e      	add	r6, r7
 80084b6:	1bed      	subs	r5, r5, r7
 80084b8:	6026      	str	r6, [r4, #0]
 80084ba:	60a5      	str	r5, [r4, #8]
 80084bc:	464e      	mov	r6, r9
 80084be:	454e      	cmp	r6, r9
 80084c0:	d900      	bls.n	80084c4 <__ssputs_r+0x84>
 80084c2:	464e      	mov	r6, r9
 80084c4:	4632      	mov	r2, r6
 80084c6:	4641      	mov	r1, r8
 80084c8:	6820      	ldr	r0, [r4, #0]
 80084ca:	f000 fa9e 	bl	8008a0a <memmove>
 80084ce:	68a3      	ldr	r3, [r4, #8]
 80084d0:	1b9b      	subs	r3, r3, r6
 80084d2:	60a3      	str	r3, [r4, #8]
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	441e      	add	r6, r3
 80084d8:	6026      	str	r6, [r4, #0]
 80084da:	2000      	movs	r0, #0
 80084dc:	e7dc      	b.n	8008498 <__ssputs_r+0x58>
 80084de:	462a      	mov	r2, r5
 80084e0:	f000 faac 	bl	8008a3c <_realloc_r>
 80084e4:	4606      	mov	r6, r0
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d1e2      	bne.n	80084b0 <__ssputs_r+0x70>
 80084ea:	6921      	ldr	r1, [r4, #16]
 80084ec:	4650      	mov	r0, sl
 80084ee:	f7ff feb9 	bl	8008264 <_free_r>
 80084f2:	e7c8      	b.n	8008486 <__ssputs_r+0x46>

080084f4 <_svfiprintf_r>:
 80084f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f8:	461d      	mov	r5, r3
 80084fa:	898b      	ldrh	r3, [r1, #12]
 80084fc:	061f      	lsls	r7, r3, #24
 80084fe:	b09d      	sub	sp, #116	; 0x74
 8008500:	4680      	mov	r8, r0
 8008502:	460c      	mov	r4, r1
 8008504:	4616      	mov	r6, r2
 8008506:	d50f      	bpl.n	8008528 <_svfiprintf_r+0x34>
 8008508:	690b      	ldr	r3, [r1, #16]
 800850a:	b96b      	cbnz	r3, 8008528 <_svfiprintf_r+0x34>
 800850c:	2140      	movs	r1, #64	; 0x40
 800850e:	f7ff fef7 	bl	8008300 <_malloc_r>
 8008512:	6020      	str	r0, [r4, #0]
 8008514:	6120      	str	r0, [r4, #16]
 8008516:	b928      	cbnz	r0, 8008524 <_svfiprintf_r+0x30>
 8008518:	230c      	movs	r3, #12
 800851a:	f8c8 3000 	str.w	r3, [r8]
 800851e:	f04f 30ff 	mov.w	r0, #4294967295
 8008522:	e0c8      	b.n	80086b6 <_svfiprintf_r+0x1c2>
 8008524:	2340      	movs	r3, #64	; 0x40
 8008526:	6163      	str	r3, [r4, #20]
 8008528:	2300      	movs	r3, #0
 800852a:	9309      	str	r3, [sp, #36]	; 0x24
 800852c:	2320      	movs	r3, #32
 800852e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008532:	2330      	movs	r3, #48	; 0x30
 8008534:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008538:	9503      	str	r5, [sp, #12]
 800853a:	f04f 0b01 	mov.w	fp, #1
 800853e:	4637      	mov	r7, r6
 8008540:	463d      	mov	r5, r7
 8008542:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008546:	b10b      	cbz	r3, 800854c <_svfiprintf_r+0x58>
 8008548:	2b25      	cmp	r3, #37	; 0x25
 800854a:	d13e      	bne.n	80085ca <_svfiprintf_r+0xd6>
 800854c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008550:	d00b      	beq.n	800856a <_svfiprintf_r+0x76>
 8008552:	4653      	mov	r3, sl
 8008554:	4632      	mov	r2, r6
 8008556:	4621      	mov	r1, r4
 8008558:	4640      	mov	r0, r8
 800855a:	f7ff ff71 	bl	8008440 <__ssputs_r>
 800855e:	3001      	adds	r0, #1
 8008560:	f000 80a4 	beq.w	80086ac <_svfiprintf_r+0x1b8>
 8008564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008566:	4453      	add	r3, sl
 8008568:	9309      	str	r3, [sp, #36]	; 0x24
 800856a:	783b      	ldrb	r3, [r7, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 809d 	beq.w	80086ac <_svfiprintf_r+0x1b8>
 8008572:	2300      	movs	r3, #0
 8008574:	f04f 32ff 	mov.w	r2, #4294967295
 8008578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800857c:	9304      	str	r3, [sp, #16]
 800857e:	9307      	str	r3, [sp, #28]
 8008580:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008584:	931a      	str	r3, [sp, #104]	; 0x68
 8008586:	462f      	mov	r7, r5
 8008588:	2205      	movs	r2, #5
 800858a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800858e:	4850      	ldr	r0, [pc, #320]	; (80086d0 <_svfiprintf_r+0x1dc>)
 8008590:	f7f7 fe1e 	bl	80001d0 <memchr>
 8008594:	9b04      	ldr	r3, [sp, #16]
 8008596:	b9d0      	cbnz	r0, 80085ce <_svfiprintf_r+0xda>
 8008598:	06d9      	lsls	r1, r3, #27
 800859a:	bf44      	itt	mi
 800859c:	2220      	movmi	r2, #32
 800859e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80085a2:	071a      	lsls	r2, r3, #28
 80085a4:	bf44      	itt	mi
 80085a6:	222b      	movmi	r2, #43	; 0x2b
 80085a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80085ac:	782a      	ldrb	r2, [r5, #0]
 80085ae:	2a2a      	cmp	r2, #42	; 0x2a
 80085b0:	d015      	beq.n	80085de <_svfiprintf_r+0xea>
 80085b2:	9a07      	ldr	r2, [sp, #28]
 80085b4:	462f      	mov	r7, r5
 80085b6:	2000      	movs	r0, #0
 80085b8:	250a      	movs	r5, #10
 80085ba:	4639      	mov	r1, r7
 80085bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085c0:	3b30      	subs	r3, #48	; 0x30
 80085c2:	2b09      	cmp	r3, #9
 80085c4:	d94d      	bls.n	8008662 <_svfiprintf_r+0x16e>
 80085c6:	b1b8      	cbz	r0, 80085f8 <_svfiprintf_r+0x104>
 80085c8:	e00f      	b.n	80085ea <_svfiprintf_r+0xf6>
 80085ca:	462f      	mov	r7, r5
 80085cc:	e7b8      	b.n	8008540 <_svfiprintf_r+0x4c>
 80085ce:	4a40      	ldr	r2, [pc, #256]	; (80086d0 <_svfiprintf_r+0x1dc>)
 80085d0:	1a80      	subs	r0, r0, r2
 80085d2:	fa0b f000 	lsl.w	r0, fp, r0
 80085d6:	4318      	orrs	r0, r3
 80085d8:	9004      	str	r0, [sp, #16]
 80085da:	463d      	mov	r5, r7
 80085dc:	e7d3      	b.n	8008586 <_svfiprintf_r+0x92>
 80085de:	9a03      	ldr	r2, [sp, #12]
 80085e0:	1d11      	adds	r1, r2, #4
 80085e2:	6812      	ldr	r2, [r2, #0]
 80085e4:	9103      	str	r1, [sp, #12]
 80085e6:	2a00      	cmp	r2, #0
 80085e8:	db01      	blt.n	80085ee <_svfiprintf_r+0xfa>
 80085ea:	9207      	str	r2, [sp, #28]
 80085ec:	e004      	b.n	80085f8 <_svfiprintf_r+0x104>
 80085ee:	4252      	negs	r2, r2
 80085f0:	f043 0302 	orr.w	r3, r3, #2
 80085f4:	9207      	str	r2, [sp, #28]
 80085f6:	9304      	str	r3, [sp, #16]
 80085f8:	783b      	ldrb	r3, [r7, #0]
 80085fa:	2b2e      	cmp	r3, #46	; 0x2e
 80085fc:	d10c      	bne.n	8008618 <_svfiprintf_r+0x124>
 80085fe:	787b      	ldrb	r3, [r7, #1]
 8008600:	2b2a      	cmp	r3, #42	; 0x2a
 8008602:	d133      	bne.n	800866c <_svfiprintf_r+0x178>
 8008604:	9b03      	ldr	r3, [sp, #12]
 8008606:	1d1a      	adds	r2, r3, #4
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	9203      	str	r2, [sp, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	bfb8      	it	lt
 8008610:	f04f 33ff 	movlt.w	r3, #4294967295
 8008614:	3702      	adds	r7, #2
 8008616:	9305      	str	r3, [sp, #20]
 8008618:	4d2e      	ldr	r5, [pc, #184]	; (80086d4 <_svfiprintf_r+0x1e0>)
 800861a:	7839      	ldrb	r1, [r7, #0]
 800861c:	2203      	movs	r2, #3
 800861e:	4628      	mov	r0, r5
 8008620:	f7f7 fdd6 	bl	80001d0 <memchr>
 8008624:	b138      	cbz	r0, 8008636 <_svfiprintf_r+0x142>
 8008626:	2340      	movs	r3, #64	; 0x40
 8008628:	1b40      	subs	r0, r0, r5
 800862a:	fa03 f000 	lsl.w	r0, r3, r0
 800862e:	9b04      	ldr	r3, [sp, #16]
 8008630:	4303      	orrs	r3, r0
 8008632:	3701      	adds	r7, #1
 8008634:	9304      	str	r3, [sp, #16]
 8008636:	7839      	ldrb	r1, [r7, #0]
 8008638:	4827      	ldr	r0, [pc, #156]	; (80086d8 <_svfiprintf_r+0x1e4>)
 800863a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800863e:	2206      	movs	r2, #6
 8008640:	1c7e      	adds	r6, r7, #1
 8008642:	f7f7 fdc5 	bl	80001d0 <memchr>
 8008646:	2800      	cmp	r0, #0
 8008648:	d038      	beq.n	80086bc <_svfiprintf_r+0x1c8>
 800864a:	4b24      	ldr	r3, [pc, #144]	; (80086dc <_svfiprintf_r+0x1e8>)
 800864c:	bb13      	cbnz	r3, 8008694 <_svfiprintf_r+0x1a0>
 800864e:	9b03      	ldr	r3, [sp, #12]
 8008650:	3307      	adds	r3, #7
 8008652:	f023 0307 	bic.w	r3, r3, #7
 8008656:	3308      	adds	r3, #8
 8008658:	9303      	str	r3, [sp, #12]
 800865a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800865c:	444b      	add	r3, r9
 800865e:	9309      	str	r3, [sp, #36]	; 0x24
 8008660:	e76d      	b.n	800853e <_svfiprintf_r+0x4a>
 8008662:	fb05 3202 	mla	r2, r5, r2, r3
 8008666:	2001      	movs	r0, #1
 8008668:	460f      	mov	r7, r1
 800866a:	e7a6      	b.n	80085ba <_svfiprintf_r+0xc6>
 800866c:	2300      	movs	r3, #0
 800866e:	3701      	adds	r7, #1
 8008670:	9305      	str	r3, [sp, #20]
 8008672:	4619      	mov	r1, r3
 8008674:	250a      	movs	r5, #10
 8008676:	4638      	mov	r0, r7
 8008678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800867c:	3a30      	subs	r2, #48	; 0x30
 800867e:	2a09      	cmp	r2, #9
 8008680:	d903      	bls.n	800868a <_svfiprintf_r+0x196>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d0c8      	beq.n	8008618 <_svfiprintf_r+0x124>
 8008686:	9105      	str	r1, [sp, #20]
 8008688:	e7c6      	b.n	8008618 <_svfiprintf_r+0x124>
 800868a:	fb05 2101 	mla	r1, r5, r1, r2
 800868e:	2301      	movs	r3, #1
 8008690:	4607      	mov	r7, r0
 8008692:	e7f0      	b.n	8008676 <_svfiprintf_r+0x182>
 8008694:	ab03      	add	r3, sp, #12
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	4622      	mov	r2, r4
 800869a:	4b11      	ldr	r3, [pc, #68]	; (80086e0 <_svfiprintf_r+0x1ec>)
 800869c:	a904      	add	r1, sp, #16
 800869e:	4640      	mov	r0, r8
 80086a0:	f3af 8000 	nop.w
 80086a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80086a8:	4681      	mov	r9, r0
 80086aa:	d1d6      	bne.n	800865a <_svfiprintf_r+0x166>
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	065b      	lsls	r3, r3, #25
 80086b0:	f53f af35 	bmi.w	800851e <_svfiprintf_r+0x2a>
 80086b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086b6:	b01d      	add	sp, #116	; 0x74
 80086b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086bc:	ab03      	add	r3, sp, #12
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	4622      	mov	r2, r4
 80086c2:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <_svfiprintf_r+0x1ec>)
 80086c4:	a904      	add	r1, sp, #16
 80086c6:	4640      	mov	r0, r8
 80086c8:	f000 f882 	bl	80087d0 <_printf_i>
 80086cc:	e7ea      	b.n	80086a4 <_svfiprintf_r+0x1b0>
 80086ce:	bf00      	nop
 80086d0:	08008b24 	.word	0x08008b24
 80086d4:	08008b2a 	.word	0x08008b2a
 80086d8:	08008b2e 	.word	0x08008b2e
 80086dc:	00000000 	.word	0x00000000
 80086e0:	08008441 	.word	0x08008441

080086e4 <_printf_common>:
 80086e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e8:	4691      	mov	r9, r2
 80086ea:	461f      	mov	r7, r3
 80086ec:	688a      	ldr	r2, [r1, #8]
 80086ee:	690b      	ldr	r3, [r1, #16]
 80086f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086f4:	4293      	cmp	r3, r2
 80086f6:	bfb8      	it	lt
 80086f8:	4613      	movlt	r3, r2
 80086fa:	f8c9 3000 	str.w	r3, [r9]
 80086fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008702:	4606      	mov	r6, r0
 8008704:	460c      	mov	r4, r1
 8008706:	b112      	cbz	r2, 800870e <_printf_common+0x2a>
 8008708:	3301      	adds	r3, #1
 800870a:	f8c9 3000 	str.w	r3, [r9]
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	0699      	lsls	r1, r3, #26
 8008712:	bf42      	ittt	mi
 8008714:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008718:	3302      	addmi	r3, #2
 800871a:	f8c9 3000 	strmi.w	r3, [r9]
 800871e:	6825      	ldr	r5, [r4, #0]
 8008720:	f015 0506 	ands.w	r5, r5, #6
 8008724:	d107      	bne.n	8008736 <_printf_common+0x52>
 8008726:	f104 0a19 	add.w	sl, r4, #25
 800872a:	68e3      	ldr	r3, [r4, #12]
 800872c:	f8d9 2000 	ldr.w	r2, [r9]
 8008730:	1a9b      	subs	r3, r3, r2
 8008732:	42ab      	cmp	r3, r5
 8008734:	dc28      	bgt.n	8008788 <_printf_common+0xa4>
 8008736:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800873a:	6822      	ldr	r2, [r4, #0]
 800873c:	3300      	adds	r3, #0
 800873e:	bf18      	it	ne
 8008740:	2301      	movne	r3, #1
 8008742:	0692      	lsls	r2, r2, #26
 8008744:	d42d      	bmi.n	80087a2 <_printf_common+0xbe>
 8008746:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800874a:	4639      	mov	r1, r7
 800874c:	4630      	mov	r0, r6
 800874e:	47c0      	blx	r8
 8008750:	3001      	adds	r0, #1
 8008752:	d020      	beq.n	8008796 <_printf_common+0xb2>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	68e5      	ldr	r5, [r4, #12]
 8008758:	f8d9 2000 	ldr.w	r2, [r9]
 800875c:	f003 0306 	and.w	r3, r3, #6
 8008760:	2b04      	cmp	r3, #4
 8008762:	bf08      	it	eq
 8008764:	1aad      	subeq	r5, r5, r2
 8008766:	68a3      	ldr	r3, [r4, #8]
 8008768:	6922      	ldr	r2, [r4, #16]
 800876a:	bf0c      	ite	eq
 800876c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008770:	2500      	movne	r5, #0
 8008772:	4293      	cmp	r3, r2
 8008774:	bfc4      	itt	gt
 8008776:	1a9b      	subgt	r3, r3, r2
 8008778:	18ed      	addgt	r5, r5, r3
 800877a:	f04f 0900 	mov.w	r9, #0
 800877e:	341a      	adds	r4, #26
 8008780:	454d      	cmp	r5, r9
 8008782:	d11a      	bne.n	80087ba <_printf_common+0xd6>
 8008784:	2000      	movs	r0, #0
 8008786:	e008      	b.n	800879a <_printf_common+0xb6>
 8008788:	2301      	movs	r3, #1
 800878a:	4652      	mov	r2, sl
 800878c:	4639      	mov	r1, r7
 800878e:	4630      	mov	r0, r6
 8008790:	47c0      	blx	r8
 8008792:	3001      	adds	r0, #1
 8008794:	d103      	bne.n	800879e <_printf_common+0xba>
 8008796:	f04f 30ff 	mov.w	r0, #4294967295
 800879a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879e:	3501      	adds	r5, #1
 80087a0:	e7c3      	b.n	800872a <_printf_common+0x46>
 80087a2:	18e1      	adds	r1, r4, r3
 80087a4:	1c5a      	adds	r2, r3, #1
 80087a6:	2030      	movs	r0, #48	; 0x30
 80087a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087ac:	4422      	add	r2, r4
 80087ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087b6:	3302      	adds	r3, #2
 80087b8:	e7c5      	b.n	8008746 <_printf_common+0x62>
 80087ba:	2301      	movs	r3, #1
 80087bc:	4622      	mov	r2, r4
 80087be:	4639      	mov	r1, r7
 80087c0:	4630      	mov	r0, r6
 80087c2:	47c0      	blx	r8
 80087c4:	3001      	adds	r0, #1
 80087c6:	d0e6      	beq.n	8008796 <_printf_common+0xb2>
 80087c8:	f109 0901 	add.w	r9, r9, #1
 80087cc:	e7d8      	b.n	8008780 <_printf_common+0x9c>
	...

080087d0 <_printf_i>:
 80087d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80087d8:	460c      	mov	r4, r1
 80087da:	7e09      	ldrb	r1, [r1, #24]
 80087dc:	b085      	sub	sp, #20
 80087de:	296e      	cmp	r1, #110	; 0x6e
 80087e0:	4617      	mov	r7, r2
 80087e2:	4606      	mov	r6, r0
 80087e4:	4698      	mov	r8, r3
 80087e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087e8:	f000 80b3 	beq.w	8008952 <_printf_i+0x182>
 80087ec:	d822      	bhi.n	8008834 <_printf_i+0x64>
 80087ee:	2963      	cmp	r1, #99	; 0x63
 80087f0:	d036      	beq.n	8008860 <_printf_i+0x90>
 80087f2:	d80a      	bhi.n	800880a <_printf_i+0x3a>
 80087f4:	2900      	cmp	r1, #0
 80087f6:	f000 80b9 	beq.w	800896c <_printf_i+0x19c>
 80087fa:	2958      	cmp	r1, #88	; 0x58
 80087fc:	f000 8083 	beq.w	8008906 <_printf_i+0x136>
 8008800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008804:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008808:	e032      	b.n	8008870 <_printf_i+0xa0>
 800880a:	2964      	cmp	r1, #100	; 0x64
 800880c:	d001      	beq.n	8008812 <_printf_i+0x42>
 800880e:	2969      	cmp	r1, #105	; 0x69
 8008810:	d1f6      	bne.n	8008800 <_printf_i+0x30>
 8008812:	6820      	ldr	r0, [r4, #0]
 8008814:	6813      	ldr	r3, [r2, #0]
 8008816:	0605      	lsls	r5, r0, #24
 8008818:	f103 0104 	add.w	r1, r3, #4
 800881c:	d52a      	bpl.n	8008874 <_printf_i+0xa4>
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6011      	str	r1, [r2, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	da03      	bge.n	800882e <_printf_i+0x5e>
 8008826:	222d      	movs	r2, #45	; 0x2d
 8008828:	425b      	negs	r3, r3
 800882a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800882e:	486f      	ldr	r0, [pc, #444]	; (80089ec <_printf_i+0x21c>)
 8008830:	220a      	movs	r2, #10
 8008832:	e039      	b.n	80088a8 <_printf_i+0xd8>
 8008834:	2973      	cmp	r1, #115	; 0x73
 8008836:	f000 809d 	beq.w	8008974 <_printf_i+0x1a4>
 800883a:	d808      	bhi.n	800884e <_printf_i+0x7e>
 800883c:	296f      	cmp	r1, #111	; 0x6f
 800883e:	d020      	beq.n	8008882 <_printf_i+0xb2>
 8008840:	2970      	cmp	r1, #112	; 0x70
 8008842:	d1dd      	bne.n	8008800 <_printf_i+0x30>
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	f043 0320 	orr.w	r3, r3, #32
 800884a:	6023      	str	r3, [r4, #0]
 800884c:	e003      	b.n	8008856 <_printf_i+0x86>
 800884e:	2975      	cmp	r1, #117	; 0x75
 8008850:	d017      	beq.n	8008882 <_printf_i+0xb2>
 8008852:	2978      	cmp	r1, #120	; 0x78
 8008854:	d1d4      	bne.n	8008800 <_printf_i+0x30>
 8008856:	2378      	movs	r3, #120	; 0x78
 8008858:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800885c:	4864      	ldr	r0, [pc, #400]	; (80089f0 <_printf_i+0x220>)
 800885e:	e055      	b.n	800890c <_printf_i+0x13c>
 8008860:	6813      	ldr	r3, [r2, #0]
 8008862:	1d19      	adds	r1, r3, #4
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6011      	str	r1, [r2, #0]
 8008868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800886c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008870:	2301      	movs	r3, #1
 8008872:	e08c      	b.n	800898e <_printf_i+0x1be>
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6011      	str	r1, [r2, #0]
 8008878:	f010 0f40 	tst.w	r0, #64	; 0x40
 800887c:	bf18      	it	ne
 800887e:	b21b      	sxthne	r3, r3
 8008880:	e7cf      	b.n	8008822 <_printf_i+0x52>
 8008882:	6813      	ldr	r3, [r2, #0]
 8008884:	6825      	ldr	r5, [r4, #0]
 8008886:	1d18      	adds	r0, r3, #4
 8008888:	6010      	str	r0, [r2, #0]
 800888a:	0628      	lsls	r0, r5, #24
 800888c:	d501      	bpl.n	8008892 <_printf_i+0xc2>
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	e002      	b.n	8008898 <_printf_i+0xc8>
 8008892:	0668      	lsls	r0, r5, #25
 8008894:	d5fb      	bpl.n	800888e <_printf_i+0xbe>
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	4854      	ldr	r0, [pc, #336]	; (80089ec <_printf_i+0x21c>)
 800889a:	296f      	cmp	r1, #111	; 0x6f
 800889c:	bf14      	ite	ne
 800889e:	220a      	movne	r2, #10
 80088a0:	2208      	moveq	r2, #8
 80088a2:	2100      	movs	r1, #0
 80088a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088a8:	6865      	ldr	r5, [r4, #4]
 80088aa:	60a5      	str	r5, [r4, #8]
 80088ac:	2d00      	cmp	r5, #0
 80088ae:	f2c0 8095 	blt.w	80089dc <_printf_i+0x20c>
 80088b2:	6821      	ldr	r1, [r4, #0]
 80088b4:	f021 0104 	bic.w	r1, r1, #4
 80088b8:	6021      	str	r1, [r4, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d13d      	bne.n	800893a <_printf_i+0x16a>
 80088be:	2d00      	cmp	r5, #0
 80088c0:	f040 808e 	bne.w	80089e0 <_printf_i+0x210>
 80088c4:	4665      	mov	r5, ip
 80088c6:	2a08      	cmp	r2, #8
 80088c8:	d10b      	bne.n	80088e2 <_printf_i+0x112>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	07db      	lsls	r3, r3, #31
 80088ce:	d508      	bpl.n	80088e2 <_printf_i+0x112>
 80088d0:	6923      	ldr	r3, [r4, #16]
 80088d2:	6862      	ldr	r2, [r4, #4]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	bfde      	ittt	le
 80088d8:	2330      	movle	r3, #48	; 0x30
 80088da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088e2:	ebac 0305 	sub.w	r3, ip, r5
 80088e6:	6123      	str	r3, [r4, #16]
 80088e8:	f8cd 8000 	str.w	r8, [sp]
 80088ec:	463b      	mov	r3, r7
 80088ee:	aa03      	add	r2, sp, #12
 80088f0:	4621      	mov	r1, r4
 80088f2:	4630      	mov	r0, r6
 80088f4:	f7ff fef6 	bl	80086e4 <_printf_common>
 80088f8:	3001      	adds	r0, #1
 80088fa:	d14d      	bne.n	8008998 <_printf_i+0x1c8>
 80088fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008900:	b005      	add	sp, #20
 8008902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008906:	4839      	ldr	r0, [pc, #228]	; (80089ec <_printf_i+0x21c>)
 8008908:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800890c:	6813      	ldr	r3, [r2, #0]
 800890e:	6821      	ldr	r1, [r4, #0]
 8008910:	1d1d      	adds	r5, r3, #4
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6015      	str	r5, [r2, #0]
 8008916:	060a      	lsls	r2, r1, #24
 8008918:	d50b      	bpl.n	8008932 <_printf_i+0x162>
 800891a:	07ca      	lsls	r2, r1, #31
 800891c:	bf44      	itt	mi
 800891e:	f041 0120 	orrmi.w	r1, r1, #32
 8008922:	6021      	strmi	r1, [r4, #0]
 8008924:	b91b      	cbnz	r3, 800892e <_printf_i+0x15e>
 8008926:	6822      	ldr	r2, [r4, #0]
 8008928:	f022 0220 	bic.w	r2, r2, #32
 800892c:	6022      	str	r2, [r4, #0]
 800892e:	2210      	movs	r2, #16
 8008930:	e7b7      	b.n	80088a2 <_printf_i+0xd2>
 8008932:	064d      	lsls	r5, r1, #25
 8008934:	bf48      	it	mi
 8008936:	b29b      	uxthmi	r3, r3
 8008938:	e7ef      	b.n	800891a <_printf_i+0x14a>
 800893a:	4665      	mov	r5, ip
 800893c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008940:	fb02 3311 	mls	r3, r2, r1, r3
 8008944:	5cc3      	ldrb	r3, [r0, r3]
 8008946:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800894a:	460b      	mov	r3, r1
 800894c:	2900      	cmp	r1, #0
 800894e:	d1f5      	bne.n	800893c <_printf_i+0x16c>
 8008950:	e7b9      	b.n	80088c6 <_printf_i+0xf6>
 8008952:	6813      	ldr	r3, [r2, #0]
 8008954:	6825      	ldr	r5, [r4, #0]
 8008956:	6961      	ldr	r1, [r4, #20]
 8008958:	1d18      	adds	r0, r3, #4
 800895a:	6010      	str	r0, [r2, #0]
 800895c:	0628      	lsls	r0, r5, #24
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	d501      	bpl.n	8008966 <_printf_i+0x196>
 8008962:	6019      	str	r1, [r3, #0]
 8008964:	e002      	b.n	800896c <_printf_i+0x19c>
 8008966:	066a      	lsls	r2, r5, #25
 8008968:	d5fb      	bpl.n	8008962 <_printf_i+0x192>
 800896a:	8019      	strh	r1, [r3, #0]
 800896c:	2300      	movs	r3, #0
 800896e:	6123      	str	r3, [r4, #16]
 8008970:	4665      	mov	r5, ip
 8008972:	e7b9      	b.n	80088e8 <_printf_i+0x118>
 8008974:	6813      	ldr	r3, [r2, #0]
 8008976:	1d19      	adds	r1, r3, #4
 8008978:	6011      	str	r1, [r2, #0]
 800897a:	681d      	ldr	r5, [r3, #0]
 800897c:	6862      	ldr	r2, [r4, #4]
 800897e:	2100      	movs	r1, #0
 8008980:	4628      	mov	r0, r5
 8008982:	f7f7 fc25 	bl	80001d0 <memchr>
 8008986:	b108      	cbz	r0, 800898c <_printf_i+0x1bc>
 8008988:	1b40      	subs	r0, r0, r5
 800898a:	6060      	str	r0, [r4, #4]
 800898c:	6863      	ldr	r3, [r4, #4]
 800898e:	6123      	str	r3, [r4, #16]
 8008990:	2300      	movs	r3, #0
 8008992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008996:	e7a7      	b.n	80088e8 <_printf_i+0x118>
 8008998:	6923      	ldr	r3, [r4, #16]
 800899a:	462a      	mov	r2, r5
 800899c:	4639      	mov	r1, r7
 800899e:	4630      	mov	r0, r6
 80089a0:	47c0      	blx	r8
 80089a2:	3001      	adds	r0, #1
 80089a4:	d0aa      	beq.n	80088fc <_printf_i+0x12c>
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	079b      	lsls	r3, r3, #30
 80089aa:	d413      	bmi.n	80089d4 <_printf_i+0x204>
 80089ac:	68e0      	ldr	r0, [r4, #12]
 80089ae:	9b03      	ldr	r3, [sp, #12]
 80089b0:	4298      	cmp	r0, r3
 80089b2:	bfb8      	it	lt
 80089b4:	4618      	movlt	r0, r3
 80089b6:	e7a3      	b.n	8008900 <_printf_i+0x130>
 80089b8:	2301      	movs	r3, #1
 80089ba:	464a      	mov	r2, r9
 80089bc:	4639      	mov	r1, r7
 80089be:	4630      	mov	r0, r6
 80089c0:	47c0      	blx	r8
 80089c2:	3001      	adds	r0, #1
 80089c4:	d09a      	beq.n	80088fc <_printf_i+0x12c>
 80089c6:	3501      	adds	r5, #1
 80089c8:	68e3      	ldr	r3, [r4, #12]
 80089ca:	9a03      	ldr	r2, [sp, #12]
 80089cc:	1a9b      	subs	r3, r3, r2
 80089ce:	42ab      	cmp	r3, r5
 80089d0:	dcf2      	bgt.n	80089b8 <_printf_i+0x1e8>
 80089d2:	e7eb      	b.n	80089ac <_printf_i+0x1dc>
 80089d4:	2500      	movs	r5, #0
 80089d6:	f104 0919 	add.w	r9, r4, #25
 80089da:	e7f5      	b.n	80089c8 <_printf_i+0x1f8>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1ac      	bne.n	800893a <_printf_i+0x16a>
 80089e0:	7803      	ldrb	r3, [r0, #0]
 80089e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089ea:	e76c      	b.n	80088c6 <_printf_i+0xf6>
 80089ec:	08008b35 	.word	0x08008b35
 80089f0:	08008b46 	.word	0x08008b46

080089f4 <memcpy>:
 80089f4:	b510      	push	{r4, lr}
 80089f6:	1e43      	subs	r3, r0, #1
 80089f8:	440a      	add	r2, r1
 80089fa:	4291      	cmp	r1, r2
 80089fc:	d100      	bne.n	8008a00 <memcpy+0xc>
 80089fe:	bd10      	pop	{r4, pc}
 8008a00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a08:	e7f7      	b.n	80089fa <memcpy+0x6>

08008a0a <memmove>:
 8008a0a:	4288      	cmp	r0, r1
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	eb01 0302 	add.w	r3, r1, r2
 8008a12:	d807      	bhi.n	8008a24 <memmove+0x1a>
 8008a14:	1e42      	subs	r2, r0, #1
 8008a16:	4299      	cmp	r1, r3
 8008a18:	d00a      	beq.n	8008a30 <memmove+0x26>
 8008a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a1e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008a22:	e7f8      	b.n	8008a16 <memmove+0xc>
 8008a24:	4283      	cmp	r3, r0
 8008a26:	d9f5      	bls.n	8008a14 <memmove+0xa>
 8008a28:	1881      	adds	r1, r0, r2
 8008a2a:	1ad2      	subs	r2, r2, r3
 8008a2c:	42d3      	cmn	r3, r2
 8008a2e:	d100      	bne.n	8008a32 <memmove+0x28>
 8008a30:	bd10      	pop	{r4, pc}
 8008a32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a36:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008a3a:	e7f7      	b.n	8008a2c <memmove+0x22>

08008a3c <_realloc_r>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	4607      	mov	r7, r0
 8008a40:	4614      	mov	r4, r2
 8008a42:	460e      	mov	r6, r1
 8008a44:	b921      	cbnz	r1, 8008a50 <_realloc_r+0x14>
 8008a46:	4611      	mov	r1, r2
 8008a48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a4c:	f7ff bc58 	b.w	8008300 <_malloc_r>
 8008a50:	b922      	cbnz	r2, 8008a5c <_realloc_r+0x20>
 8008a52:	f7ff fc07 	bl	8008264 <_free_r>
 8008a56:	4625      	mov	r5, r4
 8008a58:	4628      	mov	r0, r5
 8008a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a5c:	f000 f814 	bl	8008a88 <_malloc_usable_size_r>
 8008a60:	42a0      	cmp	r0, r4
 8008a62:	d20f      	bcs.n	8008a84 <_realloc_r+0x48>
 8008a64:	4621      	mov	r1, r4
 8008a66:	4638      	mov	r0, r7
 8008a68:	f7ff fc4a 	bl	8008300 <_malloc_r>
 8008a6c:	4605      	mov	r5, r0
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d0f2      	beq.n	8008a58 <_realloc_r+0x1c>
 8008a72:	4631      	mov	r1, r6
 8008a74:	4622      	mov	r2, r4
 8008a76:	f7ff ffbd 	bl	80089f4 <memcpy>
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	4638      	mov	r0, r7
 8008a7e:	f7ff fbf1 	bl	8008264 <_free_r>
 8008a82:	e7e9      	b.n	8008a58 <_realloc_r+0x1c>
 8008a84:	4635      	mov	r5, r6
 8008a86:	e7e7      	b.n	8008a58 <_realloc_r+0x1c>

08008a88 <_malloc_usable_size_r>:
 8008a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a8c:	1f18      	subs	r0, r3, #4
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	bfbc      	itt	lt
 8008a92:	580b      	ldrlt	r3, [r1, r0]
 8008a94:	18c0      	addlt	r0, r0, r3
 8008a96:	4770      	bx	lr

08008a98 <_init>:
 8008a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9a:	bf00      	nop
 8008a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a9e:	bc08      	pop	{r3}
 8008aa0:	469e      	mov	lr, r3
 8008aa2:	4770      	bx	lr

08008aa4 <_fini>:
 8008aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa6:	bf00      	nop
 8008aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aaa:	bc08      	pop	{r3}
 8008aac:	469e      	mov	lr, r3
 8008aae:	4770      	bx	lr
