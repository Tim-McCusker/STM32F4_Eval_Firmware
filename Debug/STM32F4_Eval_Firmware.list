
STM32F4_Eval_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800b118  0800b118  0001b118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3f8  0800b3f8  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3f8  0800b3f8  0001b3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b400  0800b400  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b400  0800b400  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b404  0800b404  0001b404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800b408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b70  20000350  0800b758  00020350  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001ec0  0800b758  00021ec0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd60  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040ef  00000000  00000000  000400e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001730  00000000  00000000  000441d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001570  00000000  00000000  00045900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024ad9  00000000  00000000  00046e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015fac  00000000  00000000  0006b949  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca6b6  00000000  00000000  000818f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bfab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006af0  00000000  00000000  0014c028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b0fc 	.word	0x0800b0fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0800b0fc 	.word	0x0800b0fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <ADC_Service>:

void ADC_Sample(void);


void ADC_Service(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	ADC_Sample();
 8000eac:	f000 f802 	bl	8000eb4 <ADC_Sample>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <ADC_Sample>:
 * Polls ADC1 for System Temp. Calculates real deg C.
 * Args: N/A
 * Returns: N/A
 */
void ADC_Sample(void)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af02      	add	r7, sp, #8
	static uint16_t sample_count = 0U;
	static uint16_t ADC_Sample = 0U;
    static uint32_t ADC_Avg = 0U;


	HAL_ADC_Start(&hadc1);
 8000eba:	4828      	ldr	r0, [pc, #160]	; (8000f5c <ADC_Sample+0xa8>)
 8000ebc:	f000 fe54 	bl	8001b68 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	4825      	ldr	r0, [pc, #148]	; (8000f5c <ADC_Sample+0xa8>)
 8000ec6:	f000 ff15 	bl	8001cf4 <HAL_ADC_PollForConversion>
	ADC_Sample = HAL_ADC_GetValue(&hadc1);
 8000eca:	4824      	ldr	r0, [pc, #144]	; (8000f5c <ADC_Sample+0xa8>)
 8000ecc:	f000 ff96 	bl	8001dfc <HAL_ADC_GetValue>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <ADC_Sample+0xac>)
 8000ed6:	801a      	strh	r2, [r3, #0]
	ADC_Avg += ADC_Sample;
 8000ed8:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <ADC_Sample+0xac>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <ADC_Sample+0xb0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a1f      	ldr	r2, [pc, #124]	; (8000f64 <ADC_Sample+0xb0>)
 8000ee6:	6013      	str	r3, [r2, #0]

	++sample_count;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <ADC_Sample+0xb4>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <ADC_Sample+0xb4>)
 8000ef2:	801a      	strh	r2, [r3, #0]

	if(TEMP_NUM_SAMPLES <= sample_count)
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <ADC_Sample+0xb4>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8000efa:	d92b      	bls.n	8000f54 <ADC_Sample+0xa0>
	{
		SysTemp = TEMP_ADC_GAIN * (ADC_Avg >> TEMP_SHIFT) + TEMP_ADC_OFFSET;
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <ADC_Sample+0xb0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	09db      	lsrs	r3, r3, #7
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f0a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000f6c <ADC_Sample+0xb8>
 8000f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f12:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8000f16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f1a:	ee17 0a90 	vmov	r0, s15
 8000f1e:	f7ff fb13 	bl	8000548 <__aeabi_f2d>
 8000f22:	4603      	mov	r3, r0
 8000f24:	460c      	mov	r4, r1
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <ADC_Sample+0xbc>)
 8000f28:	e9c2 3400 	strd	r3, r4, [r2]

		sprintf(adc_msg, "Temp ADC: %lu\n\rTemp C: %f\n\r", ADC_Avg, SysTemp);
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <ADC_Sample+0xb0>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <ADC_Sample+0xbc>)
 8000f32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f36:	e9cd 3400 	strd	r3, r4, [sp]
 8000f3a:	490e      	ldr	r1, [pc, #56]	; (8000f74 <ADC_Sample+0xc0>)
 8000f3c:	480e      	ldr	r0, [pc, #56]	; (8000f78 <ADC_Sample+0xc4>)
 8000f3e:	f008 fdc7 	bl	8009ad0 <siprintf>

		UART_Set_Tx_Msg(adc_msg);
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <ADC_Sample+0xc4>)
 8000f44:	f000 f88c 	bl	8001060 <UART_Set_Tx_Msg>

		ADC_Avg = 0U;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <ADC_Sample+0xb0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
		sample_count = 0U;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <ADC_Sample+0xb4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	801a      	strh	r2, [r3, #0]
	}
}
 8000f54:	bf00      	nop
 8000f56:	3704      	adds	r7, #4
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	20000558 	.word	0x20000558
 8000f60:	200003f8 	.word	0x200003f8
 8000f64:	200003fc 	.word	0x200003fc
 8000f68:	20000400 	.word	0x20000400
 8000f6c:	3d0c154d 	.word	0x3d0c154d
 8000f70:	20000370 	.word	0x20000370
 8000f74:	0800b118 	.word	0x0800b118
 8000f78:	20000378 	.word	0x20000378

08000f7c <LED_Service>:
/* LED_Service()
 *
 * Runs LED_Service
 */
void LED_Service(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	LED_Control(LED_Mode);
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <LED_Service+0x14>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f815 	bl	8000fb4 <LED_Control>
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000402 	.word	0x20000402

08000f94 <LED_Set_Mode>:
 *
 * Update LED mode
 * Arg: (LED_Mode_t) mode - LED mode defined in LED_Service.h
 */
void LED_Set_Mode(LED_Mode_t mode)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	LED_Mode = mode;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <LED_Set_Mode+0x1c>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	7013      	strb	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	20000402 	.word	0x20000402

08000fb4 <LED_Control>:
 *
 * Handle LED given current LED mode
 * Arg: (LED_Mode_t) mode - LED mode defined in LED_Service.h
 */
void LED_Control(LED_Mode_t mode)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	static uint8_t led_level = LEVEL_LOW;

	switch(mode)
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d00a      	beq.n	8000fda <LED_Control+0x26>
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d00e      	beq.n	8000fe6 <LED_Control+0x32>
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d000      	beq.n	8000fce <LED_Control+0x1a>
		}

	break;

	default:
	break;
 8000fcc:	e035      	b.n	800103a <LED_Control+0x86>
		HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, LEVEL_LOW);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	481c      	ldr	r0, [pc, #112]	; (8001044 <LED_Control+0x90>)
 8000fd4:	f001 fc0c 	bl	80027f0 <HAL_GPIO_WritePin>
	break;
 8000fd8:	e02f      	b.n	800103a <LED_Control+0x86>
		HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, LEVEL_HIGH);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2104      	movs	r1, #4
 8000fde:	4819      	ldr	r0, [pc, #100]	; (8001044 <LED_Control+0x90>)
 8000fe0:	f001 fc06 	bl	80027f0 <HAL_GPIO_WritePin>
	break;
 8000fe4:	e029      	b.n	800103a <LED_Control+0x86>
		if(BLINK_PERIOD <= timer[LED_BLINK].t)
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <LED_Control+0x94>)
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fee:	d323      	bcc.n	8001038 <LED_Control+0x84>
			RESET_TIMER((&timer[LED_BLINK]), TIMER_RUN);
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <LED_Control+0x94>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	755a      	strb	r2, [r3, #21]
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <LED_Control+0x94>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	751a      	strb	r2, [r3, #20]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <LED_Control+0x94>)
 8001000:	611a      	str	r2, [r3, #16]
			led_level = !led_level;
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <LED_Control+0x98>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	bf0c      	ite	eq
 800100a:	2301      	moveq	r3, #1
 800100c:	2300      	movne	r3, #0
 800100e:	b2db      	uxtb	r3, r3
 8001010:	461a      	mov	r2, r3
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <LED_Control+0x98>)
 8001014:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, led_level);
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <LED_Control+0x98>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	2104      	movs	r1, #4
 800101e:	4809      	ldr	r0, [pc, #36]	; (8001044 <LED_Control+0x90>)
 8001020:	f001 fbe6 	bl	80027f0 <HAL_GPIO_WritePin>
			if(LEVEL_HIGH == led_level)
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <LED_Control+0x98>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d105      	bne.n	8001038 <LED_Control+0x84>
				blinkCnt++;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <LED_Control+0x9c>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <LED_Control+0x9c>)
 8001036:	801a      	strh	r2, [r3, #0]
	break;
 8001038:	bf00      	nop
	}
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40020000 	.word	0x40020000
 8001048:	200004a4 	.word	0x200004a4
 800104c:	20000406 	.word	0x20000406
 8001050:	20000404 	.word	0x20000404

08001054 <UART_Service>:
 * Runs UART_Service
 * Args: N/A
 * Returns: N/A
 */
void UART_Service(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	UART_Tx();
 8001058:	f000 f814 	bl	8001084 <UART_Tx>
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <UART_Set_Tx_Msg>:


void UART_Set_Tx_Msg(char *mess)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	memcpy(&tx_msg, mess, MESSAGE_LENGTH);
 8001068:	4a05      	ldr	r2, [pc, #20]	; (8001080 <UART_Set_Tx_Msg+0x20>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	461a      	mov	r2, r3
 8001074:	f008 f804 	bl	8009080 <memcpy>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000408 	.word	0x20000408

08001084 <UART_Tx>:
 * Transmits 128 bit UART message at defined period
 * Args: N/A
 * Returns: N/A
 */
void UART_Tx()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	if(1U == timer[UART_TX].flag)
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <UART_Tx+0x30>)
 800108a:	7f1b      	ldrb	r3, [r3, #28]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d10e      	bne.n	80010b0 <UART_Tx+0x2c>
	{
		RESET_TIMER((&timer[UART_TX]), TIMER_RUN);
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <UART_Tx+0x30>)
 8001094:	2200      	movs	r2, #0
 8001096:	775a      	strb	r2, [r3, #29]
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <UART_Tx+0x30>)
 800109a:	2200      	movs	r2, #0
 800109c:	771a      	strb	r2, [r3, #28]
 800109e:	2200      	movs	r2, #0
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <UART_Tx+0x30>)
 80010a2:	619a      	str	r2, [r3, #24]

		HAL_UART_Transmit(&huart3, (uint8_t*)tx_msg, sizeof(tx_msg), 100);
 80010a4:	2364      	movs	r3, #100	; 0x64
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	4903      	ldr	r1, [pc, #12]	; (80010b8 <UART_Tx+0x34>)
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <UART_Tx+0x38>)
 80010ac:	f003 fd33 	bl	8004b16 <HAL_UART_Transmit>
	}
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200004a4 	.word	0x200004a4
 80010b8:	20000408 	.word	0x20000408
 80010bc:	200004c4 	.word	0x200004c4

080010c0 <System_Init>:
 * Initialize the system
 * Args: N/A
 * Returns: N/A
 */
void System_Init()
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	initTimers();
 80010c4:	f000 f872 	bl	80011ac <initTimers>
	LED_Set_Mode(MODE_BLINK);
 80010c8:	2002      	movs	r0, #2
 80010ca:	f7ff ff63 	bl	8000f94 <LED_Set_Mode>

	SysTimeInSeconds = 0U;
 80010ce:	4b02      	ldr	r3, [pc, #8]	; (80010d8 <System_Init+0x18>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000048c 	.word	0x2000048c

080010dc <System_Control>:
 * Runs the system application
 * Args: N/A
 * Returns: N/A
 */
void System_Control()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	while(INFINITY)
	{
		Update_Timers();
 80010e0:	f000 f808 	bl	80010f4 <Update_Timers>
		ADC_Service();
 80010e4:	f7ff fee0 	bl	8000ea8 <ADC_Service>
		UART_Service();
 80010e8:	f7ff ffb4 	bl	8001054 <UART_Service>
		LED_Service();
 80010ec:	f7ff ff46 	bl	8000f7c <LED_Service>
		Update_Timers();
 80010f0:	e7f6      	b.n	80010e0 <System_Control+0x4>
	...

080010f4 <Update_Timers>:
 * Update system timers
 * Args: N/A
 * Returns: N/A
 */
void Update_Timers(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
	if(1U == tim11_OvrFlo_Flag)
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <Update_Timers+0xa8>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d132      	bne.n	8001168 <Update_Timers+0x74>
	{
		tim11_OvrFlo_Flag = 0U;
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <Update_Timers+0xa8>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]

		for(uint8_t idx = 0U; idx < NUM_SYS_TIMERS; idx++)
 8001108:	2300      	movs	r3, #0
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	e029      	b.n	8001162 <Update_Timers+0x6e>
		{
			if(0U == timer[idx].lock)
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	4a23      	ldr	r2, [pc, #140]	; (80011a0 <Update_Timers+0xac>)
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4413      	add	r3, r2
 8001116:	795b      	ldrb	r3, [r3, #5]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d119      	bne.n	8001152 <Update_Timers+0x5e>
			{
				++timer[idx].t;
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	4a1f      	ldr	r2, [pc, #124]	; (80011a0 <Update_Timers+0xac>)
 8001122:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001126:	3201      	adds	r2, #1
 8001128:	491d      	ldr	r1, [pc, #116]	; (80011a0 <Update_Timers+0xac>)
 800112a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

				if(system_timer_overflow[idx] <= timer[idx].t)
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <Update_Timers+0xb0>)
 8001132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001136:	4619      	mov	r1, r3
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <Update_Timers+0xac>)
 800113c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001140:	4299      	cmp	r1, r3
 8001142:	d80b      	bhi.n	800115c <Update_Timers+0x68>
				{
				    timer[idx].flag = 1U;
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <Update_Timers+0xac>)
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4413      	add	r3, r2
 800114c:	2201      	movs	r2, #1
 800114e:	711a      	strb	r2, [r3, #4]
 8001150:	e004      	b.n	800115c <Update_Timers+0x68>
				}
			}
			else
			{
				timer[idx].t = 0U;
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <Update_Timers+0xac>)
 8001156:	2100      	movs	r1, #0
 8001158:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		for(uint8_t idx = 0U; idx < NUM_SYS_TIMERS; idx++)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	3301      	adds	r3, #1
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d9d2      	bls.n	800110e <Update_Timers+0x1a>
			}
		}
	}

	if(1U == timer[SYS_TIME].flag)
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <Update_Timers+0xac>)
 800116a:	791b      	ldrb	r3, [r3, #4]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b01      	cmp	r3, #1
 8001170:	d10d      	bne.n	800118e <Update_Timers+0x9a>
	{
		RESET_TIMER((&timer[SYS_TIME]), TIMER_RUN);
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <Update_Timers+0xac>)
 8001174:	2200      	movs	r2, #0
 8001176:	715a      	strb	r2, [r3, #5]
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <Update_Timers+0xac>)
 800117a:	2200      	movs	r2, #0
 800117c:	711a      	strb	r2, [r3, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <Update_Timers+0xac>)
 8001182:	601a      	str	r2, [r3, #0]

		++SysTimeInSeconds;
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <Update_Timers+0xb4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <Update_Timers+0xb4>)
 800118c:	6013      	str	r3, [r2, #0]
	}
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000488 	.word	0x20000488
 80011a0:	200004a4 	.word	0x200004a4
 80011a4:	0800b17c 	.word	0x0800b17c
 80011a8:	2000048c 	.word	0x2000048c

080011ac <initTimers>:
 * Initialize system timers
 * Args: N/A
 * Returns: N/A
 */
void initTimers(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
	for(uint8_t idx = 0U; idx < NUM_SYS_TIMERS; idx++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	e013      	b.n	80011e0 <initTimers+0x34>
	{
		timer[idx].t = 0U;
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <initTimers+0x48>)
 80011bc:	2100      	movs	r1, #0
 80011be:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		timer[idx].flag = 0U;
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <initTimers+0x48>)
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4413      	add	r3, r2
 80011ca:	2200      	movs	r2, #0
 80011cc:	711a      	strb	r2, [r3, #4]
		timer[idx].lock = 0U;    // TODO: Should init to TRUE
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <initTimers+0x48>)
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4413      	add	r3, r2
 80011d6:	2200      	movs	r2, #0
 80011d8:	715a      	strb	r2, [r3, #5]
	for(uint8_t idx = 0U; idx < NUM_SYS_TIMERS; idx++)
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	3301      	adds	r3, #1
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d9e8      	bls.n	80011b8 <initTimers+0xc>
	}
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200004a4 	.word	0x200004a4

080011f8 <HAL_TIM_PeriodElapsedCallback>:
 * General Timer Overflow ISR
 * Args: htim (TIM_HandleTypeDef)
 * Returns: N/A
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	tim11_OvrFlo_Flag = 1U;
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000488 	.word	0x20000488

08001218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121c:	f000 fbcc 	bl	80019b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001220:	f000 f818 	bl	8001254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001224:	f000 f950 	bl	80014c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001228:	f000 f8d2 	bl	80013d0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800122c:	f000 f922 	bl	8001474 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8001230:	f007 fa12 	bl	8008658 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001234:	f000 f87a 	bl	800132c <MX_ADC1_Init>
  MX_TIM11_Init();
 8001238:	f000 f8f8 	bl	800142c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <main+0x38>)
 800123e:	f003 fa14 	bl	800466a <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  System_Init();
 8001242:	f7ff ff3d 	bl	80010c0 <System_Init>
  System_Control();
 8001246:	f7ff ff49 	bl	80010dc <System_Control>
 800124a:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800124c:	4618      	mov	r0, r3
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200005a0 	.word	0x200005a0

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b094      	sub	sp, #80	; 0x50
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	2230      	movs	r2, #48	; 0x30
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f007 ff17 	bl	8009096 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	4b29      	ldr	r3, [pc, #164]	; (8001324 <SystemClock_Config+0xd0>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	4a28      	ldr	r2, [pc, #160]	; (8001324 <SystemClock_Config+0xd0>)
 8001282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001286:	6413      	str	r3, [r2, #64]	; 0x40
 8001288:	4b26      	ldr	r3, [pc, #152]	; (8001324 <SystemClock_Config+0xd0>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	4b23      	ldr	r3, [pc, #140]	; (8001328 <SystemClock_Config+0xd4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a22      	ldr	r2, [pc, #136]	; (8001328 <SystemClock_Config+0xd4>)
 800129e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b20      	ldr	r3, [pc, #128]	; (8001328 <SystemClock_Config+0xd4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80012b0:	2303      	movs	r3, #3
 80012b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ba:	2301      	movs	r3, #1
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012be:	2310      	movs	r3, #16
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c2:	2302      	movs	r3, #2
 80012c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80012cc:	230f      	movs	r3, #15
 80012ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80012d0:	2390      	movs	r3, #144	; 0x90
 80012d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80012d8:	2305      	movs	r3, #5
 80012da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 fd5b 	bl	8003d9c <HAL_RCC_OscConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012ec:	f000 f96e 	bl	80015cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f0:	230f      	movs	r3, #15
 80012f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f002 ffb6 	bl	800427c <HAL_RCC_ClockConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001316:	f000 f959 	bl	80015cc <Error_Handler>
  }
}
 800131a:	bf00      	nop
 800131c:	3750      	adds	r7, #80	; 0x50
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000

0800132c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001332:	463b      	mov	r3, r7
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800133e:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001340:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <MX_ADC1_Init+0x9c>)
 8001342:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001346:	2200      	movs	r2, #0
 8001348:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_ADC1_Init+0x98>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001350:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <MX_ADC1_Init+0x98>)
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001366:	2200      	movs	r2, #0
 8001368:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <MX_ADC1_Init+0x98>)
 800136c:	4a17      	ldr	r2, [pc, #92]	; (80013cc <MX_ADC1_Init+0xa0>)
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001378:	2201      	movs	r2, #1
 800137a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_ADC1_Init+0x98>)
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001386:	2201      	movs	r2, #1
 8001388:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800138a:	480e      	ldr	r0, [pc, #56]	; (80013c4 <MX_ADC1_Init+0x98>)
 800138c:	f000 fba8 	bl	8001ae0 <HAL_ADC_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001396:	f000 f919 	bl	80015cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	4619      	mov	r1, r3
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <MX_ADC1_Init+0x98>)
 80013ac:	f000 fd34 	bl	8001e18 <HAL_ADC_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013b6:	f000 f909 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000558 	.word	0x20000558
 80013c8:	40012000 	.word	0x40012000
 80013cc:	0f000001 	.word	0x0f000001

080013d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_I2C1_Init+0x50>)
 80013d6:	4a13      	ldr	r2, [pc, #76]	; (8001424 <MX_I2C1_Init+0x54>)
 80013d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_I2C1_Init+0x50>)
 80013dc:	4a12      	ldr	r2, [pc, #72]	; (8001428 <MX_I2C1_Init+0x58>)
 80013de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_I2C1_Init+0x50>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_I2C1_Init+0x50>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_I2C1_Init+0x50>)
 80013ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <MX_I2C1_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_I2C1_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <MX_I2C1_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_I2C1_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800140c:	4804      	ldr	r0, [pc, #16]	; (8001420 <MX_I2C1_Init+0x50>)
 800140e:	f001 fa09 	bl	8002824 <HAL_I2C_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001418:	f000 f8d8 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000504 	.word	0x20000504
 8001424:	40005400 	.word	0x40005400
 8001428:	000186a0 	.word	0x000186a0

0800142c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_TIM11_Init+0x40>)
 8001432:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <MX_TIM11_Init+0x44>)
 8001434:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <MX_TIM11_Init+0x40>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MX_TIM11_Init+0x40>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 15850;
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <MX_TIM11_Init+0x40>)
 8001444:	f643 52ea 	movw	r2, #15850	; 0x3dea
 8001448:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <MX_TIM11_Init+0x40>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_TIM11_Init+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_TIM11_Init+0x40>)
 8001458:	f003 f8dc 	bl	8004614 <HAL_TIM_Base_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001462:	f000 f8b3 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200005a0 	.word	0x200005a0
 8001470:	40014800 	.word	0x40014800

08001474 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_USART3_UART_Init+0x4c>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <MX_USART3_UART_Init+0x50>)
 800147c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_USART3_UART_Init+0x4c>)
 8001480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001484:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_USART3_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_USART3_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_USART3_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_USART3_UART_Init+0x4c>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_USART3_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_USART3_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_USART3_UART_Init+0x4c>)
 80014ac:	f003 fae6 	bl	8004a7c <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014b6:	f000 f889 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200004c4 	.word	0x200004c4
 80014c4:	40004800 	.word	0x40004800

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b36      	ldr	r3, [pc, #216]	; (80015bc <MX_GPIO_Init+0xf4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a35      	ldr	r2, [pc, #212]	; (80015bc <MX_GPIO_Init+0xf4>)
 80014e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b33      	ldr	r3, [pc, #204]	; (80015bc <MX_GPIO_Init+0xf4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <MX_GPIO_Init+0xf4>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a2e      	ldr	r2, [pc, #184]	; (80015bc <MX_GPIO_Init+0xf4>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <MX_GPIO_Init+0xf4>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b28      	ldr	r3, [pc, #160]	; (80015bc <MX_GPIO_Init+0xf4>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a27      	ldr	r2, [pc, #156]	; (80015bc <MX_GPIO_Init+0xf4>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b25      	ldr	r3, [pc, #148]	; (80015bc <MX_GPIO_Init+0xf4>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <MX_GPIO_Init+0xf4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a20      	ldr	r2, [pc, #128]	; (80015bc <MX_GPIO_Init+0xf4>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <MX_GPIO_Init+0xf4>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2104      	movs	r1, #4
 8001552:	481b      	ldr	r0, [pc, #108]	; (80015c0 <MX_GPIO_Init+0xf8>)
 8001554:	f001 f94c 	bl	80027f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2140      	movs	r1, #64	; 0x40
 800155c:	4819      	ldr	r0, [pc, #100]	; (80015c4 <MX_GPIO_Init+0xfc>)
 800155e:	f001 f947 	bl	80027f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Status_Pin */
  GPIO_InitStruct.Pin = LED_Status_Pin;
 8001562:	2304      	movs	r3, #4
 8001564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Status_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	4811      	ldr	r0, [pc, #68]	; (80015c0 <MX_GPIO_Init+0xf8>)
 800157a:	f000 ff9f 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|IMU_INT1_Pin;
 800157e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	480d      	ldr	r0, [pc, #52]	; (80015c8 <MX_GPIO_Init+0x100>)
 8001594:	f000 ff92 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8001598:	2340      	movs	r3, #64	; 0x40
 800159a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_GPIO_Init+0xfc>)
 80015b0:	f000 ff84 	bl	80024bc <HAL_GPIO_Init>

}
 80015b4:	bf00      	nop
 80015b6:	3728      	adds	r7, #40	; 0x28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020400 	.word	0x40020400

080015cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_MspInit+0x4c>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_MspInit+0x4c>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_MspInit+0x4c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_MspInit+0x4c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_MspInit+0x4c>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_MspInit+0x4c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a17      	ldr	r2, [pc, #92]	; (80016a8 <HAL_ADC_MspInit+0x7c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d127      	bne.n	800169e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_ADC_MspInit+0x80>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a15      	ldr	r2, [pc, #84]	; (80016ac <HAL_ADC_MspInit+0x80>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <HAL_ADC_MspInit+0x80>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_ADC_MspInit+0x80>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <HAL_ADC_MspInit+0x80>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_ADC_MspInit+0x80>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001686:	2301      	movs	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800168a:	2303      	movs	r3, #3
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <HAL_ADC_MspInit+0x84>)
 800169a:	f000 ff0f 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	; 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40012000 	.word	0x40012000
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020000 	.word	0x40020000

080016b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_I2C_MspInit+0x84>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d12b      	bne.n	800172e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_I2C_MspInit+0x88>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a17      	ldr	r2, [pc, #92]	; (800173c <HAL_I2C_MspInit+0x88>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_I2C_MspInit+0x88>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016f2:	23c0      	movs	r3, #192	; 0xc0
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f6:	2312      	movs	r3, #18
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001702:	2304      	movs	r3, #4
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <HAL_I2C_MspInit+0x8c>)
 800170e:	f000 fed5 	bl	80024bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_I2C_MspInit+0x88>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <HAL_I2C_MspInit+0x88>)
 800171c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_I2C_MspInit+0x88>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40005400 	.word	0x40005400
 800173c:	40023800 	.word	0x40023800
 8001740:	40020400 	.word	0x40020400

08001744 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0e      	ldr	r2, [pc, #56]	; (800178c <HAL_TIM_Base_MspInit+0x48>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d115      	bne.n	8001782 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_TIM_Base_MspInit+0x4c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <HAL_TIM_Base_MspInit+0x4c>)
 8001760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001764:	6453      	str	r3, [r2, #68]	; 0x44
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_TIM_Base_MspInit+0x4c>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	201a      	movs	r0, #26
 8001778:	f000 fe47 	bl	800240a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800177c:	201a      	movs	r0, #26
 800177e:	f000 fe60 	bl	8002442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40014800 	.word	0x40014800
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <HAL_UART_MspInit+0x94>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d134      	bne.n	8001820 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <HAL_UART_MspInit+0x98>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a1b      	ldr	r2, [pc, #108]	; (800182c <HAL_UART_MspInit+0x98>)
 80017c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_UART_MspInit+0x98>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_UART_MspInit+0x98>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a14      	ldr	r2, [pc, #80]	; (800182c <HAL_UART_MspInit+0x98>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_UART_MspInit+0x98>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001800:	2307      	movs	r3, #7
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4809      	ldr	r0, [pc, #36]	; (8001830 <HAL_UART_MspInit+0x9c>)
 800180c:	f000 fe56 	bl	80024bc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	2027      	movs	r0, #39	; 0x27
 8001816:	f000 fdf8 	bl	800240a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800181a:	2027      	movs	r0, #39	; 0x27
 800181c:	f000 fe11 	bl	8002442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40004800 	.word	0x40004800
 800182c:	40023800 	.word	0x40023800
 8001830:	40020400 	.word	0x40020400

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler+0x4>

0800184e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler+0x4>

0800185a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001888:	f000 f8e8 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001896:	f002 ff0c 	bl	80046b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200005a0 	.word	0x200005a0

080018a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <USART3_IRQHandler+0x10>)
 80018aa:	f003 f9cd 	bl	8004c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200004c4 	.word	0x200004c4

080018b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <OTG_FS_IRQHandler+0x10>)
 80018be:	f001 fa39 	bl	8002d34 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20001ab4 	.word	0x20001ab4

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f007 fb86 	bl	800900c <__errno>
 8001900:	4602      	mov	r2, r0
 8001902:	230c      	movs	r3, #12
 8001904:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20020000 	.word	0x20020000
 800192c:	00000400 	.word	0x00000400
 8001930:	20000490 	.word	0x20000490
 8001934:	20001ec0 	.word	0x20001ec0

08001938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <SystemInit+0x28>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001942:	4a07      	ldr	r2, [pc, #28]	; (8001960 <SystemInit+0x28>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <SystemInit+0x28>)
 800194e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001952:	609a      	str	r2, [r3, #8]
#endif
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800199c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001968:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800196a:	e003      	b.n	8001974 <LoopCopyDataInit>

0800196c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800196e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001970:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001972:	3104      	adds	r1, #4

08001974 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001974:	480b      	ldr	r0, [pc, #44]	; (80019a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001978:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800197a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800197c:	d3f6      	bcc.n	800196c <CopyDataInit>
  ldr  r2, =_sbss
 800197e:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001980:	e002      	b.n	8001988 <LoopFillZerobss>

08001982 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001982:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001984:	f842 3b04 	str.w	r3, [r2], #4

08001988 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800198a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800198c:	d3f9      	bcc.n	8001982 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800198e:	f7ff ffd3 	bl	8001938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001992:	f007 fb41 	bl	8009018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001996:	f7ff fc3f 	bl	8001218 <main>
  bx  lr    
 800199a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800199c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019a0:	0800b408 	.word	0x0800b408
  ldr  r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019a8:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 80019ac:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 80019b0:	20001ec0 	.word	0x20001ec0

080019b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC_IRQHandler>
	...

080019b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_Init+0x40>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <HAL_Init+0x40>)
 80019c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <HAL_Init+0x40>)
 80019ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_Init+0x40>)
 80019da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 fd07 	bl	80023f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e6:	2000      	movs	r0, #0
 80019e8:	f000 f808 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7ff fdf6 	bl	80015dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023c00 	.word	0x40023c00

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x54>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x58>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 fd1f 	bl	800245e <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 fce7 	bl	800240a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <HAL_InitTick+0x5c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	200005e0 	.word	0x200005e0

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	200005e0 	.word	0x200005e0

08001a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff ffee 	bl	8001a84 <HAL_GetTick>
 8001aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab4:	d005      	beq.n	8001ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_Delay+0x40>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ac2:	bf00      	nop
 8001ac4:	f7ff ffde 	bl	8001a84 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d8f7      	bhi.n	8001ac4 <HAL_Delay+0x28>
  {
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000008 	.word	0x20000008

08001ae0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e033      	b.n	8001b5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fd94 	bl	800162c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d118      	bne.n	8001b50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b26:	f023 0302 	bic.w	r3, r3, #2
 8001b2a:	f043 0202 	orr.w	r2, r3, #2
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fa92 	bl	800205c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f023 0303 	bic.w	r3, r3, #3
 8001b46:	f043 0201 	orr.w	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b4e:	e001      	b.n	8001b54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_Start+0x1a>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e0a5      	b.n	8001cce <HAL_ADC_Start+0x166>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d018      	beq.n	8001bca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ba8:	4b4c      	ldr	r3, [pc, #304]	; (8001cdc <HAL_ADC_Start+0x174>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a4c      	ldr	r2, [pc, #304]	; (8001ce0 <HAL_ADC_Start+0x178>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	0c9a      	lsrs	r2, r3, #18
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4413      	add	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bbc:	e002      	b.n	8001bc4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f9      	bne.n	8001bbe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d179      	bne.n	8001ccc <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c16:	d106      	bne.n	8001c26 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1c:	f023 0206 	bic.w	r2, r3, #6
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	645a      	str	r2, [r3, #68]	; 0x44
 8001c24:	e002      	b.n	8001c2c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c34:	4b2b      	ldr	r3, [pc, #172]	; (8001ce4 <HAL_ADC_Start+0x17c>)
 8001c36:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c40:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d12a      	bne.n	8001ca4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a25      	ldr	r2, [pc, #148]	; (8001ce8 <HAL_ADC_Start+0x180>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d015      	beq.n	8001c84 <HAL_ADC_Start+0x11c>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a23      	ldr	r2, [pc, #140]	; (8001cec <HAL_ADC_Start+0x184>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d105      	bne.n	8001c6e <HAL_ADC_Start+0x106>
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <HAL_ADC_Start+0x17c>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00a      	beq.n	8001c84 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <HAL_ADC_Start+0x188>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d129      	bne.n	8001ccc <HAL_ADC_Start+0x164>
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <HAL_ADC_Start+0x17c>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	2b0f      	cmp	r3, #15
 8001c82:	d823      	bhi.n	8001ccc <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d11c      	bne.n	8001ccc <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	e013      	b.n	8001ccc <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <HAL_ADC_Start+0x180>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d10e      	bne.n	8001ccc <HAL_ADC_Start+0x164>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d107      	bne.n	8001ccc <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cca:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	431bde83 	.word	0x431bde83
 8001ce4:	40012300 	.word	0x40012300
 8001ce8:	40012000 	.word	0x40012000
 8001cec:	40012100 	.word	0x40012100
 8001cf0:	40012200 	.word	0x40012200

08001cf4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d10:	d113      	bne.n	8001d3a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d20:	d10b      	bne.n	8001d3a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f043 0220 	orr.w	r2, r3, #32
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e05c      	b.n	8001df4 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d3a:	f7ff fea3 	bl	8001a84 <HAL_GetTick>
 8001d3e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d40:	e01a      	b.n	8001d78 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d016      	beq.n	8001d78 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_ADC_PollForConversion+0x6c>
 8001d50:	f7ff fe98 	bl	8001a84 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d20b      	bcs.n	8001d78 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f043 0204 	orr.w	r2, r3, #4
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e03d      	b.n	8001df4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d1dd      	bne.n	8001d42 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f06f 0212 	mvn.w	r2, #18
 8001d8e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d123      	bne.n	8001df2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d11f      	bne.n	8001df2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d111      	bne.n	8001df2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d105      	bne.n	8001df2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1c>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e105      	b.n	8002040 <HAL_ADC_ConfigChannel+0x228>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b09      	cmp	r3, #9
 8001e42:	d925      	bls.n	8001e90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68d9      	ldr	r1, [r3, #12]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	3b1e      	subs	r3, #30
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43da      	mvns	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	400a      	ands	r2, r1
 8001e68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68d9      	ldr	r1, [r3, #12]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4403      	add	r3, r0
 8001e82:	3b1e      	subs	r3, #30
 8001e84:	409a      	lsls	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	e022      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6919      	ldr	r1, [r3, #16]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6919      	ldr	r1, [r3, #16]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4403      	add	r3, r0
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d824      	bhi.n	8001f28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	3b05      	subs	r3, #5
 8001ef0:	221f      	movs	r2, #31
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	400a      	ands	r2, r1
 8001efe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	3b05      	subs	r3, #5
 8001f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	635a      	str	r2, [r3, #52]	; 0x34
 8001f26:	e04c      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b0c      	cmp	r3, #12
 8001f2e:	d824      	bhi.n	8001f7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	3b23      	subs	r3, #35	; 0x23
 8001f42:	221f      	movs	r2, #31
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43da      	mvns	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	400a      	ands	r2, r1
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	3b23      	subs	r3, #35	; 0x23
 8001f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
 8001f78:	e023      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	3b41      	subs	r3, #65	; 0x41
 8001f8c:	221f      	movs	r2, #31
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	400a      	ands	r2, r1
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	4618      	mov	r0, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3b41      	subs	r3, #65	; 0x41
 8001fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_ADC_ConfigChannel+0x234>)
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a21      	ldr	r2, [pc, #132]	; (8002050 <HAL_ADC_ConfigChannel+0x238>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d109      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x1cc>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b12      	cmp	r3, #18
 8001fd6:	d105      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a19      	ldr	r2, [pc, #100]	; (8002050 <HAL_ADC_ConfigChannel+0x238>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d123      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x21e>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b10      	cmp	r3, #16
 8001ff4:	d003      	beq.n	8001ffe <HAL_ADC_ConfigChannel+0x1e6>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b11      	cmp	r3, #17
 8001ffc:	d11b      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b10      	cmp	r3, #16
 8002010:	d111      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_ADC_ConfigChannel+0x23c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a10      	ldr	r2, [pc, #64]	; (8002058 <HAL_ADC_ConfigChannel+0x240>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	0c9a      	lsrs	r2, r3, #18
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002028:	e002      	b.n	8002030 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3b01      	subs	r3, #1
 800202e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f9      	bne.n	800202a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40012300 	.word	0x40012300
 8002050:	40012000 	.word	0x40012000
 8002054:	20000000 	.word	0x20000000
 8002058:	431bde83 	.word	0x431bde83

0800205c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002064:	4b79      	ldr	r3, [pc, #484]	; (800224c <ADC_Init+0x1f0>)
 8002066:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	431a      	orrs	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002090:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6859      	ldr	r1, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	021a      	lsls	r2, r3, #8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6859      	ldr	r1, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6899      	ldr	r1, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	4a58      	ldr	r2, [pc, #352]	; (8002250 <ADC_Init+0x1f4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d022      	beq.n	800213a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002102:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6899      	ldr	r1, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002124:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6899      	ldr	r1, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	e00f      	b.n	800215a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002148:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002158:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0202 	bic.w	r2, r2, #2
 8002168:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6899      	ldr	r1, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7e1b      	ldrb	r3, [r3, #24]
 8002174:	005a      	lsls	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01b      	beq.n	80021c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002196:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6859      	ldr	r1, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	3b01      	subs	r3, #1
 80021b4:	035a      	lsls	r2, r3, #13
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	e007      	b.n	80021d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	051a      	lsls	r2, r3, #20
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002204:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6899      	ldr	r1, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002212:	025a      	lsls	r2, r3, #9
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6899      	ldr	r1, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	029a      	lsls	r2, r3, #10
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	609a      	str	r2, [r3, #8]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40012300 	.word	0x40012300
 8002250:	0f000001 	.word	0x0f000001

08002254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db0b      	blt.n	80022e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	4907      	ldr	r1, [pc, #28]	; (80022f0 <__NVIC_EnableIRQ+0x38>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2001      	movs	r0, #1
 80022da:	fa00 f202 	lsl.w	r2, r0, r2
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000e100 	.word	0xe000e100

080022f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	2b00      	cmp	r3, #0
 8002306:	db0a      	blt.n	800231e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	490c      	ldr	r1, [pc, #48]	; (8002340 <__NVIC_SetPriority+0x4c>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	0112      	lsls	r2, r2, #4
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	440b      	add	r3, r1
 8002318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800231c:	e00a      	b.n	8002334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4908      	ldr	r1, [pc, #32]	; (8002344 <__NVIC_SetPriority+0x50>)
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	3b04      	subs	r3, #4
 800232c:	0112      	lsls	r2, r2, #4
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	440b      	add	r3, r1
 8002332:	761a      	strb	r2, [r3, #24]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f1c3 0307 	rsb	r3, r3, #7
 8002362:	2b04      	cmp	r3, #4
 8002364:	bf28      	it	cs
 8002366:	2304      	movcs	r3, #4
 8002368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3304      	adds	r3, #4
 800236e:	2b06      	cmp	r3, #6
 8002370:	d902      	bls.n	8002378 <NVIC_EncodePriority+0x30>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3b03      	subs	r3, #3
 8002376:	e000      	b.n	800237a <NVIC_EncodePriority+0x32>
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	f04f 32ff 	mov.w	r2, #4294967295
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	401a      	ands	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002390:	f04f 31ff 	mov.w	r1, #4294967295
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	43d9      	mvns	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	4313      	orrs	r3, r2
         );
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3724      	adds	r7, #36	; 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c0:	d301      	bcc.n	80023c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00f      	b.n	80023e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <SysTick_Config+0x40>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ce:	210f      	movs	r1, #15
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	f7ff ff8e 	bl	80022f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <SysTick_Config+0x40>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023de:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <SysTick_Config+0x40>)
 80023e0:	2207      	movs	r2, #7
 80023e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	e000e010 	.word	0xe000e010

080023f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff29 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800241c:	f7ff ff3e 	bl	800229c <__NVIC_GetPriorityGrouping>
 8002420:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	6978      	ldr	r0, [r7, #20]
 8002428:	f7ff ff8e 	bl	8002348 <NVIC_EncodePriority>
 800242c:	4602      	mov	r2, r0
 800242e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff5d 	bl	80022f4 <__NVIC_SetPriority>
}
 800243a:	bf00      	nop
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff31 	bl	80022b8 <__NVIC_EnableIRQ>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ffa2 	bl	80023b0 <SysTick_Config>
 800246c:	4603      	mov	r3, r0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d004      	beq.n	8002494 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e00c      	b.n	80024ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2205      	movs	r2, #5
 8002498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0201 	bic.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	e16b      	b.n	80027b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024d8:	2201      	movs	r2, #1
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	f040 815a 	bne.w	80027aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d00b      	beq.n	8002516 <HAL_GPIO_Init+0x5a>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d007      	beq.n	8002516 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800250a:	2b11      	cmp	r3, #17
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b12      	cmp	r3, #18
 8002514:	d130      	bne.n	8002578 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800254c:	2201      	movs	r2, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 0201 	and.w	r2, r3, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0xfc>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b12      	cmp	r3, #18
 80025b6:	d123      	bne.n	8002600 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	08da      	lsrs	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3208      	adds	r2, #8
 80025c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	220f      	movs	r2, #15
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	08da      	lsrs	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3208      	adds	r2, #8
 80025fa:	69b9      	ldr	r1, [r7, #24]
 80025fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0203 	and.w	r2, r3, #3
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80b4 	beq.w	80027aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	4b5f      	ldr	r3, [pc, #380]	; (80027c4 <HAL_GPIO_Init+0x308>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	4a5e      	ldr	r2, [pc, #376]	; (80027c4 <HAL_GPIO_Init+0x308>)
 800264c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002650:	6453      	str	r3, [r2, #68]	; 0x44
 8002652:	4b5c      	ldr	r3, [pc, #368]	; (80027c4 <HAL_GPIO_Init+0x308>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800265e:	4a5a      	ldr	r2, [pc, #360]	; (80027c8 <HAL_GPIO_Init+0x30c>)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	3302      	adds	r3, #2
 8002666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	220f      	movs	r2, #15
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a51      	ldr	r2, [pc, #324]	; (80027cc <HAL_GPIO_Init+0x310>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d02b      	beq.n	80026e2 <HAL_GPIO_Init+0x226>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a50      	ldr	r2, [pc, #320]	; (80027d0 <HAL_GPIO_Init+0x314>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d025      	beq.n	80026de <HAL_GPIO_Init+0x222>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4f      	ldr	r2, [pc, #316]	; (80027d4 <HAL_GPIO_Init+0x318>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d01f      	beq.n	80026da <HAL_GPIO_Init+0x21e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4e      	ldr	r2, [pc, #312]	; (80027d8 <HAL_GPIO_Init+0x31c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d019      	beq.n	80026d6 <HAL_GPIO_Init+0x21a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4d      	ldr	r2, [pc, #308]	; (80027dc <HAL_GPIO_Init+0x320>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d013      	beq.n	80026d2 <HAL_GPIO_Init+0x216>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4c      	ldr	r2, [pc, #304]	; (80027e0 <HAL_GPIO_Init+0x324>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00d      	beq.n	80026ce <HAL_GPIO_Init+0x212>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4b      	ldr	r2, [pc, #300]	; (80027e4 <HAL_GPIO_Init+0x328>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d007      	beq.n	80026ca <HAL_GPIO_Init+0x20e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4a      	ldr	r2, [pc, #296]	; (80027e8 <HAL_GPIO_Init+0x32c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_GPIO_Init+0x20a>
 80026c2:	2307      	movs	r3, #7
 80026c4:	e00e      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026c6:	2308      	movs	r3, #8
 80026c8:	e00c      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026ca:	2306      	movs	r3, #6
 80026cc:	e00a      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026ce:	2305      	movs	r3, #5
 80026d0:	e008      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026d2:	2304      	movs	r3, #4
 80026d4:	e006      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026d6:	2303      	movs	r3, #3
 80026d8:	e004      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026da:	2302      	movs	r3, #2
 80026dc:	e002      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_GPIO_Init+0x228>
 80026e2:	2300      	movs	r3, #0
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	f002 0203 	and.w	r2, r2, #3
 80026ea:	0092      	lsls	r2, r2, #2
 80026ec:	4093      	lsls	r3, r2
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f4:	4934      	ldr	r1, [pc, #208]	; (80027c8 <HAL_GPIO_Init+0x30c>)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	3302      	adds	r3, #2
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002702:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <HAL_GPIO_Init+0x330>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002726:	4a31      	ldr	r2, [pc, #196]	; (80027ec <HAL_GPIO_Init+0x330>)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800272c:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <HAL_GPIO_Init+0x330>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002750:	4a26      	ldr	r2, [pc, #152]	; (80027ec <HAL_GPIO_Init+0x330>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002756:	4b25      	ldr	r3, [pc, #148]	; (80027ec <HAL_GPIO_Init+0x330>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800277a:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <HAL_GPIO_Init+0x330>)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002780:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_GPIO_Init+0x330>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a4:	4a11      	ldr	r2, [pc, #68]	; (80027ec <HAL_GPIO_Init+0x330>)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3301      	adds	r3, #1
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	2b0f      	cmp	r3, #15
 80027b4:	f67f ae90 	bls.w	80024d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b8:	bf00      	nop
 80027ba:	3724      	adds	r7, #36	; 0x24
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40013800 	.word	0x40013800
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40020800 	.word	0x40020800
 80027d8:	40020c00 	.word	0x40020c00
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40021400 	.word	0x40021400
 80027e4:	40021800 	.word	0x40021800
 80027e8:	40021c00 	.word	0x40021c00
 80027ec:	40013c00 	.word	0x40013c00

080027f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
 80027fc:	4613      	mov	r3, r2
 80027fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002800:	787b      	ldrb	r3, [r7, #1]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002806:	887a      	ldrh	r2, [r7, #2]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800280c:	e003      	b.n	8002816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800280e:	887b      	ldrh	r3, [r7, #2]
 8002810:	041a      	lsls	r2, r3, #16
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	619a      	str	r2, [r3, #24]
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e11f      	b.n	8002a76 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe ff32 	bl	80016b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2224      	movs	r2, #36	; 0x24
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002876:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002886:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002888:	f001 fe9c 	bl	80045c4 <HAL_RCC_GetPCLK1Freq>
 800288c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4a7b      	ldr	r2, [pc, #492]	; (8002a80 <HAL_I2C_Init+0x25c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d807      	bhi.n	80028a8 <HAL_I2C_Init+0x84>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a7a      	ldr	r2, [pc, #488]	; (8002a84 <HAL_I2C_Init+0x260>)
 800289c:	4293      	cmp	r3, r2
 800289e:	bf94      	ite	ls
 80028a0:	2301      	movls	r3, #1
 80028a2:	2300      	movhi	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	e006      	b.n	80028b6 <HAL_I2C_Init+0x92>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a77      	ldr	r2, [pc, #476]	; (8002a88 <HAL_I2C_Init+0x264>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	bf94      	ite	ls
 80028b0:	2301      	movls	r3, #1
 80028b2:	2300      	movhi	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e0db      	b.n	8002a76 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4a72      	ldr	r2, [pc, #456]	; (8002a8c <HAL_I2C_Init+0x268>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	0c9b      	lsrs	r3, r3, #18
 80028c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4a64      	ldr	r2, [pc, #400]	; (8002a80 <HAL_I2C_Init+0x25c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d802      	bhi.n	80028f8 <HAL_I2C_Init+0xd4>
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	3301      	adds	r3, #1
 80028f6:	e009      	b.n	800290c <HAL_I2C_Init+0xe8>
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028fe:	fb02 f303 	mul.w	r3, r2, r3
 8002902:	4a63      	ldr	r2, [pc, #396]	; (8002a90 <HAL_I2C_Init+0x26c>)
 8002904:	fba2 2303 	umull	r2, r3, r2, r3
 8002908:	099b      	lsrs	r3, r3, #6
 800290a:	3301      	adds	r3, #1
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	430b      	orrs	r3, r1
 8002912:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800291e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4956      	ldr	r1, [pc, #344]	; (8002a80 <HAL_I2C_Init+0x25c>)
 8002928:	428b      	cmp	r3, r1
 800292a:	d80d      	bhi.n	8002948 <HAL_I2C_Init+0x124>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e59      	subs	r1, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fbb1 f3f3 	udiv	r3, r1, r3
 800293a:	3301      	adds	r3, #1
 800293c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002940:	2b04      	cmp	r3, #4
 8002942:	bf38      	it	cc
 8002944:	2304      	movcc	r3, #4
 8002946:	e04f      	b.n	80029e8 <HAL_I2C_Init+0x1c4>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <HAL_I2C_Init+0x150>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1e58      	subs	r0, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	440b      	add	r3, r1
 800295e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002962:	3301      	adds	r3, #1
 8002964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	e012      	b.n	800299a <HAL_I2C_Init+0x176>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e58      	subs	r0, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	0099      	lsls	r1, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	fbb0 f3f3 	udiv	r3, r0, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Init+0x17e>
 800299e:	2301      	movs	r3, #1
 80029a0:	e022      	b.n	80029e8 <HAL_I2C_Init+0x1c4>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10e      	bne.n	80029c8 <HAL_I2C_Init+0x1a4>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1e58      	subs	r0, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6859      	ldr	r1, [r3, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	440b      	add	r3, r1
 80029b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c6:	e00f      	b.n	80029e8 <HAL_I2C_Init+0x1c4>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1e58      	subs	r0, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6859      	ldr	r1, [r3, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	0099      	lsls	r1, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	fbb0 f3f3 	udiv	r3, r0, r3
 80029de:	3301      	adds	r3, #1
 80029e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	6809      	ldr	r1, [r1, #0]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6911      	ldr	r1, [r2, #16]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68d2      	ldr	r2, [r2, #12]
 8002a22:	4311      	orrs	r1, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	000186a0 	.word	0x000186a0
 8002a84:	001e847f 	.word	0x001e847f
 8002a88:	003d08ff 	.word	0x003d08ff
 8002a8c:	431bde83 	.word	0x431bde83
 8002a90:	10624dd3 	.word	0x10624dd3

08002a94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a96:	b08f      	sub	sp, #60	; 0x3c
 8002a98:	af0a      	add	r7, sp, #40	; 0x28
 8002a9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e10f      	b.n	8002cc6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d106      	bne.n	8002ac6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f005 ffa7 	bl	8008a14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2203      	movs	r2, #3
 8002aca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d102      	bne.n	8002ae0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f002 ffca 	bl	8005a7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	687e      	ldr	r6, [r7, #4]
 8002af2:	466d      	mov	r5, sp
 8002af4:	f106 0410 	add.w	r4, r6, #16
 8002af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b04:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b08:	1d33      	adds	r3, r6, #4
 8002b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b0c:	6838      	ldr	r0, [r7, #0]
 8002b0e:	f002 fea1 	bl	8005854 <USB_CoreInit>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0d0      	b.n	8002cc6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f002 ffb8 	bl	8005aa0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b30:	2300      	movs	r3, #0
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	e04a      	b.n	8002bcc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	333d      	adds	r3, #61	; 0x3d
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	333c      	adds	r3, #60	; 0x3c
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	b298      	uxth	r0, r3
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	3342      	adds	r3, #66	; 0x42
 8002b72:	4602      	mov	r2, r0
 8002b74:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	333f      	adds	r3, #63	; 0x3f
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3344      	adds	r3, #68	; 0x44
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3348      	adds	r3, #72	; 0x48
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3350      	adds	r3, #80	; 0x50
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d3af      	bcc.n	8002b36 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
 8002bda:	e044      	b.n	8002c66 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	3301      	adds	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
 8002c66:	7bfa      	ldrb	r2, [r7, #15]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d3b5      	bcc.n	8002bdc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	687e      	ldr	r6, [r7, #4]
 8002c78:	466d      	mov	r5, sp
 8002c7a:	f106 0410 	add.w	r4, r6, #16
 8002c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c8e:	1d33      	adds	r3, r6, #4
 8002c90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c92:	6838      	ldr	r0, [r7, #0]
 8002c94:	f002 ff2e 	bl	8005af4 <USB_DevInit>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e00d      	b.n	8002cc6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 ff76 	bl	8006bb0 <USB_DevDisconnect>

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_PCD_Start+0x1c>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e020      	b.n	8002d2c <HAL_PCD_Start+0x5e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d109      	bne.n	8002d0e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d005      	beq.n	8002d0e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f002 fea2 	bl	8005a5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f003 ff26 	bl	8006b6e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b08d      	sub	sp, #52	; 0x34
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f003 ffe4 	bl	8006d18 <USB_GetMode>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f040 839d 	bne.w	8003492 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f003 ff48 	bl	8006bf2 <USB_ReadInterrupts>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8393 	beq.w	8003490 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f003 ff3f 	bl	8006bf2 <USB_ReadInterrupts>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d107      	bne.n	8002d8e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f002 0202 	and.w	r2, r2, #2
 8002d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f003 ff2d 	bl	8006bf2 <USB_ReadInterrupts>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d161      	bne.n	8002e66 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699a      	ldr	r2, [r3, #24]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0210 	bic.w	r2, r2, #16
 8002db0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f003 020f 	and.w	r2, r3, #15
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	3304      	adds	r3, #4
 8002dd0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	0c5b      	lsrs	r3, r3, #17
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d124      	bne.n	8002e28 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d035      	beq.n	8002e56 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002df4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	6a38      	ldr	r0, [r7, #32]
 8002dfe:	f003 fd93 	bl	8006928 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e0e:	441a      	add	r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	699a      	ldr	r2, [r3, #24]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e20:	441a      	add	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	619a      	str	r2, [r3, #24]
 8002e26:	e016      	b.n	8002e56 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	0c5b      	lsrs	r3, r3, #17
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	2b06      	cmp	r3, #6
 8002e32:	d110      	bne.n	8002e56 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e3a:	2208      	movs	r2, #8
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	6a38      	ldr	r0, [r7, #32]
 8002e40:	f003 fd72 	bl	8006928 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	699a      	ldr	r2, [r3, #24]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	091b      	lsrs	r3, r3, #4
 8002e4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e50:	441a      	add	r2, r3
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699a      	ldr	r2, [r3, #24]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0210 	orr.w	r2, r2, #16
 8002e64:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f003 fec1 	bl	8006bf2 <USB_ReadInterrupts>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e7a:	d16e      	bne.n	8002f5a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 fec7 	bl	8006c18 <USB_ReadDevAllOutEpInterrupt>
 8002e8a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e8c:	e062      	b.n	8002f54 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d057      	beq.n	8002f48 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f003 feec 	bl	8006c80 <USB_ReadDevOutEPInterrupt>
 8002ea8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00c      	beq.n	8002ece <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ec6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fdb1 	bl	8003a30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00c      	beq.n	8002ef2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002eea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 feab 	bl	8003c48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f24:	461a      	mov	r2, r3
 8002f26:	2320      	movs	r3, #32
 8002f28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d009      	beq.n	8002f48 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f40:	461a      	mov	r2, r3
 8002f42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d199      	bne.n	8002e8e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f003 fe47 	bl	8006bf2 <USB_ReadInterrupts>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f6e:	f040 80c0 	bne.w	80030f2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 fe68 	bl	8006c4c <USB_ReadDevAllInEpInterrupt>
 8002f7c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f82:	e0b2      	b.n	80030ea <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 80a7 	beq.w	80030de <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f003 fe8e 	bl	8006cbc <USB_ReadDevInEPInterrupt>
 8002fa0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d057      	beq.n	800305c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69f9      	ldr	r1, [r7, #28]
 8002fc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fcc:	4013      	ands	r3, r2
 8002fce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2301      	movs	r3, #1
 8002fe0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d132      	bne.n	8003050 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3348      	adds	r3, #72	; 0x48
 8002ffa:	6819      	ldr	r1, [r3, #0]
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4403      	add	r3, r0
 800300a:	3344      	adds	r3, #68	; 0x44
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4419      	add	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4403      	add	r3, r0
 800301e:	3348      	adds	r3, #72	; 0x48
 8003020:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	2b00      	cmp	r3, #0
 8003026:	d113      	bne.n	8003050 <HAL_PCD_IRQHandler+0x31c>
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	3350      	adds	r3, #80	; 0x50
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d108      	bne.n	8003050 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003048:	461a      	mov	r2, r3
 800304a:	2101      	movs	r1, #1
 800304c:	f003 fe96 	bl	8006d7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	b2db      	uxtb	r3, r3
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f005 fd5d 	bl	8008b16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	4413      	add	r3, r2
 800306e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003072:	461a      	mov	r2, r3
 8003074:	2308      	movs	r3, #8
 8003076:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	4413      	add	r3, r2
 800308a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800308e:	461a      	mov	r2, r3
 8003090:	2310      	movs	r3, #16
 8003092:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030aa:	461a      	mov	r2, r3
 80030ac:	2340      	movs	r3, #64	; 0x40
 80030ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c6:	461a      	mov	r2, r3
 80030c8:	2302      	movs	r3, #2
 80030ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fc1b 	bl	8003914 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	3301      	adds	r3, #1
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f47f af49 	bne.w	8002f84 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f003 fd7b 	bl	8006bf2 <USB_ReadInterrupts>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003106:	d122      	bne.n	800314e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003116:	f023 0301 	bic.w	r3, r3, #1
 800311a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003122:	2b01      	cmp	r3, #1
 8003124:	d108      	bne.n	8003138 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800312e:	2100      	movs	r1, #0
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 fe27 	bl	8003d84 <HAL_PCDEx_LPM_Callback>
 8003136:	e002      	b.n	800313e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f005 fd63 	bl	8008c04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695a      	ldr	r2, [r3, #20]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800314c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f003 fd4d 	bl	8006bf2 <USB_ReadInterrupts>
 8003158:	4603      	mov	r3, r0
 800315a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800315e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003162:	d112      	bne.n	800318a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b01      	cmp	r3, #1
 8003172:	d102      	bne.n	800317a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f005 fd1f 	bl	8008bb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003188:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f003 fd2f 	bl	8006bf2 <USB_ReadInterrupts>
 8003194:	4603      	mov	r3, r0
 8003196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319e:	f040 80c7 	bne.w	8003330 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2110      	movs	r1, #16
 80031bc:	4618      	mov	r0, r3
 80031be:	f002 fdfd 	bl	8005dbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c2:	2300      	movs	r3, #0
 80031c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c6:	e056      	b.n	8003276 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d4:	461a      	mov	r2, r3
 80031d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ec:	0151      	lsls	r1, r2, #5
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	440a      	add	r2, r1
 80031f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031fa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80031fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800320c:	0151      	lsls	r1, r2, #5
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	440a      	add	r2, r1
 8003212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003216:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800321a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003228:	461a      	mov	r2, r3
 800322a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800322e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	4413      	add	r3, r2
 8003238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003240:	0151      	lsls	r1, r2, #5
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	440a      	add	r2, r1
 8003246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800324a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800324e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	4413      	add	r3, r2
 8003258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003260:	0151      	lsls	r1, r2, #5
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	440a      	add	r2, r1
 8003266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800326a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800326e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003272:	3301      	adds	r3, #1
 8003274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800327c:	429a      	cmp	r2, r3
 800327e:	d3a3      	bcc.n	80031c8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800328e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003292:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	2b00      	cmp	r3, #0
 800329a:	d016      	beq.n	80032ca <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ac:	f043 030b 	orr.w	r3, r3, #11
 80032b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c2:	f043 030b 	orr.w	r3, r3, #11
 80032c6:	6453      	str	r3, [r2, #68]	; 0x44
 80032c8:	e015      	b.n	80032f6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032dc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f0:	f043 030b 	orr.w	r3, r3, #11
 80032f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69fa      	ldr	r2, [r7, #28]
 8003300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003304:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003308:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800331a:	461a      	mov	r2, r3
 800331c:	f003 fd2e 	bl	8006d7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800332e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f003 fc5c 	bl	8006bf2 <USB_ReadInterrupts>
 800333a:	4603      	mov	r3, r0
 800333c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003344:	d124      	bne.n	8003390 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f003 fcf2 	bl	8006d34 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f002 fd92 	bl	8005e7e <USB_GetDevSpeed>
 800335a:	4603      	mov	r3, r0
 800335c:	461a      	mov	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681c      	ldr	r4, [r3, #0]
 8003366:	f001 f921 	bl	80045ac <HAL_RCC_GetHCLKFreq>
 800336a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003370:	b2db      	uxtb	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	4620      	mov	r0, r4
 8003376:	f002 facf 	bl	8005918 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f005 fbf3 	bl	8008b66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800338e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f003 fc2c 	bl	8006bf2 <USB_ReadInterrupts>
 800339a:	4603      	mov	r3, r0
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d10a      	bne.n	80033ba <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f005 fbd0 	bl	8008b4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f002 0208 	and.w	r2, r2, #8
 80033b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f003 fc17 	bl	8006bf2 <USB_ReadInterrupts>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ce:	d10f      	bne.n	80033f0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	4619      	mov	r1, r3
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f005 fc32 	bl	8008c44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80033ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f003 fbfc 	bl	8006bf2 <USB_ReadInterrupts>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003400:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003404:	d10f      	bne.n	8003426 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	b2db      	uxtb	r3, r3
 800340e:	4619      	mov	r1, r3
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f005 fc05 	bl	8008c20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003424:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f003 fbe1 	bl	8006bf2 <USB_ReadInterrupts>
 8003430:	4603      	mov	r3, r0
 8003432:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343a:	d10a      	bne.n	8003452 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f005 fc13 	bl	8008c68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003450:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f003 fbcb 	bl	8006bf2 <USB_ReadInterrupts>
 800345c:	4603      	mov	r3, r0
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b04      	cmp	r3, #4
 8003464:	d115      	bne.n	8003492 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f005 fc03 	bl	8008c84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	e000      	b.n	8003492 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003490:	bf00      	nop
    }
  }
}
 8003492:	3734      	adds	r7, #52	; 0x34
 8003494:	46bd      	mov	sp, r7
 8003496:	bd90      	pop	{r4, r7, pc}

08003498 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_PCD_SetAddress+0x1a>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e013      	b.n	80034da <HAL_PCD_SetAddress+0x42>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f003 fb29 	bl	8006b22 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	4608      	mov	r0, r1
 80034ec:	4611      	mov	r1, r2
 80034ee:	461a      	mov	r2, r3
 80034f0:	4603      	mov	r3, r0
 80034f2:	70fb      	strb	r3, [r7, #3]
 80034f4:	460b      	mov	r3, r1
 80034f6:	803b      	strh	r3, [r7, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003504:	2b00      	cmp	r3, #0
 8003506:	da0f      	bge.n	8003528 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	f003 020f 	and.w	r2, r3, #15
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	3338      	adds	r3, #56	; 0x38
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4413      	add	r3, r2
 800351c:	3304      	adds	r3, #4
 800351e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	705a      	strb	r2, [r3, #1]
 8003526:	e00f      	b.n	8003548 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	f003 020f 	and.w	r2, r3, #15
 800352e:	4613      	mov	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	3304      	adds	r3, #4
 8003540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	b2da      	uxtb	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003554:	883a      	ldrh	r2, [r7, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	78ba      	ldrb	r2, [r7, #2]
 800355e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	785b      	ldrb	r3, [r3, #1]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d004      	beq.n	8003572 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003572:	78bb      	ldrb	r3, [r7, #2]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d102      	bne.n	800357e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_PCD_EP_Open+0xaa>
 8003588:	2302      	movs	r3, #2
 800358a:	e00e      	b.n	80035aa <HAL_PCD_EP_Open+0xc8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68f9      	ldr	r1, [r7, #12]
 800359a:	4618      	mov	r0, r3
 800359c:	f002 fc94 	bl	8005ec8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80035a8:	7afb      	ldrb	r3, [r7, #11]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	da0f      	bge.n	80035e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c6:	78fb      	ldrb	r3, [r7, #3]
 80035c8:	f003 020f 	and.w	r2, r3, #15
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	3338      	adds	r3, #56	; 0x38
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	3304      	adds	r3, #4
 80035dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	705a      	strb	r2, [r3, #1]
 80035e4:	e00f      	b.n	8003606 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	f003 020f 	and.w	r2, r3, #15
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4413      	add	r3, r2
 80035fc:	3304      	adds	r3, #4
 80035fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	b2da      	uxtb	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_PCD_EP_Close+0x6e>
 800361c:	2302      	movs	r3, #2
 800361e:	e00e      	b.n	800363e <HAL_PCD_EP_Close+0x8c>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68f9      	ldr	r1, [r7, #12]
 800362e:	4618      	mov	r0, r3
 8003630:	f002 fcd2 	bl	8005fd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	460b      	mov	r3, r1
 8003654:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003656:	7afb      	ldrb	r3, [r7, #11]
 8003658:	f003 020f 	and.w	r2, r3, #15
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	3304      	adds	r3, #4
 800366e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2200      	movs	r2, #0
 8003680:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2200      	movs	r2, #0
 8003686:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003688:	7afb      	ldrb	r3, [r7, #11]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	b2da      	uxtb	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d102      	bne.n	80036a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036a2:	7afb      	ldrb	r3, [r7, #11]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d109      	bne.n	80036c0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	461a      	mov	r2, r3
 80036b8:	6979      	ldr	r1, [r7, #20]
 80036ba:	f002 ffad 	bl	8006618 <USB_EP0StartXfer>
 80036be:	e008      	b.n	80036d2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	6979      	ldr	r1, [r7, #20]
 80036ce:	f002 fd5f 	bl	8006190 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	f003 020f 	and.w	r2, r3, #15
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80036fe:	681b      	ldr	r3, [r3, #0]
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	460b      	mov	r3, r1
 800371a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800371c:	7afb      	ldrb	r3, [r7, #11]
 800371e:	f003 020f 	and.w	r2, r3, #15
 8003722:	4613      	mov	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	3338      	adds	r3, #56	; 0x38
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	3304      	adds	r3, #4
 8003732:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2200      	movs	r2, #0
 8003744:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2201      	movs	r2, #1
 800374a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800374c:	7afb      	ldrb	r3, [r7, #11]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	b2da      	uxtb	r2, r3
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d102      	bne.n	8003766 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003766:	7afb      	ldrb	r3, [r7, #11]
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	2b00      	cmp	r3, #0
 800376e:	d109      	bne.n	8003784 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	6979      	ldr	r1, [r7, #20]
 800377e:	f002 ff4b 	bl	8006618 <USB_EP0StartXfer>
 8003782:	e008      	b.n	8003796 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	6979      	ldr	r1, [r7, #20]
 8003792:	f002 fcfd 	bl	8006190 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	f003 020f 	and.w	r2, r3, #15
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d901      	bls.n	80037be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e050      	b.n	8003860 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	da0f      	bge.n	80037e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	f003 020f 	and.w	r2, r3, #15
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	3338      	adds	r3, #56	; 0x38
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	3304      	adds	r3, #4
 80037dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	705a      	strb	r2, [r3, #1]
 80037e4:	e00d      	b.n	8003802 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037e6:	78fa      	ldrb	r2, [r7, #3]
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	4413      	add	r3, r2
 80037f8:	3304      	adds	r3, #4
 80037fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	b2da      	uxtb	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_PCD_EP_SetStall+0x82>
 800381e:	2302      	movs	r3, #2
 8003820:	e01e      	b.n	8003860 <HAL_PCD_EP_SetStall+0xc0>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68f9      	ldr	r1, [r7, #12]
 8003830:	4618      	mov	r0, r3
 8003832:	f003 f8a2 	bl	800697a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	b2d9      	uxtb	r1, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003850:	461a      	mov	r2, r3
 8003852:	f003 fa93 	bl	8006d7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	f003 020f 	and.w	r2, r3, #15
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	429a      	cmp	r2, r3
 8003880:	d901      	bls.n	8003886 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e042      	b.n	800390c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003886:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800388a:	2b00      	cmp	r3, #0
 800388c:	da0f      	bge.n	80038ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	f003 020f 	and.w	r2, r3, #15
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	3338      	adds	r3, #56	; 0x38
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	3304      	adds	r3, #4
 80038a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	705a      	strb	r2, [r3, #1]
 80038ac:	e00f      	b.n	80038ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	f003 020f 	and.w	r2, r3, #15
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4413      	add	r3, r2
 80038c4:	3304      	adds	r3, #4
 80038c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_PCD_EP_ClrStall+0x86>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e00e      	b.n	800390c <HAL_PCD_EP_ClrStall+0xa4>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68f9      	ldr	r1, [r7, #12]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f003 f8aa 	bl	8006a56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af02      	add	r7, sp, #8
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	4613      	mov	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	3338      	adds	r3, #56	; 0x38
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	4413      	add	r3, r2
 8003938:	3304      	adds	r3, #4
 800393a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	699a      	ldr	r2, [r3, #24]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	429a      	cmp	r2, r3
 8003946:	d901      	bls.n	800394c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e06c      	b.n	8003a26 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	69fa      	ldr	r2, [r7, #28]
 800395e:	429a      	cmp	r2, r3
 8003960:	d902      	bls.n	8003968 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	3303      	adds	r3, #3
 800396c:	089b      	lsrs	r3, r3, #2
 800396e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003970:	e02b      	b.n	80039ca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	429a      	cmp	r2, r3
 8003986:	d902      	bls.n	800398e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3303      	adds	r3, #3
 8003992:	089b      	lsrs	r3, r3, #2
 8003994:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	68d9      	ldr	r1, [r3, #12]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	4603      	mov	r3, r0
 80039ac:	6978      	ldr	r0, [r7, #20]
 80039ae:	f002 ff86 	bl	80068be <USB_WritePacket>

    ep->xfer_buff  += len;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	441a      	add	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	441a      	add	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d809      	bhi.n	80039f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	699a      	ldr	r2, [r3, #24]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d203      	bcs.n	80039f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1be      	bne.n	8003972 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d811      	bhi.n	8003a24 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	2201      	movs	r2, #1
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	6939      	ldr	r1, [r7, #16]
 8003a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a20:	4013      	ands	r3, r2
 8003a22:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	333c      	adds	r3, #60	; 0x3c
 8003a48:	3304      	adds	r3, #4
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	f040 80a0 	bne.w	8003ba8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d015      	beq.n	8003a9e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4a72      	ldr	r2, [pc, #456]	; (8003c40 <PCD_EP_OutXfrComplete_int+0x210>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	f240 80dd 	bls.w	8003c36 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80d7 	beq.w	8003c36 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a94:	461a      	mov	r2, r3
 8003a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a9a:	6093      	str	r3, [r2, #8]
 8003a9c:	e0cb      	b.n	8003c36 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2320      	movs	r3, #32
 8003ab8:	6093      	str	r3, [r2, #8]
 8003aba:	e0bc      	b.n	8003c36 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f040 80b7 	bne.w	8003c36 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4a5d      	ldr	r2, [pc, #372]	; (8003c40 <PCD_EP_OutXfrComplete_int+0x210>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d90f      	bls.n	8003af0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aec:	6093      	str	r3, [r2, #8]
 8003aee:	e0a2      	b.n	8003c36 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b02:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	0159      	lsls	r1, r3, #5
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	440b      	add	r3, r1
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003b16:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4403      	add	r3, r0
 8003b26:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b2a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b3e:	6819      	ldr	r1, [r3, #0]
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4403      	add	r3, r0
 8003b4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4419      	add	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4403      	add	r3, r0
 8003b64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b68:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d114      	bne.n	8003b9a <PCD_EP_OutXfrComplete_int+0x16a>
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d108      	bne.n	8003b9a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b92:	461a      	mov	r2, r3
 8003b94:	2101      	movs	r1, #1
 8003b96:	f003 f8f1 	bl	8006d7c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f004 ff9d 	bl	8008ae0 <HAL_PCD_DataOutStageCallback>
 8003ba6:	e046      	b.n	8003c36 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a26      	ldr	r2, [pc, #152]	; (8003c44 <PCD_EP_OutXfrComplete_int+0x214>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d124      	bne.n	8003bfa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bcc:	6093      	str	r3, [r2, #8]
 8003bce:	e032      	b.n	8003c36 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be6:	461a      	mov	r2, r3
 8003be8:	2320      	movs	r3, #32
 8003bea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f004 ff74 	bl	8008ae0 <HAL_PCD_DataOutStageCallback>
 8003bf8:	e01d      	b.n	8003c36 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d114      	bne.n	8003c2a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d108      	bne.n	8003c2a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c22:	461a      	mov	r2, r3
 8003c24:	2100      	movs	r1, #0
 8003c26:	f003 f8a9 	bl	8006d7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f004 ff55 	bl	8008ae0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	4f54300a 	.word	0x4f54300a
 8003c44:	4f54310a 	.word	0x4f54310a

08003c48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	333c      	adds	r3, #60	; 0x3c
 8003c60:	3304      	adds	r3, #4
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a15      	ldr	r2, [pc, #84]	; (8003cd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d90e      	bls.n	8003c9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c94:	461a      	mov	r2, r3
 8003c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f004 ff0d 	bl	8008abc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d90c      	bls.n	8003cc4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d108      	bne.n	8003cc4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	f003 f85c 	bl	8006d7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	4f54300a 	.word	0x4f54300a

08003cd4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	70fb      	strb	r3, [r7, #3]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d107      	bne.n	8003d02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003cf2:	883b      	ldrh	r3, [r7, #0]
 8003cf4:	0419      	lsls	r1, r3, #16
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8003d00:	e028      	b.n	8003d54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d10:	2300      	movs	r3, #0
 8003d12:	73fb      	strb	r3, [r7, #15]
 8003d14:	e00d      	b.n	8003d32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	3340      	adds	r3, #64	; 0x40
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	4413      	add	r3, r2
 8003d2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	73fb      	strb	r3, [r7, #15]
 8003d32:	7bfa      	ldrb	r2, [r7, #15]
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d3ec      	bcc.n	8003d16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d3c:	883b      	ldrh	r3, [r7, #0]
 8003d3e:	0418      	lsls	r0, r3, #16
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6819      	ldr	r1, [r3, #0]
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	4302      	orrs	r2, r0
 8003d4c:	3340      	adds	r3, #64	; 0x40
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	887a      	ldrh	r2, [r7, #2]
 8003d74:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e25b      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d075      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dba:	4ba3      	ldr	r3, [pc, #652]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d00c      	beq.n	8003de0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc6:	4ba0      	ldr	r3, [pc, #640]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d112      	bne.n	8003df8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dd2:	4b9d      	ldr	r3, [pc, #628]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dde:	d10b      	bne.n	8003df8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	4b99      	ldr	r3, [pc, #612]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05b      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x108>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d157      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e236      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e00:	d106      	bne.n	8003e10 <HAL_RCC_OscConfig+0x74>
 8003e02:	4b91      	ldr	r3, [pc, #580]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a90      	ldr	r2, [pc, #576]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e01d      	b.n	8003e4c <HAL_RCC_OscConfig+0xb0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x98>
 8003e1a:	4b8b      	ldr	r3, [pc, #556]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a8a      	ldr	r2, [pc, #552]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b88      	ldr	r3, [pc, #544]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a87      	ldr	r2, [pc, #540]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0xb0>
 8003e34:	4b84      	ldr	r3, [pc, #528]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a83      	ldr	r2, [pc, #524]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b81      	ldr	r3, [pc, #516]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a80      	ldr	r2, [pc, #512]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7fd fe16 	bl	8001a84 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fd fe12 	bl	8001a84 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e1fb      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	4b76      	ldr	r3, [pc, #472]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0xc0>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd fe02 	bl	8001a84 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fd fdfe 	bl	8001a84 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e1e7      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	4b6c      	ldr	r3, [pc, #432]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0xe8>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d063      	beq.n	8003f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eb2:	4b65      	ldr	r3, [pc, #404]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00b      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ebe:	4b62      	ldr	r3, [pc, #392]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d11c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eca:	4b5f      	ldr	r3, [pc, #380]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d116      	bne.n	8003f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	4b5c      	ldr	r3, [pc, #368]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_RCC_OscConfig+0x152>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e1bb      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eee:	4b56      	ldr	r3, [pc, #344]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4952      	ldr	r1, [pc, #328]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f02:	e03a      	b.n	8003f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f0c:	4b4f      	ldr	r3, [pc, #316]	; (800404c <HAL_RCC_OscConfig+0x2b0>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f12:	f7fd fdb7 	bl	8001a84 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f1a:	f7fd fdb3 	bl	8001a84 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e19c      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	4b46      	ldr	r3, [pc, #280]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f38:	4b43      	ldr	r3, [pc, #268]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4940      	ldr	r1, [pc, #256]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]
 8003f4c:	e015      	b.n	8003f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	; (800404c <HAL_RCC_OscConfig+0x2b0>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fd fd96 	bl	8001a84 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5c:	f7fd fd92 	bl	8001a84 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e17b      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	4b36      	ldr	r3, [pc, #216]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d030      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8e:	4b30      	ldr	r3, [pc, #192]	; (8004050 <HAL_RCC_OscConfig+0x2b4>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f94:	f7fd fd76 	bl	8001a84 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f9c:	f7fd fd72 	bl	8001a84 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e15b      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	4b26      	ldr	r3, [pc, #152]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x200>
 8003fba:	e015      	b.n	8003fe8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fbc:	4b24      	ldr	r3, [pc, #144]	; (8004050 <HAL_RCC_OscConfig+0x2b4>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc2:	f7fd fd5f 	bl	8001a84 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fca:	f7fd fd5b 	bl	8001a84 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e144      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f0      	bne.n	8003fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80a0 	beq.w	8004136 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffa:	4b13      	ldr	r3, [pc, #76]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10f      	bne.n	8004026 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	4a0e      	ldr	r2, [pc, #56]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8004010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004014:	6413      	str	r3, [r2, #64]	; 0x40
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004022:	2301      	movs	r3, #1
 8004024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_RCC_OscConfig+0x2b8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d121      	bne.n	8004076 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <HAL_RCC_OscConfig+0x2b8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a07      	ldr	r2, [pc, #28]	; (8004054 <HAL_RCC_OscConfig+0x2b8>)
 8004038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403e:	f7fd fd21 	bl	8001a84 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004044:	e011      	b.n	800406a <HAL_RCC_OscConfig+0x2ce>
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	42470000 	.word	0x42470000
 8004050:	42470e80 	.word	0x42470e80
 8004054:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004058:	f7fd fd14 	bl	8001a84 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e0fd      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406a:	4b81      	ldr	r3, [pc, #516]	; (8004270 <HAL_RCC_OscConfig+0x4d4>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d106      	bne.n	800408c <HAL_RCC_OscConfig+0x2f0>
 800407e:	4b7d      	ldr	r3, [pc, #500]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	4a7c      	ldr	r2, [pc, #496]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	6713      	str	r3, [r2, #112]	; 0x70
 800408a:	e01c      	b.n	80040c6 <HAL_RCC_OscConfig+0x32a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b05      	cmp	r3, #5
 8004092:	d10c      	bne.n	80040ae <HAL_RCC_OscConfig+0x312>
 8004094:	4b77      	ldr	r3, [pc, #476]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	4a76      	ldr	r2, [pc, #472]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 800409a:	f043 0304 	orr.w	r3, r3, #4
 800409e:	6713      	str	r3, [r2, #112]	; 0x70
 80040a0:	4b74      	ldr	r3, [pc, #464]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	4a73      	ldr	r2, [pc, #460]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	6713      	str	r3, [r2, #112]	; 0x70
 80040ac:	e00b      	b.n	80040c6 <HAL_RCC_OscConfig+0x32a>
 80040ae:	4b71      	ldr	r3, [pc, #452]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	4a70      	ldr	r2, [pc, #448]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	6713      	str	r3, [r2, #112]	; 0x70
 80040ba:	4b6e      	ldr	r3, [pc, #440]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	4a6d      	ldr	r2, [pc, #436]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 80040c0:	f023 0304 	bic.w	r3, r3, #4
 80040c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d015      	beq.n	80040fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ce:	f7fd fcd9 	bl	8001a84 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7fd fcd5 	bl	8001a84 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e0bc      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	4b61      	ldr	r3, [pc, #388]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ee      	beq.n	80040d6 <HAL_RCC_OscConfig+0x33a>
 80040f8:	e014      	b.n	8004124 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fa:	f7fd fcc3 	bl	8001a84 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004100:	e00a      	b.n	8004118 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fd fcbf 	bl	8001a84 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e0a6      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004118:	4b56      	ldr	r3, [pc, #344]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1ee      	bne.n	8004102 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d105      	bne.n	8004136 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800412a:	4b52      	ldr	r3, [pc, #328]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	4a51      	ldr	r2, [pc, #324]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 8004130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004134:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 8092 	beq.w	8004264 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004140:	4b4c      	ldr	r3, [pc, #304]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 030c 	and.w	r3, r3, #12
 8004148:	2b08      	cmp	r3, #8
 800414a:	d05c      	beq.n	8004206 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d141      	bne.n	80041d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004154:	4b48      	ldr	r3, [pc, #288]	; (8004278 <HAL_RCC_OscConfig+0x4dc>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415a:	f7fd fc93 	bl	8001a84 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004162:	f7fd fc8f 	bl	8001a84 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e078      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004174:	4b3f      	ldr	r3, [pc, #252]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f0      	bne.n	8004162 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	019b      	lsls	r3, r3, #6
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	3b01      	subs	r3, #1
 800419a:	041b      	lsls	r3, r3, #16
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	061b      	lsls	r3, r3, #24
 80041a4:	4933      	ldr	r1, [pc, #204]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041aa:	4b33      	ldr	r3, [pc, #204]	; (8004278 <HAL_RCC_OscConfig+0x4dc>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fd fc68 	bl	8001a84 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b8:	f7fd fc64 	bl	8001a84 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e04d      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ca:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0x41c>
 80041d6:	e045      	b.n	8004264 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d8:	4b27      	ldr	r3, [pc, #156]	; (8004278 <HAL_RCC_OscConfig+0x4dc>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041de:	f7fd fc51 	bl	8001a84 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e6:	f7fd fc4d 	bl	8001a84 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e036      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f8:	4b1e      	ldr	r3, [pc, #120]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f0      	bne.n	80041e6 <HAL_RCC_OscConfig+0x44a>
 8004204:	e02e      	b.n	8004264 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e029      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004212:	4b18      	ldr	r3, [pc, #96]	; (8004274 <HAL_RCC_OscConfig+0x4d8>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	429a      	cmp	r2, r3
 8004224:	d11c      	bne.n	8004260 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004230:	429a      	cmp	r2, r3
 8004232:	d115      	bne.n	8004260 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800423a:	4013      	ands	r3, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004240:	4293      	cmp	r3, r2
 8004242:	d10d      	bne.n	8004260 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800424e:	429a      	cmp	r2, r3
 8004250:	d106      	bne.n	8004260 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40007000 	.word	0x40007000
 8004274:	40023800 	.word	0x40023800
 8004278:	42470060 	.word	0x42470060

0800427c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0cc      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004290:	4b68      	ldr	r3, [pc, #416]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d90c      	bls.n	80042b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	4b65      	ldr	r3, [pc, #404]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a6:	4b63      	ldr	r3, [pc, #396]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0b8      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d020      	beq.n	8004306 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d0:	4b59      	ldr	r3, [pc, #356]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	4a58      	ldr	r2, [pc, #352]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042e8:	4b53      	ldr	r3, [pc, #332]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	4a52      	ldr	r2, [pc, #328]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f4:	4b50      	ldr	r3, [pc, #320]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	494d      	ldr	r1, [pc, #308]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d044      	beq.n	800439c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d107      	bne.n	800432a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	4b47      	ldr	r3, [pc, #284]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d119      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e07f      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d003      	beq.n	800433a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004336:	2b03      	cmp	r3, #3
 8004338:	d107      	bne.n	800434a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433a:	4b3f      	ldr	r3, [pc, #252]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e06f      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434a:	4b3b      	ldr	r3, [pc, #236]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e067      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800435a:	4b37      	ldr	r3, [pc, #220]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f023 0203 	bic.w	r2, r3, #3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4934      	ldr	r1, [pc, #208]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	4313      	orrs	r3, r2
 800436a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800436c:	f7fd fb8a 	bl	8001a84 <HAL_GetTick>
 8004370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004372:	e00a      	b.n	800438a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004374:	f7fd fb86 	bl	8001a84 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e04f      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	4b2b      	ldr	r3, [pc, #172]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 020c 	and.w	r2, r3, #12
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	429a      	cmp	r2, r3
 800439a:	d1eb      	bne.n	8004374 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800439c:	4b25      	ldr	r3, [pc, #148]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d20c      	bcs.n	80043c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b22      	ldr	r3, [pc, #136]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b2:	4b20      	ldr	r3, [pc, #128]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e032      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d0:	4b19      	ldr	r3, [pc, #100]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4916      	ldr	r1, [pc, #88]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ee:	4b12      	ldr	r3, [pc, #72]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	490e      	ldr	r1, [pc, #56]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004402:	f000 f821 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8004406:	4601      	mov	r1, r0
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 8004414:	5cd3      	ldrb	r3, [r2, r3]
 8004416:	fa21 f303 	lsr.w	r3, r1, r3
 800441a:	4a09      	ldr	r2, [pc, #36]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 800441c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800441e:	4b09      	ldr	r3, [pc, #36]	; (8004444 <HAL_RCC_ClockConfig+0x1c8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fd faea 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40023c00 	.word	0x40023c00
 8004438:	40023800 	.word	0x40023800
 800443c:	0800b184 	.word	0x0800b184
 8004440:	20000000 	.word	0x20000000
 8004444:	20000004 	.word	0x20000004

08004448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	607b      	str	r3, [r7, #4]
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	2300      	movs	r3, #0
 8004458:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800445e:	4b50      	ldr	r3, [pc, #320]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	2b04      	cmp	r3, #4
 8004468:	d007      	beq.n	800447a <HAL_RCC_GetSysClockFreq+0x32>
 800446a:	2b08      	cmp	r3, #8
 800446c:	d008      	beq.n	8004480 <HAL_RCC_GetSysClockFreq+0x38>
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 808d 	bne.w	800458e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004474:	4b4b      	ldr	r3, [pc, #300]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004476:	60bb      	str	r3, [r7, #8]
       break;
 8004478:	e08c      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800447a:	4b4b      	ldr	r3, [pc, #300]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800447c:	60bb      	str	r3, [r7, #8]
      break;
 800447e:	e089      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004480:	4b47      	ldr	r3, [pc, #284]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004488:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800448a:	4b45      	ldr	r3, [pc, #276]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x158>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d023      	beq.n	80044de <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004496:	4b42      	ldr	r3, [pc, #264]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	099b      	lsrs	r3, r3, #6
 800449c:	f04f 0400 	mov.w	r4, #0
 80044a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	ea03 0501 	and.w	r5, r3, r1
 80044ac:	ea04 0602 	and.w	r6, r4, r2
 80044b0:	4a3d      	ldr	r2, [pc, #244]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80044b2:	fb02 f106 	mul.w	r1, r2, r6
 80044b6:	2200      	movs	r2, #0
 80044b8:	fb02 f205 	mul.w	r2, r2, r5
 80044bc:	440a      	add	r2, r1
 80044be:	493a      	ldr	r1, [pc, #232]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80044c0:	fba5 0101 	umull	r0, r1, r5, r1
 80044c4:	1853      	adds	r3, r2, r1
 80044c6:	4619      	mov	r1, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f04f 0400 	mov.w	r4, #0
 80044ce:	461a      	mov	r2, r3
 80044d0:	4623      	mov	r3, r4
 80044d2:	f7fc fb69 	bl	8000ba8 <__aeabi_uldivmod>
 80044d6:	4603      	mov	r3, r0
 80044d8:	460c      	mov	r4, r1
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	e049      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044de:	4b30      	ldr	r3, [pc, #192]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x158>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	099b      	lsrs	r3, r3, #6
 80044e4:	f04f 0400 	mov.w	r4, #0
 80044e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	ea03 0501 	and.w	r5, r3, r1
 80044f4:	ea04 0602 	and.w	r6, r4, r2
 80044f8:	4629      	mov	r1, r5
 80044fa:	4632      	mov	r2, r6
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	f04f 0400 	mov.w	r4, #0
 8004504:	0154      	lsls	r4, r2, #5
 8004506:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800450a:	014b      	lsls	r3, r1, #5
 800450c:	4619      	mov	r1, r3
 800450e:	4622      	mov	r2, r4
 8004510:	1b49      	subs	r1, r1, r5
 8004512:	eb62 0206 	sbc.w	r2, r2, r6
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	f04f 0400 	mov.w	r4, #0
 800451e:	0194      	lsls	r4, r2, #6
 8004520:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004524:	018b      	lsls	r3, r1, #6
 8004526:	1a5b      	subs	r3, r3, r1
 8004528:	eb64 0402 	sbc.w	r4, r4, r2
 800452c:	f04f 0100 	mov.w	r1, #0
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	00e2      	lsls	r2, r4, #3
 8004536:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800453a:	00d9      	lsls	r1, r3, #3
 800453c:	460b      	mov	r3, r1
 800453e:	4614      	mov	r4, r2
 8004540:	195b      	adds	r3, r3, r5
 8004542:	eb44 0406 	adc.w	r4, r4, r6
 8004546:	f04f 0100 	mov.w	r1, #0
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	02a2      	lsls	r2, r4, #10
 8004550:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004554:	0299      	lsls	r1, r3, #10
 8004556:	460b      	mov	r3, r1
 8004558:	4614      	mov	r4, r2
 800455a:	4618      	mov	r0, r3
 800455c:	4621      	mov	r1, r4
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f04f 0400 	mov.w	r4, #0
 8004564:	461a      	mov	r2, r3
 8004566:	4623      	mov	r3, r4
 8004568:	f7fc fb1e 	bl	8000ba8 <__aeabi_uldivmod>
 800456c:	4603      	mov	r3, r0
 800456e:	460c      	mov	r4, r1
 8004570:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004572:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	0c1b      	lsrs	r3, r3, #16
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	3301      	adds	r3, #1
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	fbb2 f3f3 	udiv	r3, r2, r3
 800458a:	60bb      	str	r3, [r7, #8]
      break;
 800458c:	e002      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004590:	60bb      	str	r3, [r7, #8]
      break;
 8004592:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004594:	68bb      	ldr	r3, [r7, #8]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800
 80045a4:	00f42400 	.word	0x00f42400
 80045a8:	017d7840 	.word	0x017d7840

080045ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045b2:	681b      	ldr	r3, [r3, #0]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000000 	.word	0x20000000

080045c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045c8:	f7ff fff0 	bl	80045ac <HAL_RCC_GetHCLKFreq>
 80045cc:	4601      	mov	r1, r0
 80045ce:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	0a9b      	lsrs	r3, r3, #10
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	4a03      	ldr	r2, [pc, #12]	; (80045e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045da:	5cd3      	ldrb	r3, [r2, r3]
 80045dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40023800 	.word	0x40023800
 80045e8:	0800b194 	.word	0x0800b194

080045ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045f0:	f7ff ffdc 	bl	80045ac <HAL_RCC_GetHCLKFreq>
 80045f4:	4601      	mov	r1, r0
 80045f6:	4b05      	ldr	r3, [pc, #20]	; (800460c <HAL_RCC_GetPCLK2Freq+0x20>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	0b5b      	lsrs	r3, r3, #13
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	4a03      	ldr	r2, [pc, #12]	; (8004610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004602:	5cd3      	ldrb	r3, [r2, r3]
 8004604:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40023800 	.word	0x40023800
 8004610:	0800b194 	.word	0x0800b194

08004614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e01d      	b.n	8004662 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fd f882 	bl	8001744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f000 f95e 	bl	8004914 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0201 	orr.w	r2, r2, #1
 8004680:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b06      	cmp	r3, #6
 8004692:	d007      	beq.n	80046a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d122      	bne.n	800470e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d11b      	bne.n	800470e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f06f 0202 	mvn.w	r2, #2
 80046de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f8ee 	bl	80048d6 <HAL_TIM_IC_CaptureCallback>
 80046fa:	e005      	b.n	8004708 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f8e0 	bl	80048c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f8f1 	bl	80048ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b04      	cmp	r3, #4
 800471a:	d122      	bne.n	8004762 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b04      	cmp	r3, #4
 8004728:	d11b      	bne.n	8004762 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f06f 0204 	mvn.w	r2, #4
 8004732:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f8c4 	bl	80048d6 <HAL_TIM_IC_CaptureCallback>
 800474e:	e005      	b.n	800475c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f8b6 	bl	80048c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f8c7 	bl	80048ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d122      	bne.n	80047b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b08      	cmp	r3, #8
 800477c:	d11b      	bne.n	80047b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f06f 0208 	mvn.w	r2, #8
 8004786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2204      	movs	r2, #4
 800478c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f89a 	bl	80048d6 <HAL_TIM_IC_CaptureCallback>
 80047a2:	e005      	b.n	80047b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f88c 	bl	80048c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f89d 	bl	80048ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d122      	bne.n	800480a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	2b10      	cmp	r3, #16
 80047d0:	d11b      	bne.n	800480a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f06f 0210 	mvn.w	r2, #16
 80047da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2208      	movs	r2, #8
 80047e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f870 	bl	80048d6 <HAL_TIM_IC_CaptureCallback>
 80047f6:	e005      	b.n	8004804 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f862 	bl	80048c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f873 	bl	80048ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b01      	cmp	r3, #1
 8004816:	d10e      	bne.n	8004836 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b01      	cmp	r3, #1
 8004824:	d107      	bne.n	8004836 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f06f 0201 	mvn.w	r2, #1
 800482e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7fc fce1 	bl	80011f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004840:	2b80      	cmp	r3, #128	; 0x80
 8004842:	d10e      	bne.n	8004862 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484e:	2b80      	cmp	r3, #128	; 0x80
 8004850:	d107      	bne.n	8004862 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800485a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f903 	bl	8004a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d10e      	bne.n	800488e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b40      	cmp	r3, #64	; 0x40
 800487c:	d107      	bne.n	800488e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f838 	bl	80048fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b20      	cmp	r3, #32
 800489a:	d10e      	bne.n	80048ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	d107      	bne.n	80048ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f06f 0220 	mvn.w	r2, #32
 80048b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f8cd 	bl	8004a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a40      	ldr	r2, [pc, #256]	; (8004a28 <TIM_Base_SetConfig+0x114>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d013      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004932:	d00f      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a3d      	ldr	r2, [pc, #244]	; (8004a2c <TIM_Base_SetConfig+0x118>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00b      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a3c      	ldr	r2, [pc, #240]	; (8004a30 <TIM_Base_SetConfig+0x11c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a3b      	ldr	r2, [pc, #236]	; (8004a34 <TIM_Base_SetConfig+0x120>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a3a      	ldr	r2, [pc, #232]	; (8004a38 <TIM_Base_SetConfig+0x124>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d108      	bne.n	8004966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a2f      	ldr	r2, [pc, #188]	; (8004a28 <TIM_Base_SetConfig+0x114>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d02b      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004974:	d027      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a2c      	ldr	r2, [pc, #176]	; (8004a2c <TIM_Base_SetConfig+0x118>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d023      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a2b      	ldr	r2, [pc, #172]	; (8004a30 <TIM_Base_SetConfig+0x11c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01f      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a2a      	ldr	r2, [pc, #168]	; (8004a34 <TIM_Base_SetConfig+0x120>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d01b      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a29      	ldr	r2, [pc, #164]	; (8004a38 <TIM_Base_SetConfig+0x124>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d017      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a28      	ldr	r2, [pc, #160]	; (8004a3c <TIM_Base_SetConfig+0x128>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d013      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a27      	ldr	r2, [pc, #156]	; (8004a40 <TIM_Base_SetConfig+0x12c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00f      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a26      	ldr	r2, [pc, #152]	; (8004a44 <TIM_Base_SetConfig+0x130>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00b      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a25      	ldr	r2, [pc, #148]	; (8004a48 <TIM_Base_SetConfig+0x134>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d007      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a24      	ldr	r2, [pc, #144]	; (8004a4c <TIM_Base_SetConfig+0x138>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a23      	ldr	r2, [pc, #140]	; (8004a50 <TIM_Base_SetConfig+0x13c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d108      	bne.n	80049d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <TIM_Base_SetConfig+0x114>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_Base_SetConfig+0xf8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a0c      	ldr	r2, [pc, #48]	; (8004a38 <TIM_Base_SetConfig+0x124>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d103      	bne.n	8004a14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	615a      	str	r2, [r3, #20]
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40010000 	.word	0x40010000
 8004a2c:	40000400 	.word	0x40000400
 8004a30:	40000800 	.word	0x40000800
 8004a34:	40000c00 	.word	0x40000c00
 8004a38:	40010400 	.word	0x40010400
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40014400 	.word	0x40014400
 8004a44:	40014800 	.word	0x40014800
 8004a48:	40001800 	.word	0x40001800
 8004a4c:	40001c00 	.word	0x40001c00
 8004a50:	40002000 	.word	0x40002000

08004a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e03f      	b.n	8004b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fc fe76 	bl	8001794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2224      	movs	r2, #36	; 0x24
 8004aac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fb4b 	bl	800515c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695a      	ldr	r2, [r3, #20]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b088      	sub	sp, #32
 8004b1a:	af02      	add	r7, sp, #8
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	603b      	str	r3, [r7, #0]
 8004b22:	4613      	mov	r3, r2
 8004b24:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	f040 8083 	bne.w	8004c3e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_UART_Transmit+0x2e>
 8004b3e:	88fb      	ldrh	r3, [r7, #6]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e07b      	b.n	8004c40 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_UART_Transmit+0x40>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e074      	b.n	8004c40 <HAL_UART_Transmit+0x12a>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2221      	movs	r2, #33	; 0x21
 8004b68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004b6c:	f7fc ff8a 	bl	8001a84 <HAL_GetTick>
 8004b70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	88fa      	ldrh	r2, [r7, #6]
 8004b76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	88fa      	ldrh	r2, [r7, #6]
 8004b7c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004b86:	e042      	b.n	8004c0e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9e:	d122      	bne.n	8004be6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2180      	movs	r1, #128	; 0x80
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 f96a 	bl	8004e84 <UART_WaitOnFlagUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e042      	b.n	8004c40 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bcc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d103      	bne.n	8004bde <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	3302      	adds	r3, #2
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	e017      	b.n	8004c0e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	3301      	adds	r3, #1
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	e013      	b.n	8004c0e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2200      	movs	r2, #0
 8004bee:	2180      	movs	r1, #128	; 0x80
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f947 	bl	8004e84 <UART_WaitOnFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e01f      	b.n	8004c40 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	60ba      	str	r2, [r7, #8]
 8004c06:	781a      	ldrb	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1b7      	bne.n	8004b88 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	2140      	movs	r1, #64	; 0x40
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f92e 	bl	8004e84 <UART_WaitOnFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e006      	b.n	8004c40 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e000      	b.n	8004c40 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
  }
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10d      	bne.n	8004c9a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d008      	beq.n	8004c9a <HAL_UART_IRQHandler+0x52>
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f9e0 	bl	8005058 <UART_Receive_IT>
      return;
 8004c98:	e0d1      	b.n	8004e3e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80b0 	beq.w	8004e02 <HAL_UART_IRQHandler+0x1ba>
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d105      	bne.n	8004cb8 <HAL_UART_IRQHandler+0x70>
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 80a5 	beq.w	8004e02 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x90>
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd0:	f043 0201 	orr.w	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_UART_IRQHandler+0xb0>
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf0:	f043 0202 	orr.w	r2, r3, #2
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_UART_IRQHandler+0xd0>
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d10:	f043 0204 	orr.w	r2, r3, #4
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00f      	beq.n	8004d42 <HAL_UART_IRQHandler+0xfa>
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d104      	bne.n	8004d36 <HAL_UART_IRQHandler+0xee>
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3a:	f043 0208 	orr.w	r2, r3, #8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d078      	beq.n	8004e3c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <HAL_UART_IRQHandler+0x11c>
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f97a 	bl	8005058 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	bf0c      	ite	eq
 8004d72:	2301      	moveq	r3, #1
 8004d74:	2300      	movne	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <HAL_UART_IRQHandler+0x144>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d031      	beq.n	8004df0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f8c3 	bl	8004f18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b40      	cmp	r3, #64	; 0x40
 8004d9e:	d123      	bne.n	8004de8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695a      	ldr	r2, [r3, #20]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dae:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d013      	beq.n	8004de0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbc:	4a21      	ldr	r2, [pc, #132]	; (8004e44 <HAL_UART_IRQHandler+0x1fc>)
 8004dbe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fd fb56 	bl	8002476 <HAL_DMA_Abort_IT>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d016      	beq.n	8004dfe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dde:	e00e      	b.n	8004dfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f845 	bl	8004e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de6:	e00a      	b.n	8004dfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f841 	bl	8004e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dee:	e006      	b.n	8004dfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f83d 	bl	8004e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004dfc:	e01e      	b.n	8004e3c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfe:	bf00      	nop
    return;
 8004e00:	e01c      	b.n	8004e3c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_UART_IRQHandler+0x1d6>
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f8b0 	bl	8004f7c <UART_Transmit_IT>
    return;
 8004e1c:	e00f      	b.n	8004e3e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_UART_IRQHandler+0x1f6>
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f8f8 	bl	8005028 <UART_EndTransmit_IT>
    return;
 8004e38:	bf00      	nop
 8004e3a:	e000      	b.n	8004e3e <HAL_UART_IRQHandler+0x1f6>
    return;
 8004e3c:	bf00      	nop
  }
}
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	08004f55 	.word	0x08004f55

08004e48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e94:	e02c      	b.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d028      	beq.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ea4:	f7fc fdee 	bl	8001a84 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d21d      	bcs.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ec2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695a      	ldr	r2, [r3, #20]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0201 	bic.w	r2, r2, #1
 8004ed2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e00f      	b.n	8004f10 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	bf0c      	ite	eq
 8004f00:	2301      	moveq	r3, #1
 8004f02:	2300      	movne	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d0c3      	beq.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f2e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0201 	bic.w	r2, r2, #1
 8004f3e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7ff ff7e 	bl	8004e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f74:	bf00      	nop
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b21      	cmp	r3, #33	; 0x21
 8004f8e:	d144      	bne.n	800501a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f98:	d11a      	bne.n	8004fd0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fae:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d105      	bne.n	8004fc4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	1c9a      	adds	r2, r3, #2
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	621a      	str	r2, [r3, #32]
 8004fc2:	e00e      	b.n	8004fe2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	621a      	str	r2, [r3, #32]
 8004fce:	e008      	b.n	8004fe2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	1c59      	adds	r1, r3, #1
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6211      	str	r1, [r2, #32]
 8004fda:	781a      	ldrb	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10f      	bne.n	8005016 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005004:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005014:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	e000      	b.n	800501c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800501a:	2302      	movs	r3, #2
  }
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800503e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff fefd 	bl	8004e48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b22      	cmp	r3, #34	; 0x22
 800506a:	d171      	bne.n	8005150 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005074:	d123      	bne.n	80050be <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10e      	bne.n	80050a2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	1c9a      	adds	r2, r3, #2
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	629a      	str	r2, [r3, #40]	; 0x28
 80050a0:	e029      	b.n	80050f6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28
 80050bc:	e01b      	b.n	80050f6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6858      	ldr	r0, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	1c59      	adds	r1, r3, #1
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6291      	str	r1, [r2, #40]	; 0x28
 80050d6:	b2c2      	uxtb	r2, r0
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	e00c      	b.n	80050f6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e8:	1c58      	adds	r0, r3, #1
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	6288      	str	r0, [r1, #40]	; 0x28
 80050ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29b      	uxth	r3, r3
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	4619      	mov	r1, r3
 8005104:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005106:	2b00      	cmp	r3, #0
 8005108:	d120      	bne.n	800514c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0220 	bic.w	r2, r2, #32
 8005118:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005128:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff fe8a 	bl	8004e5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	e002      	b.n	8005152 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	e000      	b.n	8005152 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005150:	2302      	movs	r3, #2
  }
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800515c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005160:	b085      	sub	sp, #20
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800519e:	f023 030c 	bic.w	r3, r3, #12
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6812      	ldr	r2, [r2, #0]
 80051a6:	68f9      	ldr	r1, [r7, #12]
 80051a8:	430b      	orrs	r3, r1
 80051aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ca:	f040 818b 	bne.w	80054e4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4ac1      	ldr	r2, [pc, #772]	; (80054d8 <UART_SetConfig+0x37c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d005      	beq.n	80051e4 <UART_SetConfig+0x88>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4abf      	ldr	r2, [pc, #764]	; (80054dc <UART_SetConfig+0x380>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	f040 80bd 	bne.w	800535e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051e4:	f7ff fa02 	bl	80045ec <HAL_RCC_GetPCLK2Freq>
 80051e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	461d      	mov	r5, r3
 80051ee:	f04f 0600 	mov.w	r6, #0
 80051f2:	46a8      	mov	r8, r5
 80051f4:	46b1      	mov	r9, r6
 80051f6:	eb18 0308 	adds.w	r3, r8, r8
 80051fa:	eb49 0409 	adc.w	r4, r9, r9
 80051fe:	4698      	mov	r8, r3
 8005200:	46a1      	mov	r9, r4
 8005202:	eb18 0805 	adds.w	r8, r8, r5
 8005206:	eb49 0906 	adc.w	r9, r9, r6
 800520a:	f04f 0100 	mov.w	r1, #0
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005216:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800521a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800521e:	4688      	mov	r8, r1
 8005220:	4691      	mov	r9, r2
 8005222:	eb18 0005 	adds.w	r0, r8, r5
 8005226:	eb49 0106 	adc.w	r1, r9, r6
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	461d      	mov	r5, r3
 8005230:	f04f 0600 	mov.w	r6, #0
 8005234:	196b      	adds	r3, r5, r5
 8005236:	eb46 0406 	adc.w	r4, r6, r6
 800523a:	461a      	mov	r2, r3
 800523c:	4623      	mov	r3, r4
 800523e:	f7fb fcb3 	bl	8000ba8 <__aeabi_uldivmod>
 8005242:	4603      	mov	r3, r0
 8005244:	460c      	mov	r4, r1
 8005246:	461a      	mov	r2, r3
 8005248:	4ba5      	ldr	r3, [pc, #660]	; (80054e0 <UART_SetConfig+0x384>)
 800524a:	fba3 2302 	umull	r2, r3, r3, r2
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	461d      	mov	r5, r3
 8005258:	f04f 0600 	mov.w	r6, #0
 800525c:	46a9      	mov	r9, r5
 800525e:	46b2      	mov	sl, r6
 8005260:	eb19 0309 	adds.w	r3, r9, r9
 8005264:	eb4a 040a 	adc.w	r4, sl, sl
 8005268:	4699      	mov	r9, r3
 800526a:	46a2      	mov	sl, r4
 800526c:	eb19 0905 	adds.w	r9, r9, r5
 8005270:	eb4a 0a06 	adc.w	sl, sl, r6
 8005274:	f04f 0100 	mov.w	r1, #0
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005280:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005284:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005288:	4689      	mov	r9, r1
 800528a:	4692      	mov	sl, r2
 800528c:	eb19 0005 	adds.w	r0, r9, r5
 8005290:	eb4a 0106 	adc.w	r1, sl, r6
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	461d      	mov	r5, r3
 800529a:	f04f 0600 	mov.w	r6, #0
 800529e:	196b      	adds	r3, r5, r5
 80052a0:	eb46 0406 	adc.w	r4, r6, r6
 80052a4:	461a      	mov	r2, r3
 80052a6:	4623      	mov	r3, r4
 80052a8:	f7fb fc7e 	bl	8000ba8 <__aeabi_uldivmod>
 80052ac:	4603      	mov	r3, r0
 80052ae:	460c      	mov	r4, r1
 80052b0:	461a      	mov	r2, r3
 80052b2:	4b8b      	ldr	r3, [pc, #556]	; (80054e0 <UART_SetConfig+0x384>)
 80052b4:	fba3 1302 	umull	r1, r3, r3, r2
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	2164      	movs	r1, #100	; 0x64
 80052bc:	fb01 f303 	mul.w	r3, r1, r3
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	3332      	adds	r3, #50	; 0x32
 80052c6:	4a86      	ldr	r2, [pc, #536]	; (80054e0 <UART_SetConfig+0x384>)
 80052c8:	fba2 2303 	umull	r2, r3, r2, r3
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052d4:	4498      	add	r8, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	461d      	mov	r5, r3
 80052da:	f04f 0600 	mov.w	r6, #0
 80052de:	46a9      	mov	r9, r5
 80052e0:	46b2      	mov	sl, r6
 80052e2:	eb19 0309 	adds.w	r3, r9, r9
 80052e6:	eb4a 040a 	adc.w	r4, sl, sl
 80052ea:	4699      	mov	r9, r3
 80052ec:	46a2      	mov	sl, r4
 80052ee:	eb19 0905 	adds.w	r9, r9, r5
 80052f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80052f6:	f04f 0100 	mov.w	r1, #0
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005302:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005306:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800530a:	4689      	mov	r9, r1
 800530c:	4692      	mov	sl, r2
 800530e:	eb19 0005 	adds.w	r0, r9, r5
 8005312:	eb4a 0106 	adc.w	r1, sl, r6
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	461d      	mov	r5, r3
 800531c:	f04f 0600 	mov.w	r6, #0
 8005320:	196b      	adds	r3, r5, r5
 8005322:	eb46 0406 	adc.w	r4, r6, r6
 8005326:	461a      	mov	r2, r3
 8005328:	4623      	mov	r3, r4
 800532a:	f7fb fc3d 	bl	8000ba8 <__aeabi_uldivmod>
 800532e:	4603      	mov	r3, r0
 8005330:	460c      	mov	r4, r1
 8005332:	461a      	mov	r2, r3
 8005334:	4b6a      	ldr	r3, [pc, #424]	; (80054e0 <UART_SetConfig+0x384>)
 8005336:	fba3 1302 	umull	r1, r3, r3, r2
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	2164      	movs	r1, #100	; 0x64
 800533e:	fb01 f303 	mul.w	r3, r1, r3
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	3332      	adds	r3, #50	; 0x32
 8005348:	4a65      	ldr	r2, [pc, #404]	; (80054e0 <UART_SetConfig+0x384>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	f003 0207 	and.w	r2, r3, #7
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4442      	add	r2, r8
 800535a:	609a      	str	r2, [r3, #8]
 800535c:	e26f      	b.n	800583e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800535e:	f7ff f931 	bl	80045c4 <HAL_RCC_GetPCLK1Freq>
 8005362:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	461d      	mov	r5, r3
 8005368:	f04f 0600 	mov.w	r6, #0
 800536c:	46a8      	mov	r8, r5
 800536e:	46b1      	mov	r9, r6
 8005370:	eb18 0308 	adds.w	r3, r8, r8
 8005374:	eb49 0409 	adc.w	r4, r9, r9
 8005378:	4698      	mov	r8, r3
 800537a:	46a1      	mov	r9, r4
 800537c:	eb18 0805 	adds.w	r8, r8, r5
 8005380:	eb49 0906 	adc.w	r9, r9, r6
 8005384:	f04f 0100 	mov.w	r1, #0
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005390:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005394:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005398:	4688      	mov	r8, r1
 800539a:	4691      	mov	r9, r2
 800539c:	eb18 0005 	adds.w	r0, r8, r5
 80053a0:	eb49 0106 	adc.w	r1, r9, r6
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	461d      	mov	r5, r3
 80053aa:	f04f 0600 	mov.w	r6, #0
 80053ae:	196b      	adds	r3, r5, r5
 80053b0:	eb46 0406 	adc.w	r4, r6, r6
 80053b4:	461a      	mov	r2, r3
 80053b6:	4623      	mov	r3, r4
 80053b8:	f7fb fbf6 	bl	8000ba8 <__aeabi_uldivmod>
 80053bc:	4603      	mov	r3, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	461a      	mov	r2, r3
 80053c2:	4b47      	ldr	r3, [pc, #284]	; (80054e0 <UART_SetConfig+0x384>)
 80053c4:	fba3 2302 	umull	r2, r3, r3, r2
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	461d      	mov	r5, r3
 80053d2:	f04f 0600 	mov.w	r6, #0
 80053d6:	46a9      	mov	r9, r5
 80053d8:	46b2      	mov	sl, r6
 80053da:	eb19 0309 	adds.w	r3, r9, r9
 80053de:	eb4a 040a 	adc.w	r4, sl, sl
 80053e2:	4699      	mov	r9, r3
 80053e4:	46a2      	mov	sl, r4
 80053e6:	eb19 0905 	adds.w	r9, r9, r5
 80053ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80053ee:	f04f 0100 	mov.w	r1, #0
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005402:	4689      	mov	r9, r1
 8005404:	4692      	mov	sl, r2
 8005406:	eb19 0005 	adds.w	r0, r9, r5
 800540a:	eb4a 0106 	adc.w	r1, sl, r6
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	461d      	mov	r5, r3
 8005414:	f04f 0600 	mov.w	r6, #0
 8005418:	196b      	adds	r3, r5, r5
 800541a:	eb46 0406 	adc.w	r4, r6, r6
 800541e:	461a      	mov	r2, r3
 8005420:	4623      	mov	r3, r4
 8005422:	f7fb fbc1 	bl	8000ba8 <__aeabi_uldivmod>
 8005426:	4603      	mov	r3, r0
 8005428:	460c      	mov	r4, r1
 800542a:	461a      	mov	r2, r3
 800542c:	4b2c      	ldr	r3, [pc, #176]	; (80054e0 <UART_SetConfig+0x384>)
 800542e:	fba3 1302 	umull	r1, r3, r3, r2
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	2164      	movs	r1, #100	; 0x64
 8005436:	fb01 f303 	mul.w	r3, r1, r3
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	3332      	adds	r3, #50	; 0x32
 8005440:	4a27      	ldr	r2, [pc, #156]	; (80054e0 <UART_SetConfig+0x384>)
 8005442:	fba2 2303 	umull	r2, r3, r2, r3
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800544e:	4498      	add	r8, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	461d      	mov	r5, r3
 8005454:	f04f 0600 	mov.w	r6, #0
 8005458:	46a9      	mov	r9, r5
 800545a:	46b2      	mov	sl, r6
 800545c:	eb19 0309 	adds.w	r3, r9, r9
 8005460:	eb4a 040a 	adc.w	r4, sl, sl
 8005464:	4699      	mov	r9, r3
 8005466:	46a2      	mov	sl, r4
 8005468:	eb19 0905 	adds.w	r9, r9, r5
 800546c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005470:	f04f 0100 	mov.w	r1, #0
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800547c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005480:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005484:	4689      	mov	r9, r1
 8005486:	4692      	mov	sl, r2
 8005488:	eb19 0005 	adds.w	r0, r9, r5
 800548c:	eb4a 0106 	adc.w	r1, sl, r6
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	461d      	mov	r5, r3
 8005496:	f04f 0600 	mov.w	r6, #0
 800549a:	196b      	adds	r3, r5, r5
 800549c:	eb46 0406 	adc.w	r4, r6, r6
 80054a0:	461a      	mov	r2, r3
 80054a2:	4623      	mov	r3, r4
 80054a4:	f7fb fb80 	bl	8000ba8 <__aeabi_uldivmod>
 80054a8:	4603      	mov	r3, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	461a      	mov	r2, r3
 80054ae:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <UART_SetConfig+0x384>)
 80054b0:	fba3 1302 	umull	r1, r3, r3, r2
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	2164      	movs	r1, #100	; 0x64
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	3332      	adds	r3, #50	; 0x32
 80054c2:	4a07      	ldr	r2, [pc, #28]	; (80054e0 <UART_SetConfig+0x384>)
 80054c4:	fba2 2303 	umull	r2, r3, r2, r3
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	f003 0207 	and.w	r2, r3, #7
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4442      	add	r2, r8
 80054d4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80054d6:	e1b2      	b.n	800583e <UART_SetConfig+0x6e2>
 80054d8:	40011000 	.word	0x40011000
 80054dc:	40011400 	.word	0x40011400
 80054e0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4ad7      	ldr	r2, [pc, #860]	; (8005848 <UART_SetConfig+0x6ec>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d005      	beq.n	80054fa <UART_SetConfig+0x39e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4ad6      	ldr	r2, [pc, #856]	; (800584c <UART_SetConfig+0x6f0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	f040 80d1 	bne.w	800569c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80054fa:	f7ff f877 	bl	80045ec <HAL_RCC_GetPCLK2Freq>
 80054fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	469a      	mov	sl, r3
 8005504:	f04f 0b00 	mov.w	fp, #0
 8005508:	46d0      	mov	r8, sl
 800550a:	46d9      	mov	r9, fp
 800550c:	eb18 0308 	adds.w	r3, r8, r8
 8005510:	eb49 0409 	adc.w	r4, r9, r9
 8005514:	4698      	mov	r8, r3
 8005516:	46a1      	mov	r9, r4
 8005518:	eb18 080a 	adds.w	r8, r8, sl
 800551c:	eb49 090b 	adc.w	r9, r9, fp
 8005520:	f04f 0100 	mov.w	r1, #0
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800552c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005530:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005534:	4688      	mov	r8, r1
 8005536:	4691      	mov	r9, r2
 8005538:	eb1a 0508 	adds.w	r5, sl, r8
 800553c:	eb4b 0609 	adc.w	r6, fp, r9
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4619      	mov	r1, r3
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	f04f 0400 	mov.w	r4, #0
 8005552:	0094      	lsls	r4, r2, #2
 8005554:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005558:	008b      	lsls	r3, r1, #2
 800555a:	461a      	mov	r2, r3
 800555c:	4623      	mov	r3, r4
 800555e:	4628      	mov	r0, r5
 8005560:	4631      	mov	r1, r6
 8005562:	f7fb fb21 	bl	8000ba8 <__aeabi_uldivmod>
 8005566:	4603      	mov	r3, r0
 8005568:	460c      	mov	r4, r1
 800556a:	461a      	mov	r2, r3
 800556c:	4bb8      	ldr	r3, [pc, #736]	; (8005850 <UART_SetConfig+0x6f4>)
 800556e:	fba3 2302 	umull	r2, r3, r3, r2
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	469b      	mov	fp, r3
 800557c:	f04f 0c00 	mov.w	ip, #0
 8005580:	46d9      	mov	r9, fp
 8005582:	46e2      	mov	sl, ip
 8005584:	eb19 0309 	adds.w	r3, r9, r9
 8005588:	eb4a 040a 	adc.w	r4, sl, sl
 800558c:	4699      	mov	r9, r3
 800558e:	46a2      	mov	sl, r4
 8005590:	eb19 090b 	adds.w	r9, r9, fp
 8005594:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005598:	f04f 0100 	mov.w	r1, #0
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055ac:	4689      	mov	r9, r1
 80055ae:	4692      	mov	sl, r2
 80055b0:	eb1b 0509 	adds.w	r5, fp, r9
 80055b4:	eb4c 060a 	adc.w	r6, ip, sl
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	4619      	mov	r1, r3
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	f04f 0400 	mov.w	r4, #0
 80055ca:	0094      	lsls	r4, r2, #2
 80055cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055d0:	008b      	lsls	r3, r1, #2
 80055d2:	461a      	mov	r2, r3
 80055d4:	4623      	mov	r3, r4
 80055d6:	4628      	mov	r0, r5
 80055d8:	4631      	mov	r1, r6
 80055da:	f7fb fae5 	bl	8000ba8 <__aeabi_uldivmod>
 80055de:	4603      	mov	r3, r0
 80055e0:	460c      	mov	r4, r1
 80055e2:	461a      	mov	r2, r3
 80055e4:	4b9a      	ldr	r3, [pc, #616]	; (8005850 <UART_SetConfig+0x6f4>)
 80055e6:	fba3 1302 	umull	r1, r3, r3, r2
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	2164      	movs	r1, #100	; 0x64
 80055ee:	fb01 f303 	mul.w	r3, r1, r3
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	3332      	adds	r3, #50	; 0x32
 80055f8:	4a95      	ldr	r2, [pc, #596]	; (8005850 <UART_SetConfig+0x6f4>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005604:	4498      	add	r8, r3
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	469b      	mov	fp, r3
 800560a:	f04f 0c00 	mov.w	ip, #0
 800560e:	46d9      	mov	r9, fp
 8005610:	46e2      	mov	sl, ip
 8005612:	eb19 0309 	adds.w	r3, r9, r9
 8005616:	eb4a 040a 	adc.w	r4, sl, sl
 800561a:	4699      	mov	r9, r3
 800561c:	46a2      	mov	sl, r4
 800561e:	eb19 090b 	adds.w	r9, r9, fp
 8005622:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005626:	f04f 0100 	mov.w	r1, #0
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005632:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005636:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800563a:	4689      	mov	r9, r1
 800563c:	4692      	mov	sl, r2
 800563e:	eb1b 0509 	adds.w	r5, fp, r9
 8005642:	eb4c 060a 	adc.w	r6, ip, sl
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	4619      	mov	r1, r3
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	f04f 0400 	mov.w	r4, #0
 8005658:	0094      	lsls	r4, r2, #2
 800565a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800565e:	008b      	lsls	r3, r1, #2
 8005660:	461a      	mov	r2, r3
 8005662:	4623      	mov	r3, r4
 8005664:	4628      	mov	r0, r5
 8005666:	4631      	mov	r1, r6
 8005668:	f7fb fa9e 	bl	8000ba8 <__aeabi_uldivmod>
 800566c:	4603      	mov	r3, r0
 800566e:	460c      	mov	r4, r1
 8005670:	461a      	mov	r2, r3
 8005672:	4b77      	ldr	r3, [pc, #476]	; (8005850 <UART_SetConfig+0x6f4>)
 8005674:	fba3 1302 	umull	r1, r3, r3, r2
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	2164      	movs	r1, #100	; 0x64
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	3332      	adds	r3, #50	; 0x32
 8005686:	4a72      	ldr	r2, [pc, #456]	; (8005850 <UART_SetConfig+0x6f4>)
 8005688:	fba2 2303 	umull	r2, r3, r2, r3
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	f003 020f 	and.w	r2, r3, #15
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4442      	add	r2, r8
 8005698:	609a      	str	r2, [r3, #8]
 800569a:	e0d0      	b.n	800583e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800569c:	f7fe ff92 	bl	80045c4 <HAL_RCC_GetPCLK1Freq>
 80056a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	469a      	mov	sl, r3
 80056a6:	f04f 0b00 	mov.w	fp, #0
 80056aa:	46d0      	mov	r8, sl
 80056ac:	46d9      	mov	r9, fp
 80056ae:	eb18 0308 	adds.w	r3, r8, r8
 80056b2:	eb49 0409 	adc.w	r4, r9, r9
 80056b6:	4698      	mov	r8, r3
 80056b8:	46a1      	mov	r9, r4
 80056ba:	eb18 080a 	adds.w	r8, r8, sl
 80056be:	eb49 090b 	adc.w	r9, r9, fp
 80056c2:	f04f 0100 	mov.w	r1, #0
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056d6:	4688      	mov	r8, r1
 80056d8:	4691      	mov	r9, r2
 80056da:	eb1a 0508 	adds.w	r5, sl, r8
 80056de:	eb4b 0609 	adc.w	r6, fp, r9
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	4619      	mov	r1, r3
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	f04f 0400 	mov.w	r4, #0
 80056f4:	0094      	lsls	r4, r2, #2
 80056f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056fa:	008b      	lsls	r3, r1, #2
 80056fc:	461a      	mov	r2, r3
 80056fe:	4623      	mov	r3, r4
 8005700:	4628      	mov	r0, r5
 8005702:	4631      	mov	r1, r6
 8005704:	f7fb fa50 	bl	8000ba8 <__aeabi_uldivmod>
 8005708:	4603      	mov	r3, r0
 800570a:	460c      	mov	r4, r1
 800570c:	461a      	mov	r2, r3
 800570e:	4b50      	ldr	r3, [pc, #320]	; (8005850 <UART_SetConfig+0x6f4>)
 8005710:	fba3 2302 	umull	r2, r3, r3, r2
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	469b      	mov	fp, r3
 800571e:	f04f 0c00 	mov.w	ip, #0
 8005722:	46d9      	mov	r9, fp
 8005724:	46e2      	mov	sl, ip
 8005726:	eb19 0309 	adds.w	r3, r9, r9
 800572a:	eb4a 040a 	adc.w	r4, sl, sl
 800572e:	4699      	mov	r9, r3
 8005730:	46a2      	mov	sl, r4
 8005732:	eb19 090b 	adds.w	r9, r9, fp
 8005736:	eb4a 0a0c 	adc.w	sl, sl, ip
 800573a:	f04f 0100 	mov.w	r1, #0
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005746:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800574a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800574e:	4689      	mov	r9, r1
 8005750:	4692      	mov	sl, r2
 8005752:	eb1b 0509 	adds.w	r5, fp, r9
 8005756:	eb4c 060a 	adc.w	r6, ip, sl
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	4619      	mov	r1, r3
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	f04f 0400 	mov.w	r4, #0
 800576c:	0094      	lsls	r4, r2, #2
 800576e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005772:	008b      	lsls	r3, r1, #2
 8005774:	461a      	mov	r2, r3
 8005776:	4623      	mov	r3, r4
 8005778:	4628      	mov	r0, r5
 800577a:	4631      	mov	r1, r6
 800577c:	f7fb fa14 	bl	8000ba8 <__aeabi_uldivmod>
 8005780:	4603      	mov	r3, r0
 8005782:	460c      	mov	r4, r1
 8005784:	461a      	mov	r2, r3
 8005786:	4b32      	ldr	r3, [pc, #200]	; (8005850 <UART_SetConfig+0x6f4>)
 8005788:	fba3 1302 	umull	r1, r3, r3, r2
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	2164      	movs	r1, #100	; 0x64
 8005790:	fb01 f303 	mul.w	r3, r1, r3
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	3332      	adds	r3, #50	; 0x32
 800579a:	4a2d      	ldr	r2, [pc, #180]	; (8005850 <UART_SetConfig+0x6f4>)
 800579c:	fba2 2303 	umull	r2, r3, r2, r3
 80057a0:	095b      	lsrs	r3, r3, #5
 80057a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057a6:	4498      	add	r8, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	469b      	mov	fp, r3
 80057ac:	f04f 0c00 	mov.w	ip, #0
 80057b0:	46d9      	mov	r9, fp
 80057b2:	46e2      	mov	sl, ip
 80057b4:	eb19 0309 	adds.w	r3, r9, r9
 80057b8:	eb4a 040a 	adc.w	r4, sl, sl
 80057bc:	4699      	mov	r9, r3
 80057be:	46a2      	mov	sl, r4
 80057c0:	eb19 090b 	adds.w	r9, r9, fp
 80057c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057c8:	f04f 0100 	mov.w	r1, #0
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057dc:	4689      	mov	r9, r1
 80057de:	4692      	mov	sl, r2
 80057e0:	eb1b 0509 	adds.w	r5, fp, r9
 80057e4:	eb4c 060a 	adc.w	r6, ip, sl
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	4619      	mov	r1, r3
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	f04f 0400 	mov.w	r4, #0
 80057fa:	0094      	lsls	r4, r2, #2
 80057fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005800:	008b      	lsls	r3, r1, #2
 8005802:	461a      	mov	r2, r3
 8005804:	4623      	mov	r3, r4
 8005806:	4628      	mov	r0, r5
 8005808:	4631      	mov	r1, r6
 800580a:	f7fb f9cd 	bl	8000ba8 <__aeabi_uldivmod>
 800580e:	4603      	mov	r3, r0
 8005810:	460c      	mov	r4, r1
 8005812:	461a      	mov	r2, r3
 8005814:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <UART_SetConfig+0x6f4>)
 8005816:	fba3 1302 	umull	r1, r3, r3, r2
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	2164      	movs	r1, #100	; 0x64
 800581e:	fb01 f303 	mul.w	r3, r1, r3
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	3332      	adds	r3, #50	; 0x32
 8005828:	4a09      	ldr	r2, [pc, #36]	; (8005850 <UART_SetConfig+0x6f4>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	f003 020f 	and.w	r2, r3, #15
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4442      	add	r2, r8
 800583a:	609a      	str	r2, [r3, #8]
}
 800583c:	e7ff      	b.n	800583e <UART_SetConfig+0x6e2>
 800583e:	bf00      	nop
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005848:	40011000 	.word	0x40011000
 800584c:	40011400 	.word	0x40011400
 8005850:	51eb851f 	.word	0x51eb851f

08005854 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005854:	b084      	sub	sp, #16
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	f107 001c 	add.w	r0, r7, #28
 8005862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	2b01      	cmp	r3, #1
 800586a:	d122      	bne.n	80058b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005896:	2b01      	cmp	r3, #1
 8005898:	d105      	bne.n	80058a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f001 fac6 	bl	8006e38 <USB_CoreReset>
 80058ac:	4603      	mov	r3, r0
 80058ae:	73fb      	strb	r3, [r7, #15]
 80058b0:	e01a      	b.n	80058e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f001 faba 	bl	8006e38 <USB_CoreReset>
 80058c4:	4603      	mov	r3, r0
 80058c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	639a      	str	r2, [r3, #56]	; 0x38
 80058da:	e005      	b.n	80058e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d10b      	bne.n	8005906 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f043 0206 	orr.w	r2, r3, #6
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f043 0220 	orr.w	r2, r3, #32
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005912:	b004      	add	sp, #16
 8005914:	4770      	bx	lr
	...

08005918 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	4613      	mov	r3, r2
 8005924:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005926:	79fb      	ldrb	r3, [r7, #7]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d165      	bne.n	80059f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4a41      	ldr	r2, [pc, #260]	; (8005a34 <USB_SetTurnaroundTime+0x11c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d906      	bls.n	8005942 <USB_SetTurnaroundTime+0x2a>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4a40      	ldr	r2, [pc, #256]	; (8005a38 <USB_SetTurnaroundTime+0x120>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d802      	bhi.n	8005942 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800593c:	230f      	movs	r3, #15
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	e062      	b.n	8005a08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	4a3c      	ldr	r2, [pc, #240]	; (8005a38 <USB_SetTurnaroundTime+0x120>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d906      	bls.n	8005958 <USB_SetTurnaroundTime+0x40>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	4a3b      	ldr	r2, [pc, #236]	; (8005a3c <USB_SetTurnaroundTime+0x124>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d802      	bhi.n	8005958 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005952:	230e      	movs	r3, #14
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	e057      	b.n	8005a08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	4a38      	ldr	r2, [pc, #224]	; (8005a3c <USB_SetTurnaroundTime+0x124>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d906      	bls.n	800596e <USB_SetTurnaroundTime+0x56>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4a37      	ldr	r2, [pc, #220]	; (8005a40 <USB_SetTurnaroundTime+0x128>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d802      	bhi.n	800596e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005968:	230d      	movs	r3, #13
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	e04c      	b.n	8005a08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	4a33      	ldr	r2, [pc, #204]	; (8005a40 <USB_SetTurnaroundTime+0x128>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d906      	bls.n	8005984 <USB_SetTurnaroundTime+0x6c>
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	4a32      	ldr	r2, [pc, #200]	; (8005a44 <USB_SetTurnaroundTime+0x12c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d802      	bhi.n	8005984 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800597e:	230c      	movs	r3, #12
 8005980:	617b      	str	r3, [r7, #20]
 8005982:	e041      	b.n	8005a08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4a2f      	ldr	r2, [pc, #188]	; (8005a44 <USB_SetTurnaroundTime+0x12c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d906      	bls.n	800599a <USB_SetTurnaroundTime+0x82>
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	4a2e      	ldr	r2, [pc, #184]	; (8005a48 <USB_SetTurnaroundTime+0x130>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d802      	bhi.n	800599a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005994:	230b      	movs	r3, #11
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	e036      	b.n	8005a08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	4a2a      	ldr	r2, [pc, #168]	; (8005a48 <USB_SetTurnaroundTime+0x130>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d906      	bls.n	80059b0 <USB_SetTurnaroundTime+0x98>
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	4a29      	ldr	r2, [pc, #164]	; (8005a4c <USB_SetTurnaroundTime+0x134>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d802      	bhi.n	80059b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80059aa:	230a      	movs	r3, #10
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	e02b      	b.n	8005a08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4a26      	ldr	r2, [pc, #152]	; (8005a4c <USB_SetTurnaroundTime+0x134>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d906      	bls.n	80059c6 <USB_SetTurnaroundTime+0xae>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4a25      	ldr	r2, [pc, #148]	; (8005a50 <USB_SetTurnaroundTime+0x138>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d802      	bhi.n	80059c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80059c0:	2309      	movs	r3, #9
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	e020      	b.n	8005a08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	4a21      	ldr	r2, [pc, #132]	; (8005a50 <USB_SetTurnaroundTime+0x138>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d906      	bls.n	80059dc <USB_SetTurnaroundTime+0xc4>
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	4a20      	ldr	r2, [pc, #128]	; (8005a54 <USB_SetTurnaroundTime+0x13c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d802      	bhi.n	80059dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80059d6:	2308      	movs	r3, #8
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	e015      	b.n	8005a08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4a1d      	ldr	r2, [pc, #116]	; (8005a54 <USB_SetTurnaroundTime+0x13c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d906      	bls.n	80059f2 <USB_SetTurnaroundTime+0xda>
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <USB_SetTurnaroundTime+0x140>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d802      	bhi.n	80059f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80059ec:	2307      	movs	r3, #7
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	e00a      	b.n	8005a08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80059f2:	2306      	movs	r3, #6
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	e007      	b.n	8005a08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d102      	bne.n	8005a04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80059fe:	2309      	movs	r3, #9
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	e001      	b.n	8005a08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005a04:	2309      	movs	r3, #9
 8005a06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	029b      	lsls	r3, r3, #10
 8005a1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005a20:	431a      	orrs	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	371c      	adds	r7, #28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	00d8acbf 	.word	0x00d8acbf
 8005a38:	00e4e1bf 	.word	0x00e4e1bf
 8005a3c:	00f423ff 	.word	0x00f423ff
 8005a40:	0106737f 	.word	0x0106737f
 8005a44:	011a499f 	.word	0x011a499f
 8005a48:	01312cff 	.word	0x01312cff
 8005a4c:	014ca43f 	.word	0x014ca43f
 8005a50:	016e35ff 	.word	0x016e35ff
 8005a54:	01a6ab1f 	.word	0x01a6ab1f
 8005a58:	01e847ff 	.word	0x01e847ff

08005a5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f043 0201 	orr.w	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f023 0201 	bic.w	r2, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d106      	bne.n	8005acc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60da      	str	r2, [r3, #12]
 8005aca:	e00b      	b.n	8005ae4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d106      	bne.n	8005ae0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	60da      	str	r2, [r3, #12]
 8005ade:	e001      	b.n	8005ae4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e003      	b.n	8005aec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005ae4:	2032      	movs	r0, #50	; 0x32
 8005ae6:	f7fb ffd9 	bl	8001a9c <HAL_Delay>

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005af4:	b084      	sub	sp, #16
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b086      	sub	sp, #24
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b0e:	2300      	movs	r3, #0
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	e009      	b.n	8005b28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	3340      	adds	r3, #64	; 0x40
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	2200      	movs	r2, #0
 8005b20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	3301      	adds	r3, #1
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	2b0e      	cmp	r3, #14
 8005b2c:	d9f2      	bls.n	8005b14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d11c      	bne.n	8005b6e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b42:	f043 0302 	orr.w	r3, r3, #2
 8005b46:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b58:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38
 8005b6c:	e00b      	b.n	8005b86 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b98:	4619      	mov	r1, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	680b      	ldr	r3, [r1, #0]
 8005ba4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d10c      	bne.n	8005bc6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d104      	bne.n	8005bbc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f949 	bl	8005e4c <USB_SetDevSpeed>
 8005bba:	e008      	b.n	8005bce <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f944 	bl	8005e4c <USB_SetDevSpeed>
 8005bc4:	e003      	b.n	8005bce <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bc6:	2103      	movs	r1, #3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f93f 	bl	8005e4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bce:	2110      	movs	r1, #16
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f8f3 	bl	8005dbc <USB_FlushTxFifo>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f911 	bl	8005e08 <USB_FlushRxFifo>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c02:	461a      	mov	r2, r3
 8005c04:	2300      	movs	r3, #0
 8005c06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2300      	movs	r3, #0
 8005c12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c14:	2300      	movs	r3, #0
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	e043      	b.n	8005ca2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c30:	d118      	bne.n	8005c64 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c44:	461a      	mov	r2, r3
 8005c46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	e013      	b.n	8005c76 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	e008      	b.n	8005c76 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c70:	461a      	mov	r2, r3
 8005c72:	2300      	movs	r3, #0
 8005c74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	461a      	mov	r2, r3
 8005c84:	2300      	movs	r3, #0
 8005c86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c94:	461a      	mov	r2, r3
 8005c96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d3b7      	bcc.n	8005c1a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005caa:	2300      	movs	r3, #0
 8005cac:	613b      	str	r3, [r7, #16]
 8005cae:	e043      	b.n	8005d38 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cc6:	d118      	bne.n	8005cfa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	e013      	b.n	8005d0c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	e008      	b.n	8005d0c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d06:	461a      	mov	r2, r3
 8005d08:	2300      	movs	r3, #0
 8005d0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d18:	461a      	mov	r2, r3
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	3301      	adds	r3, #1
 8005d36:	613b      	str	r3, [r7, #16]
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d3b7      	bcc.n	8005cb0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d105      	bne.n	8005d74 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	f043 0210 	orr.w	r2, r3, #16
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699a      	ldr	r2, [r3, #24]
 8005d78:	4b0f      	ldr	r3, [pc, #60]	; (8005db8 <USB_DevInit+0x2c4>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	f043 0208 	orr.w	r2, r3, #8
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d107      	bne.n	8005da8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005da0:	f043 0304 	orr.w	r3, r3, #4
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005db4:	b004      	add	sp, #16
 8005db6:	4770      	bx	lr
 8005db8:	803c3800 	.word	0x803c3800

08005dbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	019b      	lsls	r3, r3, #6
 8005dce:	f043 0220 	orr.w	r2, r3, #32
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4a09      	ldr	r2, [pc, #36]	; (8005e04 <USB_FlushTxFifo+0x48>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d901      	bls.n	8005de8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e006      	b.n	8005df6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f003 0320 	and.w	r3, r3, #32
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d0f0      	beq.n	8005dd6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	00030d40 	.word	0x00030d40

08005e08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2210      	movs	r2, #16
 8005e18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4a09      	ldr	r2, [pc, #36]	; (8005e48 <USB_FlushRxFifo+0x40>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d901      	bls.n	8005e2c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e006      	b.n	8005e3a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f003 0310 	and.w	r3, r3, #16
 8005e34:	2b10      	cmp	r3, #16
 8005e36:	d0f0      	beq.n	8005e1a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	00030d40 	.word	0x00030d40

08005e4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	460b      	mov	r3, r1
 8005e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b087      	sub	sp, #28
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 0306 	and.w	r3, r3, #6
 8005e96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d102      	bne.n	8005ea4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	75fb      	strb	r3, [r7, #23]
 8005ea2:	e00a      	b.n	8005eba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d002      	beq.n	8005eb0 <USB_GetDevSpeed+0x32>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b06      	cmp	r3, #6
 8005eae:	d102      	bne.n	8005eb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	75fb      	strb	r3, [r7, #23]
 8005eb4:	e001      	b.n	8005eba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005eb6:	230f      	movs	r3, #15
 8005eb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	785b      	ldrb	r3, [r3, #1]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d13a      	bne.n	8005f5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eea:	69da      	ldr	r2, [r3, #28]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	68f9      	ldr	r1, [r7, #12]
 8005efe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d155      	bne.n	8005fc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	78db      	ldrb	r3, [r3, #3]
 8005f36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	059b      	lsls	r3, r3, #22
 8005f3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f40:	4313      	orrs	r3, r2
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	e036      	b.n	8005fc8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f60:	69da      	ldr	r2, [r3, #28]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f70:	041b      	lsls	r3, r3, #16
 8005f72:	68f9      	ldr	r1, [r7, #12]
 8005f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d11a      	bne.n	8005fc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	78db      	ldrb	r3, [r3, #3]
 8005fac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fae:	430b      	orrs	r3, r1
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
	...

08005fd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	785b      	ldrb	r3, [r3, #1]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d161      	bne.n	80060b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800600a:	d11f      	bne.n	800604c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	440a      	add	r2, r1
 8006022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006026:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800602a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	440a      	add	r2, r1
 8006042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006046:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800604a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	2101      	movs	r1, #1
 800605e:	fa01 f303 	lsl.w	r3, r1, r3
 8006062:	b29b      	uxth	r3, r3
 8006064:	43db      	mvns	r3, r3
 8006066:	68f9      	ldr	r1, [r7, #12]
 8006068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800606c:	4013      	ands	r3, r2
 800606e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	f003 030f 	and.w	r3, r3, #15
 8006080:	2101      	movs	r1, #1
 8006082:	fa01 f303 	lsl.w	r3, r1, r3
 8006086:	b29b      	uxth	r3, r3
 8006088:	43db      	mvns	r3, r3
 800608a:	68f9      	ldr	r1, [r7, #12]
 800608c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006090:	4013      	ands	r3, r2
 8006092:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	0159      	lsls	r1, r3, #5
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	440b      	add	r3, r1
 80060aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ae:	4619      	mov	r1, r3
 80060b0:	4b35      	ldr	r3, [pc, #212]	; (8006188 <USB_DeactivateEndpoint+0x1b0>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	600b      	str	r3, [r1, #0]
 80060b6:	e060      	b.n	800617a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060ce:	d11f      	bne.n	8006110 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	0151      	lsls	r1, r2, #5
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	440a      	add	r2, r1
 8006106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800610a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800610e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	2101      	movs	r1, #1
 8006122:	fa01 f303 	lsl.w	r3, r1, r3
 8006126:	041b      	lsls	r3, r3, #16
 8006128:	43db      	mvns	r3, r3
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006130:	4013      	ands	r3, r2
 8006132:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613a:	69da      	ldr	r2, [r3, #28]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	f003 030f 	and.w	r3, r3, #15
 8006144:	2101      	movs	r1, #1
 8006146:	fa01 f303 	lsl.w	r3, r1, r3
 800614a:	041b      	lsls	r3, r3, #16
 800614c:	43db      	mvns	r3, r3
 800614e:	68f9      	ldr	r1, [r7, #12]
 8006150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006154:	4013      	ands	r3, r2
 8006156:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	0159      	lsls	r1, r3, #5
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	440b      	add	r3, r1
 800616e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006172:	4619      	mov	r1, r3
 8006174:	4b05      	ldr	r3, [pc, #20]	; (800618c <USB_DeactivateEndpoint+0x1b4>)
 8006176:	4013      	ands	r3, r2
 8006178:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	ec337800 	.word	0xec337800
 800618c:	eff37800 	.word	0xeff37800

08006190 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	; 0x28
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	f040 815c 	bne.w	800646a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d132      	bne.n	8006220 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	0151      	lsls	r1, r2, #5
 8006210:	69fa      	ldr	r2, [r7, #28]
 8006212:	440a      	add	r2, r1
 8006214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006218:	0cdb      	lsrs	r3, r3, #19
 800621a:	04db      	lsls	r3, r3, #19
 800621c:	6113      	str	r3, [r2, #16]
 800621e:	e074      	b.n	800630a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	440a      	add	r2, r1
 8006236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623a:	0cdb      	lsrs	r3, r3, #19
 800623c:	04db      	lsls	r3, r3, #19
 800623e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	0151      	lsls	r1, r2, #5
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	440a      	add	r2, r1
 8006256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800625a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800625e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006262:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006270:	691a      	ldr	r2, [r3, #16]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6959      	ldr	r1, [r3, #20]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	440b      	add	r3, r1
 800627c:	1e59      	subs	r1, r3, #1
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	fbb1 f3f3 	udiv	r3, r1, r3
 8006286:	04d9      	lsls	r1, r3, #19
 8006288:	4b9d      	ldr	r3, [pc, #628]	; (8006500 <USB_EPStartXfer+0x370>)
 800628a:	400b      	ands	r3, r1
 800628c:	69b9      	ldr	r1, [r7, #24]
 800628e:	0148      	lsls	r0, r1, #5
 8006290:	69f9      	ldr	r1, [r7, #28]
 8006292:	4401      	add	r1, r0
 8006294:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006298:	4313      	orrs	r3, r2
 800629a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062b2:	69b9      	ldr	r1, [r7, #24]
 80062b4:	0148      	lsls	r0, r1, #5
 80062b6:	69f9      	ldr	r1, [r7, #28]
 80062b8:	4401      	add	r1, r0
 80062ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062be:	4313      	orrs	r3, r2
 80062c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	78db      	ldrb	r3, [r3, #3]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d11f      	bne.n	800630a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	0151      	lsls	r1, r2, #5
 80062dc:	69fa      	ldr	r2, [r7, #28]
 80062de:	440a      	add	r2, r1
 80062e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80062e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	0151      	lsls	r1, r2, #5
 80062fc:	69fa      	ldr	r2, [r7, #28]
 80062fe:	440a      	add	r2, r1
 8006300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006304:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006308:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d14b      	bne.n	80063a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d009      	beq.n	800632c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006324:	461a      	mov	r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	78db      	ldrb	r3, [r3, #3]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d128      	bne.n	8006386 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006340:	2b00      	cmp	r3, #0
 8006342:	d110      	bne.n	8006366 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	e00f      	b.n	8006386 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	0151      	lsls	r1, r2, #5
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	440a      	add	r2, r1
 800637c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006384:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	0151      	lsls	r1, r2, #5
 8006398:	69fa      	ldr	r2, [r7, #28]
 800639a:	440a      	add	r2, r1
 800639c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	e12f      	b.n	8006608 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	78db      	ldrb	r3, [r3, #3]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d015      	beq.n	80063fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 8117 	beq.w	8006608 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	2101      	movs	r1, #1
 80063ec:	fa01 f303 	lsl.w	r3, r1, r3
 80063f0:	69f9      	ldr	r1, [r7, #28]
 80063f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063f6:	4313      	orrs	r3, r2
 80063f8:	634b      	str	r3, [r1, #52]	; 0x34
 80063fa:	e105      	b.n	8006608 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006408:	2b00      	cmp	r3, #0
 800640a:	d110      	bne.n	800642e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	0151      	lsls	r1, r2, #5
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	440a      	add	r2, r1
 8006422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006426:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	e00f      	b.n	800644e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	440a      	add	r2, r1
 8006444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800644c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	68d9      	ldr	r1, [r3, #12]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	781a      	ldrb	r2, [r3, #0]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	b298      	uxth	r0, r3
 800645c:	79fb      	ldrb	r3, [r7, #7]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	4603      	mov	r3, r0
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fa2b 	bl	80068be <USB_WritePacket>
 8006468:	e0ce      	b.n	8006608 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	0151      	lsls	r1, r2, #5
 800647c:	69fa      	ldr	r2, [r7, #28]
 800647e:	440a      	add	r2, r1
 8006480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006484:	0cdb      	lsrs	r3, r3, #19
 8006486:	04db      	lsls	r3, r3, #19
 8006488:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d126      	bne.n	8006504 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064cc:	69b9      	ldr	r1, [r7, #24]
 80064ce:	0148      	lsls	r0, r1, #5
 80064d0:	69f9      	ldr	r1, [r7, #28]
 80064d2:	4401      	add	r1, r0
 80064d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064d8:	4313      	orrs	r3, r2
 80064da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	0151      	lsls	r1, r2, #5
 80064ee:	69fa      	ldr	r2, [r7, #28]
 80064f0:	440a      	add	r2, r1
 80064f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064fa:	6113      	str	r3, [r2, #16]
 80064fc:	e036      	b.n	800656c <USB_EPStartXfer+0x3dc>
 80064fe:	bf00      	nop
 8006500:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	695a      	ldr	r2, [r3, #20]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	4413      	add	r3, r2
 800650e:	1e5a      	subs	r2, r3, #1
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	fbb2 f3f3 	udiv	r3, r2, r3
 8006518:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	8afb      	ldrh	r3, [r7, #22]
 800652a:	04d9      	lsls	r1, r3, #19
 800652c:	4b39      	ldr	r3, [pc, #228]	; (8006614 <USB_EPStartXfer+0x484>)
 800652e:	400b      	ands	r3, r1
 8006530:	69b9      	ldr	r1, [r7, #24]
 8006532:	0148      	lsls	r0, r1, #5
 8006534:	69f9      	ldr	r1, [r7, #28]
 8006536:	4401      	add	r1, r0
 8006538:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800653c:	4313      	orrs	r3, r2
 800653e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654c:	691a      	ldr	r2, [r3, #16]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	8af9      	ldrh	r1, [r7, #22]
 8006554:	fb01 f303 	mul.w	r3, r1, r3
 8006558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800655c:	69b9      	ldr	r1, [r7, #24]
 800655e:	0148      	lsls	r0, r1, #5
 8006560:	69f9      	ldr	r1, [r7, #28]
 8006562:	4401      	add	r1, r0
 8006564:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006568:	4313      	orrs	r3, r2
 800656a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d10d      	bne.n	800658e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d009      	beq.n	800658e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	68d9      	ldr	r1, [r3, #12]
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658a:	460a      	mov	r2, r1
 800658c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	78db      	ldrb	r3, [r3, #3]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d128      	bne.n	80065e8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d110      	bne.n	80065c8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	0151      	lsls	r1, r2, #5
 80065b8:	69fa      	ldr	r2, [r7, #28]
 80065ba:	440a      	add	r2, r1
 80065bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065c4:	6013      	str	r3, [r2, #0]
 80065c6:	e00f      	b.n	80065e8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	0151      	lsls	r1, r2, #5
 80065da:	69fa      	ldr	r2, [r7, #28]
 80065dc:	440a      	add	r2, r1
 80065de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	0151      	lsls	r1, r2, #5
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	440a      	add	r2, r1
 80065fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006602:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006606:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3720      	adds	r7, #32
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	1ff80000 	.word	0x1ff80000

08006618 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006618:	b480      	push	{r7}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	4613      	mov	r3, r2
 8006624:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	785b      	ldrb	r3, [r3, #1]
 8006634:	2b01      	cmp	r3, #1
 8006636:	f040 80cd 	bne.w	80067d4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d132      	bne.n	80066a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	440a      	add	r2, r1
 8006658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006660:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006664:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	440a      	add	r2, r1
 800667c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006680:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006684:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	440a      	add	r2, r1
 800669c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a0:	0cdb      	lsrs	r3, r3, #19
 80066a2:	04db      	lsls	r3, r3, #19
 80066a4:	6113      	str	r3, [r2, #16]
 80066a6:	e04e      	b.n	8006746 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c2:	0cdb      	lsrs	r3, r3, #19
 80066c4:	04db      	lsls	r3, r3, #19
 80066c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	0151      	lsls	r1, r2, #5
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	440a      	add	r2, r1
 80066de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	695a      	ldr	r2, [r3, #20]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d903      	bls.n	8006700 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	0151      	lsls	r1, r2, #5
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	440a      	add	r2, r1
 8006716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800671a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800671e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672c:	691a      	ldr	r2, [r3, #16]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006736:	6939      	ldr	r1, [r7, #16]
 8006738:	0148      	lsls	r0, r1, #5
 800673a:	6979      	ldr	r1, [r7, #20]
 800673c:	4401      	add	r1, r0
 800673e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006742:	4313      	orrs	r3, r2
 8006744:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006746:	79fb      	ldrb	r3, [r7, #7]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d11e      	bne.n	800678a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d009      	beq.n	8006768 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006760:	461a      	mov	r2, r3
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	0151      	lsls	r1, r2, #5
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	440a      	add	r2, r1
 800677e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006782:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	e092      	b.n	80068b0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	0151      	lsls	r1, r2, #5
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	440a      	add	r2, r1
 80067a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d07e      	beq.n	80068b0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	f003 030f 	and.w	r3, r3, #15
 80067c2:	2101      	movs	r1, #1
 80067c4:	fa01 f303 	lsl.w	r3, r1, r3
 80067c8:	6979      	ldr	r1, [r7, #20]
 80067ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067ce:	4313      	orrs	r3, r2
 80067d0:	634b      	str	r3, [r1, #52]	; 0x34
 80067d2:	e06d      	b.n	80068b0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	0151      	lsls	r1, r2, #5
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	440a      	add	r2, r1
 80067ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ee:	0cdb      	lsrs	r3, r3, #19
 80067f0:	04db      	lsls	r3, r3, #19
 80067f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	0151      	lsls	r1, r2, #5
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	440a      	add	r2, r1
 800680a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800680e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006812:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006816:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	0151      	lsls	r1, r2, #5
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	440a      	add	r2, r1
 800683e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006842:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006846:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	691a      	ldr	r2, [r3, #16]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800685e:	6939      	ldr	r1, [r7, #16]
 8006860:	0148      	lsls	r0, r1, #5
 8006862:	6979      	ldr	r1, [r7, #20]
 8006864:	4401      	add	r1, r0
 8006866:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800686a:	4313      	orrs	r3, r2
 800686c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800686e:	79fb      	ldrb	r3, [r7, #7]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d10d      	bne.n	8006890 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d009      	beq.n	8006890 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	68d9      	ldr	r1, [r3, #12]
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688c:	460a      	mov	r2, r1
 800688e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	0151      	lsls	r1, r2, #5
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	440a      	add	r2, r1
 80068a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80068be:	b480      	push	{r7}
 80068c0:	b089      	sub	sp, #36	; 0x24
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	60f8      	str	r0, [r7, #12]
 80068c6:	60b9      	str	r1, [r7, #8]
 80068c8:	4611      	mov	r1, r2
 80068ca:	461a      	mov	r2, r3
 80068cc:	460b      	mov	r3, r1
 80068ce:	71fb      	strb	r3, [r7, #7]
 80068d0:	4613      	mov	r3, r2
 80068d2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80068dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d11a      	bne.n	800691a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80068e4:	88bb      	ldrh	r3, [r7, #4]
 80068e6:	3303      	adds	r3, #3
 80068e8:	089b      	lsrs	r3, r3, #2
 80068ea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80068ec:	2300      	movs	r3, #0
 80068ee:	61bb      	str	r3, [r7, #24]
 80068f0:	e00f      	b.n	8006912 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068f2:	79fb      	ldrb	r3, [r7, #7]
 80068f4:	031a      	lsls	r2, r3, #12
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068fe:	461a      	mov	r2, r3
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	3304      	adds	r3, #4
 800690a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	3301      	adds	r3, #1
 8006910:	61bb      	str	r3, [r7, #24]
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	429a      	cmp	r2, r3
 8006918:	d3eb      	bcc.n	80068f2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3724      	adds	r7, #36	; 0x24
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006928:	b480      	push	{r7}
 800692a:	b089      	sub	sp, #36	; 0x24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	4613      	mov	r3, r2
 8006934:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800693e:	88fb      	ldrh	r3, [r7, #6]
 8006940:	3303      	adds	r3, #3
 8006942:	089b      	lsrs	r3, r3, #2
 8006944:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006946:	2300      	movs	r3, #0
 8006948:	61bb      	str	r3, [r7, #24]
 800694a:	e00b      	b.n	8006964 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	601a      	str	r2, [r3, #0]
    pDest++;
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	3304      	adds	r3, #4
 800695c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	3301      	adds	r3, #1
 8006962:	61bb      	str	r3, [r7, #24]
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	429a      	cmp	r2, r3
 800696a:	d3ef      	bcc.n	800694c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800696c:	69fb      	ldr	r3, [r7, #28]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3724      	adds	r7, #36	; 0x24
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800697a:	b480      	push	{r7}
 800697c:	b085      	sub	sp, #20
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	785b      	ldrb	r3, [r3, #1]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d12c      	bne.n	80069f0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	db12      	blt.n	80069ce <USB_EPSetStall+0x54>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00f      	beq.n	80069ce <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	0151      	lsls	r1, r2, #5
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	440a      	add	r2, r1
 80069c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069cc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	0151      	lsls	r1, r2, #5
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	440a      	add	r2, r1
 80069e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	e02b      	b.n	8006a48 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	db12      	blt.n	8006a28 <USB_EPSetStall+0xae>
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00f      	beq.n	8006a28 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	0151      	lsls	r1, r2, #5
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a26:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	0151      	lsls	r1, r2, #5
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	785b      	ldrb	r3, [r3, #1]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d128      	bne.n	8006ac4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	0151      	lsls	r1, r2, #5
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	440a      	add	r2, r1
 8006a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	78db      	ldrb	r3, [r3, #3]
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d003      	beq.n	8006aa2 <USB_EPClearStall+0x4c>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	78db      	ldrb	r3, [r3, #3]
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d138      	bne.n	8006b14 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	0151      	lsls	r1, r2, #5
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	440a      	add	r2, r1
 8006ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	e027      	b.n	8006b14 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	0151      	lsls	r1, r2, #5
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	440a      	add	r2, r1
 8006ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ade:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ae2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	78db      	ldrb	r3, [r3, #3]
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d003      	beq.n	8006af4 <USB_EPClearStall+0x9e>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	78db      	ldrb	r3, [r3, #3]
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d10f      	bne.n	8006b14 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	0151      	lsls	r1, r2, #5
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	440a      	add	r2, r1
 8006b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b12:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b085      	sub	sp, #20
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b40:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006b44:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	78fb      	ldrb	r3, [r7, #3]
 8006b50:	011b      	lsls	r3, r3, #4
 8006b52:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006b56:	68f9      	ldr	r1, [r7, #12]
 8006b58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b085      	sub	sp, #20
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b88:	f023 0303 	bic.w	r3, r3, #3
 8006b8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b9c:	f023 0302 	bic.w	r3, r3, #2
 8006ba0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006bca:	f023 0303 	bic.w	r3, r3, #3
 8006bce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bde:	f043 0302 	orr.w	r3, r3, #2
 8006be2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4013      	ands	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	0c1b      	lsrs	r3, r3, #16
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	b29b      	uxth	r3, r3
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	4013      	ands	r3, r2
 8006cac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cae:	68bb      	ldr	r3, [r7, #8]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cde:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	f003 030f 	and.w	r3, r3, #15
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cec:	01db      	lsls	r3, r3, #7
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006cf6:	78fb      	ldrb	r3, [r7, #3]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	4013      	ands	r3, r2
 8006d08:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	371c      	adds	r7, #28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	f003 0301 	and.w	r3, r3, #1
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d4e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d52:	f023 0307 	bic.w	r3, r3, #7
 8006d56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
	...

08006d7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	460b      	mov	r3, r1
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	333c      	adds	r3, #60	; 0x3c
 8006d92:	3304      	adds	r3, #4
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	4a26      	ldr	r2, [pc, #152]	; (8006e34 <USB_EP0_OutStart+0xb8>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d90a      	bls.n	8006db6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006db0:	d101      	bne.n	8006db6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	e037      	b.n	8006e26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006de4:	f043 0318 	orr.w	r3, r3, #24
 8006de8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006df8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006dfc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006dfe:	7afb      	ldrb	r3, [r7, #11]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d10f      	bne.n	8006e24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e1e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006e22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	4f54300a 	.word	0x4f54300a

08006e38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3301      	adds	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4a13      	ldr	r2, [pc, #76]	; (8006e9c <USB_CoreReset+0x64>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d901      	bls.n	8006e56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e01b      	b.n	8006e8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	daf2      	bge.n	8006e44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f043 0201 	orr.w	r2, r3, #1
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3301      	adds	r3, #1
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4a09      	ldr	r2, [pc, #36]	; (8006e9c <USB_CoreReset+0x64>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d901      	bls.n	8006e80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e006      	b.n	8006e8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d0f0      	beq.n	8006e6e <USB_CoreReset+0x36>

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	00030d40 	.word	0x00030d40

08006ea0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006eac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006eb0:	f002 f8d6 	bl	8009060 <malloc>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d105      	bne.n	8006eca <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	e066      	b.n	8006f98 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	7c1b      	ldrb	r3, [r3, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d119      	bne.n	8006f0e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ede:	2202      	movs	r2, #2
 8006ee0:	2181      	movs	r1, #129	; 0x81
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 ff43 	bl	8008d6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 ff39 	bl	8008d6e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2210      	movs	r2, #16
 8006f08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006f0c:	e016      	b.n	8006f3c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006f0e:	2340      	movs	r3, #64	; 0x40
 8006f10:	2202      	movs	r2, #2
 8006f12:	2181      	movs	r1, #129	; 0x81
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 ff2a 	bl	8008d6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006f20:	2340      	movs	r3, #64	; 0x40
 8006f22:	2202      	movs	r2, #2
 8006f24:	2101      	movs	r1, #1
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 ff21 	bl	8008d6e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2210      	movs	r2, #16
 8006f38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f3c:	2308      	movs	r3, #8
 8006f3e:	2203      	movs	r2, #3
 8006f40:	2182      	movs	r1, #130	; 0x82
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 ff13 	bl	8008d6e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	7c1b      	ldrb	r3, [r3, #16]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d109      	bne.n	8006f86 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f001 ffe4 	bl	8008f4c <USBD_LL_PrepareReceive>
 8006f84:	e007      	b.n	8006f96 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f8c:	2340      	movs	r3, #64	; 0x40
 8006f8e:	2101      	movs	r1, #1
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 ffdb 	bl	8008f4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006fb0:	2181      	movs	r1, #129	; 0x81
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 ff01 	bl	8008dba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f001 fefa 	bl	8008dba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006fce:	2182      	movs	r1, #130	; 0x82
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 fef2 	bl	8008dba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00e      	beq.n	800700e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007000:	4618      	mov	r0, r3
 8007002:	f002 f835 	bl	8009070 <free>
    pdev->pClassData = NULL;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800700e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007028:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800703e:	2b00      	cmp	r3, #0
 8007040:	d03a      	beq.n	80070b8 <USBD_CDC_Setup+0xa0>
 8007042:	2b20      	cmp	r3, #32
 8007044:	f040 8097 	bne.w	8007176 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	88db      	ldrh	r3, [r3, #6]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d029      	beq.n	80070a4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	b25b      	sxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	da11      	bge.n	800707e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007066:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	88d2      	ldrh	r2, [r2, #6]
 800706c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800706e:	6939      	ldr	r1, [r7, #16]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	88db      	ldrh	r3, [r3, #6]
 8007074:	461a      	mov	r2, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 fa6d 	bl	8008556 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800707c:	e082      	b.n	8007184 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	785a      	ldrb	r2, [r3, #1]
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	88db      	ldrh	r3, [r3, #6]
 800708c:	b2da      	uxtb	r2, r3
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007094:	6939      	ldr	r1, [r7, #16]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	88db      	ldrh	r3, [r3, #6]
 800709a:	461a      	mov	r2, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 fa86 	bl	80085ae <USBD_CtlPrepareRx>
    break;
 80070a2:	e06f      	b.n	8007184 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	7850      	ldrb	r0, [r2, #1]
 80070b0:	2200      	movs	r2, #0
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	4798      	blx	r3
    break;
 80070b6:	e065      	b.n	8007184 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	785b      	ldrb	r3, [r3, #1]
 80070bc:	2b0b      	cmp	r3, #11
 80070be:	d84f      	bhi.n	8007160 <USBD_CDC_Setup+0x148>
 80070c0:	a201      	add	r2, pc, #4	; (adr r2, 80070c8 <USBD_CDC_Setup+0xb0>)
 80070c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c6:	bf00      	nop
 80070c8:	080070f9 	.word	0x080070f9
 80070cc:	0800716f 	.word	0x0800716f
 80070d0:	08007161 	.word	0x08007161
 80070d4:	08007161 	.word	0x08007161
 80070d8:	08007161 	.word	0x08007161
 80070dc:	08007161 	.word	0x08007161
 80070e0:	08007161 	.word	0x08007161
 80070e4:	08007161 	.word	0x08007161
 80070e8:	08007161 	.word	0x08007161
 80070ec:	08007161 	.word	0x08007161
 80070f0:	08007121 	.word	0x08007121
 80070f4:	08007149 	.word	0x08007149
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d107      	bne.n	8007112 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007102:	f107 030c 	add.w	r3, r7, #12
 8007106:	2202      	movs	r2, #2
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f001 fa23 	bl	8008556 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007110:	e030      	b.n	8007174 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 f9ad 	bl	8008474 <USBD_CtlError>
        ret = USBD_FAIL;
 800711a:	2303      	movs	r3, #3
 800711c:	75fb      	strb	r3, [r7, #23]
      break;
 800711e:	e029      	b.n	8007174 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007126:	2b03      	cmp	r3, #3
 8007128:	d107      	bne.n	800713a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800712a:	f107 030f 	add.w	r3, r7, #15
 800712e:	2201      	movs	r2, #1
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f001 fa0f 	bl	8008556 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007138:	e01c      	b.n	8007174 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 f999 	bl	8008474 <USBD_CtlError>
        ret = USBD_FAIL;
 8007142:	2303      	movs	r3, #3
 8007144:	75fb      	strb	r3, [r7, #23]
      break;
 8007146:	e015      	b.n	8007174 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714e:	2b03      	cmp	r3, #3
 8007150:	d00f      	beq.n	8007172 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 f98d 	bl	8008474 <USBD_CtlError>
        ret = USBD_FAIL;
 800715a:	2303      	movs	r3, #3
 800715c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800715e:	e008      	b.n	8007172 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 f986 	bl	8008474 <USBD_CtlError>
      ret = USBD_FAIL;
 8007168:	2303      	movs	r3, #3
 800716a:	75fb      	strb	r3, [r7, #23]
      break;
 800716c:	e002      	b.n	8007174 <USBD_CDC_Setup+0x15c>
      break;
 800716e:	bf00      	nop
 8007170:	e008      	b.n	8007184 <USBD_CDC_Setup+0x16c>
      break;
 8007172:	bf00      	nop
    }
    break;
 8007174:	e006      	b.n	8007184 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 f97b 	bl	8008474 <USBD_CtlError>
    ret = USBD_FAIL;
 800717e:	2303      	movs	r3, #3
 8007180:	75fb      	strb	r3, [r7, #23]
    break;
 8007182:	bf00      	nop
  }

  return (uint8_t)ret;
 8007184:	7dfb      	ldrb	r3, [r7, #23]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop

08007190 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e049      	b.n	8007246 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80071ba:	78fa      	ldrb	r2, [r7, #3]
 80071bc:	6879      	ldr	r1, [r7, #4]
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	440b      	add	r3, r1
 80071c8:	3318      	adds	r3, #24
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d029      	beq.n	8007224 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80071d0:	78fa      	ldrb	r2, [r7, #3]
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	4613      	mov	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	440b      	add	r3, r1
 80071de:	3318      	adds	r3, #24
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	78f9      	ldrb	r1, [r7, #3]
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	460b      	mov	r3, r1
 80071e8:	00db      	lsls	r3, r3, #3
 80071ea:	1a5b      	subs	r3, r3, r1
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4403      	add	r3, r0
 80071f0:	3344      	adds	r3, #68	; 0x44
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80071f8:	fb03 f301 	mul.w	r3, r3, r1
 80071fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d110      	bne.n	8007224 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007202:	78fa      	ldrb	r2, [r7, #3]
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	4613      	mov	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	440b      	add	r3, r1
 8007210:	3318      	adds	r3, #24
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007216:	78f9      	ldrb	r1, [r7, #3]
 8007218:	2300      	movs	r3, #0
 800721a:	2200      	movs	r2, #0
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 fe74 	bl	8008f0a <USBD_LL_Transmit>
 8007222:	e00f      	b.n	8007244 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007240:	78fa      	ldrb	r2, [r7, #3]
 8007242:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	460b      	mov	r3, r1
 8007258:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007260:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800726c:	2303      	movs	r3, #3
 800726e:	e015      	b.n	800729c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 fe8a 	bl	8008f8e <USBD_LL_GetRxDataSize>
 800727a:	4602      	mov	r2, r0
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007296:	4611      	mov	r1, r2
 8007298:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072b2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d015      	beq.n	80072ea <USBD_CDC_EP0_RxReady+0x46>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80072c4:	2bff      	cmp	r3, #255	; 0xff
 80072c6:	d010      	beq.n	80072ea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80072d6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80072de:	b292      	uxth	r2, r2
 80072e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	22ff      	movs	r2, #255	; 0xff
 80072e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2243      	movs	r2, #67	; 0x43
 8007300:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007302:	4b03      	ldr	r3, [pc, #12]	; (8007310 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	20000094 	.word	0x20000094

08007314 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2243      	movs	r2, #67	; 0x43
 8007320:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007322:	4b03      	ldr	r3, [pc, #12]	; (8007330 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007324:	4618      	mov	r0, r3
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	20000050 	.word	0x20000050

08007334 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2243      	movs	r2, #67	; 0x43
 8007340:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007342:	4b03      	ldr	r3, [pc, #12]	; (8007350 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	200000d8 	.word	0x200000d8

08007354 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	220a      	movs	r2, #10
 8007360:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007362:	4b03      	ldr	r3, [pc, #12]	; (8007370 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	2000000c 	.word	0x2000000c

08007374 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007384:	2303      	movs	r3, #3
 8007386:	e004      	b.n	8007392 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800739e:	b480      	push	{r7}
 80073a0:	b087      	sub	sp, #28
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073b0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	371c      	adds	r7, #28
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073e0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007406:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007412:	2303      	movs	r3, #3
 8007414:	e016      	b.n	8007444 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	7c1b      	ldrb	r3, [r3, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007428:	2101      	movs	r1, #1
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f001 fd8e 	bl	8008f4c <USBD_LL_PrepareReceive>
 8007430:	e007      	b.n	8007442 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007438:	2340      	movs	r3, #64	; 0x40
 800743a:	2101      	movs	r1, #1
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 fd85 	bl	8008f4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	4613      	mov	r3, r2
 8007458:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007460:	2303      	movs	r3, #3
 8007462:	e025      	b.n	80074b0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	79fa      	ldrb	r2, [r7, #7]
 80074a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f001 fbfb 	bl	8008ca0 <USBD_LL_Init>
 80074aa:	4603      	mov	r3, r0
 80074ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e010      	b.n	80074f2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	f107 020e 	add.w	r2, r7, #14
 80074e4:	4610      	mov	r0, r2
 80074e6:	4798      	blx	r3
 80074e8:	4602      	mov	r2, r0
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b082      	sub	sp, #8
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 fc18 	bl	8008d38 <USBD_LL_Start>
 8007508:	4603      	mov	r3, r0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007534:	2303      	movs	r3, #3
 8007536:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753e:	2b00      	cmp	r3, #0
 8007540:	d009      	beq.n	8007556 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	78fa      	ldrb	r2, [r7, #3]
 800754c:	4611      	mov	r1, r2
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	4798      	blx	r3
 8007552:	4603      	mov	r3, r0
 8007554:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d007      	beq.n	8007586 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	78fa      	ldrb	r2, [r7, #3]
 8007580:	4611      	mov	r1, r2
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	4798      	blx	r3
  }

  return USBD_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 ff2c 	bl	8008400 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80075b6:	461a      	mov	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075c4:	f003 031f 	and.w	r3, r3, #31
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d00e      	beq.n	80075ea <USBD_LL_SetupStage+0x5a>
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d302      	bcc.n	80075d6 <USBD_LL_SetupStage+0x46>
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d014      	beq.n	80075fe <USBD_LL_SetupStage+0x6e>
 80075d4:	e01d      	b.n	8007612 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fa18 	bl	8007a14 <USBD_StdDevReq>
 80075e4:	4603      	mov	r3, r0
 80075e6:	73fb      	strb	r3, [r7, #15]
      break;
 80075e8:	e020      	b.n	800762c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fa7c 	bl	8007af0 <USBD_StdItfReq>
 80075f8:	4603      	mov	r3, r0
 80075fa:	73fb      	strb	r3, [r7, #15]
      break;
 80075fc:	e016      	b.n	800762c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fab8 	bl	8007b7c <USBD_StdEPReq>
 800760c:	4603      	mov	r3, r0
 800760e:	73fb      	strb	r3, [r7, #15]
      break;
 8007610:	e00c      	b.n	800762c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007618:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800761c:	b2db      	uxtb	r3, r3
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 fbe9 	bl	8008df8 <USBD_LL_StallEP>
 8007626:	4603      	mov	r3, r0
 8007628:	73fb      	strb	r3, [r7, #15]
      break;
 800762a:	bf00      	nop
  }

  return ret;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b086      	sub	sp, #24
 800763a:	af00      	add	r7, sp, #0
 800763c:	60f8      	str	r0, [r7, #12]
 800763e:	460b      	mov	r3, r1
 8007640:	607a      	str	r2, [r7, #4]
 8007642:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007644:	7afb      	ldrb	r3, [r7, #11]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d137      	bne.n	80076ba <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007650:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007658:	2b03      	cmp	r3, #3
 800765a:	d14a      	bne.n	80076f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	429a      	cmp	r2, r3
 8007666:	d913      	bls.n	8007690 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	1ad2      	subs	r2, r2, r3
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	4293      	cmp	r3, r2
 8007680:	bf28      	it	cs
 8007682:	4613      	movcs	r3, r2
 8007684:	461a      	mov	r2, r3
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 ffad 	bl	80085e8 <USBD_CtlContinueRx>
 800768e:	e030      	b.n	80076f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00a      	beq.n	80076b2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d105      	bne.n	80076b2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 ffa9 	bl	800860a <USBD_CtlSendStatus>
 80076b8:	e01b      	b.n	80076f2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d013      	beq.n	80076ee <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	d10e      	bne.n	80076ee <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	7afa      	ldrb	r2, [r7, #11]
 80076da:	4611      	mov	r1, r2
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	4798      	blx	r3
 80076e0:	4603      	mov	r3, r0
 80076e2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	e002      	b.n	80076f4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e000      	b.n	80076f4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	460b      	mov	r3, r1
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800770a:	7afb      	ldrb	r3, [r7, #11]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d16a      	bne.n	80077e6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3314      	adds	r3, #20
 8007714:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800771c:	2b02      	cmp	r3, #2
 800771e:	d155      	bne.n	80077cc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	429a      	cmp	r2, r3
 800772a:	d914      	bls.n	8007756 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	1ad2      	subs	r2, r2, r3
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	461a      	mov	r2, r3
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 ff22 	bl	800858c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007748:	2300      	movs	r3, #0
 800774a:	2200      	movs	r2, #0
 800774c:	2100      	movs	r1, #0
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f001 fbfc 	bl	8008f4c <USBD_LL_PrepareReceive>
 8007754:	e03a      	b.n	80077cc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	68da      	ldr	r2, [r3, #12]
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	429a      	cmp	r2, r3
 8007760:	d11c      	bne.n	800779c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800776a:	429a      	cmp	r2, r3
 800776c:	d316      	bcc.n	800779c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007778:	429a      	cmp	r2, r3
 800777a:	d20f      	bcs.n	800779c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800777c:	2200      	movs	r2, #0
 800777e:	2100      	movs	r1, #0
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 ff03 	bl	800858c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800778e:	2300      	movs	r3, #0
 8007790:	2200      	movs	r2, #0
 8007792:	2100      	movs	r1, #0
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f001 fbd9 	bl	8008f4c <USBD_LL_PrepareReceive>
 800779a:	e017      	b.n	80077cc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00a      	beq.n	80077be <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d105      	bne.n	80077be <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80077be:	2180      	movs	r1, #128	; 0x80
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f001 fb19 	bl	8008df8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 ff32 	bl	8008630 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d123      	bne.n	800781e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f7ff fe9b 	bl	8007512 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80077e4:	e01b      	b.n	800781e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d013      	beq.n	800781a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d10e      	bne.n	800781a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	7afa      	ldrb	r2, [r7, #11]
 8007806:	4611      	mov	r1, r2
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	4798      	blx	r3
 800780c:	4603      	mov	r3, r0
 800780e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	e002      	b.n	8007820 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800781a:	2303      	movs	r3, #3
 800781c:	e000      	b.n	8007820 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007854:	2b00      	cmp	r3, #0
 8007856:	d009      	beq.n	800786c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	6852      	ldr	r2, [r2, #4]
 8007864:	b2d2      	uxtb	r2, r2
 8007866:	4611      	mov	r1, r2
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800786c:	2340      	movs	r3, #64	; 0x40
 800786e:	2200      	movs	r2, #0
 8007870:	2100      	movs	r1, #0
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 fa7b 	bl	8008d6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2240      	movs	r2, #64	; 0x40
 8007884:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007888:	2340      	movs	r3, #64	; 0x40
 800788a:	2200      	movs	r2, #0
 800788c:	2180      	movs	r1, #128	; 0x80
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f001 fa6d 	bl	8008d6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2240      	movs	r2, #64	; 0x40
 800789e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	460b      	mov	r3, r1
 80078b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	78fa      	ldrb	r2, [r7, #3]
 80078ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2204      	movs	r2, #4
 80078e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007902:	2b04      	cmp	r3, #4
 8007904:	d105      	bne.n	8007912 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800792e:	2b03      	cmp	r3, #3
 8007930:	d10b      	bne.n	800794a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d005      	beq.n	800794a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800796e:	b480      	push	{r7}
 8007970:	b083      	sub	sp, #12
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	460b      	mov	r3, r1
 8007978:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b082      	sub	sp, #8
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d009      	beq.n	80079cc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	6852      	ldr	r2, [r2, #4]
 80079c4:	b2d2      	uxtb	r2, r2
 80079c6:	4611      	mov	r1, r2
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	4798      	blx	r3
  }

  return USBD_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b087      	sub	sp, #28
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	3301      	adds	r3, #1
 80079ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80079f4:	8a3b      	ldrh	r3, [r7, #16]
 80079f6:	021b      	lsls	r3, r3, #8
 80079f8:	b21a      	sxth	r2, r3
 80079fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	b21b      	sxth	r3, r3
 8007a02:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a04:	89fb      	ldrh	r3, [r7, #14]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
	...

08007a14 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a2a:	2b20      	cmp	r3, #32
 8007a2c:	d004      	beq.n	8007a38 <USBD_StdDevReq+0x24>
 8007a2e:	2b40      	cmp	r3, #64	; 0x40
 8007a30:	d002      	beq.n	8007a38 <USBD_StdDevReq+0x24>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <USBD_StdDevReq+0x38>
 8007a36:	e050      	b.n	8007ada <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	4798      	blx	r3
 8007a46:	4603      	mov	r3, r0
 8007a48:	73fb      	strb	r3, [r7, #15]
    break;
 8007a4a:	e04b      	b.n	8007ae4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	785b      	ldrb	r3, [r3, #1]
 8007a50:	2b09      	cmp	r3, #9
 8007a52:	d83c      	bhi.n	8007ace <USBD_StdDevReq+0xba>
 8007a54:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <USBD_StdDevReq+0x48>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007ab1 	.word	0x08007ab1
 8007a60:	08007ac5 	.word	0x08007ac5
 8007a64:	08007acf 	.word	0x08007acf
 8007a68:	08007abb 	.word	0x08007abb
 8007a6c:	08007acf 	.word	0x08007acf
 8007a70:	08007a8f 	.word	0x08007a8f
 8007a74:	08007a85 	.word	0x08007a85
 8007a78:	08007acf 	.word	0x08007acf
 8007a7c:	08007aa7 	.word	0x08007aa7
 8007a80:	08007a99 	.word	0x08007a99
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f9ce 	bl	8007e28 <USBD_GetDescriptor>
      break;
 8007a8c:	e024      	b.n	8007ad8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fb33 	bl	80080fc <USBD_SetAddress>
      break;
 8007a96:	e01f      	b.n	8007ad8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fb70 	bl	8008180 <USBD_SetConfig>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa4:	e018      	b.n	8007ad8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fc0d 	bl	80082c8 <USBD_GetConfig>
      break;
 8007aae:	e013      	b.n	8007ad8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fc3c 	bl	8008330 <USBD_GetStatus>
      break;
 8007ab8:	e00e      	b.n	8007ad8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fc6a 	bl	8008396 <USBD_SetFeature>
      break;
 8007ac2:	e009      	b.n	8007ad8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fc79 	bl	80083be <USBD_ClrFeature>
      break;
 8007acc:	e004      	b.n	8007ad8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fccf 	bl	8008474 <USBD_CtlError>
      break;
 8007ad6:	bf00      	nop
    }
    break;
 8007ad8:	e004      	b.n	8007ae4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fcc9 	bl	8008474 <USBD_CtlError>
    break;
 8007ae2:	bf00      	nop
  }

  return ret;
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop

08007af0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b06:	2b20      	cmp	r3, #32
 8007b08:	d003      	beq.n	8007b12 <USBD_StdItfReq+0x22>
 8007b0a:	2b40      	cmp	r3, #64	; 0x40
 8007b0c:	d001      	beq.n	8007b12 <USBD_StdItfReq+0x22>
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d12a      	bne.n	8007b68 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d81d      	bhi.n	8007b5a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	889b      	ldrh	r3, [r3, #4]
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d813      	bhi.n	8007b50 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	4798      	blx	r3
 8007b36:	4603      	mov	r3, r0
 8007b38:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	88db      	ldrh	r3, [r3, #6]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d110      	bne.n	8007b64 <USBD_StdItfReq+0x74>
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10d      	bne.n	8007b64 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fd5e 	bl	800860a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007b4e:	e009      	b.n	8007b64 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fc8e 	bl	8008474 <USBD_CtlError>
      break;
 8007b58:	e004      	b.n	8007b64 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fc89 	bl	8008474 <USBD_CtlError>
      break;
 8007b62:	e000      	b.n	8007b66 <USBD_StdItfReq+0x76>
      break;
 8007b64:	bf00      	nop
    }
    break;
 8007b66:	e004      	b.n	8007b72 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fc82 	bl	8008474 <USBD_CtlError>
    break;
 8007b70:	bf00      	nop
  }

  return ret;
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	889b      	ldrh	r3, [r3, #4]
 8007b8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	d004      	beq.n	8007ba6 <USBD_StdEPReq+0x2a>
 8007b9c:	2b40      	cmp	r3, #64	; 0x40
 8007b9e:	d002      	beq.n	8007ba6 <USBD_StdEPReq+0x2a>
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <USBD_StdEPReq+0x3e>
 8007ba4:	e135      	b.n	8007e12 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	4798      	blx	r3
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb8:	e130      	b.n	8007e1c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	785b      	ldrb	r3, [r3, #1]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d03e      	beq.n	8007c40 <USBD_StdEPReq+0xc4>
 8007bc2:	2b03      	cmp	r3, #3
 8007bc4:	d002      	beq.n	8007bcc <USBD_StdEPReq+0x50>
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d077      	beq.n	8007cba <USBD_StdEPReq+0x13e>
 8007bca:	e11c      	b.n	8007e06 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d002      	beq.n	8007bdc <USBD_StdEPReq+0x60>
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d015      	beq.n	8007c06 <USBD_StdEPReq+0x8a>
 8007bda:	e02b      	b.n	8007c34 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bdc:	7bbb      	ldrb	r3, [r7, #14]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00c      	beq.n	8007bfc <USBD_StdEPReq+0x80>
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	2b80      	cmp	r3, #128	; 0x80
 8007be6:	d009      	beq.n	8007bfc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007be8:	7bbb      	ldrb	r3, [r7, #14]
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f001 f903 	bl	8008df8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bf2:	2180      	movs	r1, #128	; 0x80
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f001 f8ff 	bl	8008df8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007bfa:	e020      	b.n	8007c3e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fc38 	bl	8008474 <USBD_CtlError>
        break;
 8007c04:	e01b      	b.n	8007c3e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	885b      	ldrh	r3, [r3, #2]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10e      	bne.n	8007c2c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00b      	beq.n	8007c2c <USBD_StdEPReq+0xb0>
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	2b80      	cmp	r3, #128	; 0x80
 8007c18:	d008      	beq.n	8007c2c <USBD_StdEPReq+0xb0>
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	88db      	ldrh	r3, [r3, #6]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d104      	bne.n	8007c2c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	4619      	mov	r1, r3
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f001 f8e6 	bl	8008df8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fcec 	bl	800860a <USBD_CtlSendStatus>

        break;
 8007c32:	e004      	b.n	8007c3e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fc1c 	bl	8008474 <USBD_CtlError>
        break;
 8007c3c:	bf00      	nop
      }
      break;
 8007c3e:	e0e7      	b.n	8007e10 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d002      	beq.n	8007c50 <USBD_StdEPReq+0xd4>
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	d015      	beq.n	8007c7a <USBD_StdEPReq+0xfe>
 8007c4e:	e02d      	b.n	8007cac <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00c      	beq.n	8007c70 <USBD_StdEPReq+0xf4>
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
 8007c58:	2b80      	cmp	r3, #128	; 0x80
 8007c5a:	d009      	beq.n	8007c70 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c5c:	7bbb      	ldrb	r3, [r7, #14]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 f8c9 	bl	8008df8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c66:	2180      	movs	r1, #128	; 0x80
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 f8c5 	bl	8008df8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007c6e:	e023      	b.n	8007cb8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fbfe 	bl	8008474 <USBD_CtlError>
        break;
 8007c78:	e01e      	b.n	8007cb8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	885b      	ldrh	r3, [r3, #2]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d119      	bne.n	8007cb6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d004      	beq.n	8007c96 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 f8d0 	bl	8008e36 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fcb7 	bl	800860a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	4798      	blx	r3
        }
        break;
 8007caa:	e004      	b.n	8007cb6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fbe0 	bl	8008474 <USBD_CtlError>
        break;
 8007cb4:	e000      	b.n	8007cb8 <USBD_StdEPReq+0x13c>
        break;
 8007cb6:	bf00      	nop
      }
      break;
 8007cb8:	e0aa      	b.n	8007e10 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d002      	beq.n	8007cca <USBD_StdEPReq+0x14e>
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d032      	beq.n	8007d2e <USBD_StdEPReq+0x1b2>
 8007cc8:	e097      	b.n	8007dfa <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cca:	7bbb      	ldrb	r3, [r7, #14]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d007      	beq.n	8007ce0 <USBD_StdEPReq+0x164>
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	2b80      	cmp	r3, #128	; 0x80
 8007cd4:	d004      	beq.n	8007ce0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fbcb 	bl	8008474 <USBD_CtlError>
          break;
 8007cde:	e091      	b.n	8007e04 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	da0b      	bge.n	8007d00 <USBD_StdEPReq+0x184>
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cee:	4613      	mov	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	3310      	adds	r3, #16
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	e00b      	b.n	8007d18 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
 8007d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	4413      	add	r3, r2
 8007d16:	3304      	adds	r3, #4
 8007d18:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2202      	movs	r2, #2
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fc15 	bl	8008556 <USBD_CtlSendData>
        break;
 8007d2c:	e06a      	b.n	8007e04 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007d2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	da11      	bge.n	8007d5a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
 8007d38:	f003 020f 	and.w	r2, r3, #15
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	3324      	adds	r3, #36	; 0x24
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d117      	bne.n	8007d80 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fb8e 	bl	8008474 <USBD_CtlError>
            break;
 8007d58:	e054      	b.n	8007e04 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	f003 020f 	and.w	r2, r3, #15
 8007d60:	6879      	ldr	r1, [r7, #4]
 8007d62:	4613      	mov	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4413      	add	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	440b      	add	r3, r1
 8007d6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d104      	bne.n	8007d80 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fb7b 	bl	8008474 <USBD_CtlError>
            break;
 8007d7e:	e041      	b.n	8007e04 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	da0b      	bge.n	8007da0 <USBD_StdEPReq+0x224>
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d8e:	4613      	mov	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	3310      	adds	r3, #16
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	e00b      	b.n	8007db8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007da6:	4613      	mov	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	4413      	add	r3, r2
 8007db6:	3304      	adds	r3, #4
 8007db8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <USBD_StdEPReq+0x24a>
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
 8007dc2:	2b80      	cmp	r3, #128	; 0x80
 8007dc4:	d103      	bne.n	8007dce <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	e00e      	b.n	8007dec <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 f84e 	bl	8008e74 <USBD_LL_IsStallEP>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2201      	movs	r2, #1
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	e002      	b.n	8007dec <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2202      	movs	r2, #2
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fbaf 	bl	8008556 <USBD_CtlSendData>
          break;
 8007df8:	e004      	b.n	8007e04 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fb39 	bl	8008474 <USBD_CtlError>
        break;
 8007e02:	bf00      	nop
      }
      break;
 8007e04:	e004      	b.n	8007e10 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fb33 	bl	8008474 <USBD_CtlError>
      break;
 8007e0e:	bf00      	nop
    }
    break;
 8007e10:	e004      	b.n	8007e1c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fb2d 	bl	8008474 <USBD_CtlError>
    break;
 8007e1a:	bf00      	nop
  }

  return ret;
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e32:	2300      	movs	r3, #0
 8007e34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	885b      	ldrh	r3, [r3, #2]
 8007e42:	0a1b      	lsrs	r3, r3, #8
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	3b01      	subs	r3, #1
 8007e48:	2b06      	cmp	r3, #6
 8007e4a:	f200 8128 	bhi.w	800809e <USBD_GetDescriptor+0x276>
 8007e4e:	a201      	add	r2, pc, #4	; (adr r2, 8007e54 <USBD_GetDescriptor+0x2c>)
 8007e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e54:	08007e71 	.word	0x08007e71
 8007e58:	08007e89 	.word	0x08007e89
 8007e5c:	08007ec9 	.word	0x08007ec9
 8007e60:	0800809f 	.word	0x0800809f
 8007e64:	0800809f 	.word	0x0800809f
 8007e68:	0800803f 	.word	0x0800803f
 8007e6c:	0800806b 	.word	0x0800806b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	7c12      	ldrb	r2, [r2, #16]
 8007e7c:	f107 0108 	add.w	r1, r7, #8
 8007e80:	4610      	mov	r0, r2
 8007e82:	4798      	blx	r3
 8007e84:	60f8      	str	r0, [r7, #12]
    break;
 8007e86:	e112      	b.n	80080ae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	7c1b      	ldrb	r3, [r3, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10d      	bne.n	8007eac <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e98:	f107 0208 	add.w	r2, r7, #8
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4798      	blx	r3
 8007ea0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007eaa:	e100      	b.n	80080ae <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb4:	f107 0208 	add.w	r2, r7, #8
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4798      	blx	r3
 8007ebc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	701a      	strb	r2, [r3, #0]
    break;
 8007ec6:	e0f2      	b.n	80080ae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	885b      	ldrh	r3, [r3, #2]
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b05      	cmp	r3, #5
 8007ed0:	f200 80ac 	bhi.w	800802c <USBD_GetDescriptor+0x204>
 8007ed4:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <USBD_GetDescriptor+0xb4>)
 8007ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eda:	bf00      	nop
 8007edc:	08007ef5 	.word	0x08007ef5
 8007ee0:	08007f29 	.word	0x08007f29
 8007ee4:	08007f5d 	.word	0x08007f5d
 8007ee8:	08007f91 	.word	0x08007f91
 8007eec:	08007fc5 	.word	0x08007fc5
 8007ef0:	08007ff9 	.word	0x08007ff9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00b      	beq.n	8007f18 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	7c12      	ldrb	r2, [r2, #16]
 8007f0c:	f107 0108 	add.w	r1, r7, #8
 8007f10:	4610      	mov	r0, r2
 8007f12:	4798      	blx	r3
 8007f14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f16:	e091      	b.n	800803c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 faaa 	bl	8008474 <USBD_CtlError>
        err++;
 8007f20:	7afb      	ldrb	r3, [r7, #11]
 8007f22:	3301      	adds	r3, #1
 8007f24:	72fb      	strb	r3, [r7, #11]
      break;
 8007f26:	e089      	b.n	800803c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00b      	beq.n	8007f4c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	7c12      	ldrb	r2, [r2, #16]
 8007f40:	f107 0108 	add.w	r1, r7, #8
 8007f44:	4610      	mov	r0, r2
 8007f46:	4798      	blx	r3
 8007f48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f4a:	e077      	b.n	800803c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa90 	bl	8008474 <USBD_CtlError>
        err++;
 8007f54:	7afb      	ldrb	r3, [r7, #11]
 8007f56:	3301      	adds	r3, #1
 8007f58:	72fb      	strb	r3, [r7, #11]
      break;
 8007f5a:	e06f      	b.n	800803c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00b      	beq.n	8007f80 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	7c12      	ldrb	r2, [r2, #16]
 8007f74:	f107 0108 	add.w	r1, r7, #8
 8007f78:	4610      	mov	r0, r2
 8007f7a:	4798      	blx	r3
 8007f7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f7e:	e05d      	b.n	800803c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fa76 	bl	8008474 <USBD_CtlError>
        err++;
 8007f88:	7afb      	ldrb	r3, [r7, #11]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	72fb      	strb	r3, [r7, #11]
      break;
 8007f8e:	e055      	b.n	800803c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00b      	beq.n	8007fb4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	7c12      	ldrb	r2, [r2, #16]
 8007fa8:	f107 0108 	add.w	r1, r7, #8
 8007fac:	4610      	mov	r0, r2
 8007fae:	4798      	blx	r3
 8007fb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fb2:	e043      	b.n	800803c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fa5c 	bl	8008474 <USBD_CtlError>
        err++;
 8007fbc:	7afb      	ldrb	r3, [r7, #11]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	72fb      	strb	r3, [r7, #11]
      break;
 8007fc2:	e03b      	b.n	800803c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00b      	beq.n	8007fe8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	7c12      	ldrb	r2, [r2, #16]
 8007fdc:	f107 0108 	add.w	r1, r7, #8
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	4798      	blx	r3
 8007fe4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fe6:	e029      	b.n	800803c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fa42 	bl	8008474 <USBD_CtlError>
        err++;
 8007ff0:	7afb      	ldrb	r3, [r7, #11]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	72fb      	strb	r3, [r7, #11]
      break;
 8007ff6:	e021      	b.n	800803c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00b      	beq.n	800801c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	7c12      	ldrb	r2, [r2, #16]
 8008010:	f107 0108 	add.w	r1, r7, #8
 8008014:	4610      	mov	r0, r2
 8008016:	4798      	blx	r3
 8008018:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800801a:	e00f      	b.n	800803c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fa28 	bl	8008474 <USBD_CtlError>
        err++;
 8008024:	7afb      	ldrb	r3, [r7, #11]
 8008026:	3301      	adds	r3, #1
 8008028:	72fb      	strb	r3, [r7, #11]
      break;
 800802a:	e007      	b.n	800803c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fa20 	bl	8008474 <USBD_CtlError>
      err++;
 8008034:	7afb      	ldrb	r3, [r7, #11]
 8008036:	3301      	adds	r3, #1
 8008038:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800803a:	bf00      	nop
    }
    break;
 800803c:	e037      	b.n	80080ae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	7c1b      	ldrb	r3, [r3, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d109      	bne.n	800805a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800804e:	f107 0208 	add.w	r2, r7, #8
 8008052:	4610      	mov	r0, r2
 8008054:	4798      	blx	r3
 8008056:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008058:	e029      	b.n	80080ae <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fa09 	bl	8008474 <USBD_CtlError>
      err++;
 8008062:	7afb      	ldrb	r3, [r7, #11]
 8008064:	3301      	adds	r3, #1
 8008066:	72fb      	strb	r3, [r7, #11]
    break;
 8008068:	e021      	b.n	80080ae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	7c1b      	ldrb	r3, [r3, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10d      	bne.n	800808e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807a:	f107 0208 	add.w	r2, r7, #8
 800807e:	4610      	mov	r0, r2
 8008080:	4798      	blx	r3
 8008082:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	3301      	adds	r3, #1
 8008088:	2207      	movs	r2, #7
 800808a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800808c:	e00f      	b.n	80080ae <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f9ef 	bl	8008474 <USBD_CtlError>
      err++;
 8008096:	7afb      	ldrb	r3, [r7, #11]
 8008098:	3301      	adds	r3, #1
 800809a:	72fb      	strb	r3, [r7, #11]
    break;
 800809c:	e007      	b.n	80080ae <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f9e7 	bl	8008474 <USBD_CtlError>
    err++;
 80080a6:	7afb      	ldrb	r3, [r7, #11]
 80080a8:	3301      	adds	r3, #1
 80080aa:	72fb      	strb	r3, [r7, #11]
    break;
 80080ac:	bf00      	nop
  }

  if (err != 0U)
 80080ae:	7afb      	ldrb	r3, [r7, #11]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d11e      	bne.n	80080f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	88db      	ldrh	r3, [r3, #6]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d016      	beq.n	80080ea <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80080bc:	893b      	ldrh	r3, [r7, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00e      	beq.n	80080e0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	88da      	ldrh	r2, [r3, #6]
 80080c6:	893b      	ldrh	r3, [r7, #8]
 80080c8:	4293      	cmp	r3, r2
 80080ca:	bf28      	it	cs
 80080cc:	4613      	movcs	r3, r2
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80080d2:	893b      	ldrh	r3, [r7, #8]
 80080d4:	461a      	mov	r2, r3
 80080d6:	68f9      	ldr	r1, [r7, #12]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fa3c 	bl	8008556 <USBD_CtlSendData>
 80080de:	e009      	b.n	80080f4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f9c6 	bl	8008474 <USBD_CtlError>
 80080e8:	e004      	b.n	80080f4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fa8d 	bl	800860a <USBD_CtlSendStatus>
 80080f0:	e000      	b.n	80080f4 <USBD_GetDescriptor+0x2cc>
    return;
 80080f2:	bf00      	nop
    }
  }
}
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop

080080fc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	889b      	ldrh	r3, [r3, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d130      	bne.n	8008170 <USBD_SetAddress+0x74>
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	88db      	ldrh	r3, [r3, #6]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d12c      	bne.n	8008170 <USBD_SetAddress+0x74>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	885b      	ldrh	r3, [r3, #2]
 800811a:	2b7f      	cmp	r3, #127	; 0x7f
 800811c:	d828      	bhi.n	8008170 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	885b      	ldrh	r3, [r3, #2]
 8008122:	b2db      	uxtb	r3, r3
 8008124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008128:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008130:	2b03      	cmp	r3, #3
 8008132:	d104      	bne.n	800813e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f99c 	bl	8008474 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800813c:	e01c      	b.n	8008178 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	7bfa      	ldrb	r2, [r7, #15]
 8008142:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008146:	7bfb      	ldrb	r3, [r7, #15]
 8008148:	4619      	mov	r1, r3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 febe 	bl	8008ecc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fa5a 	bl	800860a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008156:	7bfb      	ldrb	r3, [r7, #15]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d004      	beq.n	8008166 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008164:	e008      	b.n	8008178 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800816e:	e003      	b.n	8008178 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f97e 	bl	8008474 <USBD_CtlError>
  }
}
 8008178:	bf00      	nop
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	885b      	ldrh	r3, [r3, #2]
 8008192:	b2da      	uxtb	r2, r3
 8008194:	4b4b      	ldr	r3, [pc, #300]	; (80082c4 <USBD_SetConfig+0x144>)
 8008196:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008198:	4b4a      	ldr	r3, [pc, #296]	; (80082c4 <USBD_SetConfig+0x144>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d905      	bls.n	80081ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f966 	bl	8008474 <USBD_CtlError>
    return USBD_FAIL;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e087      	b.n	80082bc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d002      	beq.n	80081bc <USBD_SetConfig+0x3c>
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d025      	beq.n	8008206 <USBD_SetConfig+0x86>
 80081ba:	e071      	b.n	80082a0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80081bc:	4b41      	ldr	r3, [pc, #260]	; (80082c4 <USBD_SetConfig+0x144>)
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d01c      	beq.n	80081fe <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80081c4:	4b3f      	ldr	r3, [pc, #252]	; (80082c4 <USBD_SetConfig+0x144>)
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	461a      	mov	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80081ce:	4b3d      	ldr	r3, [pc, #244]	; (80082c4 <USBD_SetConfig+0x144>)
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff f9a7 	bl	8007528 <USBD_SetClassConfig>
 80081da:	4603      	mov	r3, r0
 80081dc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d004      	beq.n	80081ee <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f944 	bl	8008474 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80081ec:	e065      	b.n	80082ba <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fa0b 	bl	800860a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2203      	movs	r2, #3
 80081f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80081fc:	e05d      	b.n	80082ba <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fa03 	bl	800860a <USBD_CtlSendStatus>
    break;
 8008204:	e059      	b.n	80082ba <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008206:	4b2f      	ldr	r3, [pc, #188]	; (80082c4 <USBD_SetConfig+0x144>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d112      	bne.n	8008234 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2202      	movs	r2, #2
 8008212:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008216:	4b2b      	ldr	r3, [pc, #172]	; (80082c4 <USBD_SetConfig+0x144>)
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	461a      	mov	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008220:	4b28      	ldr	r3, [pc, #160]	; (80082c4 <USBD_SetConfig+0x144>)
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff f99a 	bl	8007560 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f9ec 	bl	800860a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008232:	e042      	b.n	80082ba <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008234:	4b23      	ldr	r3, [pc, #140]	; (80082c4 <USBD_SetConfig+0x144>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	461a      	mov	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	429a      	cmp	r2, r3
 8008240:	d02a      	beq.n	8008298 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	b2db      	uxtb	r3, r3
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7ff f988 	bl	8007560 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008250:	4b1c      	ldr	r3, [pc, #112]	; (80082c4 <USBD_SetConfig+0x144>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	461a      	mov	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800825a:	4b1a      	ldr	r3, [pc, #104]	; (80082c4 <USBD_SetConfig+0x144>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7ff f961 	bl	8007528 <USBD_SetClassConfig>
 8008266:	4603      	mov	r3, r0
 8008268:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800826a:	7bfb      	ldrb	r3, [r7, #15]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00f      	beq.n	8008290 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f8fe 	bl	8008474 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7ff f96d 	bl	8007560 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2202      	movs	r2, #2
 800828a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800828e:	e014      	b.n	80082ba <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f9ba 	bl	800860a <USBD_CtlSendStatus>
    break;
 8008296:	e010      	b.n	80082ba <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f9b6 	bl	800860a <USBD_CtlSendStatus>
    break;
 800829e:	e00c      	b.n	80082ba <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f8e6 	bl	8008474 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082a8:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <USBD_SetConfig+0x144>)
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7ff f956 	bl	8007560 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80082b4:	2303      	movs	r3, #3
 80082b6:	73fb      	strb	r3, [r7, #15]
    break;
 80082b8:	bf00      	nop
  }

  return ret;
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	20000494 	.word	0x20000494

080082c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	88db      	ldrh	r3, [r3, #6]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d004      	beq.n	80082e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f8c9 	bl	8008474 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80082e2:	e021      	b.n	8008328 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	db17      	blt.n	800831e <USBD_GetConfig+0x56>
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	dd02      	ble.n	80082f8 <USBD_GetConfig+0x30>
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d00b      	beq.n	800830e <USBD_GetConfig+0x46>
 80082f6:	e012      	b.n	800831e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	3308      	adds	r3, #8
 8008302:	2201      	movs	r2, #1
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f925 	bl	8008556 <USBD_CtlSendData>
      break;
 800830c:	e00c      	b.n	8008328 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	3304      	adds	r3, #4
 8008312:	2201      	movs	r2, #1
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f91d 	bl	8008556 <USBD_CtlSendData>
      break;
 800831c:	e004      	b.n	8008328 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8a7 	bl	8008474 <USBD_CtlError>
      break;
 8008326:	bf00      	nop
}
 8008328:	bf00      	nop
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008340:	3b01      	subs	r3, #1
 8008342:	2b02      	cmp	r3, #2
 8008344:	d81e      	bhi.n	8008384 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	88db      	ldrh	r3, [r3, #6]
 800834a:	2b02      	cmp	r3, #2
 800834c:	d004      	beq.n	8008358 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f88f 	bl	8008474 <USBD_CtlError>
      break;
 8008356:	e01a      	b.n	800838e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008364:	2b00      	cmp	r3, #0
 8008366:	d005      	beq.n	8008374 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	f043 0202 	orr.w	r2, r3, #2
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	330c      	adds	r3, #12
 8008378:	2202      	movs	r2, #2
 800837a:	4619      	mov	r1, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f8ea 	bl	8008556 <USBD_CtlSendData>
    break;
 8008382:	e004      	b.n	800838e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f874 	bl	8008474 <USBD_CtlError>
    break;
 800838c:	bf00      	nop
  }
}
 800838e:	bf00      	nop
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b082      	sub	sp, #8
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	885b      	ldrh	r3, [r3, #2]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d106      	bne.n	80083b6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f92a 	bl	800860a <USBD_CtlSendStatus>
  }
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ce:	3b01      	subs	r3, #1
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d80b      	bhi.n	80083ec <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	885b      	ldrh	r3, [r3, #2]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d10c      	bne.n	80083f6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f910 	bl	800860a <USBD_CtlSendStatus>
      }
      break;
 80083ea:	e004      	b.n	80083f6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f840 	bl	8008474 <USBD_CtlError>
      break;
 80083f4:	e000      	b.n	80083f8 <USBD_ClrFeature+0x3a>
      break;
 80083f6:	bf00      	nop
  }
}
 80083f8:	bf00      	nop
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	781a      	ldrb	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3301      	adds	r3, #1
 800841a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	781a      	ldrb	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3301      	adds	r3, #1
 8008428:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7ff fad3 	bl	80079d6 <SWAPBYTE>
 8008430:	4603      	mov	r3, r0
 8008432:	461a      	mov	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3301      	adds	r3, #1
 800843c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	3301      	adds	r3, #1
 8008442:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f7ff fac6 	bl	80079d6 <SWAPBYTE>
 800844a:	4603      	mov	r3, r0
 800844c:	461a      	mov	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3301      	adds	r3, #1
 8008456:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3301      	adds	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f7ff fab9 	bl	80079d6 <SWAPBYTE>
 8008464:	4603      	mov	r3, r0
 8008466:	461a      	mov	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	80da      	strh	r2, [r3, #6]
}
 800846c:	bf00      	nop
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800847e:	2180      	movs	r1, #128	; 0x80
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fcb9 	bl	8008df8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008486:	2100      	movs	r1, #0
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fcb5 	bl	8008df8 <USBD_LL_StallEP>
}
 800848e:	bf00      	nop
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b086      	sub	sp, #24
 800849a:	af00      	add	r7, sp, #0
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80084a2:	2300      	movs	r3, #0
 80084a4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d036      	beq.n	800851a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80084b0:	6938      	ldr	r0, [r7, #16]
 80084b2:	f000 f836 	bl	8008522 <USBD_GetLen>
 80084b6:	4603      	mov	r3, r0
 80084b8:	3301      	adds	r3, #1
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	b29a      	uxth	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	4413      	add	r3, r2
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	7812      	ldrb	r2, [r2, #0]
 80084ce:	701a      	strb	r2, [r3, #0]
  idx++;
 80084d0:	7dfb      	ldrb	r3, [r7, #23]
 80084d2:	3301      	adds	r3, #1
 80084d4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	4413      	add	r3, r2
 80084dc:	2203      	movs	r2, #3
 80084de:	701a      	strb	r2, [r3, #0]
  idx++;
 80084e0:	7dfb      	ldrb	r3, [r7, #23]
 80084e2:	3301      	adds	r3, #1
 80084e4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80084e6:	e013      	b.n	8008510 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80084e8:	7dfb      	ldrb	r3, [r7, #23]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	4413      	add	r3, r2
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	7812      	ldrb	r2, [r2, #0]
 80084f2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	3301      	adds	r3, #1
 80084f8:	613b      	str	r3, [r7, #16]
    idx++;
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	3301      	adds	r3, #1
 80084fe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	4413      	add	r3, r2
 8008506:	2200      	movs	r2, #0
 8008508:	701a      	strb	r2, [r3, #0]
    idx++;
 800850a:	7dfb      	ldrb	r3, [r7, #23]
 800850c:	3301      	adds	r3, #1
 800850e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e7      	bne.n	80084e8 <USBD_GetString+0x52>
 8008518:	e000      	b.n	800851c <USBD_GetString+0x86>
    return;
 800851a:	bf00      	nop
  }
}
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008532:	e005      	b.n	8008540 <USBD_GetLen+0x1e>
  {
    len++;
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	3301      	adds	r3, #1
 8008538:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	3301      	adds	r3, #1
 800853e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1f5      	bne.n	8008534 <USBD_GetLen+0x12>
  }

  return len;
 8008548:	7bfb      	ldrb	r3, [r7, #15]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	60b9      	str	r1, [r7, #8]
 8008560:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2202      	movs	r2, #2
 8008566:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	2100      	movs	r1, #0
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 fcc4 	bl	8008f0a <USBD_LL_Transmit>

  return USBD_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	2100      	movs	r1, #0
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 fcb3 	bl	8008f0a <USBD_LL_Transmit>

  return USBD_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b084      	sub	sp, #16
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	60f8      	str	r0, [r7, #12]
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2203      	movs	r2, #3
 80085be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	2100      	movs	r1, #0
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 fcb7 	bl	8008f4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	2100      	movs	r1, #0
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f000 fca6 	bl	8008f4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b082      	sub	sp, #8
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2204      	movs	r2, #4
 8008616:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800861a:	2300      	movs	r3, #0
 800861c:	2200      	movs	r2, #0
 800861e:	2100      	movs	r1, #0
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fc72 	bl	8008f0a <USBD_LL_Transmit>

  return USBD_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2205      	movs	r2, #5
 800863c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008640:	2300      	movs	r3, #0
 8008642:	2200      	movs	r2, #0
 8008644:	2100      	movs	r1, #0
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fc80 	bl	8008f4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800865c:	2200      	movs	r2, #0
 800865e:	4912      	ldr	r1, [pc, #72]	; (80086a8 <MX_USB_DEVICE_Init+0x50>)
 8008660:	4812      	ldr	r0, [pc, #72]	; (80086ac <MX_USB_DEVICE_Init+0x54>)
 8008662:	f7fe fef3 	bl	800744c <USBD_Init>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800866c:	f7f8 ffae 	bl	80015cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008670:	490f      	ldr	r1, [pc, #60]	; (80086b0 <MX_USB_DEVICE_Init+0x58>)
 8008672:	480e      	ldr	r0, [pc, #56]	; (80086ac <MX_USB_DEVICE_Init+0x54>)
 8008674:	f7fe ff20 	bl	80074b8 <USBD_RegisterClass>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800867e:	f7f8 ffa5 	bl	80015cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008682:	490c      	ldr	r1, [pc, #48]	; (80086b4 <MX_USB_DEVICE_Init+0x5c>)
 8008684:	4809      	ldr	r0, [pc, #36]	; (80086ac <MX_USB_DEVICE_Init+0x54>)
 8008686:	f7fe fe75 	bl	8007374 <USBD_CDC_RegisterInterface>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008690:	f7f8 ff9c 	bl	80015cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008694:	4805      	ldr	r0, [pc, #20]	; (80086ac <MX_USB_DEVICE_Init+0x54>)
 8008696:	f7fe ff30 	bl	80074fa <USBD_Start>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80086a0:	f7f8 ff94 	bl	80015cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80086a4:	bf00      	nop
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	20000130 	.word	0x20000130
 80086ac:	200005e4 	.word	0x200005e4
 80086b0:	20000018 	.word	0x20000018
 80086b4:	2000011c 	.word	0x2000011c

080086b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80086bc:	2200      	movs	r2, #0
 80086be:	4905      	ldr	r1, [pc, #20]	; (80086d4 <CDC_Init_FS+0x1c>)
 80086c0:	4805      	ldr	r0, [pc, #20]	; (80086d8 <CDC_Init_FS+0x20>)
 80086c2:	f7fe fe6c 	bl	800739e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80086c6:	4905      	ldr	r1, [pc, #20]	; (80086dc <CDC_Init_FS+0x24>)
 80086c8:	4803      	ldr	r0, [pc, #12]	; (80086d8 <CDC_Init_FS+0x20>)
 80086ca:	f7fe fe81 	bl	80073d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80086ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	200010b4 	.word	0x200010b4
 80086d8:	200005e4 	.word	0x200005e4
 80086dc:	200008b4 	.word	0x200008b4

080086e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80086e0:	b480      	push	{r7}
 80086e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80086e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	4603      	mov	r3, r0
 80086f8:	6039      	str	r1, [r7, #0]
 80086fa:	71fb      	strb	r3, [r7, #7]
 80086fc:	4613      	mov	r3, r2
 80086fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008700:	79fb      	ldrb	r3, [r7, #7]
 8008702:	2b23      	cmp	r3, #35	; 0x23
 8008704:	d84a      	bhi.n	800879c <CDC_Control_FS+0xac>
 8008706:	a201      	add	r2, pc, #4	; (adr r2, 800870c <CDC_Control_FS+0x1c>)
 8008708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870c:	0800879d 	.word	0x0800879d
 8008710:	0800879d 	.word	0x0800879d
 8008714:	0800879d 	.word	0x0800879d
 8008718:	0800879d 	.word	0x0800879d
 800871c:	0800879d 	.word	0x0800879d
 8008720:	0800879d 	.word	0x0800879d
 8008724:	0800879d 	.word	0x0800879d
 8008728:	0800879d 	.word	0x0800879d
 800872c:	0800879d 	.word	0x0800879d
 8008730:	0800879d 	.word	0x0800879d
 8008734:	0800879d 	.word	0x0800879d
 8008738:	0800879d 	.word	0x0800879d
 800873c:	0800879d 	.word	0x0800879d
 8008740:	0800879d 	.word	0x0800879d
 8008744:	0800879d 	.word	0x0800879d
 8008748:	0800879d 	.word	0x0800879d
 800874c:	0800879d 	.word	0x0800879d
 8008750:	0800879d 	.word	0x0800879d
 8008754:	0800879d 	.word	0x0800879d
 8008758:	0800879d 	.word	0x0800879d
 800875c:	0800879d 	.word	0x0800879d
 8008760:	0800879d 	.word	0x0800879d
 8008764:	0800879d 	.word	0x0800879d
 8008768:	0800879d 	.word	0x0800879d
 800876c:	0800879d 	.word	0x0800879d
 8008770:	0800879d 	.word	0x0800879d
 8008774:	0800879d 	.word	0x0800879d
 8008778:	0800879d 	.word	0x0800879d
 800877c:	0800879d 	.word	0x0800879d
 8008780:	0800879d 	.word	0x0800879d
 8008784:	0800879d 	.word	0x0800879d
 8008788:	0800879d 	.word	0x0800879d
 800878c:	0800879d 	.word	0x0800879d
 8008790:	0800879d 	.word	0x0800879d
 8008794:	0800879d 	.word	0x0800879d
 8008798:	0800879d 	.word	0x0800879d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800879c:	bf00      	nop
  }

  return (USBD_OK);
 800879e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	4805      	ldr	r0, [pc, #20]	; (80087d0 <CDC_Receive_FS+0x24>)
 80087ba:	f7fe fe09 	bl	80073d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80087be:	4804      	ldr	r0, [pc, #16]	; (80087d0 <CDC_Receive_FS+0x24>)
 80087c0:	f7fe fe1a 	bl	80073f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80087c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	200005e4 	.word	0x200005e4

080087d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b087      	sub	sp, #28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	4613      	mov	r3, r2
 80087e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80087e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	371c      	adds	r7, #28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
	...

080087f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	6039      	str	r1, [r7, #0]
 8008802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	2212      	movs	r2, #18
 8008808:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800880a:	4b03      	ldr	r3, [pc, #12]	; (8008818 <USBD_FS_DeviceDescriptor+0x20>)
}
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	2000014c 	.word	0x2000014c

0800881c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	4603      	mov	r3, r0
 8008824:	6039      	str	r1, [r7, #0]
 8008826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2204      	movs	r2, #4
 800882c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800882e:	4b03      	ldr	r3, [pc, #12]	; (800883c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008830:	4618      	mov	r0, r3
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr
 800883c:	20000160 	.word	0x20000160

08008840 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	6039      	str	r1, [r7, #0]
 800884a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800884c:	79fb      	ldrb	r3, [r7, #7]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d105      	bne.n	800885e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	4907      	ldr	r1, [pc, #28]	; (8008874 <USBD_FS_ProductStrDescriptor+0x34>)
 8008856:	4808      	ldr	r0, [pc, #32]	; (8008878 <USBD_FS_ProductStrDescriptor+0x38>)
 8008858:	f7ff fe1d 	bl	8008496 <USBD_GetString>
 800885c:	e004      	b.n	8008868 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	4904      	ldr	r1, [pc, #16]	; (8008874 <USBD_FS_ProductStrDescriptor+0x34>)
 8008862:	4805      	ldr	r0, [pc, #20]	; (8008878 <USBD_FS_ProductStrDescriptor+0x38>)
 8008864:	f7ff fe17 	bl	8008496 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008868:	4b02      	ldr	r3, [pc, #8]	; (8008874 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	200018b4 	.word	0x200018b4
 8008878:	0800b134 	.word	0x0800b134

0800887c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	4603      	mov	r3, r0
 8008884:	6039      	str	r1, [r7, #0]
 8008886:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	4904      	ldr	r1, [pc, #16]	; (800889c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800888c:	4804      	ldr	r0, [pc, #16]	; (80088a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800888e:	f7ff fe02 	bl	8008496 <USBD_GetString>
  return USBD_StrDesc;
 8008892:	4b02      	ldr	r3, [pc, #8]	; (800889c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008894:	4618      	mov	r0, r3
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	200018b4 	.word	0x200018b4
 80088a0:	0800b14c 	.word	0x0800b14c

080088a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	6039      	str	r1, [r7, #0]
 80088ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	221a      	movs	r2, #26
 80088b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80088b6:	f000 f843 	bl	8008940 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80088ba:	4b02      	ldr	r3, [pc, #8]	; (80088c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	20000164 	.word	0x20000164

080088c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	4603      	mov	r3, r0
 80088d0:	6039      	str	r1, [r7, #0]
 80088d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80088d4:	79fb      	ldrb	r3, [r7, #7]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d105      	bne.n	80088e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	4907      	ldr	r1, [pc, #28]	; (80088fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80088de:	4808      	ldr	r0, [pc, #32]	; (8008900 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088e0:	f7ff fdd9 	bl	8008496 <USBD_GetString>
 80088e4:	e004      	b.n	80088f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	4904      	ldr	r1, [pc, #16]	; (80088fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80088ea:	4805      	ldr	r0, [pc, #20]	; (8008900 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088ec:	f7ff fdd3 	bl	8008496 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088f0:	4b02      	ldr	r3, [pc, #8]	; (80088fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	200018b4 	.word	0x200018b4
 8008900:	0800b160 	.word	0x0800b160

08008904 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	4603      	mov	r3, r0
 800890c:	6039      	str	r1, [r7, #0]
 800890e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008910:	79fb      	ldrb	r3, [r7, #7]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d105      	bne.n	8008922 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	4907      	ldr	r1, [pc, #28]	; (8008938 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800891a:	4808      	ldr	r0, [pc, #32]	; (800893c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800891c:	f7ff fdbb 	bl	8008496 <USBD_GetString>
 8008920:	e004      	b.n	800892c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	4904      	ldr	r1, [pc, #16]	; (8008938 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008926:	4805      	ldr	r0, [pc, #20]	; (800893c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008928:	f7ff fdb5 	bl	8008496 <USBD_GetString>
  }
  return USBD_StrDesc;
 800892c:	4b02      	ldr	r3, [pc, #8]	; (8008938 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	200018b4 	.word	0x200018b4
 800893c:	0800b16c 	.word	0x0800b16c

08008940 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008946:	4b0f      	ldr	r3, [pc, #60]	; (8008984 <Get_SerialNum+0x44>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800894c:	4b0e      	ldr	r3, [pc, #56]	; (8008988 <Get_SerialNum+0x48>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008952:	4b0e      	ldr	r3, [pc, #56]	; (800898c <Get_SerialNum+0x4c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4413      	add	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d009      	beq.n	800897a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008966:	2208      	movs	r2, #8
 8008968:	4909      	ldr	r1, [pc, #36]	; (8008990 <Get_SerialNum+0x50>)
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f000 f814 	bl	8008998 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008970:	2204      	movs	r2, #4
 8008972:	4908      	ldr	r1, [pc, #32]	; (8008994 <Get_SerialNum+0x54>)
 8008974:	68b8      	ldr	r0, [r7, #8]
 8008976:	f000 f80f 	bl	8008998 <IntToUnicode>
  }
}
 800897a:	bf00      	nop
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	1fff7a10 	.word	0x1fff7a10
 8008988:	1fff7a14 	.word	0x1fff7a14
 800898c:	1fff7a18 	.word	0x1fff7a18
 8008990:	20000166 	.word	0x20000166
 8008994:	20000176 	.word	0x20000176

08008998 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	4613      	mov	r3, r2
 80089a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80089aa:	2300      	movs	r3, #0
 80089ac:	75fb      	strb	r3, [r7, #23]
 80089ae:	e027      	b.n	8008a00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	0f1b      	lsrs	r3, r3, #28
 80089b4:	2b09      	cmp	r3, #9
 80089b6:	d80b      	bhi.n	80089d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	0f1b      	lsrs	r3, r3, #28
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	7dfb      	ldrb	r3, [r7, #23]
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	4619      	mov	r1, r3
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	440b      	add	r3, r1
 80089c8:	3230      	adds	r2, #48	; 0x30
 80089ca:	b2d2      	uxtb	r2, r2
 80089cc:	701a      	strb	r2, [r3, #0]
 80089ce:	e00a      	b.n	80089e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	0f1b      	lsrs	r3, r3, #28
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	4619      	mov	r1, r3
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	440b      	add	r3, r1
 80089e0:	3237      	adds	r2, #55	; 0x37
 80089e2:	b2d2      	uxtb	r2, r2
 80089e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
 80089ee:	005b      	lsls	r3, r3, #1
 80089f0:	3301      	adds	r3, #1
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	4413      	add	r3, r2
 80089f6:	2200      	movs	r2, #0
 80089f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089fa:	7dfb      	ldrb	r3, [r7, #23]
 80089fc:	3301      	adds	r3, #1
 80089fe:	75fb      	strb	r3, [r7, #23]
 8008a00:	7dfa      	ldrb	r2, [r7, #23]
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d3d3      	bcc.n	80089b0 <IntToUnicode+0x18>
  }
}
 8008a08:	bf00      	nop
 8008a0a:	371c      	adds	r7, #28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08a      	sub	sp, #40	; 0x28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a1c:	f107 0314 	add.w	r3, r7, #20
 8008a20:	2200      	movs	r2, #0
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	605a      	str	r2, [r3, #4]
 8008a26:	609a      	str	r2, [r3, #8]
 8008a28:	60da      	str	r2, [r3, #12]
 8008a2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a34:	d13a      	bne.n	8008aac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a36:	2300      	movs	r3, #0
 8008a38:	613b      	str	r3, [r7, #16]
 8008a3a:	4b1e      	ldr	r3, [pc, #120]	; (8008ab4 <HAL_PCD_MspInit+0xa0>)
 8008a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3e:	4a1d      	ldr	r2, [pc, #116]	; (8008ab4 <HAL_PCD_MspInit+0xa0>)
 8008a40:	f043 0301 	orr.w	r3, r3, #1
 8008a44:	6313      	str	r3, [r2, #48]	; 0x30
 8008a46:	4b1b      	ldr	r3, [pc, #108]	; (8008ab4 <HAL_PCD_MspInit+0xa0>)
 8008a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	613b      	str	r3, [r7, #16]
 8008a50:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008a52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a58:	2302      	movs	r3, #2
 8008a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a60:	2303      	movs	r3, #3
 8008a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a64:	230a      	movs	r3, #10
 8008a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a68:	f107 0314 	add.w	r3, r7, #20
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	4812      	ldr	r0, [pc, #72]	; (8008ab8 <HAL_PCD_MspInit+0xa4>)
 8008a70:	f7f9 fd24 	bl	80024bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a74:	4b0f      	ldr	r3, [pc, #60]	; (8008ab4 <HAL_PCD_MspInit+0xa0>)
 8008a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a78:	4a0e      	ldr	r2, [pc, #56]	; (8008ab4 <HAL_PCD_MspInit+0xa0>)
 8008a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7e:	6353      	str	r3, [r2, #52]	; 0x34
 8008a80:	2300      	movs	r3, #0
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	4b0b      	ldr	r3, [pc, #44]	; (8008ab4 <HAL_PCD_MspInit+0xa0>)
 8008a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a88:	4a0a      	ldr	r2, [pc, #40]	; (8008ab4 <HAL_PCD_MspInit+0xa0>)
 8008a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a8e:	6453      	str	r3, [r2, #68]	; 0x44
 8008a90:	4b08      	ldr	r3, [pc, #32]	; (8008ab4 <HAL_PCD_MspInit+0xa0>)
 8008a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a98:	60fb      	str	r3, [r7, #12]
 8008a9a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	2043      	movs	r0, #67	; 0x43
 8008aa2:	f7f9 fcb2 	bl	800240a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008aa6:	2043      	movs	r0, #67	; 0x43
 8008aa8:	f7f9 fccb 	bl	8002442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008aac:	bf00      	nop
 8008aae:	3728      	adds	r7, #40	; 0x28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	40023800 	.word	0x40023800
 8008ab8:	40020000 	.word	0x40020000

08008abc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	f7fe fd5c 	bl	8007590 <USBD_LL_SetupStage>
}
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008af2:	78fa      	ldrb	r2, [r7, #3]
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	4613      	mov	r3, r2
 8008af8:	00db      	lsls	r3, r3, #3
 8008afa:	1a9b      	subs	r3, r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	440b      	add	r3, r1
 8008b00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	78fb      	ldrb	r3, [r7, #3]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	f7fe fd94 	bl	8007636 <USBD_LL_DataOutStage>
}
 8008b0e:	bf00      	nop
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b082      	sub	sp, #8
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008b28:	78fa      	ldrb	r2, [r7, #3]
 8008b2a:	6879      	ldr	r1, [r7, #4]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	00db      	lsls	r3, r3, #3
 8008b30:	1a9b      	subs	r3, r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	440b      	add	r3, r1
 8008b36:	3348      	adds	r3, #72	; 0x48
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	78fb      	ldrb	r3, [r7, #3]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	f7fe fddd 	bl	80076fc <USBD_LL_DataInStage>
}
 8008b42:	bf00      	nop
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fe fee1 	bl	8007920 <USBD_LL_SOF>
}
 8008b5e:	bf00      	nop
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d102      	bne.n	8008b80 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	73fb      	strb	r3, [r7, #15]
 8008b7e:	e008      	b.n	8008b92 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d102      	bne.n	8008b8e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	73fb      	strb	r3, [r7, #15]
 8008b8c:	e001      	b.n	8008b92 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008b8e:	f7f8 fd1d 	bl	80015cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b98:	7bfa      	ldrb	r2, [r7, #15]
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe fe84 	bl	80078aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fe fe3d 	bl	8007828 <USBD_LL_Reset>
}
 8008bae:	bf00      	nop
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fe fe7f 	bl	80078ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	6812      	ldr	r2, [r2, #0]
 8008bda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bde:	f043 0301 	orr.w	r3, r3, #1
 8008be2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a1b      	ldr	r3, [r3, #32]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d005      	beq.n	8008bf8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bec:	4b04      	ldr	r3, [pc, #16]	; (8008c00 <HAL_PCD_SuspendCallback+0x48>)
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	4a03      	ldr	r2, [pc, #12]	; (8008c00 <HAL_PCD_SuspendCallback+0x48>)
 8008bf2:	f043 0306 	orr.w	r3, r3, #6
 8008bf6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008bf8:	bf00      	nop
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	e000ed00 	.word	0xe000ed00

08008c04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fe fe6e 	bl	80078f4 <USBD_LL_Resume>
}
 8008c18:	bf00      	nop
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	4611      	mov	r1, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fe fe99 	bl	800796e <USBD_LL_IsoOUTIncomplete>
}
 8008c3c:	bf00      	nop
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c56:	78fa      	ldrb	r2, [r7, #3]
 8008c58:	4611      	mov	r1, r2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fe fe7a 	bl	8007954 <USBD_LL_IsoINIncomplete>
}
 8008c60:	bf00      	nop
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fe fe86 	bl	8007988 <USBD_LL_DevConnected>
}
 8008c7c:	bf00      	nop
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe fe83 	bl	800799e <USBD_LL_DevDisconnected>
}
 8008c98:	bf00      	nop
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d13c      	bne.n	8008d2a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008cb0:	4a20      	ldr	r2, [pc, #128]	; (8008d34 <USBD_LL_Init+0x94>)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a1e      	ldr	r2, [pc, #120]	; (8008d34 <USBD_LL_Init+0x94>)
 8008cbc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008cc0:	4b1c      	ldr	r3, [pc, #112]	; (8008d34 <USBD_LL_Init+0x94>)
 8008cc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008cc6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008cc8:	4b1a      	ldr	r3, [pc, #104]	; (8008d34 <USBD_LL_Init+0x94>)
 8008cca:	2204      	movs	r2, #4
 8008ccc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008cce:	4b19      	ldr	r3, [pc, #100]	; (8008d34 <USBD_LL_Init+0x94>)
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008cd4:	4b17      	ldr	r3, [pc, #92]	; (8008d34 <USBD_LL_Init+0x94>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008cda:	4b16      	ldr	r3, [pc, #88]	; (8008d34 <USBD_LL_Init+0x94>)
 8008cdc:	2202      	movs	r2, #2
 8008cde:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ce0:	4b14      	ldr	r3, [pc, #80]	; (8008d34 <USBD_LL_Init+0x94>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008ce6:	4b13      	ldr	r3, [pc, #76]	; (8008d34 <USBD_LL_Init+0x94>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008cec:	4b11      	ldr	r3, [pc, #68]	; (8008d34 <USBD_LL_Init+0x94>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008cf2:	4b10      	ldr	r3, [pc, #64]	; (8008d34 <USBD_LL_Init+0x94>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008cf8:	4b0e      	ldr	r3, [pc, #56]	; (8008d34 <USBD_LL_Init+0x94>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008cfe:	480d      	ldr	r0, [pc, #52]	; (8008d34 <USBD_LL_Init+0x94>)
 8008d00:	f7f9 fec8 	bl	8002a94 <HAL_PCD_Init>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008d0a:	f7f8 fc5f 	bl	80015cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d0e:	2180      	movs	r1, #128	; 0x80
 8008d10:	4808      	ldr	r0, [pc, #32]	; (8008d34 <USBD_LL_Init+0x94>)
 8008d12:	f7fb f826 	bl	8003d62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d16:	2240      	movs	r2, #64	; 0x40
 8008d18:	2100      	movs	r1, #0
 8008d1a:	4806      	ldr	r0, [pc, #24]	; (8008d34 <USBD_LL_Init+0x94>)
 8008d1c:	f7fa ffda 	bl	8003cd4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d20:	2280      	movs	r2, #128	; 0x80
 8008d22:	2101      	movs	r1, #1
 8008d24:	4803      	ldr	r0, [pc, #12]	; (8008d34 <USBD_LL_Init+0x94>)
 8008d26:	f7fa ffd5 	bl	8003cd4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	20001ab4 	.word	0x20001ab4

08008d38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7f9 ffbd 	bl	8002cce <HAL_PCD_Start>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 f92a 	bl	8008fb4 <USBD_Get_USB_Status>
 8008d60:	4603      	mov	r3, r0
 8008d62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	4608      	mov	r0, r1
 8008d78:	4611      	mov	r1, r2
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	70fb      	strb	r3, [r7, #3]
 8008d80:	460b      	mov	r3, r1
 8008d82:	70bb      	strb	r3, [r7, #2]
 8008d84:	4613      	mov	r3, r2
 8008d86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d96:	78bb      	ldrb	r3, [r7, #2]
 8008d98:	883a      	ldrh	r2, [r7, #0]
 8008d9a:	78f9      	ldrb	r1, [r7, #3]
 8008d9c:	f7fa fba1 	bl	80034e2 <HAL_PCD_EP_Open>
 8008da0:	4603      	mov	r3, r0
 8008da2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 f904 	bl	8008fb4 <USBD_Get_USB_Status>
 8008dac:	4603      	mov	r3, r0
 8008dae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008db0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008dd4:	78fa      	ldrb	r2, [r7, #3]
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fa fbea 	bl	80035b2 <HAL_PCD_EP_Close>
 8008dde:	4603      	mov	r3, r0
 8008de0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f000 f8e5 	bl	8008fb4 <USBD_Get_USB_Status>
 8008dea:	4603      	mov	r3, r0
 8008dec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	460b      	mov	r3, r1
 8008e02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e12:	78fa      	ldrb	r2, [r7, #3]
 8008e14:	4611      	mov	r1, r2
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fa fcc2 	bl	80037a0 <HAL_PCD_EP_SetStall>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 f8c6 	bl	8008fb4 <USBD_Get_USB_Status>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b084      	sub	sp, #16
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e50:	78fa      	ldrb	r2, [r7, #3]
 8008e52:	4611      	mov	r1, r2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7fa fd07 	bl	8003868 <HAL_PCD_EP_ClrStall>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 f8a7 	bl	8008fb4 <USBD_Get_USB_Status>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	da0b      	bge.n	8008ea8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e90:	78fb      	ldrb	r3, [r7, #3]
 8008e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e96:	68f9      	ldr	r1, [r7, #12]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	00db      	lsls	r3, r3, #3
 8008e9c:	1a9b      	subs	r3, r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	440b      	add	r3, r1
 8008ea2:	333e      	adds	r3, #62	; 0x3e
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	e00b      	b.n	8008ec0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ea8:	78fb      	ldrb	r3, [r7, #3]
 8008eaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eae:	68f9      	ldr	r1, [r7, #12]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	00db      	lsls	r3, r3, #3
 8008eb4:	1a9b      	subs	r3, r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	440b      	add	r3, r1
 8008eba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ebe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ee6:	78fa      	ldrb	r2, [r7, #3]
 8008ee8:	4611      	mov	r1, r2
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fa fad4 	bl	8003498 <HAL_PCD_SetAddress>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 f85c 	bl	8008fb4 <USBD_Get_USB_Status>
 8008efc:	4603      	mov	r3, r0
 8008efe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b086      	sub	sp, #24
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	60f8      	str	r0, [r7, #12]
 8008f12:	607a      	str	r2, [r7, #4]
 8008f14:	603b      	str	r3, [r7, #0]
 8008f16:	460b      	mov	r3, r1
 8008f18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f28:	7af9      	ldrb	r1, [r7, #11]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	f7fa fbed 	bl	800370c <HAL_PCD_EP_Transmit>
 8008f32:	4603      	mov	r3, r0
 8008f34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f36:	7dfb      	ldrb	r3, [r7, #23]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 f83b 	bl	8008fb4 <USBD_Get_USB_Status>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f42:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3718      	adds	r7, #24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	607a      	str	r2, [r7, #4]
 8008f56:	603b      	str	r3, [r7, #0]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f60:	2300      	movs	r3, #0
 8008f62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f6a:	7af9      	ldrb	r1, [r7, #11]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	f7fa fb69 	bl	8003646 <HAL_PCD_EP_Receive>
 8008f74:	4603      	mov	r3, r0
 8008f76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 f81a 	bl	8008fb4 <USBD_Get_USB_Status>
 8008f80:	4603      	mov	r3, r0
 8008f82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f84:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b082      	sub	sp, #8
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	460b      	mov	r3, r1
 8008f98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fa0:	78fa      	ldrb	r2, [r7, #3]
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fa fb99 	bl	80036dc <HAL_PCD_EP_GetRxCount>
 8008faa:	4603      	mov	r3, r0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d817      	bhi.n	8008ff8 <USBD_Get_USB_Status+0x44>
 8008fc8:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <USBD_Get_USB_Status+0x1c>)
 8008fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fce:	bf00      	nop
 8008fd0:	08008fe1 	.word	0x08008fe1
 8008fd4:	08008fe7 	.word	0x08008fe7
 8008fd8:	08008fed 	.word	0x08008fed
 8008fdc:	08008ff3 	.word	0x08008ff3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe4:	e00b      	b.n	8008ffe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	73fb      	strb	r3, [r7, #15]
    break;
 8008fea:	e008      	b.n	8008ffe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fec:	2301      	movs	r3, #1
 8008fee:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff0:	e005      	b.n	8008ffe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff6:	e002      	b.n	8008ffe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8008ffc:	bf00      	nop
  }
  return usb_status;
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <__errno>:
 800900c:	4b01      	ldr	r3, [pc, #4]	; (8009014 <__errno+0x8>)
 800900e:	6818      	ldr	r0, [r3, #0]
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	20000180 	.word	0x20000180

08009018 <__libc_init_array>:
 8009018:	b570      	push	{r4, r5, r6, lr}
 800901a:	4e0d      	ldr	r6, [pc, #52]	; (8009050 <__libc_init_array+0x38>)
 800901c:	4c0d      	ldr	r4, [pc, #52]	; (8009054 <__libc_init_array+0x3c>)
 800901e:	1ba4      	subs	r4, r4, r6
 8009020:	10a4      	asrs	r4, r4, #2
 8009022:	2500      	movs	r5, #0
 8009024:	42a5      	cmp	r5, r4
 8009026:	d109      	bne.n	800903c <__libc_init_array+0x24>
 8009028:	4e0b      	ldr	r6, [pc, #44]	; (8009058 <__libc_init_array+0x40>)
 800902a:	4c0c      	ldr	r4, [pc, #48]	; (800905c <__libc_init_array+0x44>)
 800902c:	f002 f866 	bl	800b0fc <_init>
 8009030:	1ba4      	subs	r4, r4, r6
 8009032:	10a4      	asrs	r4, r4, #2
 8009034:	2500      	movs	r5, #0
 8009036:	42a5      	cmp	r5, r4
 8009038:	d105      	bne.n	8009046 <__libc_init_array+0x2e>
 800903a:	bd70      	pop	{r4, r5, r6, pc}
 800903c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009040:	4798      	blx	r3
 8009042:	3501      	adds	r5, #1
 8009044:	e7ee      	b.n	8009024 <__libc_init_array+0xc>
 8009046:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800904a:	4798      	blx	r3
 800904c:	3501      	adds	r5, #1
 800904e:	e7f2      	b.n	8009036 <__libc_init_array+0x1e>
 8009050:	0800b400 	.word	0x0800b400
 8009054:	0800b400 	.word	0x0800b400
 8009058:	0800b400 	.word	0x0800b400
 800905c:	0800b404 	.word	0x0800b404

08009060 <malloc>:
 8009060:	4b02      	ldr	r3, [pc, #8]	; (800906c <malloc+0xc>)
 8009062:	4601      	mov	r1, r0
 8009064:	6818      	ldr	r0, [r3, #0]
 8009066:	f000 b86d 	b.w	8009144 <_malloc_r>
 800906a:	bf00      	nop
 800906c:	20000180 	.word	0x20000180

08009070 <free>:
 8009070:	4b02      	ldr	r3, [pc, #8]	; (800907c <free+0xc>)
 8009072:	4601      	mov	r1, r0
 8009074:	6818      	ldr	r0, [r3, #0]
 8009076:	f000 b817 	b.w	80090a8 <_free_r>
 800907a:	bf00      	nop
 800907c:	20000180 	.word	0x20000180

08009080 <memcpy>:
 8009080:	b510      	push	{r4, lr}
 8009082:	1e43      	subs	r3, r0, #1
 8009084:	440a      	add	r2, r1
 8009086:	4291      	cmp	r1, r2
 8009088:	d100      	bne.n	800908c <memcpy+0xc>
 800908a:	bd10      	pop	{r4, pc}
 800908c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009090:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009094:	e7f7      	b.n	8009086 <memcpy+0x6>

08009096 <memset>:
 8009096:	4402      	add	r2, r0
 8009098:	4603      	mov	r3, r0
 800909a:	4293      	cmp	r3, r2
 800909c:	d100      	bne.n	80090a0 <memset+0xa>
 800909e:	4770      	bx	lr
 80090a0:	f803 1b01 	strb.w	r1, [r3], #1
 80090a4:	e7f9      	b.n	800909a <memset+0x4>
	...

080090a8 <_free_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4605      	mov	r5, r0
 80090ac:	2900      	cmp	r1, #0
 80090ae:	d045      	beq.n	800913c <_free_r+0x94>
 80090b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b4:	1f0c      	subs	r4, r1, #4
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	bfb8      	it	lt
 80090ba:	18e4      	addlt	r4, r4, r3
 80090bc:	f001 fb7a 	bl	800a7b4 <__malloc_lock>
 80090c0:	4a1f      	ldr	r2, [pc, #124]	; (8009140 <_free_r+0x98>)
 80090c2:	6813      	ldr	r3, [r2, #0]
 80090c4:	4610      	mov	r0, r2
 80090c6:	b933      	cbnz	r3, 80090d6 <_free_r+0x2e>
 80090c8:	6063      	str	r3, [r4, #4]
 80090ca:	6014      	str	r4, [r2, #0]
 80090cc:	4628      	mov	r0, r5
 80090ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090d2:	f001 bb70 	b.w	800a7b6 <__malloc_unlock>
 80090d6:	42a3      	cmp	r3, r4
 80090d8:	d90c      	bls.n	80090f4 <_free_r+0x4c>
 80090da:	6821      	ldr	r1, [r4, #0]
 80090dc:	1862      	adds	r2, r4, r1
 80090de:	4293      	cmp	r3, r2
 80090e0:	bf04      	itt	eq
 80090e2:	681a      	ldreq	r2, [r3, #0]
 80090e4:	685b      	ldreq	r3, [r3, #4]
 80090e6:	6063      	str	r3, [r4, #4]
 80090e8:	bf04      	itt	eq
 80090ea:	1852      	addeq	r2, r2, r1
 80090ec:	6022      	streq	r2, [r4, #0]
 80090ee:	6004      	str	r4, [r0, #0]
 80090f0:	e7ec      	b.n	80090cc <_free_r+0x24>
 80090f2:	4613      	mov	r3, r2
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	b10a      	cbz	r2, 80090fc <_free_r+0x54>
 80090f8:	42a2      	cmp	r2, r4
 80090fa:	d9fa      	bls.n	80090f2 <_free_r+0x4a>
 80090fc:	6819      	ldr	r1, [r3, #0]
 80090fe:	1858      	adds	r0, r3, r1
 8009100:	42a0      	cmp	r0, r4
 8009102:	d10b      	bne.n	800911c <_free_r+0x74>
 8009104:	6820      	ldr	r0, [r4, #0]
 8009106:	4401      	add	r1, r0
 8009108:	1858      	adds	r0, r3, r1
 800910a:	4282      	cmp	r2, r0
 800910c:	6019      	str	r1, [r3, #0]
 800910e:	d1dd      	bne.n	80090cc <_free_r+0x24>
 8009110:	6810      	ldr	r0, [r2, #0]
 8009112:	6852      	ldr	r2, [r2, #4]
 8009114:	605a      	str	r2, [r3, #4]
 8009116:	4401      	add	r1, r0
 8009118:	6019      	str	r1, [r3, #0]
 800911a:	e7d7      	b.n	80090cc <_free_r+0x24>
 800911c:	d902      	bls.n	8009124 <_free_r+0x7c>
 800911e:	230c      	movs	r3, #12
 8009120:	602b      	str	r3, [r5, #0]
 8009122:	e7d3      	b.n	80090cc <_free_r+0x24>
 8009124:	6820      	ldr	r0, [r4, #0]
 8009126:	1821      	adds	r1, r4, r0
 8009128:	428a      	cmp	r2, r1
 800912a:	bf04      	itt	eq
 800912c:	6811      	ldreq	r1, [r2, #0]
 800912e:	6852      	ldreq	r2, [r2, #4]
 8009130:	6062      	str	r2, [r4, #4]
 8009132:	bf04      	itt	eq
 8009134:	1809      	addeq	r1, r1, r0
 8009136:	6021      	streq	r1, [r4, #0]
 8009138:	605c      	str	r4, [r3, #4]
 800913a:	e7c7      	b.n	80090cc <_free_r+0x24>
 800913c:	bd38      	pop	{r3, r4, r5, pc}
 800913e:	bf00      	nop
 8009140:	20000498 	.word	0x20000498

08009144 <_malloc_r>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	1ccd      	adds	r5, r1, #3
 8009148:	f025 0503 	bic.w	r5, r5, #3
 800914c:	3508      	adds	r5, #8
 800914e:	2d0c      	cmp	r5, #12
 8009150:	bf38      	it	cc
 8009152:	250c      	movcc	r5, #12
 8009154:	2d00      	cmp	r5, #0
 8009156:	4606      	mov	r6, r0
 8009158:	db01      	blt.n	800915e <_malloc_r+0x1a>
 800915a:	42a9      	cmp	r1, r5
 800915c:	d903      	bls.n	8009166 <_malloc_r+0x22>
 800915e:	230c      	movs	r3, #12
 8009160:	6033      	str	r3, [r6, #0]
 8009162:	2000      	movs	r0, #0
 8009164:	bd70      	pop	{r4, r5, r6, pc}
 8009166:	f001 fb25 	bl	800a7b4 <__malloc_lock>
 800916a:	4a21      	ldr	r2, [pc, #132]	; (80091f0 <_malloc_r+0xac>)
 800916c:	6814      	ldr	r4, [r2, #0]
 800916e:	4621      	mov	r1, r4
 8009170:	b991      	cbnz	r1, 8009198 <_malloc_r+0x54>
 8009172:	4c20      	ldr	r4, [pc, #128]	; (80091f4 <_malloc_r+0xb0>)
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	b91b      	cbnz	r3, 8009180 <_malloc_r+0x3c>
 8009178:	4630      	mov	r0, r6
 800917a:	f000 fc99 	bl	8009ab0 <_sbrk_r>
 800917e:	6020      	str	r0, [r4, #0]
 8009180:	4629      	mov	r1, r5
 8009182:	4630      	mov	r0, r6
 8009184:	f000 fc94 	bl	8009ab0 <_sbrk_r>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d124      	bne.n	80091d6 <_malloc_r+0x92>
 800918c:	230c      	movs	r3, #12
 800918e:	6033      	str	r3, [r6, #0]
 8009190:	4630      	mov	r0, r6
 8009192:	f001 fb10 	bl	800a7b6 <__malloc_unlock>
 8009196:	e7e4      	b.n	8009162 <_malloc_r+0x1e>
 8009198:	680b      	ldr	r3, [r1, #0]
 800919a:	1b5b      	subs	r3, r3, r5
 800919c:	d418      	bmi.n	80091d0 <_malloc_r+0x8c>
 800919e:	2b0b      	cmp	r3, #11
 80091a0:	d90f      	bls.n	80091c2 <_malloc_r+0x7e>
 80091a2:	600b      	str	r3, [r1, #0]
 80091a4:	50cd      	str	r5, [r1, r3]
 80091a6:	18cc      	adds	r4, r1, r3
 80091a8:	4630      	mov	r0, r6
 80091aa:	f001 fb04 	bl	800a7b6 <__malloc_unlock>
 80091ae:	f104 000b 	add.w	r0, r4, #11
 80091b2:	1d23      	adds	r3, r4, #4
 80091b4:	f020 0007 	bic.w	r0, r0, #7
 80091b8:	1ac3      	subs	r3, r0, r3
 80091ba:	d0d3      	beq.n	8009164 <_malloc_r+0x20>
 80091bc:	425a      	negs	r2, r3
 80091be:	50e2      	str	r2, [r4, r3]
 80091c0:	e7d0      	b.n	8009164 <_malloc_r+0x20>
 80091c2:	428c      	cmp	r4, r1
 80091c4:	684b      	ldr	r3, [r1, #4]
 80091c6:	bf16      	itet	ne
 80091c8:	6063      	strne	r3, [r4, #4]
 80091ca:	6013      	streq	r3, [r2, #0]
 80091cc:	460c      	movne	r4, r1
 80091ce:	e7eb      	b.n	80091a8 <_malloc_r+0x64>
 80091d0:	460c      	mov	r4, r1
 80091d2:	6849      	ldr	r1, [r1, #4]
 80091d4:	e7cc      	b.n	8009170 <_malloc_r+0x2c>
 80091d6:	1cc4      	adds	r4, r0, #3
 80091d8:	f024 0403 	bic.w	r4, r4, #3
 80091dc:	42a0      	cmp	r0, r4
 80091de:	d005      	beq.n	80091ec <_malloc_r+0xa8>
 80091e0:	1a21      	subs	r1, r4, r0
 80091e2:	4630      	mov	r0, r6
 80091e4:	f000 fc64 	bl	8009ab0 <_sbrk_r>
 80091e8:	3001      	adds	r0, #1
 80091ea:	d0cf      	beq.n	800918c <_malloc_r+0x48>
 80091ec:	6025      	str	r5, [r4, #0]
 80091ee:	e7db      	b.n	80091a8 <_malloc_r+0x64>
 80091f0:	20000498 	.word	0x20000498
 80091f4:	2000049c 	.word	0x2000049c

080091f8 <__cvt>:
 80091f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091fc:	ec55 4b10 	vmov	r4, r5, d0
 8009200:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009202:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009206:	2d00      	cmp	r5, #0
 8009208:	460e      	mov	r6, r1
 800920a:	4691      	mov	r9, r2
 800920c:	4619      	mov	r1, r3
 800920e:	bfb8      	it	lt
 8009210:	4622      	movlt	r2, r4
 8009212:	462b      	mov	r3, r5
 8009214:	f027 0720 	bic.w	r7, r7, #32
 8009218:	bfbb      	ittet	lt
 800921a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800921e:	461d      	movlt	r5, r3
 8009220:	2300      	movge	r3, #0
 8009222:	232d      	movlt	r3, #45	; 0x2d
 8009224:	bfb8      	it	lt
 8009226:	4614      	movlt	r4, r2
 8009228:	2f46      	cmp	r7, #70	; 0x46
 800922a:	700b      	strb	r3, [r1, #0]
 800922c:	d004      	beq.n	8009238 <__cvt+0x40>
 800922e:	2f45      	cmp	r7, #69	; 0x45
 8009230:	d100      	bne.n	8009234 <__cvt+0x3c>
 8009232:	3601      	adds	r6, #1
 8009234:	2102      	movs	r1, #2
 8009236:	e000      	b.n	800923a <__cvt+0x42>
 8009238:	2103      	movs	r1, #3
 800923a:	ab03      	add	r3, sp, #12
 800923c:	9301      	str	r3, [sp, #4]
 800923e:	ab02      	add	r3, sp, #8
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	4632      	mov	r2, r6
 8009244:	4653      	mov	r3, sl
 8009246:	ec45 4b10 	vmov	d0, r4, r5
 800924a:	f000 fced 	bl	8009c28 <_dtoa_r>
 800924e:	2f47      	cmp	r7, #71	; 0x47
 8009250:	4680      	mov	r8, r0
 8009252:	d102      	bne.n	800925a <__cvt+0x62>
 8009254:	f019 0f01 	tst.w	r9, #1
 8009258:	d026      	beq.n	80092a8 <__cvt+0xb0>
 800925a:	2f46      	cmp	r7, #70	; 0x46
 800925c:	eb08 0906 	add.w	r9, r8, r6
 8009260:	d111      	bne.n	8009286 <__cvt+0x8e>
 8009262:	f898 3000 	ldrb.w	r3, [r8]
 8009266:	2b30      	cmp	r3, #48	; 0x30
 8009268:	d10a      	bne.n	8009280 <__cvt+0x88>
 800926a:	2200      	movs	r2, #0
 800926c:	2300      	movs	r3, #0
 800926e:	4620      	mov	r0, r4
 8009270:	4629      	mov	r1, r5
 8009272:	f7f7 fc29 	bl	8000ac8 <__aeabi_dcmpeq>
 8009276:	b918      	cbnz	r0, 8009280 <__cvt+0x88>
 8009278:	f1c6 0601 	rsb	r6, r6, #1
 800927c:	f8ca 6000 	str.w	r6, [sl]
 8009280:	f8da 3000 	ldr.w	r3, [sl]
 8009284:	4499      	add	r9, r3
 8009286:	2200      	movs	r2, #0
 8009288:	2300      	movs	r3, #0
 800928a:	4620      	mov	r0, r4
 800928c:	4629      	mov	r1, r5
 800928e:	f7f7 fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009292:	b938      	cbnz	r0, 80092a4 <__cvt+0xac>
 8009294:	2230      	movs	r2, #48	; 0x30
 8009296:	9b03      	ldr	r3, [sp, #12]
 8009298:	454b      	cmp	r3, r9
 800929a:	d205      	bcs.n	80092a8 <__cvt+0xb0>
 800929c:	1c59      	adds	r1, r3, #1
 800929e:	9103      	str	r1, [sp, #12]
 80092a0:	701a      	strb	r2, [r3, #0]
 80092a2:	e7f8      	b.n	8009296 <__cvt+0x9e>
 80092a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80092a8:	9b03      	ldr	r3, [sp, #12]
 80092aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092ac:	eba3 0308 	sub.w	r3, r3, r8
 80092b0:	4640      	mov	r0, r8
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	b004      	add	sp, #16
 80092b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080092ba <__exponent>:
 80092ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092bc:	2900      	cmp	r1, #0
 80092be:	4604      	mov	r4, r0
 80092c0:	bfba      	itte	lt
 80092c2:	4249      	neglt	r1, r1
 80092c4:	232d      	movlt	r3, #45	; 0x2d
 80092c6:	232b      	movge	r3, #43	; 0x2b
 80092c8:	2909      	cmp	r1, #9
 80092ca:	f804 2b02 	strb.w	r2, [r4], #2
 80092ce:	7043      	strb	r3, [r0, #1]
 80092d0:	dd20      	ble.n	8009314 <__exponent+0x5a>
 80092d2:	f10d 0307 	add.w	r3, sp, #7
 80092d6:	461f      	mov	r7, r3
 80092d8:	260a      	movs	r6, #10
 80092da:	fb91 f5f6 	sdiv	r5, r1, r6
 80092de:	fb06 1115 	mls	r1, r6, r5, r1
 80092e2:	3130      	adds	r1, #48	; 0x30
 80092e4:	2d09      	cmp	r5, #9
 80092e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80092ea:	f103 32ff 	add.w	r2, r3, #4294967295
 80092ee:	4629      	mov	r1, r5
 80092f0:	dc09      	bgt.n	8009306 <__exponent+0x4c>
 80092f2:	3130      	adds	r1, #48	; 0x30
 80092f4:	3b02      	subs	r3, #2
 80092f6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80092fa:	42bb      	cmp	r3, r7
 80092fc:	4622      	mov	r2, r4
 80092fe:	d304      	bcc.n	800930a <__exponent+0x50>
 8009300:	1a10      	subs	r0, r2, r0
 8009302:	b003      	add	sp, #12
 8009304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009306:	4613      	mov	r3, r2
 8009308:	e7e7      	b.n	80092da <__exponent+0x20>
 800930a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800930e:	f804 2b01 	strb.w	r2, [r4], #1
 8009312:	e7f2      	b.n	80092fa <__exponent+0x40>
 8009314:	2330      	movs	r3, #48	; 0x30
 8009316:	4419      	add	r1, r3
 8009318:	7083      	strb	r3, [r0, #2]
 800931a:	1d02      	adds	r2, r0, #4
 800931c:	70c1      	strb	r1, [r0, #3]
 800931e:	e7ef      	b.n	8009300 <__exponent+0x46>

08009320 <_printf_float>:
 8009320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009324:	b08d      	sub	sp, #52	; 0x34
 8009326:	460c      	mov	r4, r1
 8009328:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800932c:	4616      	mov	r6, r2
 800932e:	461f      	mov	r7, r3
 8009330:	4605      	mov	r5, r0
 8009332:	f001 fa31 	bl	800a798 <_localeconv_r>
 8009336:	6803      	ldr	r3, [r0, #0]
 8009338:	9304      	str	r3, [sp, #16]
 800933a:	4618      	mov	r0, r3
 800933c:	f7f6 ff48 	bl	80001d0 <strlen>
 8009340:	2300      	movs	r3, #0
 8009342:	930a      	str	r3, [sp, #40]	; 0x28
 8009344:	f8d8 3000 	ldr.w	r3, [r8]
 8009348:	9005      	str	r0, [sp, #20]
 800934a:	3307      	adds	r3, #7
 800934c:	f023 0307 	bic.w	r3, r3, #7
 8009350:	f103 0208 	add.w	r2, r3, #8
 8009354:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009358:	f8d4 b000 	ldr.w	fp, [r4]
 800935c:	f8c8 2000 	str.w	r2, [r8]
 8009360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009364:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009368:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800936c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009370:	9307      	str	r3, [sp, #28]
 8009372:	f8cd 8018 	str.w	r8, [sp, #24]
 8009376:	f04f 32ff 	mov.w	r2, #4294967295
 800937a:	4ba7      	ldr	r3, [pc, #668]	; (8009618 <_printf_float+0x2f8>)
 800937c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009380:	f7f7 fbd4 	bl	8000b2c <__aeabi_dcmpun>
 8009384:	bb70      	cbnz	r0, 80093e4 <_printf_float+0xc4>
 8009386:	f04f 32ff 	mov.w	r2, #4294967295
 800938a:	4ba3      	ldr	r3, [pc, #652]	; (8009618 <_printf_float+0x2f8>)
 800938c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009390:	f7f7 fbae 	bl	8000af0 <__aeabi_dcmple>
 8009394:	bb30      	cbnz	r0, 80093e4 <_printf_float+0xc4>
 8009396:	2200      	movs	r2, #0
 8009398:	2300      	movs	r3, #0
 800939a:	4640      	mov	r0, r8
 800939c:	4649      	mov	r1, r9
 800939e:	f7f7 fb9d 	bl	8000adc <__aeabi_dcmplt>
 80093a2:	b110      	cbz	r0, 80093aa <_printf_float+0x8a>
 80093a4:	232d      	movs	r3, #45	; 0x2d
 80093a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093aa:	4a9c      	ldr	r2, [pc, #624]	; (800961c <_printf_float+0x2fc>)
 80093ac:	4b9c      	ldr	r3, [pc, #624]	; (8009620 <_printf_float+0x300>)
 80093ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80093b2:	bf8c      	ite	hi
 80093b4:	4690      	movhi	r8, r2
 80093b6:	4698      	movls	r8, r3
 80093b8:	2303      	movs	r3, #3
 80093ba:	f02b 0204 	bic.w	r2, fp, #4
 80093be:	6123      	str	r3, [r4, #16]
 80093c0:	6022      	str	r2, [r4, #0]
 80093c2:	f04f 0900 	mov.w	r9, #0
 80093c6:	9700      	str	r7, [sp, #0]
 80093c8:	4633      	mov	r3, r6
 80093ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80093cc:	4621      	mov	r1, r4
 80093ce:	4628      	mov	r0, r5
 80093d0:	f000 f9e6 	bl	80097a0 <_printf_common>
 80093d4:	3001      	adds	r0, #1
 80093d6:	f040 808d 	bne.w	80094f4 <_printf_float+0x1d4>
 80093da:	f04f 30ff 	mov.w	r0, #4294967295
 80093de:	b00d      	add	sp, #52	; 0x34
 80093e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e4:	4642      	mov	r2, r8
 80093e6:	464b      	mov	r3, r9
 80093e8:	4640      	mov	r0, r8
 80093ea:	4649      	mov	r1, r9
 80093ec:	f7f7 fb9e 	bl	8000b2c <__aeabi_dcmpun>
 80093f0:	b110      	cbz	r0, 80093f8 <_printf_float+0xd8>
 80093f2:	4a8c      	ldr	r2, [pc, #560]	; (8009624 <_printf_float+0x304>)
 80093f4:	4b8c      	ldr	r3, [pc, #560]	; (8009628 <_printf_float+0x308>)
 80093f6:	e7da      	b.n	80093ae <_printf_float+0x8e>
 80093f8:	6861      	ldr	r1, [r4, #4]
 80093fa:	1c4b      	adds	r3, r1, #1
 80093fc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009400:	a80a      	add	r0, sp, #40	; 0x28
 8009402:	d13e      	bne.n	8009482 <_printf_float+0x162>
 8009404:	2306      	movs	r3, #6
 8009406:	6063      	str	r3, [r4, #4]
 8009408:	2300      	movs	r3, #0
 800940a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800940e:	ab09      	add	r3, sp, #36	; 0x24
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	ec49 8b10 	vmov	d0, r8, r9
 8009416:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800941a:	6022      	str	r2, [r4, #0]
 800941c:	f8cd a004 	str.w	sl, [sp, #4]
 8009420:	6861      	ldr	r1, [r4, #4]
 8009422:	4628      	mov	r0, r5
 8009424:	f7ff fee8 	bl	80091f8 <__cvt>
 8009428:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800942c:	2b47      	cmp	r3, #71	; 0x47
 800942e:	4680      	mov	r8, r0
 8009430:	d109      	bne.n	8009446 <_printf_float+0x126>
 8009432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009434:	1cd8      	adds	r0, r3, #3
 8009436:	db02      	blt.n	800943e <_printf_float+0x11e>
 8009438:	6862      	ldr	r2, [r4, #4]
 800943a:	4293      	cmp	r3, r2
 800943c:	dd47      	ble.n	80094ce <_printf_float+0x1ae>
 800943e:	f1aa 0a02 	sub.w	sl, sl, #2
 8009442:	fa5f fa8a 	uxtb.w	sl, sl
 8009446:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800944a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800944c:	d824      	bhi.n	8009498 <_printf_float+0x178>
 800944e:	3901      	subs	r1, #1
 8009450:	4652      	mov	r2, sl
 8009452:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009456:	9109      	str	r1, [sp, #36]	; 0x24
 8009458:	f7ff ff2f 	bl	80092ba <__exponent>
 800945c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800945e:	1813      	adds	r3, r2, r0
 8009460:	2a01      	cmp	r2, #1
 8009462:	4681      	mov	r9, r0
 8009464:	6123      	str	r3, [r4, #16]
 8009466:	dc02      	bgt.n	800946e <_printf_float+0x14e>
 8009468:	6822      	ldr	r2, [r4, #0]
 800946a:	07d1      	lsls	r1, r2, #31
 800946c:	d501      	bpl.n	8009472 <_printf_float+0x152>
 800946e:	3301      	adds	r3, #1
 8009470:	6123      	str	r3, [r4, #16]
 8009472:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009476:	2b00      	cmp	r3, #0
 8009478:	d0a5      	beq.n	80093c6 <_printf_float+0xa6>
 800947a:	232d      	movs	r3, #45	; 0x2d
 800947c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009480:	e7a1      	b.n	80093c6 <_printf_float+0xa6>
 8009482:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009486:	f000 8177 	beq.w	8009778 <_printf_float+0x458>
 800948a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800948e:	d1bb      	bne.n	8009408 <_printf_float+0xe8>
 8009490:	2900      	cmp	r1, #0
 8009492:	d1b9      	bne.n	8009408 <_printf_float+0xe8>
 8009494:	2301      	movs	r3, #1
 8009496:	e7b6      	b.n	8009406 <_printf_float+0xe6>
 8009498:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800949c:	d119      	bne.n	80094d2 <_printf_float+0x1b2>
 800949e:	2900      	cmp	r1, #0
 80094a0:	6863      	ldr	r3, [r4, #4]
 80094a2:	dd0c      	ble.n	80094be <_printf_float+0x19e>
 80094a4:	6121      	str	r1, [r4, #16]
 80094a6:	b913      	cbnz	r3, 80094ae <_printf_float+0x18e>
 80094a8:	6822      	ldr	r2, [r4, #0]
 80094aa:	07d2      	lsls	r2, r2, #31
 80094ac:	d502      	bpl.n	80094b4 <_printf_float+0x194>
 80094ae:	3301      	adds	r3, #1
 80094b0:	440b      	add	r3, r1
 80094b2:	6123      	str	r3, [r4, #16]
 80094b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80094b8:	f04f 0900 	mov.w	r9, #0
 80094bc:	e7d9      	b.n	8009472 <_printf_float+0x152>
 80094be:	b913      	cbnz	r3, 80094c6 <_printf_float+0x1a6>
 80094c0:	6822      	ldr	r2, [r4, #0]
 80094c2:	07d0      	lsls	r0, r2, #31
 80094c4:	d501      	bpl.n	80094ca <_printf_float+0x1aa>
 80094c6:	3302      	adds	r3, #2
 80094c8:	e7f3      	b.n	80094b2 <_printf_float+0x192>
 80094ca:	2301      	movs	r3, #1
 80094cc:	e7f1      	b.n	80094b2 <_printf_float+0x192>
 80094ce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80094d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80094d6:	4293      	cmp	r3, r2
 80094d8:	db05      	blt.n	80094e6 <_printf_float+0x1c6>
 80094da:	6822      	ldr	r2, [r4, #0]
 80094dc:	6123      	str	r3, [r4, #16]
 80094de:	07d1      	lsls	r1, r2, #31
 80094e0:	d5e8      	bpl.n	80094b4 <_printf_float+0x194>
 80094e2:	3301      	adds	r3, #1
 80094e4:	e7e5      	b.n	80094b2 <_printf_float+0x192>
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	bfd4      	ite	le
 80094ea:	f1c3 0302 	rsble	r3, r3, #2
 80094ee:	2301      	movgt	r3, #1
 80094f0:	4413      	add	r3, r2
 80094f2:	e7de      	b.n	80094b2 <_printf_float+0x192>
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	055a      	lsls	r2, r3, #21
 80094f8:	d407      	bmi.n	800950a <_printf_float+0x1ea>
 80094fa:	6923      	ldr	r3, [r4, #16]
 80094fc:	4642      	mov	r2, r8
 80094fe:	4631      	mov	r1, r6
 8009500:	4628      	mov	r0, r5
 8009502:	47b8      	blx	r7
 8009504:	3001      	adds	r0, #1
 8009506:	d12b      	bne.n	8009560 <_printf_float+0x240>
 8009508:	e767      	b.n	80093da <_printf_float+0xba>
 800950a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800950e:	f240 80dc 	bls.w	80096ca <_printf_float+0x3aa>
 8009512:	2200      	movs	r2, #0
 8009514:	2300      	movs	r3, #0
 8009516:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800951a:	f7f7 fad5 	bl	8000ac8 <__aeabi_dcmpeq>
 800951e:	2800      	cmp	r0, #0
 8009520:	d033      	beq.n	800958a <_printf_float+0x26a>
 8009522:	2301      	movs	r3, #1
 8009524:	4a41      	ldr	r2, [pc, #260]	; (800962c <_printf_float+0x30c>)
 8009526:	4631      	mov	r1, r6
 8009528:	4628      	mov	r0, r5
 800952a:	47b8      	blx	r7
 800952c:	3001      	adds	r0, #1
 800952e:	f43f af54 	beq.w	80093da <_printf_float+0xba>
 8009532:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009536:	429a      	cmp	r2, r3
 8009538:	db02      	blt.n	8009540 <_printf_float+0x220>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	07d8      	lsls	r0, r3, #31
 800953e:	d50f      	bpl.n	8009560 <_printf_float+0x240>
 8009540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009544:	4631      	mov	r1, r6
 8009546:	4628      	mov	r0, r5
 8009548:	47b8      	blx	r7
 800954a:	3001      	adds	r0, #1
 800954c:	f43f af45 	beq.w	80093da <_printf_float+0xba>
 8009550:	f04f 0800 	mov.w	r8, #0
 8009554:	f104 091a 	add.w	r9, r4, #26
 8009558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800955a:	3b01      	subs	r3, #1
 800955c:	4543      	cmp	r3, r8
 800955e:	dc09      	bgt.n	8009574 <_printf_float+0x254>
 8009560:	6823      	ldr	r3, [r4, #0]
 8009562:	079b      	lsls	r3, r3, #30
 8009564:	f100 8103 	bmi.w	800976e <_printf_float+0x44e>
 8009568:	68e0      	ldr	r0, [r4, #12]
 800956a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800956c:	4298      	cmp	r0, r3
 800956e:	bfb8      	it	lt
 8009570:	4618      	movlt	r0, r3
 8009572:	e734      	b.n	80093de <_printf_float+0xbe>
 8009574:	2301      	movs	r3, #1
 8009576:	464a      	mov	r2, r9
 8009578:	4631      	mov	r1, r6
 800957a:	4628      	mov	r0, r5
 800957c:	47b8      	blx	r7
 800957e:	3001      	adds	r0, #1
 8009580:	f43f af2b 	beq.w	80093da <_printf_float+0xba>
 8009584:	f108 0801 	add.w	r8, r8, #1
 8009588:	e7e6      	b.n	8009558 <_printf_float+0x238>
 800958a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800958c:	2b00      	cmp	r3, #0
 800958e:	dc2b      	bgt.n	80095e8 <_printf_float+0x2c8>
 8009590:	2301      	movs	r3, #1
 8009592:	4a26      	ldr	r2, [pc, #152]	; (800962c <_printf_float+0x30c>)
 8009594:	4631      	mov	r1, r6
 8009596:	4628      	mov	r0, r5
 8009598:	47b8      	blx	r7
 800959a:	3001      	adds	r0, #1
 800959c:	f43f af1d 	beq.w	80093da <_printf_float+0xba>
 80095a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a2:	b923      	cbnz	r3, 80095ae <_printf_float+0x28e>
 80095a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095a6:	b913      	cbnz	r3, 80095ae <_printf_float+0x28e>
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	07d9      	lsls	r1, r3, #31
 80095ac:	d5d8      	bpl.n	8009560 <_printf_float+0x240>
 80095ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095b2:	4631      	mov	r1, r6
 80095b4:	4628      	mov	r0, r5
 80095b6:	47b8      	blx	r7
 80095b8:	3001      	adds	r0, #1
 80095ba:	f43f af0e 	beq.w	80093da <_printf_float+0xba>
 80095be:	f04f 0900 	mov.w	r9, #0
 80095c2:	f104 0a1a 	add.w	sl, r4, #26
 80095c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c8:	425b      	negs	r3, r3
 80095ca:	454b      	cmp	r3, r9
 80095cc:	dc01      	bgt.n	80095d2 <_printf_float+0x2b2>
 80095ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095d0:	e794      	b.n	80094fc <_printf_float+0x1dc>
 80095d2:	2301      	movs	r3, #1
 80095d4:	4652      	mov	r2, sl
 80095d6:	4631      	mov	r1, r6
 80095d8:	4628      	mov	r0, r5
 80095da:	47b8      	blx	r7
 80095dc:	3001      	adds	r0, #1
 80095de:	f43f aefc 	beq.w	80093da <_printf_float+0xba>
 80095e2:	f109 0901 	add.w	r9, r9, #1
 80095e6:	e7ee      	b.n	80095c6 <_printf_float+0x2a6>
 80095e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095ec:	429a      	cmp	r2, r3
 80095ee:	bfa8      	it	ge
 80095f0:	461a      	movge	r2, r3
 80095f2:	2a00      	cmp	r2, #0
 80095f4:	4691      	mov	r9, r2
 80095f6:	dd07      	ble.n	8009608 <_printf_float+0x2e8>
 80095f8:	4613      	mov	r3, r2
 80095fa:	4631      	mov	r1, r6
 80095fc:	4642      	mov	r2, r8
 80095fe:	4628      	mov	r0, r5
 8009600:	47b8      	blx	r7
 8009602:	3001      	adds	r0, #1
 8009604:	f43f aee9 	beq.w	80093da <_printf_float+0xba>
 8009608:	f104 031a 	add.w	r3, r4, #26
 800960c:	f04f 0b00 	mov.w	fp, #0
 8009610:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009614:	9306      	str	r3, [sp, #24]
 8009616:	e015      	b.n	8009644 <_printf_float+0x324>
 8009618:	7fefffff 	.word	0x7fefffff
 800961c:	0800b1a0 	.word	0x0800b1a0
 8009620:	0800b19c 	.word	0x0800b19c
 8009624:	0800b1a8 	.word	0x0800b1a8
 8009628:	0800b1a4 	.word	0x0800b1a4
 800962c:	0800b1ac 	.word	0x0800b1ac
 8009630:	2301      	movs	r3, #1
 8009632:	9a06      	ldr	r2, [sp, #24]
 8009634:	4631      	mov	r1, r6
 8009636:	4628      	mov	r0, r5
 8009638:	47b8      	blx	r7
 800963a:	3001      	adds	r0, #1
 800963c:	f43f aecd 	beq.w	80093da <_printf_float+0xba>
 8009640:	f10b 0b01 	add.w	fp, fp, #1
 8009644:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009648:	ebaa 0309 	sub.w	r3, sl, r9
 800964c:	455b      	cmp	r3, fp
 800964e:	dcef      	bgt.n	8009630 <_printf_float+0x310>
 8009650:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009654:	429a      	cmp	r2, r3
 8009656:	44d0      	add	r8, sl
 8009658:	db15      	blt.n	8009686 <_printf_float+0x366>
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	07da      	lsls	r2, r3, #31
 800965e:	d412      	bmi.n	8009686 <_printf_float+0x366>
 8009660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009662:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009664:	eba3 020a 	sub.w	r2, r3, sl
 8009668:	eba3 0a01 	sub.w	sl, r3, r1
 800966c:	4592      	cmp	sl, r2
 800966e:	bfa8      	it	ge
 8009670:	4692      	movge	sl, r2
 8009672:	f1ba 0f00 	cmp.w	sl, #0
 8009676:	dc0e      	bgt.n	8009696 <_printf_float+0x376>
 8009678:	f04f 0800 	mov.w	r8, #0
 800967c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009680:	f104 091a 	add.w	r9, r4, #26
 8009684:	e019      	b.n	80096ba <_printf_float+0x39a>
 8009686:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800968a:	4631      	mov	r1, r6
 800968c:	4628      	mov	r0, r5
 800968e:	47b8      	blx	r7
 8009690:	3001      	adds	r0, #1
 8009692:	d1e5      	bne.n	8009660 <_printf_float+0x340>
 8009694:	e6a1      	b.n	80093da <_printf_float+0xba>
 8009696:	4653      	mov	r3, sl
 8009698:	4642      	mov	r2, r8
 800969a:	4631      	mov	r1, r6
 800969c:	4628      	mov	r0, r5
 800969e:	47b8      	blx	r7
 80096a0:	3001      	adds	r0, #1
 80096a2:	d1e9      	bne.n	8009678 <_printf_float+0x358>
 80096a4:	e699      	b.n	80093da <_printf_float+0xba>
 80096a6:	2301      	movs	r3, #1
 80096a8:	464a      	mov	r2, r9
 80096aa:	4631      	mov	r1, r6
 80096ac:	4628      	mov	r0, r5
 80096ae:	47b8      	blx	r7
 80096b0:	3001      	adds	r0, #1
 80096b2:	f43f ae92 	beq.w	80093da <_printf_float+0xba>
 80096b6:	f108 0801 	add.w	r8, r8, #1
 80096ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096be:	1a9b      	subs	r3, r3, r2
 80096c0:	eba3 030a 	sub.w	r3, r3, sl
 80096c4:	4543      	cmp	r3, r8
 80096c6:	dcee      	bgt.n	80096a6 <_printf_float+0x386>
 80096c8:	e74a      	b.n	8009560 <_printf_float+0x240>
 80096ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096cc:	2a01      	cmp	r2, #1
 80096ce:	dc01      	bgt.n	80096d4 <_printf_float+0x3b4>
 80096d0:	07db      	lsls	r3, r3, #31
 80096d2:	d53a      	bpl.n	800974a <_printf_float+0x42a>
 80096d4:	2301      	movs	r3, #1
 80096d6:	4642      	mov	r2, r8
 80096d8:	4631      	mov	r1, r6
 80096da:	4628      	mov	r0, r5
 80096dc:	47b8      	blx	r7
 80096de:	3001      	adds	r0, #1
 80096e0:	f43f ae7b 	beq.w	80093da <_printf_float+0xba>
 80096e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096e8:	4631      	mov	r1, r6
 80096ea:	4628      	mov	r0, r5
 80096ec:	47b8      	blx	r7
 80096ee:	3001      	adds	r0, #1
 80096f0:	f108 0801 	add.w	r8, r8, #1
 80096f4:	f43f ae71 	beq.w	80093da <_printf_float+0xba>
 80096f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096fa:	2200      	movs	r2, #0
 80096fc:	f103 3aff 	add.w	sl, r3, #4294967295
 8009700:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009704:	2300      	movs	r3, #0
 8009706:	f7f7 f9df 	bl	8000ac8 <__aeabi_dcmpeq>
 800970a:	b9c8      	cbnz	r0, 8009740 <_printf_float+0x420>
 800970c:	4653      	mov	r3, sl
 800970e:	4642      	mov	r2, r8
 8009710:	4631      	mov	r1, r6
 8009712:	4628      	mov	r0, r5
 8009714:	47b8      	blx	r7
 8009716:	3001      	adds	r0, #1
 8009718:	d10e      	bne.n	8009738 <_printf_float+0x418>
 800971a:	e65e      	b.n	80093da <_printf_float+0xba>
 800971c:	2301      	movs	r3, #1
 800971e:	4652      	mov	r2, sl
 8009720:	4631      	mov	r1, r6
 8009722:	4628      	mov	r0, r5
 8009724:	47b8      	blx	r7
 8009726:	3001      	adds	r0, #1
 8009728:	f43f ae57 	beq.w	80093da <_printf_float+0xba>
 800972c:	f108 0801 	add.w	r8, r8, #1
 8009730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009732:	3b01      	subs	r3, #1
 8009734:	4543      	cmp	r3, r8
 8009736:	dcf1      	bgt.n	800971c <_printf_float+0x3fc>
 8009738:	464b      	mov	r3, r9
 800973a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800973e:	e6de      	b.n	80094fe <_printf_float+0x1de>
 8009740:	f04f 0800 	mov.w	r8, #0
 8009744:	f104 0a1a 	add.w	sl, r4, #26
 8009748:	e7f2      	b.n	8009730 <_printf_float+0x410>
 800974a:	2301      	movs	r3, #1
 800974c:	e7df      	b.n	800970e <_printf_float+0x3ee>
 800974e:	2301      	movs	r3, #1
 8009750:	464a      	mov	r2, r9
 8009752:	4631      	mov	r1, r6
 8009754:	4628      	mov	r0, r5
 8009756:	47b8      	blx	r7
 8009758:	3001      	adds	r0, #1
 800975a:	f43f ae3e 	beq.w	80093da <_printf_float+0xba>
 800975e:	f108 0801 	add.w	r8, r8, #1
 8009762:	68e3      	ldr	r3, [r4, #12]
 8009764:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009766:	1a9b      	subs	r3, r3, r2
 8009768:	4543      	cmp	r3, r8
 800976a:	dcf0      	bgt.n	800974e <_printf_float+0x42e>
 800976c:	e6fc      	b.n	8009568 <_printf_float+0x248>
 800976e:	f04f 0800 	mov.w	r8, #0
 8009772:	f104 0919 	add.w	r9, r4, #25
 8009776:	e7f4      	b.n	8009762 <_printf_float+0x442>
 8009778:	2900      	cmp	r1, #0
 800977a:	f43f ae8b 	beq.w	8009494 <_printf_float+0x174>
 800977e:	2300      	movs	r3, #0
 8009780:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009784:	ab09      	add	r3, sp, #36	; 0x24
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	ec49 8b10 	vmov	d0, r8, r9
 800978c:	6022      	str	r2, [r4, #0]
 800978e:	f8cd a004 	str.w	sl, [sp, #4]
 8009792:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009796:	4628      	mov	r0, r5
 8009798:	f7ff fd2e 	bl	80091f8 <__cvt>
 800979c:	4680      	mov	r8, r0
 800979e:	e648      	b.n	8009432 <_printf_float+0x112>

080097a0 <_printf_common>:
 80097a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a4:	4691      	mov	r9, r2
 80097a6:	461f      	mov	r7, r3
 80097a8:	688a      	ldr	r2, [r1, #8]
 80097aa:	690b      	ldr	r3, [r1, #16]
 80097ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097b0:	4293      	cmp	r3, r2
 80097b2:	bfb8      	it	lt
 80097b4:	4613      	movlt	r3, r2
 80097b6:	f8c9 3000 	str.w	r3, [r9]
 80097ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097be:	4606      	mov	r6, r0
 80097c0:	460c      	mov	r4, r1
 80097c2:	b112      	cbz	r2, 80097ca <_printf_common+0x2a>
 80097c4:	3301      	adds	r3, #1
 80097c6:	f8c9 3000 	str.w	r3, [r9]
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	0699      	lsls	r1, r3, #26
 80097ce:	bf42      	ittt	mi
 80097d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80097d4:	3302      	addmi	r3, #2
 80097d6:	f8c9 3000 	strmi.w	r3, [r9]
 80097da:	6825      	ldr	r5, [r4, #0]
 80097dc:	f015 0506 	ands.w	r5, r5, #6
 80097e0:	d107      	bne.n	80097f2 <_printf_common+0x52>
 80097e2:	f104 0a19 	add.w	sl, r4, #25
 80097e6:	68e3      	ldr	r3, [r4, #12]
 80097e8:	f8d9 2000 	ldr.w	r2, [r9]
 80097ec:	1a9b      	subs	r3, r3, r2
 80097ee:	42ab      	cmp	r3, r5
 80097f0:	dc28      	bgt.n	8009844 <_printf_common+0xa4>
 80097f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80097f6:	6822      	ldr	r2, [r4, #0]
 80097f8:	3300      	adds	r3, #0
 80097fa:	bf18      	it	ne
 80097fc:	2301      	movne	r3, #1
 80097fe:	0692      	lsls	r2, r2, #26
 8009800:	d42d      	bmi.n	800985e <_printf_common+0xbe>
 8009802:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009806:	4639      	mov	r1, r7
 8009808:	4630      	mov	r0, r6
 800980a:	47c0      	blx	r8
 800980c:	3001      	adds	r0, #1
 800980e:	d020      	beq.n	8009852 <_printf_common+0xb2>
 8009810:	6823      	ldr	r3, [r4, #0]
 8009812:	68e5      	ldr	r5, [r4, #12]
 8009814:	f8d9 2000 	ldr.w	r2, [r9]
 8009818:	f003 0306 	and.w	r3, r3, #6
 800981c:	2b04      	cmp	r3, #4
 800981e:	bf08      	it	eq
 8009820:	1aad      	subeq	r5, r5, r2
 8009822:	68a3      	ldr	r3, [r4, #8]
 8009824:	6922      	ldr	r2, [r4, #16]
 8009826:	bf0c      	ite	eq
 8009828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800982c:	2500      	movne	r5, #0
 800982e:	4293      	cmp	r3, r2
 8009830:	bfc4      	itt	gt
 8009832:	1a9b      	subgt	r3, r3, r2
 8009834:	18ed      	addgt	r5, r5, r3
 8009836:	f04f 0900 	mov.w	r9, #0
 800983a:	341a      	adds	r4, #26
 800983c:	454d      	cmp	r5, r9
 800983e:	d11a      	bne.n	8009876 <_printf_common+0xd6>
 8009840:	2000      	movs	r0, #0
 8009842:	e008      	b.n	8009856 <_printf_common+0xb6>
 8009844:	2301      	movs	r3, #1
 8009846:	4652      	mov	r2, sl
 8009848:	4639      	mov	r1, r7
 800984a:	4630      	mov	r0, r6
 800984c:	47c0      	blx	r8
 800984e:	3001      	adds	r0, #1
 8009850:	d103      	bne.n	800985a <_printf_common+0xba>
 8009852:	f04f 30ff 	mov.w	r0, #4294967295
 8009856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800985a:	3501      	adds	r5, #1
 800985c:	e7c3      	b.n	80097e6 <_printf_common+0x46>
 800985e:	18e1      	adds	r1, r4, r3
 8009860:	1c5a      	adds	r2, r3, #1
 8009862:	2030      	movs	r0, #48	; 0x30
 8009864:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009868:	4422      	add	r2, r4
 800986a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800986e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009872:	3302      	adds	r3, #2
 8009874:	e7c5      	b.n	8009802 <_printf_common+0x62>
 8009876:	2301      	movs	r3, #1
 8009878:	4622      	mov	r2, r4
 800987a:	4639      	mov	r1, r7
 800987c:	4630      	mov	r0, r6
 800987e:	47c0      	blx	r8
 8009880:	3001      	adds	r0, #1
 8009882:	d0e6      	beq.n	8009852 <_printf_common+0xb2>
 8009884:	f109 0901 	add.w	r9, r9, #1
 8009888:	e7d8      	b.n	800983c <_printf_common+0x9c>
	...

0800988c <_printf_i>:
 800988c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009890:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009894:	460c      	mov	r4, r1
 8009896:	7e09      	ldrb	r1, [r1, #24]
 8009898:	b085      	sub	sp, #20
 800989a:	296e      	cmp	r1, #110	; 0x6e
 800989c:	4617      	mov	r7, r2
 800989e:	4606      	mov	r6, r0
 80098a0:	4698      	mov	r8, r3
 80098a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098a4:	f000 80b3 	beq.w	8009a0e <_printf_i+0x182>
 80098a8:	d822      	bhi.n	80098f0 <_printf_i+0x64>
 80098aa:	2963      	cmp	r1, #99	; 0x63
 80098ac:	d036      	beq.n	800991c <_printf_i+0x90>
 80098ae:	d80a      	bhi.n	80098c6 <_printf_i+0x3a>
 80098b0:	2900      	cmp	r1, #0
 80098b2:	f000 80b9 	beq.w	8009a28 <_printf_i+0x19c>
 80098b6:	2958      	cmp	r1, #88	; 0x58
 80098b8:	f000 8083 	beq.w	80099c2 <_printf_i+0x136>
 80098bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80098c4:	e032      	b.n	800992c <_printf_i+0xa0>
 80098c6:	2964      	cmp	r1, #100	; 0x64
 80098c8:	d001      	beq.n	80098ce <_printf_i+0x42>
 80098ca:	2969      	cmp	r1, #105	; 0x69
 80098cc:	d1f6      	bne.n	80098bc <_printf_i+0x30>
 80098ce:	6820      	ldr	r0, [r4, #0]
 80098d0:	6813      	ldr	r3, [r2, #0]
 80098d2:	0605      	lsls	r5, r0, #24
 80098d4:	f103 0104 	add.w	r1, r3, #4
 80098d8:	d52a      	bpl.n	8009930 <_printf_i+0xa4>
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6011      	str	r1, [r2, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	da03      	bge.n	80098ea <_printf_i+0x5e>
 80098e2:	222d      	movs	r2, #45	; 0x2d
 80098e4:	425b      	negs	r3, r3
 80098e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80098ea:	486f      	ldr	r0, [pc, #444]	; (8009aa8 <_printf_i+0x21c>)
 80098ec:	220a      	movs	r2, #10
 80098ee:	e039      	b.n	8009964 <_printf_i+0xd8>
 80098f0:	2973      	cmp	r1, #115	; 0x73
 80098f2:	f000 809d 	beq.w	8009a30 <_printf_i+0x1a4>
 80098f6:	d808      	bhi.n	800990a <_printf_i+0x7e>
 80098f8:	296f      	cmp	r1, #111	; 0x6f
 80098fa:	d020      	beq.n	800993e <_printf_i+0xb2>
 80098fc:	2970      	cmp	r1, #112	; 0x70
 80098fe:	d1dd      	bne.n	80098bc <_printf_i+0x30>
 8009900:	6823      	ldr	r3, [r4, #0]
 8009902:	f043 0320 	orr.w	r3, r3, #32
 8009906:	6023      	str	r3, [r4, #0]
 8009908:	e003      	b.n	8009912 <_printf_i+0x86>
 800990a:	2975      	cmp	r1, #117	; 0x75
 800990c:	d017      	beq.n	800993e <_printf_i+0xb2>
 800990e:	2978      	cmp	r1, #120	; 0x78
 8009910:	d1d4      	bne.n	80098bc <_printf_i+0x30>
 8009912:	2378      	movs	r3, #120	; 0x78
 8009914:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009918:	4864      	ldr	r0, [pc, #400]	; (8009aac <_printf_i+0x220>)
 800991a:	e055      	b.n	80099c8 <_printf_i+0x13c>
 800991c:	6813      	ldr	r3, [r2, #0]
 800991e:	1d19      	adds	r1, r3, #4
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6011      	str	r1, [r2, #0]
 8009924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800992c:	2301      	movs	r3, #1
 800992e:	e08c      	b.n	8009a4a <_printf_i+0x1be>
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	6011      	str	r1, [r2, #0]
 8009934:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009938:	bf18      	it	ne
 800993a:	b21b      	sxthne	r3, r3
 800993c:	e7cf      	b.n	80098de <_printf_i+0x52>
 800993e:	6813      	ldr	r3, [r2, #0]
 8009940:	6825      	ldr	r5, [r4, #0]
 8009942:	1d18      	adds	r0, r3, #4
 8009944:	6010      	str	r0, [r2, #0]
 8009946:	0628      	lsls	r0, r5, #24
 8009948:	d501      	bpl.n	800994e <_printf_i+0xc2>
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	e002      	b.n	8009954 <_printf_i+0xc8>
 800994e:	0668      	lsls	r0, r5, #25
 8009950:	d5fb      	bpl.n	800994a <_printf_i+0xbe>
 8009952:	881b      	ldrh	r3, [r3, #0]
 8009954:	4854      	ldr	r0, [pc, #336]	; (8009aa8 <_printf_i+0x21c>)
 8009956:	296f      	cmp	r1, #111	; 0x6f
 8009958:	bf14      	ite	ne
 800995a:	220a      	movne	r2, #10
 800995c:	2208      	moveq	r2, #8
 800995e:	2100      	movs	r1, #0
 8009960:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009964:	6865      	ldr	r5, [r4, #4]
 8009966:	60a5      	str	r5, [r4, #8]
 8009968:	2d00      	cmp	r5, #0
 800996a:	f2c0 8095 	blt.w	8009a98 <_printf_i+0x20c>
 800996e:	6821      	ldr	r1, [r4, #0]
 8009970:	f021 0104 	bic.w	r1, r1, #4
 8009974:	6021      	str	r1, [r4, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d13d      	bne.n	80099f6 <_printf_i+0x16a>
 800997a:	2d00      	cmp	r5, #0
 800997c:	f040 808e 	bne.w	8009a9c <_printf_i+0x210>
 8009980:	4665      	mov	r5, ip
 8009982:	2a08      	cmp	r2, #8
 8009984:	d10b      	bne.n	800999e <_printf_i+0x112>
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	07db      	lsls	r3, r3, #31
 800998a:	d508      	bpl.n	800999e <_printf_i+0x112>
 800998c:	6923      	ldr	r3, [r4, #16]
 800998e:	6862      	ldr	r2, [r4, #4]
 8009990:	429a      	cmp	r2, r3
 8009992:	bfde      	ittt	le
 8009994:	2330      	movle	r3, #48	; 0x30
 8009996:	f805 3c01 	strble.w	r3, [r5, #-1]
 800999a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800999e:	ebac 0305 	sub.w	r3, ip, r5
 80099a2:	6123      	str	r3, [r4, #16]
 80099a4:	f8cd 8000 	str.w	r8, [sp]
 80099a8:	463b      	mov	r3, r7
 80099aa:	aa03      	add	r2, sp, #12
 80099ac:	4621      	mov	r1, r4
 80099ae:	4630      	mov	r0, r6
 80099b0:	f7ff fef6 	bl	80097a0 <_printf_common>
 80099b4:	3001      	adds	r0, #1
 80099b6:	d14d      	bne.n	8009a54 <_printf_i+0x1c8>
 80099b8:	f04f 30ff 	mov.w	r0, #4294967295
 80099bc:	b005      	add	sp, #20
 80099be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099c2:	4839      	ldr	r0, [pc, #228]	; (8009aa8 <_printf_i+0x21c>)
 80099c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80099c8:	6813      	ldr	r3, [r2, #0]
 80099ca:	6821      	ldr	r1, [r4, #0]
 80099cc:	1d1d      	adds	r5, r3, #4
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6015      	str	r5, [r2, #0]
 80099d2:	060a      	lsls	r2, r1, #24
 80099d4:	d50b      	bpl.n	80099ee <_printf_i+0x162>
 80099d6:	07ca      	lsls	r2, r1, #31
 80099d8:	bf44      	itt	mi
 80099da:	f041 0120 	orrmi.w	r1, r1, #32
 80099de:	6021      	strmi	r1, [r4, #0]
 80099e0:	b91b      	cbnz	r3, 80099ea <_printf_i+0x15e>
 80099e2:	6822      	ldr	r2, [r4, #0]
 80099e4:	f022 0220 	bic.w	r2, r2, #32
 80099e8:	6022      	str	r2, [r4, #0]
 80099ea:	2210      	movs	r2, #16
 80099ec:	e7b7      	b.n	800995e <_printf_i+0xd2>
 80099ee:	064d      	lsls	r5, r1, #25
 80099f0:	bf48      	it	mi
 80099f2:	b29b      	uxthmi	r3, r3
 80099f4:	e7ef      	b.n	80099d6 <_printf_i+0x14a>
 80099f6:	4665      	mov	r5, ip
 80099f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80099fc:	fb02 3311 	mls	r3, r2, r1, r3
 8009a00:	5cc3      	ldrb	r3, [r0, r3]
 8009a02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009a06:	460b      	mov	r3, r1
 8009a08:	2900      	cmp	r1, #0
 8009a0a:	d1f5      	bne.n	80099f8 <_printf_i+0x16c>
 8009a0c:	e7b9      	b.n	8009982 <_printf_i+0xf6>
 8009a0e:	6813      	ldr	r3, [r2, #0]
 8009a10:	6825      	ldr	r5, [r4, #0]
 8009a12:	6961      	ldr	r1, [r4, #20]
 8009a14:	1d18      	adds	r0, r3, #4
 8009a16:	6010      	str	r0, [r2, #0]
 8009a18:	0628      	lsls	r0, r5, #24
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	d501      	bpl.n	8009a22 <_printf_i+0x196>
 8009a1e:	6019      	str	r1, [r3, #0]
 8009a20:	e002      	b.n	8009a28 <_printf_i+0x19c>
 8009a22:	066a      	lsls	r2, r5, #25
 8009a24:	d5fb      	bpl.n	8009a1e <_printf_i+0x192>
 8009a26:	8019      	strh	r1, [r3, #0]
 8009a28:	2300      	movs	r3, #0
 8009a2a:	6123      	str	r3, [r4, #16]
 8009a2c:	4665      	mov	r5, ip
 8009a2e:	e7b9      	b.n	80099a4 <_printf_i+0x118>
 8009a30:	6813      	ldr	r3, [r2, #0]
 8009a32:	1d19      	adds	r1, r3, #4
 8009a34:	6011      	str	r1, [r2, #0]
 8009a36:	681d      	ldr	r5, [r3, #0]
 8009a38:	6862      	ldr	r2, [r4, #4]
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	f7f6 fbcf 	bl	80001e0 <memchr>
 8009a42:	b108      	cbz	r0, 8009a48 <_printf_i+0x1bc>
 8009a44:	1b40      	subs	r0, r0, r5
 8009a46:	6060      	str	r0, [r4, #4]
 8009a48:	6863      	ldr	r3, [r4, #4]
 8009a4a:	6123      	str	r3, [r4, #16]
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a52:	e7a7      	b.n	80099a4 <_printf_i+0x118>
 8009a54:	6923      	ldr	r3, [r4, #16]
 8009a56:	462a      	mov	r2, r5
 8009a58:	4639      	mov	r1, r7
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	47c0      	blx	r8
 8009a5e:	3001      	adds	r0, #1
 8009a60:	d0aa      	beq.n	80099b8 <_printf_i+0x12c>
 8009a62:	6823      	ldr	r3, [r4, #0]
 8009a64:	079b      	lsls	r3, r3, #30
 8009a66:	d413      	bmi.n	8009a90 <_printf_i+0x204>
 8009a68:	68e0      	ldr	r0, [r4, #12]
 8009a6a:	9b03      	ldr	r3, [sp, #12]
 8009a6c:	4298      	cmp	r0, r3
 8009a6e:	bfb8      	it	lt
 8009a70:	4618      	movlt	r0, r3
 8009a72:	e7a3      	b.n	80099bc <_printf_i+0x130>
 8009a74:	2301      	movs	r3, #1
 8009a76:	464a      	mov	r2, r9
 8009a78:	4639      	mov	r1, r7
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	47c0      	blx	r8
 8009a7e:	3001      	adds	r0, #1
 8009a80:	d09a      	beq.n	80099b8 <_printf_i+0x12c>
 8009a82:	3501      	adds	r5, #1
 8009a84:	68e3      	ldr	r3, [r4, #12]
 8009a86:	9a03      	ldr	r2, [sp, #12]
 8009a88:	1a9b      	subs	r3, r3, r2
 8009a8a:	42ab      	cmp	r3, r5
 8009a8c:	dcf2      	bgt.n	8009a74 <_printf_i+0x1e8>
 8009a8e:	e7eb      	b.n	8009a68 <_printf_i+0x1dc>
 8009a90:	2500      	movs	r5, #0
 8009a92:	f104 0919 	add.w	r9, r4, #25
 8009a96:	e7f5      	b.n	8009a84 <_printf_i+0x1f8>
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1ac      	bne.n	80099f6 <_printf_i+0x16a>
 8009a9c:	7803      	ldrb	r3, [r0, #0]
 8009a9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009aa2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aa6:	e76c      	b.n	8009982 <_printf_i+0xf6>
 8009aa8:	0800b1ae 	.word	0x0800b1ae
 8009aac:	0800b1bf 	.word	0x0800b1bf

08009ab0 <_sbrk_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4c06      	ldr	r4, [pc, #24]	; (8009acc <_sbrk_r+0x1c>)
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	4608      	mov	r0, r1
 8009aba:	6023      	str	r3, [r4, #0]
 8009abc:	f7f7 ff06 	bl	80018cc <_sbrk>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d102      	bne.n	8009aca <_sbrk_r+0x1a>
 8009ac4:	6823      	ldr	r3, [r4, #0]
 8009ac6:	b103      	cbz	r3, 8009aca <_sbrk_r+0x1a>
 8009ac8:	602b      	str	r3, [r5, #0]
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	20001ebc 	.word	0x20001ebc

08009ad0 <siprintf>:
 8009ad0:	b40e      	push	{r1, r2, r3}
 8009ad2:	b500      	push	{lr}
 8009ad4:	b09c      	sub	sp, #112	; 0x70
 8009ad6:	ab1d      	add	r3, sp, #116	; 0x74
 8009ad8:	9002      	str	r0, [sp, #8]
 8009ada:	9006      	str	r0, [sp, #24]
 8009adc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ae0:	4809      	ldr	r0, [pc, #36]	; (8009b08 <siprintf+0x38>)
 8009ae2:	9107      	str	r1, [sp, #28]
 8009ae4:	9104      	str	r1, [sp, #16]
 8009ae6:	4909      	ldr	r1, [pc, #36]	; (8009b0c <siprintf+0x3c>)
 8009ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aec:	9105      	str	r1, [sp, #20]
 8009aee:	6800      	ldr	r0, [r0, #0]
 8009af0:	9301      	str	r3, [sp, #4]
 8009af2:	a902      	add	r1, sp, #8
 8009af4:	f001 f9a4 	bl	800ae40 <_svfiprintf_r>
 8009af8:	9b02      	ldr	r3, [sp, #8]
 8009afa:	2200      	movs	r2, #0
 8009afc:	701a      	strb	r2, [r3, #0]
 8009afe:	b01c      	add	sp, #112	; 0x70
 8009b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b04:	b003      	add	sp, #12
 8009b06:	4770      	bx	lr
 8009b08:	20000180 	.word	0x20000180
 8009b0c:	ffff0208 	.word	0xffff0208

08009b10 <quorem>:
 8009b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	6903      	ldr	r3, [r0, #16]
 8009b16:	690c      	ldr	r4, [r1, #16]
 8009b18:	42a3      	cmp	r3, r4
 8009b1a:	4680      	mov	r8, r0
 8009b1c:	f2c0 8082 	blt.w	8009c24 <quorem+0x114>
 8009b20:	3c01      	subs	r4, #1
 8009b22:	f101 0714 	add.w	r7, r1, #20
 8009b26:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009b2a:	f100 0614 	add.w	r6, r0, #20
 8009b2e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009b32:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009b36:	eb06 030c 	add.w	r3, r6, ip
 8009b3a:	3501      	adds	r5, #1
 8009b3c:	eb07 090c 	add.w	r9, r7, ip
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	fbb0 f5f5 	udiv	r5, r0, r5
 8009b46:	b395      	cbz	r5, 8009bae <quorem+0x9e>
 8009b48:	f04f 0a00 	mov.w	sl, #0
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	46b6      	mov	lr, r6
 8009b50:	46d3      	mov	fp, sl
 8009b52:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b56:	b293      	uxth	r3, r2
 8009b58:	fb05 a303 	mla	r3, r5, r3, sl
 8009b5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	ebab 0303 	sub.w	r3, fp, r3
 8009b66:	0c12      	lsrs	r2, r2, #16
 8009b68:	f8de b000 	ldr.w	fp, [lr]
 8009b6c:	fb05 a202 	mla	r2, r5, r2, sl
 8009b70:	fa13 f38b 	uxtah	r3, r3, fp
 8009b74:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009b78:	fa1f fb82 	uxth.w	fp, r2
 8009b7c:	f8de 2000 	ldr.w	r2, [lr]
 8009b80:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009b84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b8e:	4581      	cmp	r9, r0
 8009b90:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009b94:	f84e 3b04 	str.w	r3, [lr], #4
 8009b98:	d2db      	bcs.n	8009b52 <quorem+0x42>
 8009b9a:	f856 300c 	ldr.w	r3, [r6, ip]
 8009b9e:	b933      	cbnz	r3, 8009bae <quorem+0x9e>
 8009ba0:	9b01      	ldr	r3, [sp, #4]
 8009ba2:	3b04      	subs	r3, #4
 8009ba4:	429e      	cmp	r6, r3
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	d330      	bcc.n	8009c0c <quorem+0xfc>
 8009baa:	f8c8 4010 	str.w	r4, [r8, #16]
 8009bae:	4640      	mov	r0, r8
 8009bb0:	f001 f818 	bl	800abe4 <__mcmp>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	db25      	blt.n	8009c04 <quorem+0xf4>
 8009bb8:	3501      	adds	r5, #1
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f04f 0c00 	mov.w	ip, #0
 8009bc0:	f857 2b04 	ldr.w	r2, [r7], #4
 8009bc4:	f8d0 e000 	ldr.w	lr, [r0]
 8009bc8:	b293      	uxth	r3, r2
 8009bca:	ebac 0303 	sub.w	r3, ip, r3
 8009bce:	0c12      	lsrs	r2, r2, #16
 8009bd0:	fa13 f38e 	uxtah	r3, r3, lr
 8009bd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009bd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009be2:	45b9      	cmp	r9, r7
 8009be4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009be8:	f840 3b04 	str.w	r3, [r0], #4
 8009bec:	d2e8      	bcs.n	8009bc0 <quorem+0xb0>
 8009bee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009bf2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009bf6:	b92a      	cbnz	r2, 8009c04 <quorem+0xf4>
 8009bf8:	3b04      	subs	r3, #4
 8009bfa:	429e      	cmp	r6, r3
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	d30b      	bcc.n	8009c18 <quorem+0x108>
 8009c00:	f8c8 4010 	str.w	r4, [r8, #16]
 8009c04:	4628      	mov	r0, r5
 8009c06:	b003      	add	sp, #12
 8009c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c0c:	6812      	ldr	r2, [r2, #0]
 8009c0e:	3b04      	subs	r3, #4
 8009c10:	2a00      	cmp	r2, #0
 8009c12:	d1ca      	bne.n	8009baa <quorem+0x9a>
 8009c14:	3c01      	subs	r4, #1
 8009c16:	e7c5      	b.n	8009ba4 <quorem+0x94>
 8009c18:	6812      	ldr	r2, [r2, #0]
 8009c1a:	3b04      	subs	r3, #4
 8009c1c:	2a00      	cmp	r2, #0
 8009c1e:	d1ef      	bne.n	8009c00 <quorem+0xf0>
 8009c20:	3c01      	subs	r4, #1
 8009c22:	e7ea      	b.n	8009bfa <quorem+0xea>
 8009c24:	2000      	movs	r0, #0
 8009c26:	e7ee      	b.n	8009c06 <quorem+0xf6>

08009c28 <_dtoa_r>:
 8009c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2c:	ec57 6b10 	vmov	r6, r7, d0
 8009c30:	b097      	sub	sp, #92	; 0x5c
 8009c32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c34:	9106      	str	r1, [sp, #24]
 8009c36:	4604      	mov	r4, r0
 8009c38:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c3a:	9312      	str	r3, [sp, #72]	; 0x48
 8009c3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c40:	e9cd 6700 	strd	r6, r7, [sp]
 8009c44:	b93d      	cbnz	r5, 8009c56 <_dtoa_r+0x2e>
 8009c46:	2010      	movs	r0, #16
 8009c48:	f7ff fa0a 	bl	8009060 <malloc>
 8009c4c:	6260      	str	r0, [r4, #36]	; 0x24
 8009c4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c52:	6005      	str	r5, [r0, #0]
 8009c54:	60c5      	str	r5, [r0, #12]
 8009c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c58:	6819      	ldr	r1, [r3, #0]
 8009c5a:	b151      	cbz	r1, 8009c72 <_dtoa_r+0x4a>
 8009c5c:	685a      	ldr	r2, [r3, #4]
 8009c5e:	604a      	str	r2, [r1, #4]
 8009c60:	2301      	movs	r3, #1
 8009c62:	4093      	lsls	r3, r2
 8009c64:	608b      	str	r3, [r1, #8]
 8009c66:	4620      	mov	r0, r4
 8009c68:	f000 fdda 	bl	800a820 <_Bfree>
 8009c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]
 8009c72:	1e3b      	subs	r3, r7, #0
 8009c74:	bfbb      	ittet	lt
 8009c76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009c7a:	9301      	strlt	r3, [sp, #4]
 8009c7c:	2300      	movge	r3, #0
 8009c7e:	2201      	movlt	r2, #1
 8009c80:	bfac      	ite	ge
 8009c82:	f8c8 3000 	strge.w	r3, [r8]
 8009c86:	f8c8 2000 	strlt.w	r2, [r8]
 8009c8a:	4baf      	ldr	r3, [pc, #700]	; (8009f48 <_dtoa_r+0x320>)
 8009c8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c90:	ea33 0308 	bics.w	r3, r3, r8
 8009c94:	d114      	bne.n	8009cc0 <_dtoa_r+0x98>
 8009c96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c98:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c9c:	6013      	str	r3, [r2, #0]
 8009c9e:	9b00      	ldr	r3, [sp, #0]
 8009ca0:	b923      	cbnz	r3, 8009cac <_dtoa_r+0x84>
 8009ca2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	f000 8542 	beq.w	800a730 <_dtoa_r+0xb08>
 8009cac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009f5c <_dtoa_r+0x334>
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f000 8544 	beq.w	800a740 <_dtoa_r+0xb18>
 8009cb8:	f10b 0303 	add.w	r3, fp, #3
 8009cbc:	f000 bd3e 	b.w	800a73c <_dtoa_r+0xb14>
 8009cc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	4630      	mov	r0, r6
 8009cca:	4639      	mov	r1, r7
 8009ccc:	f7f6 fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cd0:	4681      	mov	r9, r0
 8009cd2:	b168      	cbz	r0, 8009cf0 <_dtoa_r+0xc8>
 8009cd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	6013      	str	r3, [r2, #0]
 8009cda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f000 8524 	beq.w	800a72a <_dtoa_r+0xb02>
 8009ce2:	4b9a      	ldr	r3, [pc, #616]	; (8009f4c <_dtoa_r+0x324>)
 8009ce4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ce6:	f103 3bff 	add.w	fp, r3, #4294967295
 8009cea:	6013      	str	r3, [r2, #0]
 8009cec:	f000 bd28 	b.w	800a740 <_dtoa_r+0xb18>
 8009cf0:	aa14      	add	r2, sp, #80	; 0x50
 8009cf2:	a915      	add	r1, sp, #84	; 0x54
 8009cf4:	ec47 6b10 	vmov	d0, r6, r7
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 ffea 	bl	800acd2 <__d2b>
 8009cfe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009d02:	9004      	str	r0, [sp, #16]
 8009d04:	2d00      	cmp	r5, #0
 8009d06:	d07c      	beq.n	8009e02 <_dtoa_r+0x1da>
 8009d08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009d10:	46b2      	mov	sl, r6
 8009d12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009d16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009d1e:	2200      	movs	r2, #0
 8009d20:	4b8b      	ldr	r3, [pc, #556]	; (8009f50 <_dtoa_r+0x328>)
 8009d22:	4650      	mov	r0, sl
 8009d24:	4659      	mov	r1, fp
 8009d26:	f7f6 faaf 	bl	8000288 <__aeabi_dsub>
 8009d2a:	a381      	add	r3, pc, #516	; (adr r3, 8009f30 <_dtoa_r+0x308>)
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	f7f6 fc62 	bl	80005f8 <__aeabi_dmul>
 8009d34:	a380      	add	r3, pc, #512	; (adr r3, 8009f38 <_dtoa_r+0x310>)
 8009d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3a:	f7f6 faa7 	bl	800028c <__adddf3>
 8009d3e:	4606      	mov	r6, r0
 8009d40:	4628      	mov	r0, r5
 8009d42:	460f      	mov	r7, r1
 8009d44:	f7f6 fbee 	bl	8000524 <__aeabi_i2d>
 8009d48:	a37d      	add	r3, pc, #500	; (adr r3, 8009f40 <_dtoa_r+0x318>)
 8009d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4e:	f7f6 fc53 	bl	80005f8 <__aeabi_dmul>
 8009d52:	4602      	mov	r2, r0
 8009d54:	460b      	mov	r3, r1
 8009d56:	4630      	mov	r0, r6
 8009d58:	4639      	mov	r1, r7
 8009d5a:	f7f6 fa97 	bl	800028c <__adddf3>
 8009d5e:	4606      	mov	r6, r0
 8009d60:	460f      	mov	r7, r1
 8009d62:	f7f6 fef9 	bl	8000b58 <__aeabi_d2iz>
 8009d66:	2200      	movs	r2, #0
 8009d68:	4682      	mov	sl, r0
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	4639      	mov	r1, r7
 8009d70:	f7f6 feb4 	bl	8000adc <__aeabi_dcmplt>
 8009d74:	b148      	cbz	r0, 8009d8a <_dtoa_r+0x162>
 8009d76:	4650      	mov	r0, sl
 8009d78:	f7f6 fbd4 	bl	8000524 <__aeabi_i2d>
 8009d7c:	4632      	mov	r2, r6
 8009d7e:	463b      	mov	r3, r7
 8009d80:	f7f6 fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d84:	b908      	cbnz	r0, 8009d8a <_dtoa_r+0x162>
 8009d86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d8a:	f1ba 0f16 	cmp.w	sl, #22
 8009d8e:	d859      	bhi.n	8009e44 <_dtoa_r+0x21c>
 8009d90:	4970      	ldr	r1, [pc, #448]	; (8009f54 <_dtoa_r+0x32c>)
 8009d92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009d96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d9e:	f7f6 febb 	bl	8000b18 <__aeabi_dcmpgt>
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d050      	beq.n	8009e48 <_dtoa_r+0x220>
 8009da6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009daa:	2300      	movs	r3, #0
 8009dac:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009db0:	1b5d      	subs	r5, r3, r5
 8009db2:	f1b5 0801 	subs.w	r8, r5, #1
 8009db6:	bf49      	itett	mi
 8009db8:	f1c5 0301 	rsbmi	r3, r5, #1
 8009dbc:	2300      	movpl	r3, #0
 8009dbe:	9305      	strmi	r3, [sp, #20]
 8009dc0:	f04f 0800 	movmi.w	r8, #0
 8009dc4:	bf58      	it	pl
 8009dc6:	9305      	strpl	r3, [sp, #20]
 8009dc8:	f1ba 0f00 	cmp.w	sl, #0
 8009dcc:	db3e      	blt.n	8009e4c <_dtoa_r+0x224>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	44d0      	add	r8, sl
 8009dd2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009dd6:	9307      	str	r3, [sp, #28]
 8009dd8:	9b06      	ldr	r3, [sp, #24]
 8009dda:	2b09      	cmp	r3, #9
 8009ddc:	f200 8090 	bhi.w	8009f00 <_dtoa_r+0x2d8>
 8009de0:	2b05      	cmp	r3, #5
 8009de2:	bfc4      	itt	gt
 8009de4:	3b04      	subgt	r3, #4
 8009de6:	9306      	strgt	r3, [sp, #24]
 8009de8:	9b06      	ldr	r3, [sp, #24]
 8009dea:	f1a3 0302 	sub.w	r3, r3, #2
 8009dee:	bfcc      	ite	gt
 8009df0:	2500      	movgt	r5, #0
 8009df2:	2501      	movle	r5, #1
 8009df4:	2b03      	cmp	r3, #3
 8009df6:	f200 808f 	bhi.w	8009f18 <_dtoa_r+0x2f0>
 8009dfa:	e8df f003 	tbb	[pc, r3]
 8009dfe:	7f7d      	.short	0x7f7d
 8009e00:	7131      	.short	0x7131
 8009e02:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009e06:	441d      	add	r5, r3
 8009e08:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009e0c:	2820      	cmp	r0, #32
 8009e0e:	dd13      	ble.n	8009e38 <_dtoa_r+0x210>
 8009e10:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009e14:	9b00      	ldr	r3, [sp, #0]
 8009e16:	fa08 f800 	lsl.w	r8, r8, r0
 8009e1a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009e1e:	fa23 f000 	lsr.w	r0, r3, r0
 8009e22:	ea48 0000 	orr.w	r0, r8, r0
 8009e26:	f7f6 fb6d 	bl	8000504 <__aeabi_ui2d>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	4682      	mov	sl, r0
 8009e2e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009e32:	3d01      	subs	r5, #1
 8009e34:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e36:	e772      	b.n	8009d1e <_dtoa_r+0xf6>
 8009e38:	9b00      	ldr	r3, [sp, #0]
 8009e3a:	f1c0 0020 	rsb	r0, r0, #32
 8009e3e:	fa03 f000 	lsl.w	r0, r3, r0
 8009e42:	e7f0      	b.n	8009e26 <_dtoa_r+0x1fe>
 8009e44:	2301      	movs	r3, #1
 8009e46:	e7b1      	b.n	8009dac <_dtoa_r+0x184>
 8009e48:	900f      	str	r0, [sp, #60]	; 0x3c
 8009e4a:	e7b0      	b.n	8009dae <_dtoa_r+0x186>
 8009e4c:	9b05      	ldr	r3, [sp, #20]
 8009e4e:	eba3 030a 	sub.w	r3, r3, sl
 8009e52:	9305      	str	r3, [sp, #20]
 8009e54:	f1ca 0300 	rsb	r3, sl, #0
 8009e58:	9307      	str	r3, [sp, #28]
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	930e      	str	r3, [sp, #56]	; 0x38
 8009e5e:	e7bb      	b.n	8009dd8 <_dtoa_r+0x1b0>
 8009e60:	2301      	movs	r3, #1
 8009e62:	930a      	str	r3, [sp, #40]	; 0x28
 8009e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	dd59      	ble.n	8009f1e <_dtoa_r+0x2f6>
 8009e6a:	9302      	str	r3, [sp, #8]
 8009e6c:	4699      	mov	r9, r3
 8009e6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e70:	2200      	movs	r2, #0
 8009e72:	6072      	str	r2, [r6, #4]
 8009e74:	2204      	movs	r2, #4
 8009e76:	f102 0014 	add.w	r0, r2, #20
 8009e7a:	4298      	cmp	r0, r3
 8009e7c:	6871      	ldr	r1, [r6, #4]
 8009e7e:	d953      	bls.n	8009f28 <_dtoa_r+0x300>
 8009e80:	4620      	mov	r0, r4
 8009e82:	f000 fc99 	bl	800a7b8 <_Balloc>
 8009e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e88:	6030      	str	r0, [r6, #0]
 8009e8a:	f1b9 0f0e 	cmp.w	r9, #14
 8009e8e:	f8d3 b000 	ldr.w	fp, [r3]
 8009e92:	f200 80e6 	bhi.w	800a062 <_dtoa_r+0x43a>
 8009e96:	2d00      	cmp	r5, #0
 8009e98:	f000 80e3 	beq.w	800a062 <_dtoa_r+0x43a>
 8009e9c:	ed9d 7b00 	vldr	d7, [sp]
 8009ea0:	f1ba 0f00 	cmp.w	sl, #0
 8009ea4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009ea8:	dd74      	ble.n	8009f94 <_dtoa_r+0x36c>
 8009eaa:	4a2a      	ldr	r2, [pc, #168]	; (8009f54 <_dtoa_r+0x32c>)
 8009eac:	f00a 030f 	and.w	r3, sl, #15
 8009eb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009eb4:	ed93 7b00 	vldr	d7, [r3]
 8009eb8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009ebc:	06f0      	lsls	r0, r6, #27
 8009ebe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009ec2:	d565      	bpl.n	8009f90 <_dtoa_r+0x368>
 8009ec4:	4b24      	ldr	r3, [pc, #144]	; (8009f58 <_dtoa_r+0x330>)
 8009ec6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009eca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ece:	f7f6 fcbd 	bl	800084c <__aeabi_ddiv>
 8009ed2:	e9cd 0100 	strd	r0, r1, [sp]
 8009ed6:	f006 060f 	and.w	r6, r6, #15
 8009eda:	2503      	movs	r5, #3
 8009edc:	4f1e      	ldr	r7, [pc, #120]	; (8009f58 <_dtoa_r+0x330>)
 8009ede:	e04c      	b.n	8009f7a <_dtoa_r+0x352>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8009ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ee6:	4453      	add	r3, sl
 8009ee8:	f103 0901 	add.w	r9, r3, #1
 8009eec:	9302      	str	r3, [sp, #8]
 8009eee:	464b      	mov	r3, r9
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	bfb8      	it	lt
 8009ef4:	2301      	movlt	r3, #1
 8009ef6:	e7ba      	b.n	8009e6e <_dtoa_r+0x246>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	e7b2      	b.n	8009e62 <_dtoa_r+0x23a>
 8009efc:	2300      	movs	r3, #0
 8009efe:	e7f0      	b.n	8009ee2 <_dtoa_r+0x2ba>
 8009f00:	2501      	movs	r5, #1
 8009f02:	2300      	movs	r3, #0
 8009f04:	9306      	str	r3, [sp, #24]
 8009f06:	950a      	str	r5, [sp, #40]	; 0x28
 8009f08:	f04f 33ff 	mov.w	r3, #4294967295
 8009f0c:	9302      	str	r3, [sp, #8]
 8009f0e:	4699      	mov	r9, r3
 8009f10:	2200      	movs	r2, #0
 8009f12:	2312      	movs	r3, #18
 8009f14:	920b      	str	r2, [sp, #44]	; 0x2c
 8009f16:	e7aa      	b.n	8009e6e <_dtoa_r+0x246>
 8009f18:	2301      	movs	r3, #1
 8009f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8009f1c:	e7f4      	b.n	8009f08 <_dtoa_r+0x2e0>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	9302      	str	r3, [sp, #8]
 8009f22:	4699      	mov	r9, r3
 8009f24:	461a      	mov	r2, r3
 8009f26:	e7f5      	b.n	8009f14 <_dtoa_r+0x2ec>
 8009f28:	3101      	adds	r1, #1
 8009f2a:	6071      	str	r1, [r6, #4]
 8009f2c:	0052      	lsls	r2, r2, #1
 8009f2e:	e7a2      	b.n	8009e76 <_dtoa_r+0x24e>
 8009f30:	636f4361 	.word	0x636f4361
 8009f34:	3fd287a7 	.word	0x3fd287a7
 8009f38:	8b60c8b3 	.word	0x8b60c8b3
 8009f3c:	3fc68a28 	.word	0x3fc68a28
 8009f40:	509f79fb 	.word	0x509f79fb
 8009f44:	3fd34413 	.word	0x3fd34413
 8009f48:	7ff00000 	.word	0x7ff00000
 8009f4c:	0800b1ad 	.word	0x0800b1ad
 8009f50:	3ff80000 	.word	0x3ff80000
 8009f54:	0800b208 	.word	0x0800b208
 8009f58:	0800b1e0 	.word	0x0800b1e0
 8009f5c:	0800b1d9 	.word	0x0800b1d9
 8009f60:	07f1      	lsls	r1, r6, #31
 8009f62:	d508      	bpl.n	8009f76 <_dtoa_r+0x34e>
 8009f64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f6c:	f7f6 fb44 	bl	80005f8 <__aeabi_dmul>
 8009f70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f74:	3501      	adds	r5, #1
 8009f76:	1076      	asrs	r6, r6, #1
 8009f78:	3708      	adds	r7, #8
 8009f7a:	2e00      	cmp	r6, #0
 8009f7c:	d1f0      	bne.n	8009f60 <_dtoa_r+0x338>
 8009f7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f86:	f7f6 fc61 	bl	800084c <__aeabi_ddiv>
 8009f8a:	e9cd 0100 	strd	r0, r1, [sp]
 8009f8e:	e01a      	b.n	8009fc6 <_dtoa_r+0x39e>
 8009f90:	2502      	movs	r5, #2
 8009f92:	e7a3      	b.n	8009edc <_dtoa_r+0x2b4>
 8009f94:	f000 80a0 	beq.w	800a0d8 <_dtoa_r+0x4b0>
 8009f98:	f1ca 0600 	rsb	r6, sl, #0
 8009f9c:	4b9f      	ldr	r3, [pc, #636]	; (800a21c <_dtoa_r+0x5f4>)
 8009f9e:	4fa0      	ldr	r7, [pc, #640]	; (800a220 <_dtoa_r+0x5f8>)
 8009fa0:	f006 020f 	and.w	r2, r6, #15
 8009fa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009fb0:	f7f6 fb22 	bl	80005f8 <__aeabi_dmul>
 8009fb4:	e9cd 0100 	strd	r0, r1, [sp]
 8009fb8:	1136      	asrs	r6, r6, #4
 8009fba:	2300      	movs	r3, #0
 8009fbc:	2502      	movs	r5, #2
 8009fbe:	2e00      	cmp	r6, #0
 8009fc0:	d17f      	bne.n	800a0c2 <_dtoa_r+0x49a>
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1e1      	bne.n	8009f8a <_dtoa_r+0x362>
 8009fc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f000 8087 	beq.w	800a0dc <_dtoa_r+0x4b4>
 8009fce:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	4b93      	ldr	r3, [pc, #588]	; (800a224 <_dtoa_r+0x5fc>)
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	4639      	mov	r1, r7
 8009fda:	f7f6 fd7f 	bl	8000adc <__aeabi_dcmplt>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d07c      	beq.n	800a0dc <_dtoa_r+0x4b4>
 8009fe2:	f1b9 0f00 	cmp.w	r9, #0
 8009fe6:	d079      	beq.n	800a0dc <_dtoa_r+0x4b4>
 8009fe8:	9b02      	ldr	r3, [sp, #8]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	dd35      	ble.n	800a05a <_dtoa_r+0x432>
 8009fee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009ff2:	9308      	str	r3, [sp, #32]
 8009ff4:	4639      	mov	r1, r7
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	4b8b      	ldr	r3, [pc, #556]	; (800a228 <_dtoa_r+0x600>)
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f7f6 fafc 	bl	80005f8 <__aeabi_dmul>
 800a000:	e9cd 0100 	strd	r0, r1, [sp]
 800a004:	9f02      	ldr	r7, [sp, #8]
 800a006:	3501      	adds	r5, #1
 800a008:	4628      	mov	r0, r5
 800a00a:	f7f6 fa8b 	bl	8000524 <__aeabi_i2d>
 800a00e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a012:	f7f6 faf1 	bl	80005f8 <__aeabi_dmul>
 800a016:	2200      	movs	r2, #0
 800a018:	4b84      	ldr	r3, [pc, #528]	; (800a22c <_dtoa_r+0x604>)
 800a01a:	f7f6 f937 	bl	800028c <__adddf3>
 800a01e:	4605      	mov	r5, r0
 800a020:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a024:	2f00      	cmp	r7, #0
 800a026:	d15d      	bne.n	800a0e4 <_dtoa_r+0x4bc>
 800a028:	2200      	movs	r2, #0
 800a02a:	4b81      	ldr	r3, [pc, #516]	; (800a230 <_dtoa_r+0x608>)
 800a02c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a030:	f7f6 f92a 	bl	8000288 <__aeabi_dsub>
 800a034:	462a      	mov	r2, r5
 800a036:	4633      	mov	r3, r6
 800a038:	e9cd 0100 	strd	r0, r1, [sp]
 800a03c:	f7f6 fd6c 	bl	8000b18 <__aeabi_dcmpgt>
 800a040:	2800      	cmp	r0, #0
 800a042:	f040 8288 	bne.w	800a556 <_dtoa_r+0x92e>
 800a046:	462a      	mov	r2, r5
 800a048:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a04c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a050:	f7f6 fd44 	bl	8000adc <__aeabi_dcmplt>
 800a054:	2800      	cmp	r0, #0
 800a056:	f040 827c 	bne.w	800a552 <_dtoa_r+0x92a>
 800a05a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a05e:	e9cd 2300 	strd	r2, r3, [sp]
 800a062:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a064:	2b00      	cmp	r3, #0
 800a066:	f2c0 8150 	blt.w	800a30a <_dtoa_r+0x6e2>
 800a06a:	f1ba 0f0e 	cmp.w	sl, #14
 800a06e:	f300 814c 	bgt.w	800a30a <_dtoa_r+0x6e2>
 800a072:	4b6a      	ldr	r3, [pc, #424]	; (800a21c <_dtoa_r+0x5f4>)
 800a074:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a078:	ed93 7b00 	vldr	d7, [r3]
 800a07c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a07e:	2b00      	cmp	r3, #0
 800a080:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a084:	f280 80d8 	bge.w	800a238 <_dtoa_r+0x610>
 800a088:	f1b9 0f00 	cmp.w	r9, #0
 800a08c:	f300 80d4 	bgt.w	800a238 <_dtoa_r+0x610>
 800a090:	f040 825e 	bne.w	800a550 <_dtoa_r+0x928>
 800a094:	2200      	movs	r2, #0
 800a096:	4b66      	ldr	r3, [pc, #408]	; (800a230 <_dtoa_r+0x608>)
 800a098:	ec51 0b17 	vmov	r0, r1, d7
 800a09c:	f7f6 faac 	bl	80005f8 <__aeabi_dmul>
 800a0a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0a4:	f7f6 fd2e 	bl	8000b04 <__aeabi_dcmpge>
 800a0a8:	464f      	mov	r7, r9
 800a0aa:	464e      	mov	r6, r9
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	f040 8234 	bne.w	800a51a <_dtoa_r+0x8f2>
 800a0b2:	2331      	movs	r3, #49	; 0x31
 800a0b4:	f10b 0501 	add.w	r5, fp, #1
 800a0b8:	f88b 3000 	strb.w	r3, [fp]
 800a0bc:	f10a 0a01 	add.w	sl, sl, #1
 800a0c0:	e22f      	b.n	800a522 <_dtoa_r+0x8fa>
 800a0c2:	07f2      	lsls	r2, r6, #31
 800a0c4:	d505      	bpl.n	800a0d2 <_dtoa_r+0x4aa>
 800a0c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0ca:	f7f6 fa95 	bl	80005f8 <__aeabi_dmul>
 800a0ce:	3501      	adds	r5, #1
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	1076      	asrs	r6, r6, #1
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	e772      	b.n	8009fbe <_dtoa_r+0x396>
 800a0d8:	2502      	movs	r5, #2
 800a0da:	e774      	b.n	8009fc6 <_dtoa_r+0x39e>
 800a0dc:	f8cd a020 	str.w	sl, [sp, #32]
 800a0e0:	464f      	mov	r7, r9
 800a0e2:	e791      	b.n	800a008 <_dtoa_r+0x3e0>
 800a0e4:	4b4d      	ldr	r3, [pc, #308]	; (800a21c <_dtoa_r+0x5f4>)
 800a0e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a0ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d047      	beq.n	800a184 <_dtoa_r+0x55c>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	494e      	ldr	r1, [pc, #312]	; (800a234 <_dtoa_r+0x60c>)
 800a0fc:	f7f6 fba6 	bl	800084c <__aeabi_ddiv>
 800a100:	462a      	mov	r2, r5
 800a102:	4633      	mov	r3, r6
 800a104:	f7f6 f8c0 	bl	8000288 <__aeabi_dsub>
 800a108:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a10c:	465d      	mov	r5, fp
 800a10e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a112:	f7f6 fd21 	bl	8000b58 <__aeabi_d2iz>
 800a116:	4606      	mov	r6, r0
 800a118:	f7f6 fa04 	bl	8000524 <__aeabi_i2d>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a124:	f7f6 f8b0 	bl	8000288 <__aeabi_dsub>
 800a128:	3630      	adds	r6, #48	; 0x30
 800a12a:	f805 6b01 	strb.w	r6, [r5], #1
 800a12e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a132:	e9cd 0100 	strd	r0, r1, [sp]
 800a136:	f7f6 fcd1 	bl	8000adc <__aeabi_dcmplt>
 800a13a:	2800      	cmp	r0, #0
 800a13c:	d163      	bne.n	800a206 <_dtoa_r+0x5de>
 800a13e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a142:	2000      	movs	r0, #0
 800a144:	4937      	ldr	r1, [pc, #220]	; (800a224 <_dtoa_r+0x5fc>)
 800a146:	f7f6 f89f 	bl	8000288 <__aeabi_dsub>
 800a14a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a14e:	f7f6 fcc5 	bl	8000adc <__aeabi_dcmplt>
 800a152:	2800      	cmp	r0, #0
 800a154:	f040 80b7 	bne.w	800a2c6 <_dtoa_r+0x69e>
 800a158:	eba5 030b 	sub.w	r3, r5, fp
 800a15c:	429f      	cmp	r7, r3
 800a15e:	f77f af7c 	ble.w	800a05a <_dtoa_r+0x432>
 800a162:	2200      	movs	r2, #0
 800a164:	4b30      	ldr	r3, [pc, #192]	; (800a228 <_dtoa_r+0x600>)
 800a166:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a16a:	f7f6 fa45 	bl	80005f8 <__aeabi_dmul>
 800a16e:	2200      	movs	r2, #0
 800a170:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a174:	4b2c      	ldr	r3, [pc, #176]	; (800a228 <_dtoa_r+0x600>)
 800a176:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a17a:	f7f6 fa3d 	bl	80005f8 <__aeabi_dmul>
 800a17e:	e9cd 0100 	strd	r0, r1, [sp]
 800a182:	e7c4      	b.n	800a10e <_dtoa_r+0x4e6>
 800a184:	462a      	mov	r2, r5
 800a186:	4633      	mov	r3, r6
 800a188:	f7f6 fa36 	bl	80005f8 <__aeabi_dmul>
 800a18c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a190:	eb0b 0507 	add.w	r5, fp, r7
 800a194:	465e      	mov	r6, fp
 800a196:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a19a:	f7f6 fcdd 	bl	8000b58 <__aeabi_d2iz>
 800a19e:	4607      	mov	r7, r0
 800a1a0:	f7f6 f9c0 	bl	8000524 <__aeabi_i2d>
 800a1a4:	3730      	adds	r7, #48	; 0x30
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1ae:	f7f6 f86b 	bl	8000288 <__aeabi_dsub>
 800a1b2:	f806 7b01 	strb.w	r7, [r6], #1
 800a1b6:	42ae      	cmp	r6, r5
 800a1b8:	e9cd 0100 	strd	r0, r1, [sp]
 800a1bc:	f04f 0200 	mov.w	r2, #0
 800a1c0:	d126      	bne.n	800a210 <_dtoa_r+0x5e8>
 800a1c2:	4b1c      	ldr	r3, [pc, #112]	; (800a234 <_dtoa_r+0x60c>)
 800a1c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1c8:	f7f6 f860 	bl	800028c <__adddf3>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1d4:	f7f6 fca0 	bl	8000b18 <__aeabi_dcmpgt>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	d174      	bne.n	800a2c6 <_dtoa_r+0x69e>
 800a1dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	4914      	ldr	r1, [pc, #80]	; (800a234 <_dtoa_r+0x60c>)
 800a1e4:	f7f6 f850 	bl	8000288 <__aeabi_dsub>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1f0:	f7f6 fc74 	bl	8000adc <__aeabi_dcmplt>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	f43f af30 	beq.w	800a05a <_dtoa_r+0x432>
 800a1fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a1fe:	2b30      	cmp	r3, #48	; 0x30
 800a200:	f105 32ff 	add.w	r2, r5, #4294967295
 800a204:	d002      	beq.n	800a20c <_dtoa_r+0x5e4>
 800a206:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a20a:	e04a      	b.n	800a2a2 <_dtoa_r+0x67a>
 800a20c:	4615      	mov	r5, r2
 800a20e:	e7f4      	b.n	800a1fa <_dtoa_r+0x5d2>
 800a210:	4b05      	ldr	r3, [pc, #20]	; (800a228 <_dtoa_r+0x600>)
 800a212:	f7f6 f9f1 	bl	80005f8 <__aeabi_dmul>
 800a216:	e9cd 0100 	strd	r0, r1, [sp]
 800a21a:	e7bc      	b.n	800a196 <_dtoa_r+0x56e>
 800a21c:	0800b208 	.word	0x0800b208
 800a220:	0800b1e0 	.word	0x0800b1e0
 800a224:	3ff00000 	.word	0x3ff00000
 800a228:	40240000 	.word	0x40240000
 800a22c:	401c0000 	.word	0x401c0000
 800a230:	40140000 	.word	0x40140000
 800a234:	3fe00000 	.word	0x3fe00000
 800a238:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a23c:	465d      	mov	r5, fp
 800a23e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a242:	4630      	mov	r0, r6
 800a244:	4639      	mov	r1, r7
 800a246:	f7f6 fb01 	bl	800084c <__aeabi_ddiv>
 800a24a:	f7f6 fc85 	bl	8000b58 <__aeabi_d2iz>
 800a24e:	4680      	mov	r8, r0
 800a250:	f7f6 f968 	bl	8000524 <__aeabi_i2d>
 800a254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a258:	f7f6 f9ce 	bl	80005f8 <__aeabi_dmul>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	4630      	mov	r0, r6
 800a262:	4639      	mov	r1, r7
 800a264:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a268:	f7f6 f80e 	bl	8000288 <__aeabi_dsub>
 800a26c:	f805 6b01 	strb.w	r6, [r5], #1
 800a270:	eba5 060b 	sub.w	r6, r5, fp
 800a274:	45b1      	cmp	r9, r6
 800a276:	4602      	mov	r2, r0
 800a278:	460b      	mov	r3, r1
 800a27a:	d139      	bne.n	800a2f0 <_dtoa_r+0x6c8>
 800a27c:	f7f6 f806 	bl	800028c <__adddf3>
 800a280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a284:	4606      	mov	r6, r0
 800a286:	460f      	mov	r7, r1
 800a288:	f7f6 fc46 	bl	8000b18 <__aeabi_dcmpgt>
 800a28c:	b9c8      	cbnz	r0, 800a2c2 <_dtoa_r+0x69a>
 800a28e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a292:	4630      	mov	r0, r6
 800a294:	4639      	mov	r1, r7
 800a296:	f7f6 fc17 	bl	8000ac8 <__aeabi_dcmpeq>
 800a29a:	b110      	cbz	r0, 800a2a2 <_dtoa_r+0x67a>
 800a29c:	f018 0f01 	tst.w	r8, #1
 800a2a0:	d10f      	bne.n	800a2c2 <_dtoa_r+0x69a>
 800a2a2:	9904      	ldr	r1, [sp, #16]
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f000 fabb 	bl	800a820 <_Bfree>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2ae:	702b      	strb	r3, [r5, #0]
 800a2b0:	f10a 0301 	add.w	r3, sl, #1
 800a2b4:	6013      	str	r3, [r2, #0]
 800a2b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 8241 	beq.w	800a740 <_dtoa_r+0xb18>
 800a2be:	601d      	str	r5, [r3, #0]
 800a2c0:	e23e      	b.n	800a740 <_dtoa_r+0xb18>
 800a2c2:	f8cd a020 	str.w	sl, [sp, #32]
 800a2c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2ca:	2a39      	cmp	r2, #57	; 0x39
 800a2cc:	f105 33ff 	add.w	r3, r5, #4294967295
 800a2d0:	d108      	bne.n	800a2e4 <_dtoa_r+0x6bc>
 800a2d2:	459b      	cmp	fp, r3
 800a2d4:	d10a      	bne.n	800a2ec <_dtoa_r+0x6c4>
 800a2d6:	9b08      	ldr	r3, [sp, #32]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	9308      	str	r3, [sp, #32]
 800a2dc:	2330      	movs	r3, #48	; 0x30
 800a2de:	f88b 3000 	strb.w	r3, [fp]
 800a2e2:	465b      	mov	r3, fp
 800a2e4:	781a      	ldrb	r2, [r3, #0]
 800a2e6:	3201      	adds	r2, #1
 800a2e8:	701a      	strb	r2, [r3, #0]
 800a2ea:	e78c      	b.n	800a206 <_dtoa_r+0x5de>
 800a2ec:	461d      	mov	r5, r3
 800a2ee:	e7ea      	b.n	800a2c6 <_dtoa_r+0x69e>
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	4b9b      	ldr	r3, [pc, #620]	; (800a560 <_dtoa_r+0x938>)
 800a2f4:	f7f6 f980 	bl	80005f8 <__aeabi_dmul>
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	460f      	mov	r7, r1
 800a300:	f7f6 fbe2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a304:	2800      	cmp	r0, #0
 800a306:	d09a      	beq.n	800a23e <_dtoa_r+0x616>
 800a308:	e7cb      	b.n	800a2a2 <_dtoa_r+0x67a>
 800a30a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a30c:	2a00      	cmp	r2, #0
 800a30e:	f000 808b 	beq.w	800a428 <_dtoa_r+0x800>
 800a312:	9a06      	ldr	r2, [sp, #24]
 800a314:	2a01      	cmp	r2, #1
 800a316:	dc6e      	bgt.n	800a3f6 <_dtoa_r+0x7ce>
 800a318:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a31a:	2a00      	cmp	r2, #0
 800a31c:	d067      	beq.n	800a3ee <_dtoa_r+0x7c6>
 800a31e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a322:	9f07      	ldr	r7, [sp, #28]
 800a324:	9d05      	ldr	r5, [sp, #20]
 800a326:	9a05      	ldr	r2, [sp, #20]
 800a328:	2101      	movs	r1, #1
 800a32a:	441a      	add	r2, r3
 800a32c:	4620      	mov	r0, r4
 800a32e:	9205      	str	r2, [sp, #20]
 800a330:	4498      	add	r8, r3
 800a332:	f000 fb15 	bl	800a960 <__i2b>
 800a336:	4606      	mov	r6, r0
 800a338:	2d00      	cmp	r5, #0
 800a33a:	dd0c      	ble.n	800a356 <_dtoa_r+0x72e>
 800a33c:	f1b8 0f00 	cmp.w	r8, #0
 800a340:	dd09      	ble.n	800a356 <_dtoa_r+0x72e>
 800a342:	4545      	cmp	r5, r8
 800a344:	9a05      	ldr	r2, [sp, #20]
 800a346:	462b      	mov	r3, r5
 800a348:	bfa8      	it	ge
 800a34a:	4643      	movge	r3, r8
 800a34c:	1ad2      	subs	r2, r2, r3
 800a34e:	9205      	str	r2, [sp, #20]
 800a350:	1aed      	subs	r5, r5, r3
 800a352:	eba8 0803 	sub.w	r8, r8, r3
 800a356:	9b07      	ldr	r3, [sp, #28]
 800a358:	b1eb      	cbz	r3, 800a396 <_dtoa_r+0x76e>
 800a35a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d067      	beq.n	800a430 <_dtoa_r+0x808>
 800a360:	b18f      	cbz	r7, 800a386 <_dtoa_r+0x75e>
 800a362:	4631      	mov	r1, r6
 800a364:	463a      	mov	r2, r7
 800a366:	4620      	mov	r0, r4
 800a368:	f000 fb9a 	bl	800aaa0 <__pow5mult>
 800a36c:	9a04      	ldr	r2, [sp, #16]
 800a36e:	4601      	mov	r1, r0
 800a370:	4606      	mov	r6, r0
 800a372:	4620      	mov	r0, r4
 800a374:	f000 fafd 	bl	800a972 <__multiply>
 800a378:	9904      	ldr	r1, [sp, #16]
 800a37a:	9008      	str	r0, [sp, #32]
 800a37c:	4620      	mov	r0, r4
 800a37e:	f000 fa4f 	bl	800a820 <_Bfree>
 800a382:	9b08      	ldr	r3, [sp, #32]
 800a384:	9304      	str	r3, [sp, #16]
 800a386:	9b07      	ldr	r3, [sp, #28]
 800a388:	1bda      	subs	r2, r3, r7
 800a38a:	d004      	beq.n	800a396 <_dtoa_r+0x76e>
 800a38c:	9904      	ldr	r1, [sp, #16]
 800a38e:	4620      	mov	r0, r4
 800a390:	f000 fb86 	bl	800aaa0 <__pow5mult>
 800a394:	9004      	str	r0, [sp, #16]
 800a396:	2101      	movs	r1, #1
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 fae1 	bl	800a960 <__i2b>
 800a39e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3a0:	4607      	mov	r7, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f000 81d0 	beq.w	800a748 <_dtoa_r+0xb20>
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	4601      	mov	r1, r0
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f000 fb77 	bl	800aaa0 <__pow5mult>
 800a3b2:	9b06      	ldr	r3, [sp, #24]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	4607      	mov	r7, r0
 800a3b8:	dc40      	bgt.n	800a43c <_dtoa_r+0x814>
 800a3ba:	9b00      	ldr	r3, [sp, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d139      	bne.n	800a434 <_dtoa_r+0x80c>
 800a3c0:	9b01      	ldr	r3, [sp, #4]
 800a3c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d136      	bne.n	800a438 <_dtoa_r+0x810>
 800a3ca:	9b01      	ldr	r3, [sp, #4]
 800a3cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3d0:	0d1b      	lsrs	r3, r3, #20
 800a3d2:	051b      	lsls	r3, r3, #20
 800a3d4:	b12b      	cbz	r3, 800a3e2 <_dtoa_r+0x7ba>
 800a3d6:	9b05      	ldr	r3, [sp, #20]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	9305      	str	r3, [sp, #20]
 800a3dc:	f108 0801 	add.w	r8, r8, #1
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	9307      	str	r3, [sp, #28]
 800a3e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d12a      	bne.n	800a440 <_dtoa_r+0x818>
 800a3ea:	2001      	movs	r0, #1
 800a3ec:	e030      	b.n	800a450 <_dtoa_r+0x828>
 800a3ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a3f4:	e795      	b.n	800a322 <_dtoa_r+0x6fa>
 800a3f6:	9b07      	ldr	r3, [sp, #28]
 800a3f8:	f109 37ff 	add.w	r7, r9, #4294967295
 800a3fc:	42bb      	cmp	r3, r7
 800a3fe:	bfbf      	itttt	lt
 800a400:	9b07      	ldrlt	r3, [sp, #28]
 800a402:	9707      	strlt	r7, [sp, #28]
 800a404:	1afa      	sublt	r2, r7, r3
 800a406:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a408:	bfbb      	ittet	lt
 800a40a:	189b      	addlt	r3, r3, r2
 800a40c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a40e:	1bdf      	subge	r7, r3, r7
 800a410:	2700      	movlt	r7, #0
 800a412:	f1b9 0f00 	cmp.w	r9, #0
 800a416:	bfb5      	itete	lt
 800a418:	9b05      	ldrlt	r3, [sp, #20]
 800a41a:	9d05      	ldrge	r5, [sp, #20]
 800a41c:	eba3 0509 	sublt.w	r5, r3, r9
 800a420:	464b      	movge	r3, r9
 800a422:	bfb8      	it	lt
 800a424:	2300      	movlt	r3, #0
 800a426:	e77e      	b.n	800a326 <_dtoa_r+0x6fe>
 800a428:	9f07      	ldr	r7, [sp, #28]
 800a42a:	9d05      	ldr	r5, [sp, #20]
 800a42c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a42e:	e783      	b.n	800a338 <_dtoa_r+0x710>
 800a430:	9a07      	ldr	r2, [sp, #28]
 800a432:	e7ab      	b.n	800a38c <_dtoa_r+0x764>
 800a434:	2300      	movs	r3, #0
 800a436:	e7d4      	b.n	800a3e2 <_dtoa_r+0x7ba>
 800a438:	9b00      	ldr	r3, [sp, #0]
 800a43a:	e7d2      	b.n	800a3e2 <_dtoa_r+0x7ba>
 800a43c:	2300      	movs	r3, #0
 800a43e:	9307      	str	r3, [sp, #28]
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a446:	6918      	ldr	r0, [r3, #16]
 800a448:	f000 fa3c 	bl	800a8c4 <__hi0bits>
 800a44c:	f1c0 0020 	rsb	r0, r0, #32
 800a450:	4440      	add	r0, r8
 800a452:	f010 001f 	ands.w	r0, r0, #31
 800a456:	d047      	beq.n	800a4e8 <_dtoa_r+0x8c0>
 800a458:	f1c0 0320 	rsb	r3, r0, #32
 800a45c:	2b04      	cmp	r3, #4
 800a45e:	dd3b      	ble.n	800a4d8 <_dtoa_r+0x8b0>
 800a460:	9b05      	ldr	r3, [sp, #20]
 800a462:	f1c0 001c 	rsb	r0, r0, #28
 800a466:	4403      	add	r3, r0
 800a468:	9305      	str	r3, [sp, #20]
 800a46a:	4405      	add	r5, r0
 800a46c:	4480      	add	r8, r0
 800a46e:	9b05      	ldr	r3, [sp, #20]
 800a470:	2b00      	cmp	r3, #0
 800a472:	dd05      	ble.n	800a480 <_dtoa_r+0x858>
 800a474:	461a      	mov	r2, r3
 800a476:	9904      	ldr	r1, [sp, #16]
 800a478:	4620      	mov	r0, r4
 800a47a:	f000 fb5f 	bl	800ab3c <__lshift>
 800a47e:	9004      	str	r0, [sp, #16]
 800a480:	f1b8 0f00 	cmp.w	r8, #0
 800a484:	dd05      	ble.n	800a492 <_dtoa_r+0x86a>
 800a486:	4639      	mov	r1, r7
 800a488:	4642      	mov	r2, r8
 800a48a:	4620      	mov	r0, r4
 800a48c:	f000 fb56 	bl	800ab3c <__lshift>
 800a490:	4607      	mov	r7, r0
 800a492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a494:	b353      	cbz	r3, 800a4ec <_dtoa_r+0x8c4>
 800a496:	4639      	mov	r1, r7
 800a498:	9804      	ldr	r0, [sp, #16]
 800a49a:	f000 fba3 	bl	800abe4 <__mcmp>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	da24      	bge.n	800a4ec <_dtoa_r+0x8c4>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	220a      	movs	r2, #10
 800a4a6:	9904      	ldr	r1, [sp, #16]
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f000 f9d0 	bl	800a84e <__multadd>
 800a4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4b0:	9004      	str	r0, [sp, #16]
 800a4b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f000 814d 	beq.w	800a756 <_dtoa_r+0xb2e>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	4631      	mov	r1, r6
 800a4c0:	220a      	movs	r2, #10
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f000 f9c3 	bl	800a84e <__multadd>
 800a4c8:	9b02      	ldr	r3, [sp, #8]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	4606      	mov	r6, r0
 800a4ce:	dc4f      	bgt.n	800a570 <_dtoa_r+0x948>
 800a4d0:	9b06      	ldr	r3, [sp, #24]
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	dd4c      	ble.n	800a570 <_dtoa_r+0x948>
 800a4d6:	e011      	b.n	800a4fc <_dtoa_r+0x8d4>
 800a4d8:	d0c9      	beq.n	800a46e <_dtoa_r+0x846>
 800a4da:	9a05      	ldr	r2, [sp, #20]
 800a4dc:	331c      	adds	r3, #28
 800a4de:	441a      	add	r2, r3
 800a4e0:	9205      	str	r2, [sp, #20]
 800a4e2:	441d      	add	r5, r3
 800a4e4:	4498      	add	r8, r3
 800a4e6:	e7c2      	b.n	800a46e <_dtoa_r+0x846>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	e7f6      	b.n	800a4da <_dtoa_r+0x8b2>
 800a4ec:	f1b9 0f00 	cmp.w	r9, #0
 800a4f0:	dc38      	bgt.n	800a564 <_dtoa_r+0x93c>
 800a4f2:	9b06      	ldr	r3, [sp, #24]
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	dd35      	ble.n	800a564 <_dtoa_r+0x93c>
 800a4f8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a4fc:	9b02      	ldr	r3, [sp, #8]
 800a4fe:	b963      	cbnz	r3, 800a51a <_dtoa_r+0x8f2>
 800a500:	4639      	mov	r1, r7
 800a502:	2205      	movs	r2, #5
 800a504:	4620      	mov	r0, r4
 800a506:	f000 f9a2 	bl	800a84e <__multadd>
 800a50a:	4601      	mov	r1, r0
 800a50c:	4607      	mov	r7, r0
 800a50e:	9804      	ldr	r0, [sp, #16]
 800a510:	f000 fb68 	bl	800abe4 <__mcmp>
 800a514:	2800      	cmp	r0, #0
 800a516:	f73f adcc 	bgt.w	800a0b2 <_dtoa_r+0x48a>
 800a51a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a51c:	465d      	mov	r5, fp
 800a51e:	ea6f 0a03 	mvn.w	sl, r3
 800a522:	f04f 0900 	mov.w	r9, #0
 800a526:	4639      	mov	r1, r7
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 f979 	bl	800a820 <_Bfree>
 800a52e:	2e00      	cmp	r6, #0
 800a530:	f43f aeb7 	beq.w	800a2a2 <_dtoa_r+0x67a>
 800a534:	f1b9 0f00 	cmp.w	r9, #0
 800a538:	d005      	beq.n	800a546 <_dtoa_r+0x91e>
 800a53a:	45b1      	cmp	r9, r6
 800a53c:	d003      	beq.n	800a546 <_dtoa_r+0x91e>
 800a53e:	4649      	mov	r1, r9
 800a540:	4620      	mov	r0, r4
 800a542:	f000 f96d 	bl	800a820 <_Bfree>
 800a546:	4631      	mov	r1, r6
 800a548:	4620      	mov	r0, r4
 800a54a:	f000 f969 	bl	800a820 <_Bfree>
 800a54e:	e6a8      	b.n	800a2a2 <_dtoa_r+0x67a>
 800a550:	2700      	movs	r7, #0
 800a552:	463e      	mov	r6, r7
 800a554:	e7e1      	b.n	800a51a <_dtoa_r+0x8f2>
 800a556:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a55a:	463e      	mov	r6, r7
 800a55c:	e5a9      	b.n	800a0b2 <_dtoa_r+0x48a>
 800a55e:	bf00      	nop
 800a560:	40240000 	.word	0x40240000
 800a564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a566:	f8cd 9008 	str.w	r9, [sp, #8]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f000 80fa 	beq.w	800a764 <_dtoa_r+0xb3c>
 800a570:	2d00      	cmp	r5, #0
 800a572:	dd05      	ble.n	800a580 <_dtoa_r+0x958>
 800a574:	4631      	mov	r1, r6
 800a576:	462a      	mov	r2, r5
 800a578:	4620      	mov	r0, r4
 800a57a:	f000 fadf 	bl	800ab3c <__lshift>
 800a57e:	4606      	mov	r6, r0
 800a580:	9b07      	ldr	r3, [sp, #28]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d04c      	beq.n	800a620 <_dtoa_r+0x9f8>
 800a586:	6871      	ldr	r1, [r6, #4]
 800a588:	4620      	mov	r0, r4
 800a58a:	f000 f915 	bl	800a7b8 <_Balloc>
 800a58e:	6932      	ldr	r2, [r6, #16]
 800a590:	3202      	adds	r2, #2
 800a592:	4605      	mov	r5, r0
 800a594:	0092      	lsls	r2, r2, #2
 800a596:	f106 010c 	add.w	r1, r6, #12
 800a59a:	300c      	adds	r0, #12
 800a59c:	f7fe fd70 	bl	8009080 <memcpy>
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f000 fac9 	bl	800ab3c <__lshift>
 800a5aa:	9b00      	ldr	r3, [sp, #0]
 800a5ac:	f8cd b014 	str.w	fp, [sp, #20]
 800a5b0:	f003 0301 	and.w	r3, r3, #1
 800a5b4:	46b1      	mov	r9, r6
 800a5b6:	9307      	str	r3, [sp, #28]
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	9804      	ldr	r0, [sp, #16]
 800a5be:	f7ff faa7 	bl	8009b10 <quorem>
 800a5c2:	4649      	mov	r1, r9
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a5ca:	9804      	ldr	r0, [sp, #16]
 800a5cc:	f000 fb0a 	bl	800abe4 <__mcmp>
 800a5d0:	4632      	mov	r2, r6
 800a5d2:	9000      	str	r0, [sp, #0]
 800a5d4:	4639      	mov	r1, r7
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f000 fb1e 	bl	800ac18 <__mdiff>
 800a5dc:	68c3      	ldr	r3, [r0, #12]
 800a5de:	4602      	mov	r2, r0
 800a5e0:	bb03      	cbnz	r3, 800a624 <_dtoa_r+0x9fc>
 800a5e2:	4601      	mov	r1, r0
 800a5e4:	9008      	str	r0, [sp, #32]
 800a5e6:	9804      	ldr	r0, [sp, #16]
 800a5e8:	f000 fafc 	bl	800abe4 <__mcmp>
 800a5ec:	9a08      	ldr	r2, [sp, #32]
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	9308      	str	r3, [sp, #32]
 800a5f6:	f000 f913 	bl	800a820 <_Bfree>
 800a5fa:	9b08      	ldr	r3, [sp, #32]
 800a5fc:	b9a3      	cbnz	r3, 800a628 <_dtoa_r+0xa00>
 800a5fe:	9a06      	ldr	r2, [sp, #24]
 800a600:	b992      	cbnz	r2, 800a628 <_dtoa_r+0xa00>
 800a602:	9a07      	ldr	r2, [sp, #28]
 800a604:	b982      	cbnz	r2, 800a628 <_dtoa_r+0xa00>
 800a606:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a60a:	d029      	beq.n	800a660 <_dtoa_r+0xa38>
 800a60c:	9b00      	ldr	r3, [sp, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	dd01      	ble.n	800a616 <_dtoa_r+0x9ee>
 800a612:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a616:	9b05      	ldr	r3, [sp, #20]
 800a618:	1c5d      	adds	r5, r3, #1
 800a61a:	f883 8000 	strb.w	r8, [r3]
 800a61e:	e782      	b.n	800a526 <_dtoa_r+0x8fe>
 800a620:	4630      	mov	r0, r6
 800a622:	e7c2      	b.n	800a5aa <_dtoa_r+0x982>
 800a624:	2301      	movs	r3, #1
 800a626:	e7e3      	b.n	800a5f0 <_dtoa_r+0x9c8>
 800a628:	9a00      	ldr	r2, [sp, #0]
 800a62a:	2a00      	cmp	r2, #0
 800a62c:	db04      	blt.n	800a638 <_dtoa_r+0xa10>
 800a62e:	d125      	bne.n	800a67c <_dtoa_r+0xa54>
 800a630:	9a06      	ldr	r2, [sp, #24]
 800a632:	bb1a      	cbnz	r2, 800a67c <_dtoa_r+0xa54>
 800a634:	9a07      	ldr	r2, [sp, #28]
 800a636:	bb0a      	cbnz	r2, 800a67c <_dtoa_r+0xa54>
 800a638:	2b00      	cmp	r3, #0
 800a63a:	ddec      	ble.n	800a616 <_dtoa_r+0x9ee>
 800a63c:	2201      	movs	r2, #1
 800a63e:	9904      	ldr	r1, [sp, #16]
 800a640:	4620      	mov	r0, r4
 800a642:	f000 fa7b 	bl	800ab3c <__lshift>
 800a646:	4639      	mov	r1, r7
 800a648:	9004      	str	r0, [sp, #16]
 800a64a:	f000 facb 	bl	800abe4 <__mcmp>
 800a64e:	2800      	cmp	r0, #0
 800a650:	dc03      	bgt.n	800a65a <_dtoa_r+0xa32>
 800a652:	d1e0      	bne.n	800a616 <_dtoa_r+0x9ee>
 800a654:	f018 0f01 	tst.w	r8, #1
 800a658:	d0dd      	beq.n	800a616 <_dtoa_r+0x9ee>
 800a65a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a65e:	d1d8      	bne.n	800a612 <_dtoa_r+0x9ea>
 800a660:	9b05      	ldr	r3, [sp, #20]
 800a662:	9a05      	ldr	r2, [sp, #20]
 800a664:	1c5d      	adds	r5, r3, #1
 800a666:	2339      	movs	r3, #57	; 0x39
 800a668:	7013      	strb	r3, [r2, #0]
 800a66a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a66e:	2b39      	cmp	r3, #57	; 0x39
 800a670:	f105 32ff 	add.w	r2, r5, #4294967295
 800a674:	d04f      	beq.n	800a716 <_dtoa_r+0xaee>
 800a676:	3301      	adds	r3, #1
 800a678:	7013      	strb	r3, [r2, #0]
 800a67a:	e754      	b.n	800a526 <_dtoa_r+0x8fe>
 800a67c:	9a05      	ldr	r2, [sp, #20]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f102 0501 	add.w	r5, r2, #1
 800a684:	dd06      	ble.n	800a694 <_dtoa_r+0xa6c>
 800a686:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a68a:	d0e9      	beq.n	800a660 <_dtoa_r+0xa38>
 800a68c:	f108 0801 	add.w	r8, r8, #1
 800a690:	9b05      	ldr	r3, [sp, #20]
 800a692:	e7c2      	b.n	800a61a <_dtoa_r+0x9f2>
 800a694:	9a02      	ldr	r2, [sp, #8]
 800a696:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a69a:	eba5 030b 	sub.w	r3, r5, fp
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d021      	beq.n	800a6e6 <_dtoa_r+0xabe>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	220a      	movs	r2, #10
 800a6a6:	9904      	ldr	r1, [sp, #16]
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f000 f8d0 	bl	800a84e <__multadd>
 800a6ae:	45b1      	cmp	r9, r6
 800a6b0:	9004      	str	r0, [sp, #16]
 800a6b2:	f04f 0300 	mov.w	r3, #0
 800a6b6:	f04f 020a 	mov.w	r2, #10
 800a6ba:	4649      	mov	r1, r9
 800a6bc:	4620      	mov	r0, r4
 800a6be:	d105      	bne.n	800a6cc <_dtoa_r+0xaa4>
 800a6c0:	f000 f8c5 	bl	800a84e <__multadd>
 800a6c4:	4681      	mov	r9, r0
 800a6c6:	4606      	mov	r6, r0
 800a6c8:	9505      	str	r5, [sp, #20]
 800a6ca:	e776      	b.n	800a5ba <_dtoa_r+0x992>
 800a6cc:	f000 f8bf 	bl	800a84e <__multadd>
 800a6d0:	4631      	mov	r1, r6
 800a6d2:	4681      	mov	r9, r0
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	220a      	movs	r2, #10
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f000 f8b8 	bl	800a84e <__multadd>
 800a6de:	4606      	mov	r6, r0
 800a6e0:	e7f2      	b.n	800a6c8 <_dtoa_r+0xaa0>
 800a6e2:	f04f 0900 	mov.w	r9, #0
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	9904      	ldr	r1, [sp, #16]
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f000 fa26 	bl	800ab3c <__lshift>
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	9004      	str	r0, [sp, #16]
 800a6f4:	f000 fa76 	bl	800abe4 <__mcmp>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	dcb6      	bgt.n	800a66a <_dtoa_r+0xa42>
 800a6fc:	d102      	bne.n	800a704 <_dtoa_r+0xadc>
 800a6fe:	f018 0f01 	tst.w	r8, #1
 800a702:	d1b2      	bne.n	800a66a <_dtoa_r+0xa42>
 800a704:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a708:	2b30      	cmp	r3, #48	; 0x30
 800a70a:	f105 32ff 	add.w	r2, r5, #4294967295
 800a70e:	f47f af0a 	bne.w	800a526 <_dtoa_r+0x8fe>
 800a712:	4615      	mov	r5, r2
 800a714:	e7f6      	b.n	800a704 <_dtoa_r+0xadc>
 800a716:	4593      	cmp	fp, r2
 800a718:	d105      	bne.n	800a726 <_dtoa_r+0xafe>
 800a71a:	2331      	movs	r3, #49	; 0x31
 800a71c:	f10a 0a01 	add.w	sl, sl, #1
 800a720:	f88b 3000 	strb.w	r3, [fp]
 800a724:	e6ff      	b.n	800a526 <_dtoa_r+0x8fe>
 800a726:	4615      	mov	r5, r2
 800a728:	e79f      	b.n	800a66a <_dtoa_r+0xa42>
 800a72a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a790 <_dtoa_r+0xb68>
 800a72e:	e007      	b.n	800a740 <_dtoa_r+0xb18>
 800a730:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a732:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a794 <_dtoa_r+0xb6c>
 800a736:	b11b      	cbz	r3, 800a740 <_dtoa_r+0xb18>
 800a738:	f10b 0308 	add.w	r3, fp, #8
 800a73c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	4658      	mov	r0, fp
 800a742:	b017      	add	sp, #92	; 0x5c
 800a744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a748:	9b06      	ldr	r3, [sp, #24]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	f77f ae35 	ble.w	800a3ba <_dtoa_r+0x792>
 800a750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a752:	9307      	str	r3, [sp, #28]
 800a754:	e649      	b.n	800a3ea <_dtoa_r+0x7c2>
 800a756:	9b02      	ldr	r3, [sp, #8]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	dc03      	bgt.n	800a764 <_dtoa_r+0xb3c>
 800a75c:	9b06      	ldr	r3, [sp, #24]
 800a75e:	2b02      	cmp	r3, #2
 800a760:	f73f aecc 	bgt.w	800a4fc <_dtoa_r+0x8d4>
 800a764:	465d      	mov	r5, fp
 800a766:	4639      	mov	r1, r7
 800a768:	9804      	ldr	r0, [sp, #16]
 800a76a:	f7ff f9d1 	bl	8009b10 <quorem>
 800a76e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a772:	f805 8b01 	strb.w	r8, [r5], #1
 800a776:	9a02      	ldr	r2, [sp, #8]
 800a778:	eba5 030b 	sub.w	r3, r5, fp
 800a77c:	429a      	cmp	r2, r3
 800a77e:	ddb0      	ble.n	800a6e2 <_dtoa_r+0xaba>
 800a780:	2300      	movs	r3, #0
 800a782:	220a      	movs	r2, #10
 800a784:	9904      	ldr	r1, [sp, #16]
 800a786:	4620      	mov	r0, r4
 800a788:	f000 f861 	bl	800a84e <__multadd>
 800a78c:	9004      	str	r0, [sp, #16]
 800a78e:	e7ea      	b.n	800a766 <_dtoa_r+0xb3e>
 800a790:	0800b1ac 	.word	0x0800b1ac
 800a794:	0800b1d0 	.word	0x0800b1d0

0800a798 <_localeconv_r>:
 800a798:	4b04      	ldr	r3, [pc, #16]	; (800a7ac <_localeconv_r+0x14>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6a18      	ldr	r0, [r3, #32]
 800a79e:	4b04      	ldr	r3, [pc, #16]	; (800a7b0 <_localeconv_r+0x18>)
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	bf08      	it	eq
 800a7a4:	4618      	moveq	r0, r3
 800a7a6:	30f0      	adds	r0, #240	; 0xf0
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	20000180 	.word	0x20000180
 800a7b0:	200001e4 	.word	0x200001e4

0800a7b4 <__malloc_lock>:
 800a7b4:	4770      	bx	lr

0800a7b6 <__malloc_unlock>:
 800a7b6:	4770      	bx	lr

0800a7b8 <_Balloc>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a7bc:	4604      	mov	r4, r0
 800a7be:	460e      	mov	r6, r1
 800a7c0:	b93d      	cbnz	r5, 800a7d2 <_Balloc+0x1a>
 800a7c2:	2010      	movs	r0, #16
 800a7c4:	f7fe fc4c 	bl	8009060 <malloc>
 800a7c8:	6260      	str	r0, [r4, #36]	; 0x24
 800a7ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a7ce:	6005      	str	r5, [r0, #0]
 800a7d0:	60c5      	str	r5, [r0, #12]
 800a7d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a7d4:	68eb      	ldr	r3, [r5, #12]
 800a7d6:	b183      	cbz	r3, 800a7fa <_Balloc+0x42>
 800a7d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a7e0:	b9b8      	cbnz	r0, 800a812 <_Balloc+0x5a>
 800a7e2:	2101      	movs	r1, #1
 800a7e4:	fa01 f506 	lsl.w	r5, r1, r6
 800a7e8:	1d6a      	adds	r2, r5, #5
 800a7ea:	0092      	lsls	r2, r2, #2
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f000 fabf 	bl	800ad70 <_calloc_r>
 800a7f2:	b160      	cbz	r0, 800a80e <_Balloc+0x56>
 800a7f4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a7f8:	e00e      	b.n	800a818 <_Balloc+0x60>
 800a7fa:	2221      	movs	r2, #33	; 0x21
 800a7fc:	2104      	movs	r1, #4
 800a7fe:	4620      	mov	r0, r4
 800a800:	f000 fab6 	bl	800ad70 <_calloc_r>
 800a804:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a806:	60e8      	str	r0, [r5, #12]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1e4      	bne.n	800a7d8 <_Balloc+0x20>
 800a80e:	2000      	movs	r0, #0
 800a810:	bd70      	pop	{r4, r5, r6, pc}
 800a812:	6802      	ldr	r2, [r0, #0]
 800a814:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a818:	2300      	movs	r3, #0
 800a81a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a81e:	e7f7      	b.n	800a810 <_Balloc+0x58>

0800a820 <_Bfree>:
 800a820:	b570      	push	{r4, r5, r6, lr}
 800a822:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a824:	4606      	mov	r6, r0
 800a826:	460d      	mov	r5, r1
 800a828:	b93c      	cbnz	r4, 800a83a <_Bfree+0x1a>
 800a82a:	2010      	movs	r0, #16
 800a82c:	f7fe fc18 	bl	8009060 <malloc>
 800a830:	6270      	str	r0, [r6, #36]	; 0x24
 800a832:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a836:	6004      	str	r4, [r0, #0]
 800a838:	60c4      	str	r4, [r0, #12]
 800a83a:	b13d      	cbz	r5, 800a84c <_Bfree+0x2c>
 800a83c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a83e:	686a      	ldr	r2, [r5, #4]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a846:	6029      	str	r1, [r5, #0]
 800a848:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a84c:	bd70      	pop	{r4, r5, r6, pc}

0800a84e <__multadd>:
 800a84e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a852:	690d      	ldr	r5, [r1, #16]
 800a854:	461f      	mov	r7, r3
 800a856:	4606      	mov	r6, r0
 800a858:	460c      	mov	r4, r1
 800a85a:	f101 0c14 	add.w	ip, r1, #20
 800a85e:	2300      	movs	r3, #0
 800a860:	f8dc 0000 	ldr.w	r0, [ip]
 800a864:	b281      	uxth	r1, r0
 800a866:	fb02 7101 	mla	r1, r2, r1, r7
 800a86a:	0c0f      	lsrs	r7, r1, #16
 800a86c:	0c00      	lsrs	r0, r0, #16
 800a86e:	fb02 7000 	mla	r0, r2, r0, r7
 800a872:	b289      	uxth	r1, r1
 800a874:	3301      	adds	r3, #1
 800a876:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a87a:	429d      	cmp	r5, r3
 800a87c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a880:	f84c 1b04 	str.w	r1, [ip], #4
 800a884:	dcec      	bgt.n	800a860 <__multadd+0x12>
 800a886:	b1d7      	cbz	r7, 800a8be <__multadd+0x70>
 800a888:	68a3      	ldr	r3, [r4, #8]
 800a88a:	42ab      	cmp	r3, r5
 800a88c:	dc12      	bgt.n	800a8b4 <__multadd+0x66>
 800a88e:	6861      	ldr	r1, [r4, #4]
 800a890:	4630      	mov	r0, r6
 800a892:	3101      	adds	r1, #1
 800a894:	f7ff ff90 	bl	800a7b8 <_Balloc>
 800a898:	6922      	ldr	r2, [r4, #16]
 800a89a:	3202      	adds	r2, #2
 800a89c:	f104 010c 	add.w	r1, r4, #12
 800a8a0:	4680      	mov	r8, r0
 800a8a2:	0092      	lsls	r2, r2, #2
 800a8a4:	300c      	adds	r0, #12
 800a8a6:	f7fe fbeb 	bl	8009080 <memcpy>
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	f7ff ffb7 	bl	800a820 <_Bfree>
 800a8b2:	4644      	mov	r4, r8
 800a8b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8b8:	3501      	adds	r5, #1
 800a8ba:	615f      	str	r7, [r3, #20]
 800a8bc:	6125      	str	r5, [r4, #16]
 800a8be:	4620      	mov	r0, r4
 800a8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a8c4 <__hi0bits>:
 800a8c4:	0c02      	lsrs	r2, r0, #16
 800a8c6:	0412      	lsls	r2, r2, #16
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	b9b2      	cbnz	r2, 800a8fa <__hi0bits+0x36>
 800a8cc:	0403      	lsls	r3, r0, #16
 800a8ce:	2010      	movs	r0, #16
 800a8d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a8d4:	bf04      	itt	eq
 800a8d6:	021b      	lsleq	r3, r3, #8
 800a8d8:	3008      	addeq	r0, #8
 800a8da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a8de:	bf04      	itt	eq
 800a8e0:	011b      	lsleq	r3, r3, #4
 800a8e2:	3004      	addeq	r0, #4
 800a8e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a8e8:	bf04      	itt	eq
 800a8ea:	009b      	lsleq	r3, r3, #2
 800a8ec:	3002      	addeq	r0, #2
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	db06      	blt.n	800a900 <__hi0bits+0x3c>
 800a8f2:	005b      	lsls	r3, r3, #1
 800a8f4:	d503      	bpl.n	800a8fe <__hi0bits+0x3a>
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	4770      	bx	lr
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	e7e8      	b.n	800a8d0 <__hi0bits+0xc>
 800a8fe:	2020      	movs	r0, #32
 800a900:	4770      	bx	lr

0800a902 <__lo0bits>:
 800a902:	6803      	ldr	r3, [r0, #0]
 800a904:	f013 0207 	ands.w	r2, r3, #7
 800a908:	4601      	mov	r1, r0
 800a90a:	d00b      	beq.n	800a924 <__lo0bits+0x22>
 800a90c:	07da      	lsls	r2, r3, #31
 800a90e:	d423      	bmi.n	800a958 <__lo0bits+0x56>
 800a910:	0798      	lsls	r0, r3, #30
 800a912:	bf49      	itett	mi
 800a914:	085b      	lsrmi	r3, r3, #1
 800a916:	089b      	lsrpl	r3, r3, #2
 800a918:	2001      	movmi	r0, #1
 800a91a:	600b      	strmi	r3, [r1, #0]
 800a91c:	bf5c      	itt	pl
 800a91e:	600b      	strpl	r3, [r1, #0]
 800a920:	2002      	movpl	r0, #2
 800a922:	4770      	bx	lr
 800a924:	b298      	uxth	r0, r3
 800a926:	b9a8      	cbnz	r0, 800a954 <__lo0bits+0x52>
 800a928:	0c1b      	lsrs	r3, r3, #16
 800a92a:	2010      	movs	r0, #16
 800a92c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a930:	bf04      	itt	eq
 800a932:	0a1b      	lsreq	r3, r3, #8
 800a934:	3008      	addeq	r0, #8
 800a936:	071a      	lsls	r2, r3, #28
 800a938:	bf04      	itt	eq
 800a93a:	091b      	lsreq	r3, r3, #4
 800a93c:	3004      	addeq	r0, #4
 800a93e:	079a      	lsls	r2, r3, #30
 800a940:	bf04      	itt	eq
 800a942:	089b      	lsreq	r3, r3, #2
 800a944:	3002      	addeq	r0, #2
 800a946:	07da      	lsls	r2, r3, #31
 800a948:	d402      	bmi.n	800a950 <__lo0bits+0x4e>
 800a94a:	085b      	lsrs	r3, r3, #1
 800a94c:	d006      	beq.n	800a95c <__lo0bits+0x5a>
 800a94e:	3001      	adds	r0, #1
 800a950:	600b      	str	r3, [r1, #0]
 800a952:	4770      	bx	lr
 800a954:	4610      	mov	r0, r2
 800a956:	e7e9      	b.n	800a92c <__lo0bits+0x2a>
 800a958:	2000      	movs	r0, #0
 800a95a:	4770      	bx	lr
 800a95c:	2020      	movs	r0, #32
 800a95e:	4770      	bx	lr

0800a960 <__i2b>:
 800a960:	b510      	push	{r4, lr}
 800a962:	460c      	mov	r4, r1
 800a964:	2101      	movs	r1, #1
 800a966:	f7ff ff27 	bl	800a7b8 <_Balloc>
 800a96a:	2201      	movs	r2, #1
 800a96c:	6144      	str	r4, [r0, #20]
 800a96e:	6102      	str	r2, [r0, #16]
 800a970:	bd10      	pop	{r4, pc}

0800a972 <__multiply>:
 800a972:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a976:	4614      	mov	r4, r2
 800a978:	690a      	ldr	r2, [r1, #16]
 800a97a:	6923      	ldr	r3, [r4, #16]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	bfb8      	it	lt
 800a980:	460b      	movlt	r3, r1
 800a982:	4688      	mov	r8, r1
 800a984:	bfbc      	itt	lt
 800a986:	46a0      	movlt	r8, r4
 800a988:	461c      	movlt	r4, r3
 800a98a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a98e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a992:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a996:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a99a:	eb07 0609 	add.w	r6, r7, r9
 800a99e:	42b3      	cmp	r3, r6
 800a9a0:	bfb8      	it	lt
 800a9a2:	3101      	addlt	r1, #1
 800a9a4:	f7ff ff08 	bl	800a7b8 <_Balloc>
 800a9a8:	f100 0514 	add.w	r5, r0, #20
 800a9ac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a9b0:	462b      	mov	r3, r5
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	4573      	cmp	r3, lr
 800a9b6:	d316      	bcc.n	800a9e6 <__multiply+0x74>
 800a9b8:	f104 0214 	add.w	r2, r4, #20
 800a9bc:	f108 0114 	add.w	r1, r8, #20
 800a9c0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a9c4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	9b00      	ldr	r3, [sp, #0]
 800a9cc:	9201      	str	r2, [sp, #4]
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d80c      	bhi.n	800a9ec <__multiply+0x7a>
 800a9d2:	2e00      	cmp	r6, #0
 800a9d4:	dd03      	ble.n	800a9de <__multiply+0x6c>
 800a9d6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d05d      	beq.n	800aa9a <__multiply+0x128>
 800a9de:	6106      	str	r6, [r0, #16]
 800a9e0:	b003      	add	sp, #12
 800a9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e6:	f843 2b04 	str.w	r2, [r3], #4
 800a9ea:	e7e3      	b.n	800a9b4 <__multiply+0x42>
 800a9ec:	f8b2 b000 	ldrh.w	fp, [r2]
 800a9f0:	f1bb 0f00 	cmp.w	fp, #0
 800a9f4:	d023      	beq.n	800aa3e <__multiply+0xcc>
 800a9f6:	4689      	mov	r9, r1
 800a9f8:	46ac      	mov	ip, r5
 800a9fa:	f04f 0800 	mov.w	r8, #0
 800a9fe:	f859 4b04 	ldr.w	r4, [r9], #4
 800aa02:	f8dc a000 	ldr.w	sl, [ip]
 800aa06:	b2a3      	uxth	r3, r4
 800aa08:	fa1f fa8a 	uxth.w	sl, sl
 800aa0c:	fb0b a303 	mla	r3, fp, r3, sl
 800aa10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aa14:	f8dc 4000 	ldr.w	r4, [ip]
 800aa18:	4443      	add	r3, r8
 800aa1a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aa1e:	fb0b 840a 	mla	r4, fp, sl, r8
 800aa22:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800aa26:	46e2      	mov	sl, ip
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aa2e:	454f      	cmp	r7, r9
 800aa30:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aa34:	f84a 3b04 	str.w	r3, [sl], #4
 800aa38:	d82b      	bhi.n	800aa92 <__multiply+0x120>
 800aa3a:	f8cc 8004 	str.w	r8, [ip, #4]
 800aa3e:	9b01      	ldr	r3, [sp, #4]
 800aa40:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800aa44:	3204      	adds	r2, #4
 800aa46:	f1ba 0f00 	cmp.w	sl, #0
 800aa4a:	d020      	beq.n	800aa8e <__multiply+0x11c>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	4689      	mov	r9, r1
 800aa50:	46a8      	mov	r8, r5
 800aa52:	f04f 0b00 	mov.w	fp, #0
 800aa56:	f8b9 c000 	ldrh.w	ip, [r9]
 800aa5a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800aa5e:	fb0a 440c 	mla	r4, sl, ip, r4
 800aa62:	445c      	add	r4, fp
 800aa64:	46c4      	mov	ip, r8
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aa6c:	f84c 3b04 	str.w	r3, [ip], #4
 800aa70:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa74:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800aa78:	0c1b      	lsrs	r3, r3, #16
 800aa7a:	fb0a b303 	mla	r3, sl, r3, fp
 800aa7e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aa82:	454f      	cmp	r7, r9
 800aa84:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800aa88:	d805      	bhi.n	800aa96 <__multiply+0x124>
 800aa8a:	f8c8 3004 	str.w	r3, [r8, #4]
 800aa8e:	3504      	adds	r5, #4
 800aa90:	e79b      	b.n	800a9ca <__multiply+0x58>
 800aa92:	46d4      	mov	ip, sl
 800aa94:	e7b3      	b.n	800a9fe <__multiply+0x8c>
 800aa96:	46e0      	mov	r8, ip
 800aa98:	e7dd      	b.n	800aa56 <__multiply+0xe4>
 800aa9a:	3e01      	subs	r6, #1
 800aa9c:	e799      	b.n	800a9d2 <__multiply+0x60>
	...

0800aaa0 <__pow5mult>:
 800aaa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaa4:	4615      	mov	r5, r2
 800aaa6:	f012 0203 	ands.w	r2, r2, #3
 800aaaa:	4606      	mov	r6, r0
 800aaac:	460f      	mov	r7, r1
 800aaae:	d007      	beq.n	800aac0 <__pow5mult+0x20>
 800aab0:	3a01      	subs	r2, #1
 800aab2:	4c21      	ldr	r4, [pc, #132]	; (800ab38 <__pow5mult+0x98>)
 800aab4:	2300      	movs	r3, #0
 800aab6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aaba:	f7ff fec8 	bl	800a84e <__multadd>
 800aabe:	4607      	mov	r7, r0
 800aac0:	10ad      	asrs	r5, r5, #2
 800aac2:	d035      	beq.n	800ab30 <__pow5mult+0x90>
 800aac4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aac6:	b93c      	cbnz	r4, 800aad8 <__pow5mult+0x38>
 800aac8:	2010      	movs	r0, #16
 800aaca:	f7fe fac9 	bl	8009060 <malloc>
 800aace:	6270      	str	r0, [r6, #36]	; 0x24
 800aad0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aad4:	6004      	str	r4, [r0, #0]
 800aad6:	60c4      	str	r4, [r0, #12]
 800aad8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aadc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aae0:	b94c      	cbnz	r4, 800aaf6 <__pow5mult+0x56>
 800aae2:	f240 2171 	movw	r1, #625	; 0x271
 800aae6:	4630      	mov	r0, r6
 800aae8:	f7ff ff3a 	bl	800a960 <__i2b>
 800aaec:	2300      	movs	r3, #0
 800aaee:	f8c8 0008 	str.w	r0, [r8, #8]
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	6003      	str	r3, [r0, #0]
 800aaf6:	f04f 0800 	mov.w	r8, #0
 800aafa:	07eb      	lsls	r3, r5, #31
 800aafc:	d50a      	bpl.n	800ab14 <__pow5mult+0x74>
 800aafe:	4639      	mov	r1, r7
 800ab00:	4622      	mov	r2, r4
 800ab02:	4630      	mov	r0, r6
 800ab04:	f7ff ff35 	bl	800a972 <__multiply>
 800ab08:	4639      	mov	r1, r7
 800ab0a:	4681      	mov	r9, r0
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	f7ff fe87 	bl	800a820 <_Bfree>
 800ab12:	464f      	mov	r7, r9
 800ab14:	106d      	asrs	r5, r5, #1
 800ab16:	d00b      	beq.n	800ab30 <__pow5mult+0x90>
 800ab18:	6820      	ldr	r0, [r4, #0]
 800ab1a:	b938      	cbnz	r0, 800ab2c <__pow5mult+0x8c>
 800ab1c:	4622      	mov	r2, r4
 800ab1e:	4621      	mov	r1, r4
 800ab20:	4630      	mov	r0, r6
 800ab22:	f7ff ff26 	bl	800a972 <__multiply>
 800ab26:	6020      	str	r0, [r4, #0]
 800ab28:	f8c0 8000 	str.w	r8, [r0]
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	e7e4      	b.n	800aafa <__pow5mult+0x5a>
 800ab30:	4638      	mov	r0, r7
 800ab32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab36:	bf00      	nop
 800ab38:	0800b2d0 	.word	0x0800b2d0

0800ab3c <__lshift>:
 800ab3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab40:	460c      	mov	r4, r1
 800ab42:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab46:	6923      	ldr	r3, [r4, #16]
 800ab48:	6849      	ldr	r1, [r1, #4]
 800ab4a:	eb0a 0903 	add.w	r9, sl, r3
 800ab4e:	68a3      	ldr	r3, [r4, #8]
 800ab50:	4607      	mov	r7, r0
 800ab52:	4616      	mov	r6, r2
 800ab54:	f109 0501 	add.w	r5, r9, #1
 800ab58:	42ab      	cmp	r3, r5
 800ab5a:	db32      	blt.n	800abc2 <__lshift+0x86>
 800ab5c:	4638      	mov	r0, r7
 800ab5e:	f7ff fe2b 	bl	800a7b8 <_Balloc>
 800ab62:	2300      	movs	r3, #0
 800ab64:	4680      	mov	r8, r0
 800ab66:	f100 0114 	add.w	r1, r0, #20
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	4553      	cmp	r3, sl
 800ab6e:	db2b      	blt.n	800abc8 <__lshift+0x8c>
 800ab70:	6920      	ldr	r0, [r4, #16]
 800ab72:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab76:	f104 0314 	add.w	r3, r4, #20
 800ab7a:	f016 021f 	ands.w	r2, r6, #31
 800ab7e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab82:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab86:	d025      	beq.n	800abd4 <__lshift+0x98>
 800ab88:	f1c2 0e20 	rsb	lr, r2, #32
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	681e      	ldr	r6, [r3, #0]
 800ab90:	468a      	mov	sl, r1
 800ab92:	4096      	lsls	r6, r2
 800ab94:	4330      	orrs	r0, r6
 800ab96:	f84a 0b04 	str.w	r0, [sl], #4
 800ab9a:	f853 0b04 	ldr.w	r0, [r3], #4
 800ab9e:	459c      	cmp	ip, r3
 800aba0:	fa20 f00e 	lsr.w	r0, r0, lr
 800aba4:	d814      	bhi.n	800abd0 <__lshift+0x94>
 800aba6:	6048      	str	r0, [r1, #4]
 800aba8:	b108      	cbz	r0, 800abae <__lshift+0x72>
 800abaa:	f109 0502 	add.w	r5, r9, #2
 800abae:	3d01      	subs	r5, #1
 800abb0:	4638      	mov	r0, r7
 800abb2:	f8c8 5010 	str.w	r5, [r8, #16]
 800abb6:	4621      	mov	r1, r4
 800abb8:	f7ff fe32 	bl	800a820 <_Bfree>
 800abbc:	4640      	mov	r0, r8
 800abbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc2:	3101      	adds	r1, #1
 800abc4:	005b      	lsls	r3, r3, #1
 800abc6:	e7c7      	b.n	800ab58 <__lshift+0x1c>
 800abc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800abcc:	3301      	adds	r3, #1
 800abce:	e7cd      	b.n	800ab6c <__lshift+0x30>
 800abd0:	4651      	mov	r1, sl
 800abd2:	e7dc      	b.n	800ab8e <__lshift+0x52>
 800abd4:	3904      	subs	r1, #4
 800abd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800abda:	f841 2f04 	str.w	r2, [r1, #4]!
 800abde:	459c      	cmp	ip, r3
 800abe0:	d8f9      	bhi.n	800abd6 <__lshift+0x9a>
 800abe2:	e7e4      	b.n	800abae <__lshift+0x72>

0800abe4 <__mcmp>:
 800abe4:	6903      	ldr	r3, [r0, #16]
 800abe6:	690a      	ldr	r2, [r1, #16]
 800abe8:	1a9b      	subs	r3, r3, r2
 800abea:	b530      	push	{r4, r5, lr}
 800abec:	d10c      	bne.n	800ac08 <__mcmp+0x24>
 800abee:	0092      	lsls	r2, r2, #2
 800abf0:	3014      	adds	r0, #20
 800abf2:	3114      	adds	r1, #20
 800abf4:	1884      	adds	r4, r0, r2
 800abf6:	4411      	add	r1, r2
 800abf8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800abfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac00:	4295      	cmp	r5, r2
 800ac02:	d003      	beq.n	800ac0c <__mcmp+0x28>
 800ac04:	d305      	bcc.n	800ac12 <__mcmp+0x2e>
 800ac06:	2301      	movs	r3, #1
 800ac08:	4618      	mov	r0, r3
 800ac0a:	bd30      	pop	{r4, r5, pc}
 800ac0c:	42a0      	cmp	r0, r4
 800ac0e:	d3f3      	bcc.n	800abf8 <__mcmp+0x14>
 800ac10:	e7fa      	b.n	800ac08 <__mcmp+0x24>
 800ac12:	f04f 33ff 	mov.w	r3, #4294967295
 800ac16:	e7f7      	b.n	800ac08 <__mcmp+0x24>

0800ac18 <__mdiff>:
 800ac18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac1c:	460d      	mov	r5, r1
 800ac1e:	4607      	mov	r7, r0
 800ac20:	4611      	mov	r1, r2
 800ac22:	4628      	mov	r0, r5
 800ac24:	4614      	mov	r4, r2
 800ac26:	f7ff ffdd 	bl	800abe4 <__mcmp>
 800ac2a:	1e06      	subs	r6, r0, #0
 800ac2c:	d108      	bne.n	800ac40 <__mdiff+0x28>
 800ac2e:	4631      	mov	r1, r6
 800ac30:	4638      	mov	r0, r7
 800ac32:	f7ff fdc1 	bl	800a7b8 <_Balloc>
 800ac36:	2301      	movs	r3, #1
 800ac38:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ac3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac40:	bfa4      	itt	ge
 800ac42:	4623      	movge	r3, r4
 800ac44:	462c      	movge	r4, r5
 800ac46:	4638      	mov	r0, r7
 800ac48:	6861      	ldr	r1, [r4, #4]
 800ac4a:	bfa6      	itte	ge
 800ac4c:	461d      	movge	r5, r3
 800ac4e:	2600      	movge	r6, #0
 800ac50:	2601      	movlt	r6, #1
 800ac52:	f7ff fdb1 	bl	800a7b8 <_Balloc>
 800ac56:	692b      	ldr	r3, [r5, #16]
 800ac58:	60c6      	str	r6, [r0, #12]
 800ac5a:	6926      	ldr	r6, [r4, #16]
 800ac5c:	f105 0914 	add.w	r9, r5, #20
 800ac60:	f104 0214 	add.w	r2, r4, #20
 800ac64:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ac68:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ac6c:	f100 0514 	add.w	r5, r0, #20
 800ac70:	f04f 0e00 	mov.w	lr, #0
 800ac74:	f852 ab04 	ldr.w	sl, [r2], #4
 800ac78:	f859 4b04 	ldr.w	r4, [r9], #4
 800ac7c:	fa1e f18a 	uxtah	r1, lr, sl
 800ac80:	b2a3      	uxth	r3, r4
 800ac82:	1ac9      	subs	r1, r1, r3
 800ac84:	0c23      	lsrs	r3, r4, #16
 800ac86:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ac8a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ac8e:	b289      	uxth	r1, r1
 800ac90:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ac94:	45c8      	cmp	r8, r9
 800ac96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ac9a:	4694      	mov	ip, r2
 800ac9c:	f845 3b04 	str.w	r3, [r5], #4
 800aca0:	d8e8      	bhi.n	800ac74 <__mdiff+0x5c>
 800aca2:	45bc      	cmp	ip, r7
 800aca4:	d304      	bcc.n	800acb0 <__mdiff+0x98>
 800aca6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800acaa:	b183      	cbz	r3, 800acce <__mdiff+0xb6>
 800acac:	6106      	str	r6, [r0, #16]
 800acae:	e7c5      	b.n	800ac3c <__mdiff+0x24>
 800acb0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800acb4:	fa1e f381 	uxtah	r3, lr, r1
 800acb8:	141a      	asrs	r2, r3, #16
 800acba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acc4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800acc8:	f845 3b04 	str.w	r3, [r5], #4
 800accc:	e7e9      	b.n	800aca2 <__mdiff+0x8a>
 800acce:	3e01      	subs	r6, #1
 800acd0:	e7e9      	b.n	800aca6 <__mdiff+0x8e>

0800acd2 <__d2b>:
 800acd2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800acd6:	460e      	mov	r6, r1
 800acd8:	2101      	movs	r1, #1
 800acda:	ec59 8b10 	vmov	r8, r9, d0
 800acde:	4615      	mov	r5, r2
 800ace0:	f7ff fd6a 	bl	800a7b8 <_Balloc>
 800ace4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ace8:	4607      	mov	r7, r0
 800acea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acee:	bb34      	cbnz	r4, 800ad3e <__d2b+0x6c>
 800acf0:	9301      	str	r3, [sp, #4]
 800acf2:	f1b8 0300 	subs.w	r3, r8, #0
 800acf6:	d027      	beq.n	800ad48 <__d2b+0x76>
 800acf8:	a802      	add	r0, sp, #8
 800acfa:	f840 3d08 	str.w	r3, [r0, #-8]!
 800acfe:	f7ff fe00 	bl	800a902 <__lo0bits>
 800ad02:	9900      	ldr	r1, [sp, #0]
 800ad04:	b1f0      	cbz	r0, 800ad44 <__d2b+0x72>
 800ad06:	9a01      	ldr	r2, [sp, #4]
 800ad08:	f1c0 0320 	rsb	r3, r0, #32
 800ad0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad10:	430b      	orrs	r3, r1
 800ad12:	40c2      	lsrs	r2, r0
 800ad14:	617b      	str	r3, [r7, #20]
 800ad16:	9201      	str	r2, [sp, #4]
 800ad18:	9b01      	ldr	r3, [sp, #4]
 800ad1a:	61bb      	str	r3, [r7, #24]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	bf14      	ite	ne
 800ad20:	2102      	movne	r1, #2
 800ad22:	2101      	moveq	r1, #1
 800ad24:	6139      	str	r1, [r7, #16]
 800ad26:	b1c4      	cbz	r4, 800ad5a <__d2b+0x88>
 800ad28:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ad2c:	4404      	add	r4, r0
 800ad2e:	6034      	str	r4, [r6, #0]
 800ad30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad34:	6028      	str	r0, [r5, #0]
 800ad36:	4638      	mov	r0, r7
 800ad38:	b003      	add	sp, #12
 800ad3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad42:	e7d5      	b.n	800acf0 <__d2b+0x1e>
 800ad44:	6179      	str	r1, [r7, #20]
 800ad46:	e7e7      	b.n	800ad18 <__d2b+0x46>
 800ad48:	a801      	add	r0, sp, #4
 800ad4a:	f7ff fdda 	bl	800a902 <__lo0bits>
 800ad4e:	9b01      	ldr	r3, [sp, #4]
 800ad50:	617b      	str	r3, [r7, #20]
 800ad52:	2101      	movs	r1, #1
 800ad54:	6139      	str	r1, [r7, #16]
 800ad56:	3020      	adds	r0, #32
 800ad58:	e7e5      	b.n	800ad26 <__d2b+0x54>
 800ad5a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ad5e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad62:	6030      	str	r0, [r6, #0]
 800ad64:	6918      	ldr	r0, [r3, #16]
 800ad66:	f7ff fdad 	bl	800a8c4 <__hi0bits>
 800ad6a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ad6e:	e7e1      	b.n	800ad34 <__d2b+0x62>

0800ad70 <_calloc_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	fb02 f401 	mul.w	r4, r2, r1
 800ad76:	4621      	mov	r1, r4
 800ad78:	f7fe f9e4 	bl	8009144 <_malloc_r>
 800ad7c:	4605      	mov	r5, r0
 800ad7e:	b118      	cbz	r0, 800ad88 <_calloc_r+0x18>
 800ad80:	4622      	mov	r2, r4
 800ad82:	2100      	movs	r1, #0
 800ad84:	f7fe f987 	bl	8009096 <memset>
 800ad88:	4628      	mov	r0, r5
 800ad8a:	bd38      	pop	{r3, r4, r5, pc}

0800ad8c <__ssputs_r>:
 800ad8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad90:	688e      	ldr	r6, [r1, #8]
 800ad92:	429e      	cmp	r6, r3
 800ad94:	4682      	mov	sl, r0
 800ad96:	460c      	mov	r4, r1
 800ad98:	4690      	mov	r8, r2
 800ad9a:	4699      	mov	r9, r3
 800ad9c:	d837      	bhi.n	800ae0e <__ssputs_r+0x82>
 800ad9e:	898a      	ldrh	r2, [r1, #12]
 800ada0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ada4:	d031      	beq.n	800ae0a <__ssputs_r+0x7e>
 800ada6:	6825      	ldr	r5, [r4, #0]
 800ada8:	6909      	ldr	r1, [r1, #16]
 800adaa:	1a6f      	subs	r7, r5, r1
 800adac:	6965      	ldr	r5, [r4, #20]
 800adae:	2302      	movs	r3, #2
 800adb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adb4:	fb95 f5f3 	sdiv	r5, r5, r3
 800adb8:	f109 0301 	add.w	r3, r9, #1
 800adbc:	443b      	add	r3, r7
 800adbe:	429d      	cmp	r5, r3
 800adc0:	bf38      	it	cc
 800adc2:	461d      	movcc	r5, r3
 800adc4:	0553      	lsls	r3, r2, #21
 800adc6:	d530      	bpl.n	800ae2a <__ssputs_r+0x9e>
 800adc8:	4629      	mov	r1, r5
 800adca:	f7fe f9bb 	bl	8009144 <_malloc_r>
 800adce:	4606      	mov	r6, r0
 800add0:	b950      	cbnz	r0, 800ade8 <__ssputs_r+0x5c>
 800add2:	230c      	movs	r3, #12
 800add4:	f8ca 3000 	str.w	r3, [sl]
 800add8:	89a3      	ldrh	r3, [r4, #12]
 800adda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adde:	81a3      	strh	r3, [r4, #12]
 800ade0:	f04f 30ff 	mov.w	r0, #4294967295
 800ade4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ade8:	463a      	mov	r2, r7
 800adea:	6921      	ldr	r1, [r4, #16]
 800adec:	f7fe f948 	bl	8009080 <memcpy>
 800adf0:	89a3      	ldrh	r3, [r4, #12]
 800adf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adfa:	81a3      	strh	r3, [r4, #12]
 800adfc:	6126      	str	r6, [r4, #16]
 800adfe:	6165      	str	r5, [r4, #20]
 800ae00:	443e      	add	r6, r7
 800ae02:	1bed      	subs	r5, r5, r7
 800ae04:	6026      	str	r6, [r4, #0]
 800ae06:	60a5      	str	r5, [r4, #8]
 800ae08:	464e      	mov	r6, r9
 800ae0a:	454e      	cmp	r6, r9
 800ae0c:	d900      	bls.n	800ae10 <__ssputs_r+0x84>
 800ae0e:	464e      	mov	r6, r9
 800ae10:	4632      	mov	r2, r6
 800ae12:	4641      	mov	r1, r8
 800ae14:	6820      	ldr	r0, [r4, #0]
 800ae16:	f000 f91d 	bl	800b054 <memmove>
 800ae1a:	68a3      	ldr	r3, [r4, #8]
 800ae1c:	1b9b      	subs	r3, r3, r6
 800ae1e:	60a3      	str	r3, [r4, #8]
 800ae20:	6823      	ldr	r3, [r4, #0]
 800ae22:	441e      	add	r6, r3
 800ae24:	6026      	str	r6, [r4, #0]
 800ae26:	2000      	movs	r0, #0
 800ae28:	e7dc      	b.n	800ade4 <__ssputs_r+0x58>
 800ae2a:	462a      	mov	r2, r5
 800ae2c:	f000 f92b 	bl	800b086 <_realloc_r>
 800ae30:	4606      	mov	r6, r0
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d1e2      	bne.n	800adfc <__ssputs_r+0x70>
 800ae36:	6921      	ldr	r1, [r4, #16]
 800ae38:	4650      	mov	r0, sl
 800ae3a:	f7fe f935 	bl	80090a8 <_free_r>
 800ae3e:	e7c8      	b.n	800add2 <__ssputs_r+0x46>

0800ae40 <_svfiprintf_r>:
 800ae40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae44:	461d      	mov	r5, r3
 800ae46:	898b      	ldrh	r3, [r1, #12]
 800ae48:	061f      	lsls	r7, r3, #24
 800ae4a:	b09d      	sub	sp, #116	; 0x74
 800ae4c:	4680      	mov	r8, r0
 800ae4e:	460c      	mov	r4, r1
 800ae50:	4616      	mov	r6, r2
 800ae52:	d50f      	bpl.n	800ae74 <_svfiprintf_r+0x34>
 800ae54:	690b      	ldr	r3, [r1, #16]
 800ae56:	b96b      	cbnz	r3, 800ae74 <_svfiprintf_r+0x34>
 800ae58:	2140      	movs	r1, #64	; 0x40
 800ae5a:	f7fe f973 	bl	8009144 <_malloc_r>
 800ae5e:	6020      	str	r0, [r4, #0]
 800ae60:	6120      	str	r0, [r4, #16]
 800ae62:	b928      	cbnz	r0, 800ae70 <_svfiprintf_r+0x30>
 800ae64:	230c      	movs	r3, #12
 800ae66:	f8c8 3000 	str.w	r3, [r8]
 800ae6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae6e:	e0c8      	b.n	800b002 <_svfiprintf_r+0x1c2>
 800ae70:	2340      	movs	r3, #64	; 0x40
 800ae72:	6163      	str	r3, [r4, #20]
 800ae74:	2300      	movs	r3, #0
 800ae76:	9309      	str	r3, [sp, #36]	; 0x24
 800ae78:	2320      	movs	r3, #32
 800ae7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae7e:	2330      	movs	r3, #48	; 0x30
 800ae80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae84:	9503      	str	r5, [sp, #12]
 800ae86:	f04f 0b01 	mov.w	fp, #1
 800ae8a:	4637      	mov	r7, r6
 800ae8c:	463d      	mov	r5, r7
 800ae8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ae92:	b10b      	cbz	r3, 800ae98 <_svfiprintf_r+0x58>
 800ae94:	2b25      	cmp	r3, #37	; 0x25
 800ae96:	d13e      	bne.n	800af16 <_svfiprintf_r+0xd6>
 800ae98:	ebb7 0a06 	subs.w	sl, r7, r6
 800ae9c:	d00b      	beq.n	800aeb6 <_svfiprintf_r+0x76>
 800ae9e:	4653      	mov	r3, sl
 800aea0:	4632      	mov	r2, r6
 800aea2:	4621      	mov	r1, r4
 800aea4:	4640      	mov	r0, r8
 800aea6:	f7ff ff71 	bl	800ad8c <__ssputs_r>
 800aeaa:	3001      	adds	r0, #1
 800aeac:	f000 80a4 	beq.w	800aff8 <_svfiprintf_r+0x1b8>
 800aeb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb2:	4453      	add	r3, sl
 800aeb4:	9309      	str	r3, [sp, #36]	; 0x24
 800aeb6:	783b      	ldrb	r3, [r7, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f000 809d 	beq.w	800aff8 <_svfiprintf_r+0x1b8>
 800aebe:	2300      	movs	r3, #0
 800aec0:	f04f 32ff 	mov.w	r2, #4294967295
 800aec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aec8:	9304      	str	r3, [sp, #16]
 800aeca:	9307      	str	r3, [sp, #28]
 800aecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aed0:	931a      	str	r3, [sp, #104]	; 0x68
 800aed2:	462f      	mov	r7, r5
 800aed4:	2205      	movs	r2, #5
 800aed6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800aeda:	4850      	ldr	r0, [pc, #320]	; (800b01c <_svfiprintf_r+0x1dc>)
 800aedc:	f7f5 f980 	bl	80001e0 <memchr>
 800aee0:	9b04      	ldr	r3, [sp, #16]
 800aee2:	b9d0      	cbnz	r0, 800af1a <_svfiprintf_r+0xda>
 800aee4:	06d9      	lsls	r1, r3, #27
 800aee6:	bf44      	itt	mi
 800aee8:	2220      	movmi	r2, #32
 800aeea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aeee:	071a      	lsls	r2, r3, #28
 800aef0:	bf44      	itt	mi
 800aef2:	222b      	movmi	r2, #43	; 0x2b
 800aef4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aef8:	782a      	ldrb	r2, [r5, #0]
 800aefa:	2a2a      	cmp	r2, #42	; 0x2a
 800aefc:	d015      	beq.n	800af2a <_svfiprintf_r+0xea>
 800aefe:	9a07      	ldr	r2, [sp, #28]
 800af00:	462f      	mov	r7, r5
 800af02:	2000      	movs	r0, #0
 800af04:	250a      	movs	r5, #10
 800af06:	4639      	mov	r1, r7
 800af08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af0c:	3b30      	subs	r3, #48	; 0x30
 800af0e:	2b09      	cmp	r3, #9
 800af10:	d94d      	bls.n	800afae <_svfiprintf_r+0x16e>
 800af12:	b1b8      	cbz	r0, 800af44 <_svfiprintf_r+0x104>
 800af14:	e00f      	b.n	800af36 <_svfiprintf_r+0xf6>
 800af16:	462f      	mov	r7, r5
 800af18:	e7b8      	b.n	800ae8c <_svfiprintf_r+0x4c>
 800af1a:	4a40      	ldr	r2, [pc, #256]	; (800b01c <_svfiprintf_r+0x1dc>)
 800af1c:	1a80      	subs	r0, r0, r2
 800af1e:	fa0b f000 	lsl.w	r0, fp, r0
 800af22:	4318      	orrs	r0, r3
 800af24:	9004      	str	r0, [sp, #16]
 800af26:	463d      	mov	r5, r7
 800af28:	e7d3      	b.n	800aed2 <_svfiprintf_r+0x92>
 800af2a:	9a03      	ldr	r2, [sp, #12]
 800af2c:	1d11      	adds	r1, r2, #4
 800af2e:	6812      	ldr	r2, [r2, #0]
 800af30:	9103      	str	r1, [sp, #12]
 800af32:	2a00      	cmp	r2, #0
 800af34:	db01      	blt.n	800af3a <_svfiprintf_r+0xfa>
 800af36:	9207      	str	r2, [sp, #28]
 800af38:	e004      	b.n	800af44 <_svfiprintf_r+0x104>
 800af3a:	4252      	negs	r2, r2
 800af3c:	f043 0302 	orr.w	r3, r3, #2
 800af40:	9207      	str	r2, [sp, #28]
 800af42:	9304      	str	r3, [sp, #16]
 800af44:	783b      	ldrb	r3, [r7, #0]
 800af46:	2b2e      	cmp	r3, #46	; 0x2e
 800af48:	d10c      	bne.n	800af64 <_svfiprintf_r+0x124>
 800af4a:	787b      	ldrb	r3, [r7, #1]
 800af4c:	2b2a      	cmp	r3, #42	; 0x2a
 800af4e:	d133      	bne.n	800afb8 <_svfiprintf_r+0x178>
 800af50:	9b03      	ldr	r3, [sp, #12]
 800af52:	1d1a      	adds	r2, r3, #4
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	9203      	str	r2, [sp, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	bfb8      	it	lt
 800af5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800af60:	3702      	adds	r7, #2
 800af62:	9305      	str	r3, [sp, #20]
 800af64:	4d2e      	ldr	r5, [pc, #184]	; (800b020 <_svfiprintf_r+0x1e0>)
 800af66:	7839      	ldrb	r1, [r7, #0]
 800af68:	2203      	movs	r2, #3
 800af6a:	4628      	mov	r0, r5
 800af6c:	f7f5 f938 	bl	80001e0 <memchr>
 800af70:	b138      	cbz	r0, 800af82 <_svfiprintf_r+0x142>
 800af72:	2340      	movs	r3, #64	; 0x40
 800af74:	1b40      	subs	r0, r0, r5
 800af76:	fa03 f000 	lsl.w	r0, r3, r0
 800af7a:	9b04      	ldr	r3, [sp, #16]
 800af7c:	4303      	orrs	r3, r0
 800af7e:	3701      	adds	r7, #1
 800af80:	9304      	str	r3, [sp, #16]
 800af82:	7839      	ldrb	r1, [r7, #0]
 800af84:	4827      	ldr	r0, [pc, #156]	; (800b024 <_svfiprintf_r+0x1e4>)
 800af86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af8a:	2206      	movs	r2, #6
 800af8c:	1c7e      	adds	r6, r7, #1
 800af8e:	f7f5 f927 	bl	80001e0 <memchr>
 800af92:	2800      	cmp	r0, #0
 800af94:	d038      	beq.n	800b008 <_svfiprintf_r+0x1c8>
 800af96:	4b24      	ldr	r3, [pc, #144]	; (800b028 <_svfiprintf_r+0x1e8>)
 800af98:	bb13      	cbnz	r3, 800afe0 <_svfiprintf_r+0x1a0>
 800af9a:	9b03      	ldr	r3, [sp, #12]
 800af9c:	3307      	adds	r3, #7
 800af9e:	f023 0307 	bic.w	r3, r3, #7
 800afa2:	3308      	adds	r3, #8
 800afa4:	9303      	str	r3, [sp, #12]
 800afa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa8:	444b      	add	r3, r9
 800afaa:	9309      	str	r3, [sp, #36]	; 0x24
 800afac:	e76d      	b.n	800ae8a <_svfiprintf_r+0x4a>
 800afae:	fb05 3202 	mla	r2, r5, r2, r3
 800afb2:	2001      	movs	r0, #1
 800afb4:	460f      	mov	r7, r1
 800afb6:	e7a6      	b.n	800af06 <_svfiprintf_r+0xc6>
 800afb8:	2300      	movs	r3, #0
 800afba:	3701      	adds	r7, #1
 800afbc:	9305      	str	r3, [sp, #20]
 800afbe:	4619      	mov	r1, r3
 800afc0:	250a      	movs	r5, #10
 800afc2:	4638      	mov	r0, r7
 800afc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afc8:	3a30      	subs	r2, #48	; 0x30
 800afca:	2a09      	cmp	r2, #9
 800afcc:	d903      	bls.n	800afd6 <_svfiprintf_r+0x196>
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d0c8      	beq.n	800af64 <_svfiprintf_r+0x124>
 800afd2:	9105      	str	r1, [sp, #20]
 800afd4:	e7c6      	b.n	800af64 <_svfiprintf_r+0x124>
 800afd6:	fb05 2101 	mla	r1, r5, r1, r2
 800afda:	2301      	movs	r3, #1
 800afdc:	4607      	mov	r7, r0
 800afde:	e7f0      	b.n	800afc2 <_svfiprintf_r+0x182>
 800afe0:	ab03      	add	r3, sp, #12
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	4622      	mov	r2, r4
 800afe6:	4b11      	ldr	r3, [pc, #68]	; (800b02c <_svfiprintf_r+0x1ec>)
 800afe8:	a904      	add	r1, sp, #16
 800afea:	4640      	mov	r0, r8
 800afec:	f7fe f998 	bl	8009320 <_printf_float>
 800aff0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aff4:	4681      	mov	r9, r0
 800aff6:	d1d6      	bne.n	800afa6 <_svfiprintf_r+0x166>
 800aff8:	89a3      	ldrh	r3, [r4, #12]
 800affa:	065b      	lsls	r3, r3, #25
 800affc:	f53f af35 	bmi.w	800ae6a <_svfiprintf_r+0x2a>
 800b000:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b002:	b01d      	add	sp, #116	; 0x74
 800b004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b008:	ab03      	add	r3, sp, #12
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	4622      	mov	r2, r4
 800b00e:	4b07      	ldr	r3, [pc, #28]	; (800b02c <_svfiprintf_r+0x1ec>)
 800b010:	a904      	add	r1, sp, #16
 800b012:	4640      	mov	r0, r8
 800b014:	f7fe fc3a 	bl	800988c <_printf_i>
 800b018:	e7ea      	b.n	800aff0 <_svfiprintf_r+0x1b0>
 800b01a:	bf00      	nop
 800b01c:	0800b2dc 	.word	0x0800b2dc
 800b020:	0800b2e2 	.word	0x0800b2e2
 800b024:	0800b2e6 	.word	0x0800b2e6
 800b028:	08009321 	.word	0x08009321
 800b02c:	0800ad8d 	.word	0x0800ad8d

0800b030 <__ascii_mbtowc>:
 800b030:	b082      	sub	sp, #8
 800b032:	b901      	cbnz	r1, 800b036 <__ascii_mbtowc+0x6>
 800b034:	a901      	add	r1, sp, #4
 800b036:	b142      	cbz	r2, 800b04a <__ascii_mbtowc+0x1a>
 800b038:	b14b      	cbz	r3, 800b04e <__ascii_mbtowc+0x1e>
 800b03a:	7813      	ldrb	r3, [r2, #0]
 800b03c:	600b      	str	r3, [r1, #0]
 800b03e:	7812      	ldrb	r2, [r2, #0]
 800b040:	1c10      	adds	r0, r2, #0
 800b042:	bf18      	it	ne
 800b044:	2001      	movne	r0, #1
 800b046:	b002      	add	sp, #8
 800b048:	4770      	bx	lr
 800b04a:	4610      	mov	r0, r2
 800b04c:	e7fb      	b.n	800b046 <__ascii_mbtowc+0x16>
 800b04e:	f06f 0001 	mvn.w	r0, #1
 800b052:	e7f8      	b.n	800b046 <__ascii_mbtowc+0x16>

0800b054 <memmove>:
 800b054:	4288      	cmp	r0, r1
 800b056:	b510      	push	{r4, lr}
 800b058:	eb01 0302 	add.w	r3, r1, r2
 800b05c:	d807      	bhi.n	800b06e <memmove+0x1a>
 800b05e:	1e42      	subs	r2, r0, #1
 800b060:	4299      	cmp	r1, r3
 800b062:	d00a      	beq.n	800b07a <memmove+0x26>
 800b064:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b068:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b06c:	e7f8      	b.n	800b060 <memmove+0xc>
 800b06e:	4283      	cmp	r3, r0
 800b070:	d9f5      	bls.n	800b05e <memmove+0xa>
 800b072:	1881      	adds	r1, r0, r2
 800b074:	1ad2      	subs	r2, r2, r3
 800b076:	42d3      	cmn	r3, r2
 800b078:	d100      	bne.n	800b07c <memmove+0x28>
 800b07a:	bd10      	pop	{r4, pc}
 800b07c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b080:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b084:	e7f7      	b.n	800b076 <memmove+0x22>

0800b086 <_realloc_r>:
 800b086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b088:	4607      	mov	r7, r0
 800b08a:	4614      	mov	r4, r2
 800b08c:	460e      	mov	r6, r1
 800b08e:	b921      	cbnz	r1, 800b09a <_realloc_r+0x14>
 800b090:	4611      	mov	r1, r2
 800b092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b096:	f7fe b855 	b.w	8009144 <_malloc_r>
 800b09a:	b922      	cbnz	r2, 800b0a6 <_realloc_r+0x20>
 800b09c:	f7fe f804 	bl	80090a8 <_free_r>
 800b0a0:	4625      	mov	r5, r4
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a6:	f000 f821 	bl	800b0ec <_malloc_usable_size_r>
 800b0aa:	42a0      	cmp	r0, r4
 800b0ac:	d20f      	bcs.n	800b0ce <_realloc_r+0x48>
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	4638      	mov	r0, r7
 800b0b2:	f7fe f847 	bl	8009144 <_malloc_r>
 800b0b6:	4605      	mov	r5, r0
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d0f2      	beq.n	800b0a2 <_realloc_r+0x1c>
 800b0bc:	4631      	mov	r1, r6
 800b0be:	4622      	mov	r2, r4
 800b0c0:	f7fd ffde 	bl	8009080 <memcpy>
 800b0c4:	4631      	mov	r1, r6
 800b0c6:	4638      	mov	r0, r7
 800b0c8:	f7fd ffee 	bl	80090a8 <_free_r>
 800b0cc:	e7e9      	b.n	800b0a2 <_realloc_r+0x1c>
 800b0ce:	4635      	mov	r5, r6
 800b0d0:	e7e7      	b.n	800b0a2 <_realloc_r+0x1c>

0800b0d2 <__ascii_wctomb>:
 800b0d2:	b149      	cbz	r1, 800b0e8 <__ascii_wctomb+0x16>
 800b0d4:	2aff      	cmp	r2, #255	; 0xff
 800b0d6:	bf85      	ittet	hi
 800b0d8:	238a      	movhi	r3, #138	; 0x8a
 800b0da:	6003      	strhi	r3, [r0, #0]
 800b0dc:	700a      	strbls	r2, [r1, #0]
 800b0de:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0e2:	bf98      	it	ls
 800b0e4:	2001      	movls	r0, #1
 800b0e6:	4770      	bx	lr
 800b0e8:	4608      	mov	r0, r1
 800b0ea:	4770      	bx	lr

0800b0ec <_malloc_usable_size_r>:
 800b0ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0f0:	1f18      	subs	r0, r3, #4
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	bfbc      	itt	lt
 800b0f6:	580b      	ldrlt	r3, [r1, r0]
 800b0f8:	18c0      	addlt	r0, r0, r3
 800b0fa:	4770      	bx	lr

0800b0fc <_init>:
 800b0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fe:	bf00      	nop
 800b100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b102:	bc08      	pop	{r3}
 800b104:	469e      	mov	lr, r3
 800b106:	4770      	bx	lr

0800b108 <_fini>:
 800b108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10a:	bf00      	nop
 800b10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b10e:	bc08      	pop	{r3}
 800b110:	469e      	mov	lr, r3
 800b112:	4770      	bx	lr
