
STM32F4_Eval_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000945c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080095ec  080095ec  000195ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009690  08009690  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009690  08009690  00019690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009698  08009698  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800969c  0800969c  0001969c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080096a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ac0  200001e4  08009884  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ca4  08009884  00021ca4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8c9  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b5d  00000000  00000000  0003dadd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016a8  00000000  00000000  00041640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001518  00000000  00000000  00042ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024041  00000000  00000000  00044200  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014433  00000000  00000000  00068241  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca332  00000000  00000000  0007c674  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001469a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000642c  00000000  00000000  00146a24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095d4 	.word	0x080095d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080095d4 	.word	0x080095d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b972 	b.w	8000da8 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4688      	mov	r8, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14b      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4615      	mov	r5, r2
 8000aee:	d967      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0720 	rsb	r7, r2, #32
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	fa20 f707 	lsr.w	r7, r0, r7
 8000b02:	4095      	lsls	r5, r2
 8000b04:	ea47 0803 	orr.w	r8, r7, r3
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b14:	fa1f fc85 	uxth.w	ip, r5
 8000b18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b20:	fb07 f10c 	mul.w	r1, r7, ip
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18eb      	adds	r3, r5, r3
 8000b2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b2e:	f080 811b 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8118 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b38:	3f02      	subs	r7, #2
 8000b3a:	442b      	add	r3, r5
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b50:	45a4      	cmp	ip, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	192c      	adds	r4, r5, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8107 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b5e:	45a4      	cmp	ip, r4
 8000b60:	f240 8104 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b64:	3802      	subs	r0, #2
 8000b66:	442c      	add	r4, r5
 8000b68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b6c:	eba4 040c 	sub.w	r4, r4, ip
 8000b70:	2700      	movs	r7, #0
 8000b72:	b11e      	cbz	r6, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xbe>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80eb 	beq.w	8000d62 <__udivmoddi4+0x286>
 8000b8c:	2700      	movs	r7, #0
 8000b8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b92:	4638      	mov	r0, r7
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f783 	clz	r7, r3
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d147      	bne.n	8000c32 <__udivmoddi4+0x156>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd0>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80fa 	bhi.w	8000da0 <__udivmoddi4+0x2c4>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000bba:	e9c6 4800 	strd	r4, r8, [r6]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xe8>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 808f 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bce:	1b49      	subs	r1, r1, r5
 8000bd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd4:	fa1f f885 	uxth.w	r8, r5
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x14c>
 8000c18:	192c      	adds	r4, r5, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x14a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80b6 	bhi.w	8000d92 <__udivmoddi4+0x2b6>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e79f      	b.n	8000b72 <__udivmoddi4+0x96>
 8000c32:	f1c7 0c20 	rsb	ip, r7, #32
 8000c36:	40bb      	lsls	r3, r7
 8000c38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c40:	fa01 f407 	lsl.w	r4, r1, r7
 8000c44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c50:	4325      	orrs	r5, r4
 8000c52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c56:	0c2c      	lsrs	r4, r5, #16
 8000c58:	fb08 3319 	mls	r3, r8, r9, r3
 8000c5c:	fa1f fa8e 	uxth.w	sl, lr
 8000c60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c64:	fb09 f40a 	mul.w	r4, r9, sl
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1e 0303 	adds.w	r3, lr, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	f080 8087 	bcs.w	8000d8e <__udivmoddi4+0x2b2>
 8000c80:	429c      	cmp	r4, r3
 8000c82:	f240 8084 	bls.w	8000d8e <__udivmoddi4+0x2b2>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4473      	add	r3, lr
 8000c8c:	1b1b      	subs	r3, r3, r4
 8000c8e:	b2ad      	uxth	r5, r5
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ca0:	45a2      	cmp	sl, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	d26b      	bcs.n	8000d86 <__udivmoddi4+0x2aa>
 8000cae:	45a2      	cmp	sl, r4
 8000cb0:	d969      	bls.n	8000d86 <__udivmoddi4+0x2aa>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4474      	add	r4, lr
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	eba4 040a 	sub.w	r4, r4, sl
 8000cc2:	454c      	cmp	r4, r9
 8000cc4:	46c2      	mov	sl, r8
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	d354      	bcc.n	8000d74 <__udivmoddi4+0x298>
 8000cca:	d051      	beq.n	8000d70 <__udivmoddi4+0x294>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d069      	beq.n	8000da4 <__udivmoddi4+0x2c8>
 8000cd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cdc:	40fd      	lsrs	r5, r7
 8000cde:	40fc      	lsrs	r4, r7
 8000ce0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ce4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e747      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000cec:	f1c2 0320 	rsb	r3, r2, #32
 8000cf0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cf4:	4095      	lsls	r5, r2
 8000cf6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	4338      	orrs	r0, r7
 8000d04:	0c01      	lsrs	r1, r0, #16
 8000d06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d0a:	fa1f f885 	uxth.w	r8, r5
 8000d0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d16:	fb07 f308 	mul.w	r3, r7, r8
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x256>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d28:	d22f      	bcs.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d92d      	bls.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2e:	3f02      	subs	r7, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	b281      	uxth	r1, r0
 8000d36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d42:	fb00 f308 	mul.w	r3, r0, r8
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x27e>
 8000d4a:	1869      	adds	r1, r5, r1
 8000d4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d50:	d217      	bcs.n	8000d82 <__udivmoddi4+0x2a6>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d915      	bls.n	8000d82 <__udivmoddi4+0x2a6>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4429      	add	r1, r5
 8000d5a:	1ac9      	subs	r1, r1, r3
 8000d5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d60:	e73b      	b.n	8000bda <__udivmoddi4+0xfe>
 8000d62:	4637      	mov	r7, r6
 8000d64:	4630      	mov	r0, r6
 8000d66:	e709      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e6e7      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	e6fb      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d70:	4541      	cmp	r1, r8
 8000d72:	d2ab      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d78:	eb69 020e 	sbc.w	r2, r9, lr
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	4613      	mov	r3, r2
 8000d80:	e7a4      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d82:	4660      	mov	r0, ip
 8000d84:	e7e9      	b.n	8000d5a <__udivmoddi4+0x27e>
 8000d86:	4618      	mov	r0, r3
 8000d88:	e795      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8a:	4667      	mov	r7, ip
 8000d8c:	e7d1      	b.n	8000d32 <__udivmoddi4+0x256>
 8000d8e:	4681      	mov	r9, r0
 8000d90:	e77c      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	442c      	add	r4, r5
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0x14c>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	442b      	add	r3, r5
 8000d9e:	e72f      	b.n	8000c00 <__udivmoddi4+0x124>
 8000da0:	4638      	mov	r0, r7
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xda>
 8000da4:	4637      	mov	r7, r6
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0xa0>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <System_Control>:
 * Runs the system infinite loop
 * Args: N/A
 * Returns: N/A
 */
void System_Control()
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

	while(INFINITY)
	{
		Update_Timers();
 8000db0:	f000 f808 	bl	8000dc4 <Update_Timers>
		ADC_Service();
 8000db4:	f000 f824 	bl	8000e00 <ADC_Service>
		UART_Service();
 8000db8:	f000 f85e 	bl	8000e78 <UART_Service>
		Blink_LED(BLINK_PERIOD_250MS);
 8000dbc:	20fa      	movs	r0, #250	; 0xfa
 8000dbe:	f000 f87f 	bl	8000ec0 <Blink_LED>
		Update_Timers();
 8000dc2:	e7f5      	b.n	8000db0 <System_Control+0x4>

08000dc4 <Update_Timers>:
 * Updates global 1ms counters attached to hwtim11
 * Args: N/A
 * Returns: N/A
 */
void Update_Timers(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
	if(tim11_OvrFlo_Flag)
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <Update_Timers+0x30>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00c      	beq.n	8000dea <Update_Timers+0x26>
	{
		tim11_OvrFlo_Flag = FALSE;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <Update_Timers+0x30>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]

		blinkCounter_1ms++;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <Update_Timers+0x34>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <Update_Timers+0x34>)
 8000dde:	6013      	str	r3, [r2, #0]

		UART_Counter_1ms++;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <Update_Timers+0x38>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <Update_Timers+0x38>)
 8000de8:	6013      	str	r3, [r2, #0]
	}
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	20000200 	.word	0x20000200
 8000df8:	20000204 	.word	0x20000204
 8000dfc:	20000208 	.word	0x20000208

08000e00 <ADC_Service>:
 * Polls ADC1 for System Temp. Calculates real deg C.
 * Args: N/A
 * Returns: N/A
 */
void ADC_Service()
{
 8000e00:	b598      	push	{r3, r4, r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000e04:	4818      	ldr	r0, [pc, #96]	; (8000e68 <ADC_Service+0x68>)
 8000e06:	f000 fd4b 	bl	80018a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e0a:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0e:	4816      	ldr	r0, [pc, #88]	; (8000e68 <ADC_Service+0x68>)
 8000e10:	f000 fe0c 	bl	8001a2c <HAL_ADC_PollForConversion>
	temp_ADC = HAL_ADC_GetValue(&hadc1);
 8000e14:	4814      	ldr	r0, [pc, #80]	; (8000e68 <ADC_Service+0x68>)
 8000e16:	f000 fe8d 	bl	8001b34 <HAL_ADC_GetValue>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <ADC_Service+0x6c>)
 8000e20:	801a      	strh	r2, [r3, #0]

	SysTemp = TEMP_ADC_GAIN * temp_ADC + TEMP_ADC_OFFSET;
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <ADC_Service+0x6c>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fb74 	bl	8000514 <__aeabi_i2d>
 8000e2c:	a30c      	add	r3, pc, #48	; (adr r3, 8000e60 <ADC_Service+0x60>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	f7ff fbd9 	bl	80005e8 <__aeabi_dmul>
 8000e36:	4603      	mov	r3, r0
 8000e38:	460c      	mov	r4, r1
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <ADC_Service+0x70>)
 8000e44:	f7ff fa1a 	bl	800027c <__adddf3>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	460c      	mov	r4, r1
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	4621      	mov	r1, r4
 8000e50:	f7ff fddc 	bl	8000a0c <__aeabi_d2f>
 8000e54:	4602      	mov	r2, r0
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <ADC_Service+0x74>)
 8000e58:	601a      	str	r2, [r3, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	bd98      	pop	{r3, r4, r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	930be0df 	.word	0x930be0df
 8000e64:	3fa182a9 	.word	0x3fa182a9
 8000e68:	2000033c 	.word	0x2000033c
 8000e6c:	2000028e 	.word	0x2000028e
 8000e70:	402c0000 	.word	0x402c0000
 8000e74:	20000290 	.word	0x20000290

08000e78 <UART_Service>:
 * Transmits 128 bit UART message at defined period
 * Args: N/A
 * Returns: N/A
 */
void UART_Service()
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	if(UART_PERIOD_1S <= UART_Counter_1ms)
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <UART_Service+0x34>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e84:	d30f      	bcc.n	8000ea6 <UART_Service+0x2e>
	{
		UART_Counter_1ms = 0U;
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <UART_Service+0x34>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]

		sprintf(msg, "Temp raw: %hu\n\r", temp_ADC);
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <UART_Service+0x38>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <UART_Service+0x3c>)
 8000e94:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <UART_Service+0x40>)
 8000e96:	f008 f84f 	bl	8008f38 <siprintf>

		HAL_UART_Transmit(&huart3, (uint8_t*)msg, sizeof(msg), 100);
 8000e9a:	2364      	movs	r3, #100	; 0x64
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	4906      	ldr	r1, [pc, #24]	; (8000eb8 <UART_Service+0x40>)
 8000ea0:	4806      	ldr	r0, [pc, #24]	; (8000ebc <UART_Service+0x44>)
 8000ea2:	f003 fcd4 	bl	800484e <HAL_UART_Transmit>
	}
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000208 	.word	0x20000208
 8000eb0:	2000028e 	.word	0x2000028e
 8000eb4:	080095ec 	.word	0x080095ec
 8000eb8:	2000020c 	.word	0x2000020c
 8000ebc:	200002a8 	.word	0x200002a8

08000ec0 <Blink_LED>:
 * Blinks R2D2's led at given period
 * Args: period (unsigned 16 bit)
 * Returns: N/A
 */
void Blink_LED(uint16_t period)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
	static _Bool led_level = LEVEL_LOW;

	if(period <= blinkCounter_1ms)
 8000eca:	88fa      	ldrh	r2, [r7, #6]
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <Blink_LED+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d822      	bhi.n	8000f1a <Blink_LED+0x5a>
	{
		blinkCounter_1ms = 0U;
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <Blink_LED+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]

		led_level = !led_level;
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <Blink_LED+0x68>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	bf14      	ite	ne
 8000ee2:	2301      	movne	r3, #1
 8000ee4:	2300      	moveq	r3, #0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	f083 0301 	eor.w	r3, r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <Blink_LED+0x68>)
 8000ef6:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, led_level);
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <Blink_LED+0x68>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	2104      	movs	r1, #4
 8000f00:	480a      	ldr	r0, [pc, #40]	; (8000f2c <Blink_LED+0x6c>)
 8000f02:	f001 fb11 	bl	8002528 <HAL_GPIO_WritePin>

		if(LEVEL_HIGH == led_level)
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <Blink_LED+0x68>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d005      	beq.n	8000f1a <Blink_LED+0x5a>
		{
			blinkCnt++;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <Blink_LED+0x70>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	3301      	adds	r3, #1
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <Blink_LED+0x70>)
 8000f18:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000204 	.word	0x20000204
 8000f28:	20000294 	.word	0x20000294
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	2000028c 	.word	0x2000028c

08000f34 <HAL_TIM_PeriodElapsedCallback>:
 * General Timer Overflow ISR
 * Args: htim (TIM_HandleTypeDef)
 * Returns: N/A
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	tim11_OvrFlo_Flag = TRUE;
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000200 	.word	0x20000200

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f58:	f000 fbca 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5c:	f000 f816 	bl	8000f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f60:	f000 f94e 	bl	8001200 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f64:	f000 f8d0 	bl	8001108 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000f68:	f000 f920 	bl	80011ac <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000f6c:	f007 fa10 	bl	8008390 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000f70:	f000 f878 	bl	8001064 <MX_ADC1_Init>
  MX_TIM11_Init();
 8000f74:	f000 f8f6 	bl	8001164 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <main+0x34>)
 8000f7a:	f003 fa12 	bl	80043a2 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  System_Control();
 8000f7e:	f7ff ff15 	bl	8000dac <System_Control>
 8000f82:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000384 	.word	0x20000384

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b094      	sub	sp, #80	; 0x50
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0320 	add.w	r3, r7, #32
 8000f96:	2230      	movs	r2, #48	; 0x30
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f007 ff0c 	bl	8008db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	4b29      	ldr	r3, [pc, #164]	; (800105c <SystemClock_Config+0xd0>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	4a28      	ldr	r2, [pc, #160]	; (800105c <SystemClock_Config+0xd0>)
 8000fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <SystemClock_Config+0xd0>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <SystemClock_Config+0xd4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a22      	ldr	r2, [pc, #136]	; (8001060 <SystemClock_Config+0xd4>)
 8000fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <SystemClock_Config+0xd4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff6:	2310      	movs	r3, #16
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ffe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001002:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001004:	230f      	movs	r3, #15
 8001006:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001008:	2390      	movs	r3, #144	; 0x90
 800100a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100c:	2302      	movs	r3, #2
 800100e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001010:	2305      	movs	r3, #5
 8001012:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	4618      	mov	r0, r3
 800101a:	f002 fd5b 	bl	8003ad4 <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001024:	f000 f96e 	bl	8001304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f002 ffb6 	bl	8003fb4 <HAL_RCC_ClockConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800104e:	f000 f959 	bl	8001304 <Error_Handler>
  }
}
 8001052:	bf00      	nop
 8001054:	3750      	adds	r7, #80	; 0x50
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000

08001064 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106a:	463b      	mov	r3, r7
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <MX_ADC1_Init+0x98>)
 8001078:	4a21      	ldr	r2, [pc, #132]	; (8001100 <MX_ADC1_Init+0x9c>)
 800107a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <MX_ADC1_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <MX_ADC1_Init+0x98>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <MX_ADC1_Init+0x98>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_ADC1_Init+0x98>)
 8001090:	2200      	movs	r2, #0
 8001092:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_ADC1_Init+0x98>)
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_ADC1_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_ADC1_Init+0x98>)
 80010a4:	4a17      	ldr	r2, [pc, #92]	; (8001104 <MX_ADC1_Init+0xa0>)
 80010a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_ADC1_Init+0x98>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_ADC1_Init+0x98>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_ADC1_Init+0x98>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_ADC1_Init+0x98>)
 80010be:	2201      	movs	r2, #1
 80010c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c2:	480e      	ldr	r0, [pc, #56]	; (80010fc <MX_ADC1_Init+0x98>)
 80010c4:	f000 fba8 	bl	8001818 <HAL_ADC_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010ce:	f000 f919 	bl	8001304 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010de:	463b      	mov	r3, r7
 80010e0:	4619      	mov	r1, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <MX_ADC1_Init+0x98>)
 80010e4:	f000 fd34 	bl	8001b50 <HAL_ADC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010ee:	f000 f909 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000033c 	.word	0x2000033c
 8001100:	40012000 	.word	0x40012000
 8001104:	0f000001 	.word	0x0f000001

08001108 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <MX_I2C1_Init+0x50>)
 800110e:	4a13      	ldr	r2, [pc, #76]	; (800115c <MX_I2C1_Init+0x54>)
 8001110:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_I2C1_Init+0x50>)
 8001114:	4a12      	ldr	r2, [pc, #72]	; (8001160 <MX_I2C1_Init+0x58>)
 8001116:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_I2C1_Init+0x50>)
 8001126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800112a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <MX_I2C1_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_I2C1_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <MX_I2C1_Init+0x50>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_I2C1_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <MX_I2C1_Init+0x50>)
 8001146:	f001 fa09 	bl	800255c <HAL_I2C_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001150:	f000 f8d8 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200002e8 	.word	0x200002e8
 800115c:	40005400 	.word	0x40005400
 8001160:	000186a0 	.word	0x000186a0

08001164 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_TIM11_Init+0x40>)
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <MX_TIM11_Init+0x44>)
 800116c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <MX_TIM11_Init+0x40>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_TIM11_Init+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 15850;
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <MX_TIM11_Init+0x40>)
 800117c:	f643 52ea 	movw	r2, #15850	; 0x3dea
 8001180:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <MX_TIM11_Init+0x40>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_TIM11_Init+0x40>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_TIM11_Init+0x40>)
 8001190:	f003 f8dc 	bl	800434c <HAL_TIM_Base_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800119a:	f000 f8b3 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000384 	.word	0x20000384
 80011a8:	40014800 	.word	0x40014800

080011ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <MX_USART3_UART_Init+0x50>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011e4:	f003 fae6 	bl	80047b4 <HAL_UART_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011ee:	f000 f889 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200002a8 	.word	0x200002a8
 80011fc:	40004800 	.word	0x40004800

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <MX_GPIO_Init+0xf4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a35      	ldr	r2, [pc, #212]	; (80012f4 <MX_GPIO_Init+0xf4>)
 8001220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <MX_GPIO_Init+0xf4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <MX_GPIO_Init+0xf4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a2e      	ldr	r2, [pc, #184]	; (80012f4 <MX_GPIO_Init+0xf4>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <MX_GPIO_Init+0xf4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <MX_GPIO_Init+0xf4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <MX_GPIO_Init+0xf4>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <MX_GPIO_Init+0xf4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_GPIO_Init+0xf4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a20      	ldr	r2, [pc, #128]	; (80012f4 <MX_GPIO_Init+0xf4>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_GPIO_Init+0xf4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2104      	movs	r1, #4
 800128a:	481b      	ldr	r0, [pc, #108]	; (80012f8 <MX_GPIO_Init+0xf8>)
 800128c:	f001 f94c 	bl	8002528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	4819      	ldr	r0, [pc, #100]	; (80012fc <MX_GPIO_Init+0xfc>)
 8001296:	f001 f947 	bl	8002528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Status_Pin */
  GPIO_InitStruct.Pin = LED_Status_Pin;
 800129a:	2304      	movs	r3, #4
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Status_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4811      	ldr	r0, [pc, #68]	; (80012f8 <MX_GPIO_Init+0xf8>)
 80012b2:	f000 ff9f 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|IMU_INT1_Pin;
 80012b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_GPIO_Init+0x100>)
 80012cc:	f000 ff92 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 80012d0:	2340      	movs	r3, #64	; 0x40
 80012d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_GPIO_Init+0xfc>)
 80012e8:	f000 ff84 	bl	80021f4 <HAL_GPIO_Init>

}
 80012ec:	bf00      	nop
 80012ee:	3728      	adds	r7, #40	; 0x28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020400 	.word	0x40020400

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_MspInit+0x4c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <HAL_MspInit+0x4c>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_MspInit+0x4c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_MspInit+0x4c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a08      	ldr	r2, [pc, #32]	; (8001360 <HAL_MspInit+0x4c>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800

08001364 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <HAL_ADC_MspInit+0x7c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d127      	bne.n	80013d6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_ADC_MspInit+0x80>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <HAL_ADC_MspInit+0x80>)
 8001390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <HAL_ADC_MspInit+0x80>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_ADC_MspInit+0x80>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <HAL_ADC_MspInit+0x80>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_ADC_MspInit+0x80>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013be:	2301      	movs	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c2:	2303      	movs	r3, #3
 80013c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	; (80013e8 <HAL_ADC_MspInit+0x84>)
 80013d2:	f000 ff0f 	bl	80021f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013d6:	bf00      	nop
 80013d8:	3728      	adds	r7, #40	; 0x28
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40012000 	.word	0x40012000
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000

080013ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a19      	ldr	r2, [pc, #100]	; (8001470 <HAL_I2C_MspInit+0x84>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d12b      	bne.n	8001466 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_I2C_MspInit+0x88>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a17      	ldr	r2, [pc, #92]	; (8001474 <HAL_I2C_MspInit+0x88>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_I2C_MspInit+0x88>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800142a:	23c0      	movs	r3, #192	; 0xc0
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800142e:	2312      	movs	r3, #18
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001432:	2301      	movs	r3, #1
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800143a:	2304      	movs	r3, #4
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <HAL_I2C_MspInit+0x8c>)
 8001446:	f000 fed5 	bl	80021f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_I2C_MspInit+0x88>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_I2C_MspInit+0x88>)
 8001454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_I2C_MspInit+0x88>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	; 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40005400 	.word	0x40005400
 8001474:	40023800 	.word	0x40023800
 8001478:	40020400 	.word	0x40020400

0800147c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_TIM_Base_MspInit+0x48>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d115      	bne.n	80014ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_TIM_Base_MspInit+0x4c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <HAL_TIM_Base_MspInit+0x4c>)
 8001498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_TIM_Base_MspInit+0x4c>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	201a      	movs	r0, #26
 80014b0:	f000 fe47 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80014b4:	201a      	movs	r0, #26
 80014b6:	f000 fe60 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40014800 	.word	0x40014800
 80014c8:	40023800 	.word	0x40023800

080014cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <HAL_UART_MspInit+0x94>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d134      	bne.n	8001558 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <HAL_UART_MspInit+0x98>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <HAL_UART_MspInit+0x98>)
 80014f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <HAL_UART_MspInit+0x98>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_UART_MspInit+0x98>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a14      	ldr	r2, [pc, #80]	; (8001564 <HAL_UART_MspInit+0x98>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_UART_MspInit+0x98>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001526:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001538:	2307      	movs	r3, #7
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4809      	ldr	r0, [pc, #36]	; (8001568 <HAL_UART_MspInit+0x9c>)
 8001544:	f000 fe56 	bl	80021f4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	2100      	movs	r1, #0
 800154c:	2027      	movs	r0, #39	; 0x27
 800154e:	f000 fdf8 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001552:	2027      	movs	r0, #39	; 0x27
 8001554:	f000 fe11 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001558:	bf00      	nop
 800155a:	3728      	adds	r7, #40	; 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40004800 	.word	0x40004800
 8001564:	40023800 	.word	0x40023800
 8001568:	40020400 	.word	0x40020400

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c0:	f000 f8e8 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80015ce:	f002 ff0c 	bl	80043ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000384 	.word	0x20000384

080015dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <USART3_IRQHandler+0x10>)
 80015e2:	f003 f9cd 	bl	8004980 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200002a8 	.word	0x200002a8

080015f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <OTG_FS_IRQHandler+0x10>)
 80015f6:	f001 fa39 	bl	8002a6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20001898 	.word	0x20001898

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f007 fb86 	bl	8008d44 <__errno>
 8001638:	4602      	mov	r2, r0
 800163a:	230c      	movs	r3, #12
 800163c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20020000 	.word	0x20020000
 8001664:	00000400 	.word	0x00000400
 8001668:	20000298 	.word	0x20000298
 800166c:	20001ca8 	.word	0x20001ca8

08001670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <SystemInit+0x28>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <SystemInit+0x28>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <SystemInit+0x28>)
 8001686:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800168a:	609a      	str	r2, [r3, #8]
#endif
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016a2:	e003      	b.n	80016ac <LoopCopyDataInit>

080016a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016aa:	3104      	adds	r1, #4

080016ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016ac:	480b      	ldr	r0, [pc, #44]	; (80016dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016b4:	d3f6      	bcc.n	80016a4 <CopyDataInit>
  ldr  r2, =_sbss
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016b8:	e002      	b.n	80016c0 <LoopFillZerobss>

080016ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016bc:	f842 3b04 	str.w	r3, [r2], #4

080016c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016c4:	d3f9      	bcc.n	80016ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016c6:	f7ff ffd3 	bl	8001670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ca:	f007 fb41 	bl	8008d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ce:	f7ff fc41 	bl	8000f54 <main>
  bx  lr    
 80016d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016d8:	080096a0 	.word	0x080096a0
  ldr  r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016e0:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80016e4:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80016e8:	20001ca4 	.word	0x20001ca4

080016ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_Init+0x40>)
 80016fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_Init+0x40>)
 8001706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_Init+0x40>)
 8001712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f000 fd07 	bl	800212c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171e:	2000      	movs	r0, #0
 8001720:	f000 f808 	bl	8001734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001724:	f7ff fdf6 	bl	8001314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x54>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x58>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fd1f 	bl	8002196 <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f000 fce7 	bl	8002142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_InitTick+0x5c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000000 	.word	0x20000000
 800178c:	20000008 	.word	0x20000008
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008
 80017b8:	200003c4 	.word	0x200003c4

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	200003c4 	.word	0x200003c4

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff ffee 	bl	80017bc <HAL_GetTick>
 80017e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d005      	beq.n	80017fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_Delay+0x40>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017fa:	bf00      	nop
 80017fc:	f7ff ffde 	bl	80017bc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f7      	bhi.n	80017fc <HAL_Delay+0x28>
  {
  }
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000008 	.word	0x20000008

08001818 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e033      	b.n	8001896 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fd94 	bl	8001364 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	2b00      	cmp	r3, #0
 8001854:	d118      	bne.n	8001888 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800185e:	f023 0302 	bic.w	r3, r3, #2
 8001862:	f043 0202 	orr.w	r2, r3, #2
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 fa92 	bl	8001d94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f023 0303 	bic.w	r3, r3, #3
 800187e:	f043 0201 	orr.w	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	641a      	str	r2, [r3, #64]	; 0x40
 8001886:	e001      	b.n	800188c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_ADC_Start+0x1a>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e0a5      	b.n	8001a06 <HAL_ADC_Start+0x166>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d018      	beq.n	8001902 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018e0:	4b4c      	ldr	r3, [pc, #304]	; (8001a14 <HAL_ADC_Start+0x174>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a4c      	ldr	r2, [pc, #304]	; (8001a18 <HAL_ADC_Start+0x178>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	0c9a      	lsrs	r2, r3, #18
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018f4:	e002      	b.n	80018fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f9      	bne.n	80018f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b01      	cmp	r3, #1
 800190e:	d179      	bne.n	8001a04 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800193a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800194e:	d106      	bne.n	800195e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	f023 0206 	bic.w	r2, r3, #6
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	645a      	str	r2, [r3, #68]	; 0x44
 800195c:	e002      	b.n	8001964 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_ADC_Start+0x17c>)
 800196e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001978:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	2b00      	cmp	r3, #0
 8001984:	d12a      	bne.n	80019dc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a25      	ldr	r2, [pc, #148]	; (8001a20 <HAL_ADC_Start+0x180>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d015      	beq.n	80019bc <HAL_ADC_Start+0x11c>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a23      	ldr	r2, [pc, #140]	; (8001a24 <HAL_ADC_Start+0x184>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d105      	bne.n	80019a6 <HAL_ADC_Start+0x106>
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_ADC_Start+0x17c>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00a      	beq.n	80019bc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1f      	ldr	r2, [pc, #124]	; (8001a28 <HAL_ADC_Start+0x188>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d129      	bne.n	8001a04 <HAL_ADC_Start+0x164>
 80019b0:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <HAL_ADC_Start+0x17c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d823      	bhi.n	8001a04 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d11c      	bne.n	8001a04 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	e013      	b.n	8001a04 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <HAL_ADC_Start+0x180>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d10e      	bne.n	8001a04 <HAL_ADC_Start+0x164>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d107      	bne.n	8001a04 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a02:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000000 	.word	0x20000000
 8001a18:	431bde83 	.word	0x431bde83
 8001a1c:	40012300 	.word	0x40012300
 8001a20:	40012000 	.word	0x40012000
 8001a24:	40012100 	.word	0x40012100
 8001a28:	40012200 	.word	0x40012200

08001a2c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a48:	d113      	bne.n	8001a72 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a58:	d10b      	bne.n	8001a72 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f043 0220 	orr.w	r2, r3, #32
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e05c      	b.n	8001b2c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a72:	f7ff fea3 	bl	80017bc <HAL_GetTick>
 8001a76:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a78:	e01a      	b.n	8001ab0 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d016      	beq.n	8001ab0 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d007      	beq.n	8001a98 <HAL_ADC_PollForConversion+0x6c>
 8001a88:	f7ff fe98 	bl	80017bc <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d20b      	bcs.n	8001ab0 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f043 0204 	orr.w	r2, r3, #4
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e03d      	b.n	8001b2c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d1dd      	bne.n	8001a7a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f06f 0212 	mvn.w	r2, #18
 8001ac6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d123      	bne.n	8001b2a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d11f      	bne.n	8001b2a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d111      	bne.n	8001b2a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d105      	bne.n	8001b2a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1c>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e105      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x228>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b09      	cmp	r3, #9
 8001b7a:	d925      	bls.n	8001bc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68d9      	ldr	r1, [r3, #12]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	3b1e      	subs	r3, #30
 8001b92:	2207      	movs	r2, #7
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68d9      	ldr	r1, [r3, #12]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4403      	add	r3, r0
 8001bba:	3b1e      	subs	r3, #30
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	e022      	b.n	8001c0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6919      	ldr	r1, [r3, #16]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	2207      	movs	r2, #7
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43da      	mvns	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	400a      	ands	r2, r1
 8001bea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6919      	ldr	r1, [r3, #16]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4403      	add	r3, r0
 8001c04:	409a      	lsls	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d824      	bhi.n	8001c60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	3b05      	subs	r3, #5
 8001c28:	221f      	movs	r2, #31
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	400a      	ands	r2, r1
 8001c36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b05      	subs	r3, #5
 8001c52:	fa00 f203 	lsl.w	r2, r0, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c5e:	e04c      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b0c      	cmp	r3, #12
 8001c66:	d824      	bhi.n	8001cb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	3b23      	subs	r3, #35	; 0x23
 8001c7a:	221f      	movs	r2, #31
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43da      	mvns	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	400a      	ands	r2, r1
 8001c88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b23      	subs	r3, #35	; 0x23
 8001ca4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
 8001cb0:	e023      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3b41      	subs	r3, #65	; 0x41
 8001cc4:	221f      	movs	r2, #31
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	3b41      	subs	r3, #65	; 0x41
 8001cee:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cfa:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <HAL_ADC_ConfigChannel+0x234>)
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <HAL_ADC_ConfigChannel+0x238>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d109      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1cc>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b12      	cmp	r3, #18
 8001d0e:	d105      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <HAL_ADC_ConfigChannel+0x238>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d123      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x21e>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b10      	cmp	r3, #16
 8001d2c:	d003      	beq.n	8001d36 <HAL_ADC_ConfigChannel+0x1e6>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b11      	cmp	r3, #17
 8001d34:	d11b      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d111      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_ADC_ConfigChannel+0x23c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a10      	ldr	r2, [pc, #64]	; (8001d90 <HAL_ADC_ConfigChannel+0x240>)
 8001d50:	fba2 2303 	umull	r2, r3, r2, r3
 8001d54:	0c9a      	lsrs	r2, r3, #18
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d60:	e002      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f9      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40012300 	.word	0x40012300
 8001d88:	40012000 	.word	0x40012000
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	431bde83 	.word	0x431bde83

08001d94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d9c:	4b79      	ldr	r3, [pc, #484]	; (8001f84 <ADC_Init+0x1f0>)
 8001d9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	021a      	lsls	r2, r3, #8
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6899      	ldr	r1, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <ADC_Init+0x1f4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d022      	beq.n	8001e72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6899      	ldr	r1, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6899      	ldr	r1, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	e00f      	b.n	8001e92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0202 	bic.w	r2, r2, #2
 8001ea0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6899      	ldr	r1, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	7e1b      	ldrb	r3, [r3, #24]
 8001eac:	005a      	lsls	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01b      	beq.n	8001ef8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ece:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ede:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6859      	ldr	r1, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	3b01      	subs	r3, #1
 8001eec:	035a      	lsls	r2, r3, #13
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	e007      	b.n	8001f08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	051a      	lsls	r2, r3, #20
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6899      	ldr	r1, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f4a:	025a      	lsls	r2, r3, #9
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6899      	ldr	r1, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	029a      	lsls	r2, r3, #10
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	609a      	str	r2, [r3, #8]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40012300 	.word	0x40012300
 8001f88:	0f000001 	.word	0x0f000001

08001f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60d3      	str	r3, [r2, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <__NVIC_GetPriorityGrouping+0x18>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0307 	and.w	r3, r3, #7
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db0b      	blt.n	800201a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	f003 021f 	and.w	r2, r3, #31
 8002008:	4907      	ldr	r1, [pc, #28]	; (8002028 <__NVIC_EnableIRQ+0x38>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	2001      	movs	r0, #1
 8002012:	fa00 f202 	lsl.w	r2, r0, r2
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000e100 	.word	0xe000e100

0800202c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	db0a      	blt.n	8002056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	490c      	ldr	r1, [pc, #48]	; (8002078 <__NVIC_SetPriority+0x4c>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	0112      	lsls	r2, r2, #4
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	440b      	add	r3, r1
 8002050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002054:	e00a      	b.n	800206c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4908      	ldr	r1, [pc, #32]	; (800207c <__NVIC_SetPriority+0x50>)
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3b04      	subs	r3, #4
 8002064:	0112      	lsls	r2, r2, #4
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	440b      	add	r3, r1
 800206a:	761a      	strb	r2, [r3, #24]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000e100 	.word	0xe000e100
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f1c3 0307 	rsb	r3, r3, #7
 800209a:	2b04      	cmp	r3, #4
 800209c:	bf28      	it	cs
 800209e:	2304      	movcs	r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d902      	bls.n	80020b0 <NVIC_EncodePriority+0x30>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3b03      	subs	r3, #3
 80020ae:	e000      	b.n	80020b2 <NVIC_EncodePriority+0x32>
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	401a      	ands	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43d9      	mvns	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	4313      	orrs	r3, r2
         );
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3724      	adds	r7, #36	; 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f8:	d301      	bcc.n	80020fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00f      	b.n	800211e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <SysTick_Config+0x40>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002106:	210f      	movs	r1, #15
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	f7ff ff8e 	bl	800202c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <SysTick_Config+0x40>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <SysTick_Config+0x40>)
 8002118:	2207      	movs	r2, #7
 800211a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	e000e010 	.word	0xe000e010

0800212c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ff29 	bl	8001f8c <__NVIC_SetPriorityGrouping>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002154:	f7ff ff3e 	bl	8001fd4 <__NVIC_GetPriorityGrouping>
 8002158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f7ff ff8e 	bl	8002080 <NVIC_EncodePriority>
 8002164:	4602      	mov	r2, r0
 8002166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff5d 	bl	800202c <__NVIC_SetPriority>
}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff31 	bl	8001ff0 <__NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffa2 	bl	80020e8 <SysTick_Config>
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d004      	beq.n	80021cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e00c      	b.n	80021e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2205      	movs	r2, #5
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	e16b      	b.n	80024e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	429a      	cmp	r2, r3
 800222a:	f040 815a 	bne.w	80024e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d00b      	beq.n	800224e <HAL_GPIO_Init+0x5a>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d007      	beq.n	800224e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002242:	2b11      	cmp	r3, #17
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b12      	cmp	r3, #18
 800224c:	d130      	bne.n	80022b0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002284:	2201      	movs	r2, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 0201 	and.w	r2, r3, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0xfc>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b12      	cmp	r3, #18
 80022ee:	d123      	bne.n	8002338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	08da      	lsrs	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3208      	adds	r2, #8
 8002332:	69b9      	ldr	r1, [r7, #24]
 8002334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0203 	and.w	r2, r3, #3
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80b4 	beq.w	80024e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b5f      	ldr	r3, [pc, #380]	; (80024fc <HAL_GPIO_Init+0x308>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	4a5e      	ldr	r2, [pc, #376]	; (80024fc <HAL_GPIO_Init+0x308>)
 8002384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002388:	6453      	str	r3, [r2, #68]	; 0x44
 800238a:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <HAL_GPIO_Init+0x308>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002396:	4a5a      	ldr	r2, [pc, #360]	; (8002500 <HAL_GPIO_Init+0x30c>)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a51      	ldr	r2, [pc, #324]	; (8002504 <HAL_GPIO_Init+0x310>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d02b      	beq.n	800241a <HAL_GPIO_Init+0x226>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a50      	ldr	r2, [pc, #320]	; (8002508 <HAL_GPIO_Init+0x314>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d025      	beq.n	8002416 <HAL_GPIO_Init+0x222>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4f      	ldr	r2, [pc, #316]	; (800250c <HAL_GPIO_Init+0x318>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d01f      	beq.n	8002412 <HAL_GPIO_Init+0x21e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4e      	ldr	r2, [pc, #312]	; (8002510 <HAL_GPIO_Init+0x31c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d019      	beq.n	800240e <HAL_GPIO_Init+0x21a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4d      	ldr	r2, [pc, #308]	; (8002514 <HAL_GPIO_Init+0x320>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <HAL_GPIO_Init+0x216>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4c      	ldr	r2, [pc, #304]	; (8002518 <HAL_GPIO_Init+0x324>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00d      	beq.n	8002406 <HAL_GPIO_Init+0x212>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4b      	ldr	r2, [pc, #300]	; (800251c <HAL_GPIO_Init+0x328>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d007      	beq.n	8002402 <HAL_GPIO_Init+0x20e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4a      	ldr	r2, [pc, #296]	; (8002520 <HAL_GPIO_Init+0x32c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d101      	bne.n	80023fe <HAL_GPIO_Init+0x20a>
 80023fa:	2307      	movs	r3, #7
 80023fc:	e00e      	b.n	800241c <HAL_GPIO_Init+0x228>
 80023fe:	2308      	movs	r3, #8
 8002400:	e00c      	b.n	800241c <HAL_GPIO_Init+0x228>
 8002402:	2306      	movs	r3, #6
 8002404:	e00a      	b.n	800241c <HAL_GPIO_Init+0x228>
 8002406:	2305      	movs	r3, #5
 8002408:	e008      	b.n	800241c <HAL_GPIO_Init+0x228>
 800240a:	2304      	movs	r3, #4
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x228>
 800240e:	2303      	movs	r3, #3
 8002410:	e004      	b.n	800241c <HAL_GPIO_Init+0x228>
 8002412:	2302      	movs	r3, #2
 8002414:	e002      	b.n	800241c <HAL_GPIO_Init+0x228>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_GPIO_Init+0x228>
 800241a:	2300      	movs	r3, #0
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	f002 0203 	and.w	r2, r2, #3
 8002422:	0092      	lsls	r2, r2, #2
 8002424:	4093      	lsls	r3, r2
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800242c:	4934      	ldr	r1, [pc, #208]	; (8002500 <HAL_GPIO_Init+0x30c>)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	3302      	adds	r3, #2
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800243a:	4b3a      	ldr	r3, [pc, #232]	; (8002524 <HAL_GPIO_Init+0x330>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800245e:	4a31      	ldr	r2, [pc, #196]	; (8002524 <HAL_GPIO_Init+0x330>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002464:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <HAL_GPIO_Init+0x330>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002488:	4a26      	ldr	r2, [pc, #152]	; (8002524 <HAL_GPIO_Init+0x330>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248e:	4b25      	ldr	r3, [pc, #148]	; (8002524 <HAL_GPIO_Init+0x330>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024b2:	4a1c      	ldr	r2, [pc, #112]	; (8002524 <HAL_GPIO_Init+0x330>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b8:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <HAL_GPIO_Init+0x330>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024dc:	4a11      	ldr	r2, [pc, #68]	; (8002524 <HAL_GPIO_Init+0x330>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3301      	adds	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	2b0f      	cmp	r3, #15
 80024ec:	f67f ae90 	bls.w	8002210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f0:	bf00      	nop
 80024f2:	3724      	adds	r7, #36	; 0x24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40023800 	.word	0x40023800
 8002500:	40013800 	.word	0x40013800
 8002504:	40020000 	.word	0x40020000
 8002508:	40020400 	.word	0x40020400
 800250c:	40020800 	.word	0x40020800
 8002510:	40020c00 	.word	0x40020c00
 8002514:	40021000 	.word	0x40021000
 8002518:	40021400 	.word	0x40021400
 800251c:	40021800 	.word	0x40021800
 8002520:	40021c00 	.word	0x40021c00
 8002524:	40013c00 	.word	0x40013c00

08002528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
 8002534:	4613      	mov	r3, r2
 8002536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002538:	787b      	ldrb	r3, [r7, #1]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002544:	e003      	b.n	800254e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	041a      	lsls	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	619a      	str	r2, [r3, #24]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e11f      	b.n	80027ae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe ff32 	bl	80013ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2224      	movs	r2, #36	; 0x24
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025c0:	f001 fe9c 	bl	80042fc <HAL_RCC_GetPCLK1Freq>
 80025c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4a7b      	ldr	r2, [pc, #492]	; (80027b8 <HAL_I2C_Init+0x25c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d807      	bhi.n	80025e0 <HAL_I2C_Init+0x84>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a7a      	ldr	r2, [pc, #488]	; (80027bc <HAL_I2C_Init+0x260>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	bf94      	ite	ls
 80025d8:	2301      	movls	r3, #1
 80025da:	2300      	movhi	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e006      	b.n	80025ee <HAL_I2C_Init+0x92>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4a77      	ldr	r2, [pc, #476]	; (80027c0 <HAL_I2C_Init+0x264>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	bf94      	ite	ls
 80025e8:	2301      	movls	r3, #1
 80025ea:	2300      	movhi	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e0db      	b.n	80027ae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4a72      	ldr	r2, [pc, #456]	; (80027c4 <HAL_I2C_Init+0x268>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	0c9b      	lsrs	r3, r3, #18
 8002600:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4a64      	ldr	r2, [pc, #400]	; (80027b8 <HAL_I2C_Init+0x25c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d802      	bhi.n	8002630 <HAL_I2C_Init+0xd4>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	3301      	adds	r3, #1
 800262e:	e009      	b.n	8002644 <HAL_I2C_Init+0xe8>
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	4a63      	ldr	r2, [pc, #396]	; (80027c8 <HAL_I2C_Init+0x26c>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	3301      	adds	r3, #1
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	430b      	orrs	r3, r1
 800264a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002656:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4956      	ldr	r1, [pc, #344]	; (80027b8 <HAL_I2C_Init+0x25c>)
 8002660:	428b      	cmp	r3, r1
 8002662:	d80d      	bhi.n	8002680 <HAL_I2C_Init+0x124>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e59      	subs	r1, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002672:	3301      	adds	r3, #1
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	2b04      	cmp	r3, #4
 800267a:	bf38      	it	cc
 800267c:	2304      	movcc	r3, #4
 800267e:	e04f      	b.n	8002720 <HAL_I2C_Init+0x1c4>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d111      	bne.n	80026ac <HAL_I2C_Init+0x150>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1e58      	subs	r0, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	440b      	add	r3, r1
 8002696:	fbb0 f3f3 	udiv	r3, r0, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e012      	b.n	80026d2 <HAL_I2C_Init+0x176>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1e58      	subs	r0, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	0099      	lsls	r1, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Init+0x17e>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e022      	b.n	8002720 <HAL_I2C_Init+0x1c4>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10e      	bne.n	8002700 <HAL_I2C_Init+0x1a4>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1e58      	subs	r0, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	440b      	add	r3, r1
 80026f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f4:	3301      	adds	r3, #1
 80026f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026fe:	e00f      	b.n	8002720 <HAL_I2C_Init+0x1c4>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1e58      	subs	r0, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	0099      	lsls	r1, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	fbb0 f3f3 	udiv	r3, r0, r3
 8002716:	3301      	adds	r3, #1
 8002718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	6809      	ldr	r1, [r1, #0]
 8002724:	4313      	orrs	r3, r2
 8002726:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800274e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6911      	ldr	r1, [r2, #16]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68d2      	ldr	r2, [r2, #12]
 800275a:	4311      	orrs	r1, r2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	430b      	orrs	r3, r1
 8002762:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	000186a0 	.word	0x000186a0
 80027bc:	001e847f 	.word	0x001e847f
 80027c0:	003d08ff 	.word	0x003d08ff
 80027c4:	431bde83 	.word	0x431bde83
 80027c8:	10624dd3 	.word	0x10624dd3

080027cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ce:	b08f      	sub	sp, #60	; 0x3c
 80027d0:	af0a      	add	r7, sp, #40	; 0x28
 80027d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e10f      	b.n	80029fe <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d106      	bne.n	80027fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f005 ffa7 	bl	800874c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2203      	movs	r2, #3
 8002802:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f002 ffca 	bl	80057b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	687e      	ldr	r6, [r7, #4]
 800282a:	466d      	mov	r5, sp
 800282c:	f106 0410 	add.w	r4, r6, #16
 8002830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002838:	e894 0003 	ldmia.w	r4, {r0, r1}
 800283c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002840:	1d33      	adds	r3, r6, #4
 8002842:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002844:	6838      	ldr	r0, [r7, #0]
 8002846:	f002 fea1 	bl	800558c <USB_CoreInit>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0d0      	b.n	80029fe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f002 ffb8 	bl	80057d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	e04a      	b.n	8002904 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800286e:	7bfa      	ldrb	r2, [r7, #15]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	333d      	adds	r3, #61	; 0x3d
 800287e:	2201      	movs	r2, #1
 8002880:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002882:	7bfa      	ldrb	r2, [r7, #15]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	333c      	adds	r3, #60	; 0x3c
 8002892:	7bfa      	ldrb	r2, [r7, #15]
 8002894:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002896:	7bfa      	ldrb	r2, [r7, #15]
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	b298      	uxth	r0, r3
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	3342      	adds	r3, #66	; 0x42
 80028aa:	4602      	mov	r2, r0
 80028ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	333f      	adds	r3, #63	; 0x3f
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028c2:	7bfa      	ldrb	r2, [r7, #15]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	3344      	adds	r3, #68	; 0x44
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	1a9b      	subs	r3, r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	3348      	adds	r3, #72	; 0x48
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028ea:	7bfa      	ldrb	r2, [r7, #15]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	3350      	adds	r3, #80	; 0x50
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	3301      	adds	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	7bfa      	ldrb	r2, [r7, #15]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	429a      	cmp	r2, r3
 800290c:	d3af      	bcc.n	800286e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	e044      	b.n	800299e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800293c:	7bfa      	ldrb	r2, [r7, #15]
 800293e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	3301      	adds	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d3b5      	bcc.n	8002914 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	687e      	ldr	r6, [r7, #4]
 80029b0:	466d      	mov	r5, sp
 80029b2:	f106 0410 	add.w	r4, r6, #16
 80029b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80029c6:	1d33      	adds	r3, r6, #4
 80029c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ca:	6838      	ldr	r0, [r7, #0]
 80029cc:	f002 ff2e 	bl	800582c <USB_DevInit>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e00d      	b.n	80029fe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 ff76 	bl	80068e8 <USB_DevDisconnect>

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_PCD_Start+0x1c>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e020      	b.n	8002a64 <HAL_PCD_Start+0x5e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d109      	bne.n	8002a46 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d005      	beq.n	8002a46 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f002 fea2 	bl	8005794 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f003 ff26 	bl	80068a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b08d      	sub	sp, #52	; 0x34
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f003 ffe4 	bl	8006a50 <USB_GetMode>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f040 839d 	bne.w	80031ca <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 ff48 	bl	800692a <USB_ReadInterrupts>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8393 	beq.w	80031c8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f003 ff3f 	bl	800692a <USB_ReadInterrupts>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d107      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f002 0202 	and.w	r2, r2, #2
 8002ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f003 ff2d 	bl	800692a <USB_ReadInterrupts>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d161      	bne.n	8002b9e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0210 	bic.w	r2, r2, #16
 8002ae8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	f003 020f 	and.w	r2, r3, #15
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	3304      	adds	r3, #4
 8002b08:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	0c5b      	lsrs	r3, r3, #17
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d124      	bne.n	8002b60 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d035      	beq.n	8002b8e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	6a38      	ldr	r0, [r7, #32]
 8002b36:	f003 fd93 	bl	8006660 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b46:	441a      	add	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	699a      	ldr	r2, [r3, #24]
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b58:	441a      	add	r2, r3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	619a      	str	r2, [r3, #24]
 8002b5e:	e016      	b.n	8002b8e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	0c5b      	lsrs	r3, r3, #17
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	2b06      	cmp	r3, #6
 8002b6a:	d110      	bne.n	8002b8e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b72:	2208      	movs	r2, #8
 8002b74:	4619      	mov	r1, r3
 8002b76:	6a38      	ldr	r0, [r7, #32]
 8002b78:	f003 fd72 	bl	8006660 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	699a      	ldr	r2, [r3, #24]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b88:	441a      	add	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699a      	ldr	r2, [r3, #24]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0210 	orr.w	r2, r2, #16
 8002b9c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 fec1 	bl	800692a <USB_ReadInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bb2:	d16e      	bne.n	8002c92 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f003 fec7 	bl	8006950 <USB_ReadDevAllOutEpInterrupt>
 8002bc2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002bc4:	e062      	b.n	8002c8c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d057      	beq.n	8002c80 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f003 feec 	bl	80069b8 <USB_ReadDevOutEPInterrupt>
 8002be0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00c      	beq.n	8002c06 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fdb1 	bl	8003768 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00c      	beq.n	8002c2a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2308      	movs	r3, #8
 8002c20:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 feab 	bl	8003980 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c40:	461a      	mov	r2, r3
 8002c42:	2310      	movs	r3, #16
 8002c44:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2320      	movs	r3, #32
 8002c60:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d009      	beq.n	8002c80 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c7e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	3301      	adds	r3, #1
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	085b      	lsrs	r3, r3, #1
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d199      	bne.n	8002bc6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f003 fe47 	bl	800692a <USB_ReadInterrupts>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ca6:	f040 80c0 	bne.w	8002e2a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f003 fe68 	bl	8006984 <USB_ReadDevAllInEpInterrupt>
 8002cb4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002cba:	e0b2      	b.n	8002e22 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 80a7 	beq.w	8002e16 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 fe8e 	bl	80069f4 <USB_ReadDevInEPInterrupt>
 8002cd8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d057      	beq.n	8002d94 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	2201      	movs	r2, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69f9      	ldr	r1, [r7, #28]
 8002d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d04:	4013      	ands	r3, r2
 8002d06:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d14:	461a      	mov	r2, r3
 8002d16:	2301      	movs	r3, #1
 8002d18:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d132      	bne.n	8002d88 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	3348      	adds	r3, #72	; 0x48
 8002d32:	6819      	ldr	r1, [r3, #0]
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4403      	add	r3, r0
 8002d42:	3344      	adds	r3, #68	; 0x44
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4419      	add	r1, r3
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4403      	add	r3, r0
 8002d56:	3348      	adds	r3, #72	; 0x48
 8002d58:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d113      	bne.n	8002d88 <HAL_PCD_IRQHandler+0x31c>
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	3350      	adds	r3, #80	; 0x50
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d108      	bne.n	8002d88 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d80:	461a      	mov	r2, r3
 8002d82:	2101      	movs	r1, #1
 8002d84:	f003 fe96 	bl	8006ab4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f005 fd5d 	bl	800884e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002daa:	461a      	mov	r2, r3
 8002dac:	2308      	movs	r3, #8
 8002dae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2310      	movs	r3, #16
 8002dca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002de2:	461a      	mov	r2, r3
 8002de4:	2340      	movs	r3, #64	; 0x40
 8002de6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2302      	movs	r3, #2
 8002e02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fc1b 	bl	800364c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	3301      	adds	r3, #1
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f47f af49 	bne.w	8002cbc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 fd7b 	bl	800692a <USB_ReadInterrupts>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e3e:	d122      	bne.n	8002e86 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d108      	bne.n	8002e70 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e66:	2100      	movs	r1, #0
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fe27 	bl	8003abc <HAL_PCDEx_LPM_Callback>
 8002e6e:	e002      	b.n	8002e76 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f005 fd63 	bl	800893c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002e84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f003 fd4d 	bl	800692a <USB_ReadInterrupts>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e9a:	d112      	bne.n	8002ec2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d102      	bne.n	8002eb2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f005 fd1f 	bl	80088f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ec0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 fd2f 	bl	800692a <USB_ReadInterrupts>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed6:	f040 80c7 	bne.w	8003068 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2110      	movs	r1, #16
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f002 fdfd 	bl	8005af4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002efe:	e056      	b.n	8002fae <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f12:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f24:	0151      	lsls	r1, r2, #5
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	440a      	add	r2, r1
 8002f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f32:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f44:	0151      	lsls	r1, r2, #5
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	440a      	add	r2, r1
 8002f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f60:	461a      	mov	r2, r3
 8002f62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f66:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f78:	0151      	lsls	r1, r2, #5
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	440a      	add	r2, r1
 8002f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f98:	0151      	lsls	r1, r2, #5
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	440a      	add	r2, r1
 8002f9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002fa6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	3301      	adds	r3, #1
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d3a3      	bcc.n	8002f00 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	69fa      	ldr	r2, [r7, #28]
 8002fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fc6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002fca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d016      	beq.n	8003002 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fe4:	f043 030b 	orr.w	r3, r3, #11
 8002fe8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ffa:	f043 030b 	orr.w	r3, r3, #11
 8002ffe:	6453      	str	r3, [r2, #68]	; 0x44
 8003000:	e015      	b.n	800302e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003014:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003018:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003028:	f043 030b 	orr.w	r3, r3, #11
 800302c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800303c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003040:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003052:	461a      	mov	r2, r3
 8003054:	f003 fd2e 	bl	8006ab4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003066:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f003 fc5c 	bl	800692a <USB_ReadInterrupts>
 8003072:	4603      	mov	r3, r0
 8003074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307c:	d124      	bne.n	80030c8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f003 fcf2 	bl	8006a6c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f002 fd92 	bl	8005bb6 <USB_GetDevSpeed>
 8003092:	4603      	mov	r3, r0
 8003094:	461a      	mov	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681c      	ldr	r4, [r3, #0]
 800309e:	f001 f921 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 80030a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	4620      	mov	r0, r4
 80030ae:	f002 facf 	bl	8005650 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f005 fbf3 	bl	800889e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80030c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f003 fc2c 	bl	800692a <USB_ReadInterrupts>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d10a      	bne.n	80030f2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f005 fbd0 	bl	8008882 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f002 0208 	and.w	r2, r2, #8
 80030f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f003 fc17 	bl	800692a <USB_ReadInterrupts>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003106:	d10f      	bne.n	8003128 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	b2db      	uxtb	r3, r3
 8003110:	4619      	mov	r1, r3
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f005 fc32 	bl	800897c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003126:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f003 fbfc 	bl	800692a <USB_ReadInterrupts>
 8003132:	4603      	mov	r3, r0
 8003134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003138:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800313c:	d10f      	bne.n	800315e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	b2db      	uxtb	r3, r3
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f005 fc05 	bl	8008958 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800315c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f003 fbe1 	bl	800692a <USB_ReadInterrupts>
 8003168:	4603      	mov	r3, r0
 800316a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800316e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003172:	d10a      	bne.n	800318a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f005 fc13 	bl	80089a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003188:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f003 fbcb 	bl	800692a <USB_ReadInterrupts>
 8003194:	4603      	mov	r3, r0
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b04      	cmp	r3, #4
 800319c:	d115      	bne.n	80031ca <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f005 fc03 	bl	80089bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6859      	ldr	r1, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	e000      	b.n	80031ca <HAL_PCD_IRQHandler+0x75e>
      return;
 80031c8:	bf00      	nop
    }
  }
}
 80031ca:	3734      	adds	r7, #52	; 0x34
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd90      	pop	{r4, r7, pc}

080031d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_PCD_SetAddress+0x1a>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e013      	b.n	8003212 <HAL_PCD_SetAddress+0x42>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	4611      	mov	r1, r2
 8003202:	4618      	mov	r0, r3
 8003204:	f003 fb29 	bl	800685a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	4608      	mov	r0, r1
 8003224:	4611      	mov	r1, r2
 8003226:	461a      	mov	r2, r3
 8003228:	4603      	mov	r3, r0
 800322a:	70fb      	strb	r3, [r7, #3]
 800322c:	460b      	mov	r3, r1
 800322e:	803b      	strh	r3, [r7, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323c:	2b00      	cmp	r3, #0
 800323e:	da0f      	bge.n	8003260 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	f003 020f 	and.w	r2, r3, #15
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	3338      	adds	r3, #56	; 0x38
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	3304      	adds	r3, #4
 8003256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	705a      	strb	r2, [r3, #1]
 800325e:	e00f      	b.n	8003280 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	f003 020f 	and.w	r2, r3, #15
 8003266:	4613      	mov	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	3304      	adds	r3, #4
 8003278:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	b2da      	uxtb	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800328c:	883a      	ldrh	r2, [r7, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	78ba      	ldrb	r2, [r7, #2]
 8003296:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	785b      	ldrb	r3, [r3, #1]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d004      	beq.n	80032aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032aa:	78bb      	ldrb	r3, [r7, #2]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d102      	bne.n	80032b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_PCD_EP_Open+0xaa>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e00e      	b.n	80032e2 <HAL_PCD_EP_Open+0xc8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68f9      	ldr	r1, [r7, #12]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f002 fc94 	bl	8005c00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80032e0:	7afb      	ldrb	r3, [r7, #11]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	460b      	mov	r3, r1
 80032f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	da0f      	bge.n	800331e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fe:	78fb      	ldrb	r3, [r7, #3]
 8003300:	f003 020f 	and.w	r2, r3, #15
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	3338      	adds	r3, #56	; 0x38
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	3304      	adds	r3, #4
 8003314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	705a      	strb	r2, [r3, #1]
 800331c:	e00f      	b.n	800333e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	f003 020f 	and.w	r2, r3, #15
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	3304      	adds	r3, #4
 8003336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_PCD_EP_Close+0x6e>
 8003354:	2302      	movs	r3, #2
 8003356:	e00e      	b.n	8003376 <HAL_PCD_EP_Close+0x8c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68f9      	ldr	r1, [r7, #12]
 8003366:	4618      	mov	r0, r3
 8003368:	f002 fcd2 	bl	8005d10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b086      	sub	sp, #24
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	603b      	str	r3, [r7, #0]
 800338a:	460b      	mov	r3, r1
 800338c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800338e:	7afb      	ldrb	r3, [r7, #11]
 8003390:	f003 020f 	and.w	r2, r3, #15
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	3304      	adds	r3, #4
 80033a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2200      	movs	r2, #0
 80033b8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2200      	movs	r2, #0
 80033be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c0:	7afb      	ldrb	r3, [r7, #11]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d102      	bne.n	80033da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033da:	7afb      	ldrb	r3, [r7, #11]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d109      	bne.n	80033f8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6818      	ldr	r0, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	6979      	ldr	r1, [r7, #20]
 80033f2:	f002 ffad 	bl	8006350 <USB_EP0StartXfer>
 80033f6:	e008      	b.n	800340a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	6979      	ldr	r1, [r7, #20]
 8003406:	f002 fd5f 	bl	8005ec8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	f003 020f 	and.w	r2, r3, #15
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003436:	681b      	ldr	r3, [r3, #0]
}
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	460b      	mov	r3, r1
 8003452:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003454:	7afb      	ldrb	r3, [r7, #11]
 8003456:	f003 020f 	and.w	r2, r3, #15
 800345a:	4613      	mov	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	3338      	adds	r3, #56	; 0x38
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	3304      	adds	r3, #4
 800346a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2200      	movs	r2, #0
 800347c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2201      	movs	r2, #1
 8003482:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003484:	7afb      	ldrb	r3, [r7, #11]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	b2da      	uxtb	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d102      	bne.n	800349e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800349e:	7afb      	ldrb	r3, [r7, #11]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d109      	bne.n	80034bc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	6979      	ldr	r1, [r7, #20]
 80034b6:	f002 ff4b 	bl	8006350 <USB_EP0StartXfer>
 80034ba:	e008      	b.n	80034ce <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
 80034c8:	6979      	ldr	r1, [r7, #20]
 80034ca:	f002 fcfd 	bl	8005ec8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	f003 020f 	and.w	r2, r3, #15
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d901      	bls.n	80034f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e050      	b.n	8003598 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	da0f      	bge.n	800351e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	f003 020f 	and.w	r2, r3, #15
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	3338      	adds	r3, #56	; 0x38
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	3304      	adds	r3, #4
 8003514:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	705a      	strb	r2, [r3, #1]
 800351c:	e00d      	b.n	800353a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	4413      	add	r3, r2
 8003530:	3304      	adds	r3, #4
 8003532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	b2da      	uxtb	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_PCD_EP_SetStall+0x82>
 8003556:	2302      	movs	r3, #2
 8003558:	e01e      	b.n	8003598 <HAL_PCD_EP_SetStall+0xc0>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68f9      	ldr	r1, [r7, #12]
 8003568:	4618      	mov	r0, r3
 800356a:	f003 f8a2 	bl	80066b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	f003 030f 	and.w	r3, r3, #15
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	b2d9      	uxtb	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003588:	461a      	mov	r2, r3
 800358a:	f003 fa93 	bl	8006ab4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	f003 020f 	and.w	r2, r3, #15
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d901      	bls.n	80035be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e042      	b.n	8003644 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	da0f      	bge.n	80035e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c6:	78fb      	ldrb	r3, [r7, #3]
 80035c8:	f003 020f 	and.w	r2, r3, #15
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	3338      	adds	r3, #56	; 0x38
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	3304      	adds	r3, #4
 80035dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	705a      	strb	r2, [r3, #1]
 80035e4:	e00f      	b.n	8003606 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	f003 020f 	and.w	r2, r3, #15
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4413      	add	r3, r2
 80035fc:	3304      	adds	r3, #4
 80035fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	b2da      	uxtb	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_PCD_EP_ClrStall+0x86>
 8003622:	2302      	movs	r3, #2
 8003624:	e00e      	b.n	8003644 <HAL_PCD_EP_ClrStall+0xa4>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68f9      	ldr	r1, [r7, #12]
 8003634:	4618      	mov	r0, r3
 8003636:	f003 f8aa 	bl	800678e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	; 0x28
 8003650:	af02      	add	r7, sp, #8
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	3338      	adds	r3, #56	; 0x38
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	4413      	add	r3, r2
 8003670:	3304      	adds	r3, #4
 8003672:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	699a      	ldr	r2, [r3, #24]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	429a      	cmp	r2, r3
 800367e:	d901      	bls.n	8003684 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e06c      	b.n	800375e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	429a      	cmp	r2, r3
 8003698:	d902      	bls.n	80036a0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	3303      	adds	r3, #3
 80036a4:	089b      	lsrs	r3, r3, #2
 80036a6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036a8:	e02b      	b.n	8003702 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d902      	bls.n	80036c6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3303      	adds	r3, #3
 80036ca:	089b      	lsrs	r3, r3, #2
 80036cc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	68d9      	ldr	r1, [r3, #12]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	4603      	mov	r3, r0
 80036e4:	6978      	ldr	r0, [r7, #20]
 80036e6:	f002 ff86 	bl	80065f6 <USB_WritePacket>

    ep->xfer_buff  += len;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	441a      	add	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	699a      	ldr	r2, [r3, #24]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	441a      	add	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	b29b      	uxth	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	429a      	cmp	r2, r3
 8003716:	d809      	bhi.n	800372c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	699a      	ldr	r2, [r3, #24]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003720:	429a      	cmp	r2, r3
 8003722:	d203      	bcs.n	800372c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1be      	bne.n	80036aa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	429a      	cmp	r2, r3
 8003736:	d811      	bhi.n	800375c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	2201      	movs	r2, #1
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	43db      	mvns	r3, r3
 8003752:	6939      	ldr	r1, [r7, #16]
 8003754:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003758:	4013      	ands	r3, r2
 800375a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3720      	adds	r7, #32
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	333c      	adds	r3, #60	; 0x3c
 8003780:	3304      	adds	r3, #4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b01      	cmp	r3, #1
 800379c:	f040 80a0 	bne.w	80038e0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d015      	beq.n	80037d6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a72      	ldr	r2, [pc, #456]	; (8003978 <PCD_EP_OutXfrComplete_int+0x210>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	f240 80dd 	bls.w	800396e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80d7 	beq.w	800396e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037cc:	461a      	mov	r2, r3
 80037ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d2:	6093      	str	r3, [r2, #8]
 80037d4:	e0cb      	b.n	800396e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d009      	beq.n	80037f4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ec:	461a      	mov	r2, r3
 80037ee:	2320      	movs	r3, #32
 80037f0:	6093      	str	r3, [r2, #8]
 80037f2:	e0bc      	b.n	800396e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f040 80b7 	bne.w	800396e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a5d      	ldr	r2, [pc, #372]	; (8003978 <PCD_EP_OutXfrComplete_int+0x210>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d90f      	bls.n	8003828 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381e:	461a      	mov	r2, r3
 8003820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003824:	6093      	str	r3, [r2, #8]
 8003826:	e0a2      	b.n	800396e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800383a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	0159      	lsls	r1, r3, #5
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	440b      	add	r3, r1
 8003844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800384e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4403      	add	r3, r0
 800385e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003862:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003876:	6819      	ldr	r1, [r3, #0]
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4403      	add	r3, r0
 8003886:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4419      	add	r1, r3
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	4613      	mov	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4403      	add	r3, r0
 800389c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038a0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d114      	bne.n	80038d2 <PCD_EP_OutXfrComplete_int+0x16a>
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d108      	bne.n	80038d2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038ca:	461a      	mov	r2, r3
 80038cc:	2101      	movs	r1, #1
 80038ce:	f003 f8f1 	bl	8006ab4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	4619      	mov	r1, r3
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f004 ff9d 	bl	8008818 <HAL_PCD_DataOutStageCallback>
 80038de:	e046      	b.n	800396e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a26      	ldr	r2, [pc, #152]	; (800397c <PCD_EP_OutXfrComplete_int+0x214>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d124      	bne.n	8003932 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fe:	461a      	mov	r2, r3
 8003900:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003904:	6093      	str	r3, [r2, #8]
 8003906:	e032      	b.n	800396e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391e:	461a      	mov	r2, r3
 8003920:	2320      	movs	r3, #32
 8003922:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	4619      	mov	r1, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f004 ff74 	bl	8008818 <HAL_PCD_DataOutStageCallback>
 8003930:	e01d      	b.n	800396e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d114      	bne.n	8003962 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d108      	bne.n	8003962 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800395a:	461a      	mov	r2, r3
 800395c:	2100      	movs	r1, #0
 800395e:	f003 f8a9 	bl	8006ab4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	4619      	mov	r1, r3
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f004 ff55 	bl	8008818 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	4f54300a 	.word	0x4f54300a
 800397c:	4f54310a 	.word	0x4f54310a

08003980 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	333c      	adds	r3, #60	; 0x3c
 8003998:	3304      	adds	r3, #4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <PCD_EP_OutSetupPacket_int+0x88>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d90e      	bls.n	80039d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d009      	beq.n	80039d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039cc:	461a      	mov	r2, r3
 80039ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f004 ff0d 	bl	80087f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <PCD_EP_OutSetupPacket_int+0x88>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d90c      	bls.n	80039fc <PCD_EP_OutSetupPacket_int+0x7c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d108      	bne.n	80039fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039f4:	461a      	mov	r2, r3
 80039f6:	2101      	movs	r1, #1
 80039f8:	f003 f85c 	bl	8006ab4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	4f54300a 	.word	0x4f54300a

08003a0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	70fb      	strb	r3, [r7, #3]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d107      	bne.n	8003a3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a2a:	883b      	ldrh	r3, [r7, #0]
 8003a2c:	0419      	lsls	r1, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28
 8003a38:	e028      	b.n	8003a8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	4413      	add	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]
 8003a4c:	e00d      	b.n	8003a6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	3340      	adds	r3, #64	; 0x40
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	4413      	add	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	3301      	adds	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
 8003a6a:	7bfa      	ldrb	r2, [r7, #15]
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d3ec      	bcc.n	8003a4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a74:	883b      	ldrh	r3, [r7, #0]
 8003a76:	0418      	lsls	r0, r3, #16
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	4302      	orrs	r2, r0
 8003a84:	3340      	adds	r3, #64	; 0x40
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	887a      	ldrh	r2, [r7, #2]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e25b      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d075      	beq.n	8003bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003af2:	4ba3      	ldr	r3, [pc, #652]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d00c      	beq.n	8003b18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afe:	4ba0      	ldr	r3, [pc, #640]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d112      	bne.n	8003b30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b0a:	4b9d      	ldr	r3, [pc, #628]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b16:	d10b      	bne.n	8003b30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	4b99      	ldr	r3, [pc, #612]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d05b      	beq.n	8003bdc <HAL_RCC_OscConfig+0x108>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d157      	bne.n	8003bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e236      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b38:	d106      	bne.n	8003b48 <HAL_RCC_OscConfig+0x74>
 8003b3a:	4b91      	ldr	r3, [pc, #580]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a90      	ldr	r2, [pc, #576]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e01d      	b.n	8003b84 <HAL_RCC_OscConfig+0xb0>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x98>
 8003b52:	4b8b      	ldr	r3, [pc, #556]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a8a      	ldr	r2, [pc, #552]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	4b88      	ldr	r3, [pc, #544]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a87      	ldr	r2, [pc, #540]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e00b      	b.n	8003b84 <HAL_RCC_OscConfig+0xb0>
 8003b6c:	4b84      	ldr	r3, [pc, #528]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a83      	ldr	r2, [pc, #524]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	4b81      	ldr	r3, [pc, #516]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a80      	ldr	r2, [pc, #512]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d013      	beq.n	8003bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8c:	f7fd fe16 	bl	80017bc <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b94:	f7fd fe12 	bl	80017bc <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b64      	cmp	r3, #100	; 0x64
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e1fb      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba6:	4b76      	ldr	r3, [pc, #472]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0xc0>
 8003bb2:	e014      	b.n	8003bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fd fe02 	bl	80017bc <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7fd fdfe 	bl	80017bc <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e1e7      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bce:	4b6c      	ldr	r3, [pc, #432]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0xe8>
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d063      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bea:	4b65      	ldr	r3, [pc, #404]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00b      	beq.n	8003c0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bf6:	4b62      	ldr	r3, [pc, #392]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d11c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c02:	4b5f      	ldr	r3, [pc, #380]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d116      	bne.n	8003c3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0e:	4b5c      	ldr	r3, [pc, #368]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_RCC_OscConfig+0x152>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d001      	beq.n	8003c26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e1bb      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c26:	4b56      	ldr	r3, [pc, #344]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4952      	ldr	r1, [pc, #328]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3a:	e03a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d020      	beq.n	8003c86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c44:	4b4f      	ldr	r3, [pc, #316]	; (8003d84 <HAL_RCC_OscConfig+0x2b0>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4a:	f7fd fdb7 	bl	80017bc <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c52:	f7fd fdb3 	bl	80017bc <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e19c      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c64:	4b46      	ldr	r3, [pc, #280]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c70:	4b43      	ldr	r3, [pc, #268]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4940      	ldr	r1, [pc, #256]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]
 8003c84:	e015      	b.n	8003cb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c86:	4b3f      	ldr	r3, [pc, #252]	; (8003d84 <HAL_RCC_OscConfig+0x2b0>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fd fd96 	bl	80017bc <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c94:	f7fd fd92 	bl	80017bc <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e17b      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca6:	4b36      	ldr	r3, [pc, #216]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d030      	beq.n	8003d20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d016      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc6:	4b30      	ldr	r3, [pc, #192]	; (8003d88 <HAL_RCC_OscConfig+0x2b4>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ccc:	f7fd fd76 	bl	80017bc <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cd4:	f7fd fd72 	bl	80017bc <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e15b      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce6:	4b26      	ldr	r3, [pc, #152]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x200>
 8003cf2:	e015      	b.n	8003d20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf4:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <HAL_RCC_OscConfig+0x2b4>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfa:	f7fd fd5f 	bl	80017bc <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d02:	f7fd fd5b 	bl	80017bc <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e144      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d14:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f0      	bne.n	8003d02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80a0 	beq.w	8003e6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d32:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10f      	bne.n	8003d5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	4a0e      	ldr	r2, [pc, #56]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4e:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_RCC_OscConfig+0x2b8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d121      	bne.n	8003dae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <HAL_RCC_OscConfig+0x2b8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <HAL_RCC_OscConfig+0x2b8>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d76:	f7fd fd21 	bl	80017bc <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	e011      	b.n	8003da2 <HAL_RCC_OscConfig+0x2ce>
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800
 8003d84:	42470000 	.word	0x42470000
 8003d88:	42470e80 	.word	0x42470e80
 8003d8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d90:	f7fd fd14 	bl	80017bc <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e0fd      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da2:	4b81      	ldr	r3, [pc, #516]	; (8003fa8 <HAL_RCC_OscConfig+0x4d4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d106      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x2f0>
 8003db6:	4b7d      	ldr	r3, [pc, #500]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	4a7c      	ldr	r2, [pc, #496]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc2:	e01c      	b.n	8003dfe <HAL_RCC_OscConfig+0x32a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	d10c      	bne.n	8003de6 <HAL_RCC_OscConfig+0x312>
 8003dcc:	4b77      	ldr	r3, [pc, #476]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	4a76      	ldr	r2, [pc, #472]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003dd2:	f043 0304 	orr.w	r3, r3, #4
 8003dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd8:	4b74      	ldr	r3, [pc, #464]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	4a73      	ldr	r2, [pc, #460]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6713      	str	r3, [r2, #112]	; 0x70
 8003de4:	e00b      	b.n	8003dfe <HAL_RCC_OscConfig+0x32a>
 8003de6:	4b71      	ldr	r3, [pc, #452]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	4a70      	ldr	r2, [pc, #448]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	6713      	str	r3, [r2, #112]	; 0x70
 8003df2:	4b6e      	ldr	r3, [pc, #440]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	4a6d      	ldr	r2, [pc, #436]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003df8:	f023 0304 	bic.w	r3, r3, #4
 8003dfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d015      	beq.n	8003e32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e06:	f7fd fcd9 	bl	80017bc <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0c:	e00a      	b.n	8003e24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e0e:	f7fd fcd5 	bl	80017bc <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e0bc      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e24:	4b61      	ldr	r3, [pc, #388]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ee      	beq.n	8003e0e <HAL_RCC_OscConfig+0x33a>
 8003e30:	e014      	b.n	8003e5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e32:	f7fd fcc3 	bl	80017bc <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e3a:	f7fd fcbf 	bl	80017bc <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e0a6      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e50:	4b56      	ldr	r3, [pc, #344]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ee      	bne.n	8003e3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d105      	bne.n	8003e6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e62:	4b52      	ldr	r3, [pc, #328]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4a51      	ldr	r2, [pc, #324]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 8092 	beq.w	8003f9c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e78:	4b4c      	ldr	r3, [pc, #304]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 030c 	and.w	r3, r3, #12
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d05c      	beq.n	8003f3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d141      	bne.n	8003f10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8c:	4b48      	ldr	r3, [pc, #288]	; (8003fb0 <HAL_RCC_OscConfig+0x4dc>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e92:	f7fd fc93 	bl	80017bc <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9a:	f7fd fc8f 	bl	80017bc <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e078      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eac:	4b3f      	ldr	r3, [pc, #252]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f0      	bne.n	8003e9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	019b      	lsls	r3, r3, #6
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ece:	085b      	lsrs	r3, r3, #1
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	041b      	lsls	r3, r3, #16
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	061b      	lsls	r3, r3, #24
 8003edc:	4933      	ldr	r1, [pc, #204]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee2:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <HAL_RCC_OscConfig+0x4dc>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7fd fc68 	bl	80017bc <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef0:	f7fd fc64 	bl	80017bc <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e04d      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f02:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x41c>
 8003f0e:	e045      	b.n	8003f9c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f10:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <HAL_RCC_OscConfig+0x4dc>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f16:	f7fd fc51 	bl	80017bc <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1e:	f7fd fc4d 	bl	80017bc <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e036      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f30:	4b1e      	ldr	r3, [pc, #120]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f0      	bne.n	8003f1e <HAL_RCC_OscConfig+0x44a>
 8003f3c:	e02e      	b.n	8003f9c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e029      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f4a:	4b18      	ldr	r3, [pc, #96]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d11c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d115      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f72:	4013      	ands	r3, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d10d      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d106      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40007000 	.word	0x40007000
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	42470060 	.word	0x42470060

08003fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0cc      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b68      	ldr	r3, [pc, #416]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d90c      	bls.n	8003ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b65      	ldr	r3, [pc, #404]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b63      	ldr	r3, [pc, #396]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0b8      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d020      	beq.n	800403e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004008:	4b59      	ldr	r3, [pc, #356]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4a58      	ldr	r2, [pc, #352]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004020:	4b53      	ldr	r3, [pc, #332]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4a52      	ldr	r2, [pc, #328]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800402a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800402c:	4b50      	ldr	r3, [pc, #320]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	494d      	ldr	r1, [pc, #308]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d044      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b47      	ldr	r3, [pc, #284]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d119      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e07f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d003      	beq.n	8004072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800406e:	2b03      	cmp	r3, #3
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	4b3f      	ldr	r3, [pc, #252]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e06f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004082:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e067      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004092:	4b37      	ldr	r3, [pc, #220]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f023 0203 	bic.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4934      	ldr	r1, [pc, #208]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a4:	f7fd fb8a 	bl	80017bc <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ac:	f7fd fb86 	bl	80017bc <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e04f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	4b2b      	ldr	r3, [pc, #172]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 020c 	and.w	r2, r3, #12
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d1eb      	bne.n	80040ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d20c      	bcs.n	80040fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b22      	ldr	r3, [pc, #136]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b20      	ldr	r3, [pc, #128]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e032      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004108:	4b19      	ldr	r3, [pc, #100]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4916      	ldr	r1, [pc, #88]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	490e      	ldr	r1, [pc, #56]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800413a:	f000 f821 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 800413e:	4601      	mov	r1, r0
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	4a0a      	ldr	r2, [pc, #40]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 800414c:	5cd3      	ldrb	r3, [r2, r3]
 800414e:	fa21 f303 	lsr.w	r3, r1, r3
 8004152:	4a09      	ldr	r2, [pc, #36]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fd faea 	bl	8001734 <HAL_InitTick>

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023c00 	.word	0x40023c00
 8004170:	40023800 	.word	0x40023800
 8004174:	08009644 	.word	0x08009644
 8004178:	20000000 	.word	0x20000000
 800417c:	20000004 	.word	0x20000004

08004180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	607b      	str	r3, [r7, #4]
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	2300      	movs	r3, #0
 8004190:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004196:	4b50      	ldr	r3, [pc, #320]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d007      	beq.n	80041b2 <HAL_RCC_GetSysClockFreq+0x32>
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d008      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x38>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 808d 	bne.w	80042c6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041ac:	4b4b      	ldr	r3, [pc, #300]	; (80042dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80041ae:	60bb      	str	r3, [r7, #8]
       break;
 80041b0:	e08c      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041b2:	4b4b      	ldr	r3, [pc, #300]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80041b4:	60bb      	str	r3, [r7, #8]
      break;
 80041b6:	e089      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b8:	4b47      	ldr	r3, [pc, #284]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041c2:	4b45      	ldr	r3, [pc, #276]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d023      	beq.n	8004216 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ce:	4b42      	ldr	r3, [pc, #264]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	099b      	lsrs	r3, r3, #6
 80041d4:	f04f 0400 	mov.w	r4, #0
 80041d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	ea03 0501 	and.w	r5, r3, r1
 80041e4:	ea04 0602 	and.w	r6, r4, r2
 80041e8:	4a3d      	ldr	r2, [pc, #244]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80041ea:	fb02 f106 	mul.w	r1, r2, r6
 80041ee:	2200      	movs	r2, #0
 80041f0:	fb02 f205 	mul.w	r2, r2, r5
 80041f4:	440a      	add	r2, r1
 80041f6:	493a      	ldr	r1, [pc, #232]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80041f8:	fba5 0101 	umull	r0, r1, r5, r1
 80041fc:	1853      	adds	r3, r2, r1
 80041fe:	4619      	mov	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f04f 0400 	mov.w	r4, #0
 8004206:	461a      	mov	r2, r3
 8004208:	4623      	mov	r3, r4
 800420a:	f7fc fc4f 	bl	8000aac <__aeabi_uldivmod>
 800420e:	4603      	mov	r3, r0
 8004210:	460c      	mov	r4, r1
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	e049      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004216:	4b30      	ldr	r3, [pc, #192]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	099b      	lsrs	r3, r3, #6
 800421c:	f04f 0400 	mov.w	r4, #0
 8004220:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	ea03 0501 	and.w	r5, r3, r1
 800422c:	ea04 0602 	and.w	r6, r4, r2
 8004230:	4629      	mov	r1, r5
 8004232:	4632      	mov	r2, r6
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	f04f 0400 	mov.w	r4, #0
 800423c:	0154      	lsls	r4, r2, #5
 800423e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004242:	014b      	lsls	r3, r1, #5
 8004244:	4619      	mov	r1, r3
 8004246:	4622      	mov	r2, r4
 8004248:	1b49      	subs	r1, r1, r5
 800424a:	eb62 0206 	sbc.w	r2, r2, r6
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	f04f 0400 	mov.w	r4, #0
 8004256:	0194      	lsls	r4, r2, #6
 8004258:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800425c:	018b      	lsls	r3, r1, #6
 800425e:	1a5b      	subs	r3, r3, r1
 8004260:	eb64 0402 	sbc.w	r4, r4, r2
 8004264:	f04f 0100 	mov.w	r1, #0
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	00e2      	lsls	r2, r4, #3
 800426e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004272:	00d9      	lsls	r1, r3, #3
 8004274:	460b      	mov	r3, r1
 8004276:	4614      	mov	r4, r2
 8004278:	195b      	adds	r3, r3, r5
 800427a:	eb44 0406 	adc.w	r4, r4, r6
 800427e:	f04f 0100 	mov.w	r1, #0
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	02a2      	lsls	r2, r4, #10
 8004288:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800428c:	0299      	lsls	r1, r3, #10
 800428e:	460b      	mov	r3, r1
 8004290:	4614      	mov	r4, r2
 8004292:	4618      	mov	r0, r3
 8004294:	4621      	mov	r1, r4
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f04f 0400 	mov.w	r4, #0
 800429c:	461a      	mov	r2, r3
 800429e:	4623      	mov	r3, r4
 80042a0:	f7fc fc04 	bl	8000aac <__aeabi_uldivmod>
 80042a4:	4603      	mov	r3, r0
 80042a6:	460c      	mov	r4, r1
 80042a8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	0c1b      	lsrs	r3, r3, #16
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	3301      	adds	r3, #1
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c2:	60bb      	str	r3, [r7, #8]
      break;
 80042c4:	e002      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042c6:	4b05      	ldr	r3, [pc, #20]	; (80042dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80042c8:	60bb      	str	r3, [r7, #8]
      break;
 80042ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042cc:	68bb      	ldr	r3, [r7, #8]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800
 80042dc:	00f42400 	.word	0x00f42400
 80042e0:	017d7840 	.word	0x017d7840

080042e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e8:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ea:	681b      	ldr	r3, [r3, #0]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20000000 	.word	0x20000000

080042fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004300:	f7ff fff0 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8004304:	4601      	mov	r1, r0
 8004306:	4b05      	ldr	r3, [pc, #20]	; (800431c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	0a9b      	lsrs	r3, r3, #10
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	4a03      	ldr	r2, [pc, #12]	; (8004320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004312:	5cd3      	ldrb	r3, [r2, r3]
 8004314:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40023800 	.word	0x40023800
 8004320:	08009654 	.word	0x08009654

08004324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004328:	f7ff ffdc 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 800432c:	4601      	mov	r1, r0
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0b5b      	lsrs	r3, r3, #13
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4a03      	ldr	r2, [pc, #12]	; (8004348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800433a:	5cd3      	ldrb	r3, [r2, r3]
 800433c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004340:	4618      	mov	r0, r3
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40023800 	.word	0x40023800
 8004348:	08009654 	.word	0x08009654

0800434c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e01d      	b.n	800439a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fd f882 	bl	800147c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4610      	mov	r0, r2
 800438c:	f000 f95e 	bl	800464c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0201 	orr.w	r2, r2, #1
 80043b8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2b06      	cmp	r3, #6
 80043ca:	d007      	beq.n	80043dc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d122      	bne.n	8004446 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d11b      	bne.n	8004446 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f06f 0202 	mvn.w	r2, #2
 8004416:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f8ee 	bl	800460e <HAL_TIM_IC_CaptureCallback>
 8004432:	e005      	b.n	8004440 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f8e0 	bl	80045fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f8f1 	bl	8004622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b04      	cmp	r3, #4
 8004452:	d122      	bne.n	800449a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b04      	cmp	r3, #4
 8004460:	d11b      	bne.n	800449a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f06f 0204 	mvn.w	r2, #4
 800446a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f8c4 	bl	800460e <HAL_TIM_IC_CaptureCallback>
 8004486:	e005      	b.n	8004494 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f8b6 	bl	80045fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f8c7 	bl	8004622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d122      	bne.n	80044ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d11b      	bne.n	80044ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f06f 0208 	mvn.w	r2, #8
 80044be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2204      	movs	r2, #4
 80044c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f89a 	bl	800460e <HAL_TIM_IC_CaptureCallback>
 80044da:	e005      	b.n	80044e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f88c 	bl	80045fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f89d 	bl	8004622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b10      	cmp	r3, #16
 80044fa:	d122      	bne.n	8004542 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b10      	cmp	r3, #16
 8004508:	d11b      	bne.n	8004542 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f06f 0210 	mvn.w	r2, #16
 8004512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2208      	movs	r2, #8
 8004518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f870 	bl	800460e <HAL_TIM_IC_CaptureCallback>
 800452e:	e005      	b.n	800453c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f862 	bl	80045fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f873 	bl	8004622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b01      	cmp	r3, #1
 800454e:	d10e      	bne.n	800456e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d107      	bne.n	800456e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f06f 0201 	mvn.w	r2, #1
 8004566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fc fce3 	bl	8000f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004578:	2b80      	cmp	r3, #128	; 0x80
 800457a:	d10e      	bne.n	800459a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	2b80      	cmp	r3, #128	; 0x80
 8004588:	d107      	bne.n	800459a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f903 	bl	80047a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b40      	cmp	r3, #64	; 0x40
 80045a6:	d10e      	bne.n	80045c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b2:	2b40      	cmp	r3, #64	; 0x40
 80045b4:	d107      	bne.n	80045c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f838 	bl	8004636 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d10e      	bne.n	80045f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d107      	bne.n	80045f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f06f 0220 	mvn.w	r2, #32
 80045ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f8cd 	bl	800478c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a40      	ldr	r2, [pc, #256]	; (8004760 <TIM_Base_SetConfig+0x114>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d013      	beq.n	800468c <TIM_Base_SetConfig+0x40>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466a:	d00f      	beq.n	800468c <TIM_Base_SetConfig+0x40>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a3d      	ldr	r2, [pc, #244]	; (8004764 <TIM_Base_SetConfig+0x118>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00b      	beq.n	800468c <TIM_Base_SetConfig+0x40>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a3c      	ldr	r2, [pc, #240]	; (8004768 <TIM_Base_SetConfig+0x11c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d007      	beq.n	800468c <TIM_Base_SetConfig+0x40>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a3b      	ldr	r2, [pc, #236]	; (800476c <TIM_Base_SetConfig+0x120>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_Base_SetConfig+0x40>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a3a      	ldr	r2, [pc, #232]	; (8004770 <TIM_Base_SetConfig+0x124>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d108      	bne.n	800469e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a2f      	ldr	r2, [pc, #188]	; (8004760 <TIM_Base_SetConfig+0x114>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d02b      	beq.n	80046fe <TIM_Base_SetConfig+0xb2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ac:	d027      	beq.n	80046fe <TIM_Base_SetConfig+0xb2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a2c      	ldr	r2, [pc, #176]	; (8004764 <TIM_Base_SetConfig+0x118>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d023      	beq.n	80046fe <TIM_Base_SetConfig+0xb2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a2b      	ldr	r2, [pc, #172]	; (8004768 <TIM_Base_SetConfig+0x11c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d01f      	beq.n	80046fe <TIM_Base_SetConfig+0xb2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a2a      	ldr	r2, [pc, #168]	; (800476c <TIM_Base_SetConfig+0x120>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01b      	beq.n	80046fe <TIM_Base_SetConfig+0xb2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a29      	ldr	r2, [pc, #164]	; (8004770 <TIM_Base_SetConfig+0x124>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d017      	beq.n	80046fe <TIM_Base_SetConfig+0xb2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a28      	ldr	r2, [pc, #160]	; (8004774 <TIM_Base_SetConfig+0x128>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d013      	beq.n	80046fe <TIM_Base_SetConfig+0xb2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a27      	ldr	r2, [pc, #156]	; (8004778 <TIM_Base_SetConfig+0x12c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00f      	beq.n	80046fe <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a26      	ldr	r2, [pc, #152]	; (800477c <TIM_Base_SetConfig+0x130>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00b      	beq.n	80046fe <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a25      	ldr	r2, [pc, #148]	; (8004780 <TIM_Base_SetConfig+0x134>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d007      	beq.n	80046fe <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a24      	ldr	r2, [pc, #144]	; (8004784 <TIM_Base_SetConfig+0x138>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d003      	beq.n	80046fe <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a23      	ldr	r2, [pc, #140]	; (8004788 <TIM_Base_SetConfig+0x13c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d108      	bne.n	8004710 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4313      	orrs	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <TIM_Base_SetConfig+0x114>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d003      	beq.n	8004744 <TIM_Base_SetConfig+0xf8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a0c      	ldr	r2, [pc, #48]	; (8004770 <TIM_Base_SetConfig+0x124>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d103      	bne.n	800474c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	615a      	str	r2, [r3, #20]
}
 8004752:	bf00      	nop
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40010000 	.word	0x40010000
 8004764:	40000400 	.word	0x40000400
 8004768:	40000800 	.word	0x40000800
 800476c:	40000c00 	.word	0x40000c00
 8004770:	40010400 	.word	0x40010400
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400
 800477c:	40014800 	.word	0x40014800
 8004780:	40001800 	.word	0x40001800
 8004784:	40001c00 	.word	0x40001c00
 8004788:	40002000 	.word	0x40002000

0800478c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e03f      	b.n	8004846 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fc fe76 	bl	80014cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2224      	movs	r2, #36	; 0x24
 80047e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fb4b 	bl	8004e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800480c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800481c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800482c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b088      	sub	sp, #32
 8004852:	af02      	add	r7, sp, #8
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	603b      	str	r3, [r7, #0]
 800485a:	4613      	mov	r3, r2
 800485c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b20      	cmp	r3, #32
 800486c:	f040 8083 	bne.w	8004976 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_UART_Transmit+0x2e>
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e07b      	b.n	8004978 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_UART_Transmit+0x40>
 800488a:	2302      	movs	r3, #2
 800488c:	e074      	b.n	8004978 <HAL_UART_Transmit+0x12a>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2221      	movs	r2, #33	; 0x21
 80048a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80048a4:	f7fc ff8a 	bl	80017bc <HAL_GetTick>
 80048a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	88fa      	ldrh	r2, [r7, #6]
 80048ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	88fa      	ldrh	r2, [r7, #6]
 80048b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80048be:	e042      	b.n	8004946 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d6:	d122      	bne.n	800491e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2200      	movs	r2, #0
 80048e0:	2180      	movs	r1, #128	; 0x80
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f96a 	bl	8004bbc <UART_WaitOnFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e042      	b.n	8004978 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004904:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	3302      	adds	r3, #2
 8004912:	60bb      	str	r3, [r7, #8]
 8004914:	e017      	b.n	8004946 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	3301      	adds	r3, #1
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	e013      	b.n	8004946 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2200      	movs	r2, #0
 8004926:	2180      	movs	r1, #128	; 0x80
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f947 	bl	8004bbc <UART_WaitOnFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e01f      	b.n	8004978 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	60ba      	str	r2, [r7, #8]
 800493e:	781a      	ldrb	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1b7      	bne.n	80048c0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2200      	movs	r2, #0
 8004958:	2140      	movs	r1, #64	; 0x40
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f92e 	bl	8004bbc <UART_WaitOnFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e006      	b.n	8004978 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	e000      	b.n	8004978 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004976:	2302      	movs	r3, #2
  }
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10d      	bne.n	80049d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_UART_IRQHandler+0x52>
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f9e0 	bl	8004d90 <UART_Receive_IT>
      return;
 80049d0:	e0d1      	b.n	8004b76 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 80b0 	beq.w	8004b3a <HAL_UART_IRQHandler+0x1ba>
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <HAL_UART_IRQHandler+0x70>
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 80a5 	beq.w	8004b3a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <HAL_UART_IRQHandler+0x90>
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	f043 0201 	orr.w	r2, r3, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <HAL_UART_IRQHandler+0xb0>
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a28:	f043 0202 	orr.w	r2, r3, #2
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_UART_IRQHandler+0xd0>
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a48:	f043 0204 	orr.w	r2, r3, #4
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00f      	beq.n	8004a7a <HAL_UART_IRQHandler+0xfa>
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	f003 0320 	and.w	r3, r3, #32
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <HAL_UART_IRQHandler+0xee>
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a72:	f043 0208 	orr.w	r2, r3, #8
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d078      	beq.n	8004b74 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <HAL_UART_IRQHandler+0x11c>
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f97a 	bl	8004d90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa6:	2b40      	cmp	r3, #64	; 0x40
 8004aa8:	bf0c      	ite	eq
 8004aaa:	2301      	moveq	r3, #1
 8004aac:	2300      	movne	r3, #0
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d102      	bne.n	8004ac4 <HAL_UART_IRQHandler+0x144>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d031      	beq.n	8004b28 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f8c3 	bl	8004c50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b40      	cmp	r3, #64	; 0x40
 8004ad6:	d123      	bne.n	8004b20 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695a      	ldr	r2, [r3, #20]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d013      	beq.n	8004b18 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af4:	4a21      	ldr	r2, [pc, #132]	; (8004b7c <HAL_UART_IRQHandler+0x1fc>)
 8004af6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fd fb56 	bl	80021ae <HAL_DMA_Abort_IT>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d016      	beq.n	8004b36 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b12:	4610      	mov	r0, r2
 8004b14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b16:	e00e      	b.n	8004b36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f845 	bl	8004ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1e:	e00a      	b.n	8004b36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f841 	bl	8004ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b26:	e006      	b.n	8004b36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f83d 	bl	8004ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004b34:	e01e      	b.n	8004b74 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b36:	bf00      	nop
    return;
 8004b38:	e01c      	b.n	8004b74 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <HAL_UART_IRQHandler+0x1d6>
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f8b0 	bl	8004cb4 <UART_Transmit_IT>
    return;
 8004b54:	e00f      	b.n	8004b76 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1f6>
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f8f8 	bl	8004d60 <UART_EndTransmit_IT>
    return;
 8004b70:	bf00      	nop
 8004b72:	e000      	b.n	8004b76 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004b74:	bf00      	nop
  }
}
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	08004c8d 	.word	0x08004c8d

08004b80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bcc:	e02c      	b.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d028      	beq.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <UART_WaitOnFlagUntilTimeout+0x30>
 8004bdc:	f7fc fdee 	bl	80017bc <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d21d      	bcs.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bfa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695a      	ldr	r2, [r3, #20]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e00f      	b.n	8004c48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	4013      	ands	r3, r2
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	bf0c      	ite	eq
 8004c38:	2301      	moveq	r3, #1
 8004c3a:	2300      	movne	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	461a      	mov	r2, r3
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d0c3      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695a      	ldr	r2, [r3, #20]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0201 	bic.w	r2, r2, #1
 8004c76:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7ff ff7e 	bl	8004ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b21      	cmp	r3, #33	; 0x21
 8004cc6:	d144      	bne.n	8004d52 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd0:	d11a      	bne.n	8004d08 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ce6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d105      	bne.n	8004cfc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	1c9a      	adds	r2, r3, #2
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	621a      	str	r2, [r3, #32]
 8004cfa:	e00e      	b.n	8004d1a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	621a      	str	r2, [r3, #32]
 8004d06:	e008      	b.n	8004d1a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	1c59      	adds	r1, r3, #1
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6211      	str	r1, [r2, #32]
 8004d12:	781a      	ldrb	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	4619      	mov	r1, r3
 8004d28:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10f      	bne.n	8004d4e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e000      	b.n	8004d54 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004d52:	2302      	movs	r3, #2
  }
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff fefd 	bl	8004b80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b22      	cmp	r3, #34	; 0x22
 8004da2:	d171      	bne.n	8004e88 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dac:	d123      	bne.n	8004df6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10e      	bne.n	8004dda <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	1c9a      	adds	r2, r3, #2
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	629a      	str	r2, [r3, #40]	; 0x28
 8004dd8:	e029      	b.n	8004e2e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28
 8004df4:	e01b      	b.n	8004e2e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6858      	ldr	r0, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	1c59      	adds	r1, r3, #1
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6291      	str	r1, [r2, #40]	; 0x28
 8004e0e:	b2c2      	uxtb	r2, r0
 8004e10:	701a      	strb	r2, [r3, #0]
 8004e12:	e00c      	b.n	8004e2e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	1c58      	adds	r0, r3, #1
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	6288      	str	r0, [r1, #40]	; 0x28
 8004e26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d120      	bne.n	8004e84 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0220 	bic.w	r2, r2, #32
 8004e50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695a      	ldr	r2, [r3, #20]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0201 	bic.w	r2, r2, #1
 8004e70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff fe8a 	bl	8004b94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	e002      	b.n	8004e8a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e000      	b.n	8004e8a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004e88:	2302      	movs	r3, #2
  }
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e98:	b085      	sub	sp, #20
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ed6:	f023 030c 	bic.w	r3, r3, #12
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	68f9      	ldr	r1, [r7, #12]
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f02:	f040 818b 	bne.w	800521c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4ac1      	ldr	r2, [pc, #772]	; (8005210 <UART_SetConfig+0x37c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d005      	beq.n	8004f1c <UART_SetConfig+0x88>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4abf      	ldr	r2, [pc, #764]	; (8005214 <UART_SetConfig+0x380>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	f040 80bd 	bne.w	8005096 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f1c:	f7ff fa02 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 8004f20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	461d      	mov	r5, r3
 8004f26:	f04f 0600 	mov.w	r6, #0
 8004f2a:	46a8      	mov	r8, r5
 8004f2c:	46b1      	mov	r9, r6
 8004f2e:	eb18 0308 	adds.w	r3, r8, r8
 8004f32:	eb49 0409 	adc.w	r4, r9, r9
 8004f36:	4698      	mov	r8, r3
 8004f38:	46a1      	mov	r9, r4
 8004f3a:	eb18 0805 	adds.w	r8, r8, r5
 8004f3e:	eb49 0906 	adc.w	r9, r9, r6
 8004f42:	f04f 0100 	mov.w	r1, #0
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f56:	4688      	mov	r8, r1
 8004f58:	4691      	mov	r9, r2
 8004f5a:	eb18 0005 	adds.w	r0, r8, r5
 8004f5e:	eb49 0106 	adc.w	r1, r9, r6
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	461d      	mov	r5, r3
 8004f68:	f04f 0600 	mov.w	r6, #0
 8004f6c:	196b      	adds	r3, r5, r5
 8004f6e:	eb46 0406 	adc.w	r4, r6, r6
 8004f72:	461a      	mov	r2, r3
 8004f74:	4623      	mov	r3, r4
 8004f76:	f7fb fd99 	bl	8000aac <__aeabi_uldivmod>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	460c      	mov	r4, r1
 8004f7e:	461a      	mov	r2, r3
 8004f80:	4ba5      	ldr	r3, [pc, #660]	; (8005218 <UART_SetConfig+0x384>)
 8004f82:	fba3 2302 	umull	r2, r3, r3, r2
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	461d      	mov	r5, r3
 8004f90:	f04f 0600 	mov.w	r6, #0
 8004f94:	46a9      	mov	r9, r5
 8004f96:	46b2      	mov	sl, r6
 8004f98:	eb19 0309 	adds.w	r3, r9, r9
 8004f9c:	eb4a 040a 	adc.w	r4, sl, sl
 8004fa0:	4699      	mov	r9, r3
 8004fa2:	46a2      	mov	sl, r4
 8004fa4:	eb19 0905 	adds.w	r9, r9, r5
 8004fa8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fc0:	4689      	mov	r9, r1
 8004fc2:	4692      	mov	sl, r2
 8004fc4:	eb19 0005 	adds.w	r0, r9, r5
 8004fc8:	eb4a 0106 	adc.w	r1, sl, r6
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	461d      	mov	r5, r3
 8004fd2:	f04f 0600 	mov.w	r6, #0
 8004fd6:	196b      	adds	r3, r5, r5
 8004fd8:	eb46 0406 	adc.w	r4, r6, r6
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4623      	mov	r3, r4
 8004fe0:	f7fb fd64 	bl	8000aac <__aeabi_uldivmod>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4b8b      	ldr	r3, [pc, #556]	; (8005218 <UART_SetConfig+0x384>)
 8004fec:	fba3 1302 	umull	r1, r3, r3, r2
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	2164      	movs	r1, #100	; 0x64
 8004ff4:	fb01 f303 	mul.w	r3, r1, r3
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	3332      	adds	r3, #50	; 0x32
 8004ffe:	4a86      	ldr	r2, [pc, #536]	; (8005218 <UART_SetConfig+0x384>)
 8005000:	fba2 2303 	umull	r2, r3, r2, r3
 8005004:	095b      	lsrs	r3, r3, #5
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800500c:	4498      	add	r8, r3
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	461d      	mov	r5, r3
 8005012:	f04f 0600 	mov.w	r6, #0
 8005016:	46a9      	mov	r9, r5
 8005018:	46b2      	mov	sl, r6
 800501a:	eb19 0309 	adds.w	r3, r9, r9
 800501e:	eb4a 040a 	adc.w	r4, sl, sl
 8005022:	4699      	mov	r9, r3
 8005024:	46a2      	mov	sl, r4
 8005026:	eb19 0905 	adds.w	r9, r9, r5
 800502a:	eb4a 0a06 	adc.w	sl, sl, r6
 800502e:	f04f 0100 	mov.w	r1, #0
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800503a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800503e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005042:	4689      	mov	r9, r1
 8005044:	4692      	mov	sl, r2
 8005046:	eb19 0005 	adds.w	r0, r9, r5
 800504a:	eb4a 0106 	adc.w	r1, sl, r6
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	461d      	mov	r5, r3
 8005054:	f04f 0600 	mov.w	r6, #0
 8005058:	196b      	adds	r3, r5, r5
 800505a:	eb46 0406 	adc.w	r4, r6, r6
 800505e:	461a      	mov	r2, r3
 8005060:	4623      	mov	r3, r4
 8005062:	f7fb fd23 	bl	8000aac <__aeabi_uldivmod>
 8005066:	4603      	mov	r3, r0
 8005068:	460c      	mov	r4, r1
 800506a:	461a      	mov	r2, r3
 800506c:	4b6a      	ldr	r3, [pc, #424]	; (8005218 <UART_SetConfig+0x384>)
 800506e:	fba3 1302 	umull	r1, r3, r3, r2
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	2164      	movs	r1, #100	; 0x64
 8005076:	fb01 f303 	mul.w	r3, r1, r3
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	3332      	adds	r3, #50	; 0x32
 8005080:	4a65      	ldr	r2, [pc, #404]	; (8005218 <UART_SetConfig+0x384>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	f003 0207 	and.w	r2, r3, #7
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4442      	add	r2, r8
 8005092:	609a      	str	r2, [r3, #8]
 8005094:	e26f      	b.n	8005576 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005096:	f7ff f931 	bl	80042fc <HAL_RCC_GetPCLK1Freq>
 800509a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	461d      	mov	r5, r3
 80050a0:	f04f 0600 	mov.w	r6, #0
 80050a4:	46a8      	mov	r8, r5
 80050a6:	46b1      	mov	r9, r6
 80050a8:	eb18 0308 	adds.w	r3, r8, r8
 80050ac:	eb49 0409 	adc.w	r4, r9, r9
 80050b0:	4698      	mov	r8, r3
 80050b2:	46a1      	mov	r9, r4
 80050b4:	eb18 0805 	adds.w	r8, r8, r5
 80050b8:	eb49 0906 	adc.w	r9, r9, r6
 80050bc:	f04f 0100 	mov.w	r1, #0
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80050c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050d0:	4688      	mov	r8, r1
 80050d2:	4691      	mov	r9, r2
 80050d4:	eb18 0005 	adds.w	r0, r8, r5
 80050d8:	eb49 0106 	adc.w	r1, r9, r6
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	461d      	mov	r5, r3
 80050e2:	f04f 0600 	mov.w	r6, #0
 80050e6:	196b      	adds	r3, r5, r5
 80050e8:	eb46 0406 	adc.w	r4, r6, r6
 80050ec:	461a      	mov	r2, r3
 80050ee:	4623      	mov	r3, r4
 80050f0:	f7fb fcdc 	bl	8000aac <__aeabi_uldivmod>
 80050f4:	4603      	mov	r3, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	461a      	mov	r2, r3
 80050fa:	4b47      	ldr	r3, [pc, #284]	; (8005218 <UART_SetConfig+0x384>)
 80050fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	461d      	mov	r5, r3
 800510a:	f04f 0600 	mov.w	r6, #0
 800510e:	46a9      	mov	r9, r5
 8005110:	46b2      	mov	sl, r6
 8005112:	eb19 0309 	adds.w	r3, r9, r9
 8005116:	eb4a 040a 	adc.w	r4, sl, sl
 800511a:	4699      	mov	r9, r3
 800511c:	46a2      	mov	sl, r4
 800511e:	eb19 0905 	adds.w	r9, r9, r5
 8005122:	eb4a 0a06 	adc.w	sl, sl, r6
 8005126:	f04f 0100 	mov.w	r1, #0
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005132:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005136:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800513a:	4689      	mov	r9, r1
 800513c:	4692      	mov	sl, r2
 800513e:	eb19 0005 	adds.w	r0, r9, r5
 8005142:	eb4a 0106 	adc.w	r1, sl, r6
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	461d      	mov	r5, r3
 800514c:	f04f 0600 	mov.w	r6, #0
 8005150:	196b      	adds	r3, r5, r5
 8005152:	eb46 0406 	adc.w	r4, r6, r6
 8005156:	461a      	mov	r2, r3
 8005158:	4623      	mov	r3, r4
 800515a:	f7fb fca7 	bl	8000aac <__aeabi_uldivmod>
 800515e:	4603      	mov	r3, r0
 8005160:	460c      	mov	r4, r1
 8005162:	461a      	mov	r2, r3
 8005164:	4b2c      	ldr	r3, [pc, #176]	; (8005218 <UART_SetConfig+0x384>)
 8005166:	fba3 1302 	umull	r1, r3, r3, r2
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	2164      	movs	r1, #100	; 0x64
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	3332      	adds	r3, #50	; 0x32
 8005178:	4a27      	ldr	r2, [pc, #156]	; (8005218 <UART_SetConfig+0x384>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005186:	4498      	add	r8, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	461d      	mov	r5, r3
 800518c:	f04f 0600 	mov.w	r6, #0
 8005190:	46a9      	mov	r9, r5
 8005192:	46b2      	mov	sl, r6
 8005194:	eb19 0309 	adds.w	r3, r9, r9
 8005198:	eb4a 040a 	adc.w	r4, sl, sl
 800519c:	4699      	mov	r9, r3
 800519e:	46a2      	mov	sl, r4
 80051a0:	eb19 0905 	adds.w	r9, r9, r5
 80051a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80051a8:	f04f 0100 	mov.w	r1, #0
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051bc:	4689      	mov	r9, r1
 80051be:	4692      	mov	sl, r2
 80051c0:	eb19 0005 	adds.w	r0, r9, r5
 80051c4:	eb4a 0106 	adc.w	r1, sl, r6
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	461d      	mov	r5, r3
 80051ce:	f04f 0600 	mov.w	r6, #0
 80051d2:	196b      	adds	r3, r5, r5
 80051d4:	eb46 0406 	adc.w	r4, r6, r6
 80051d8:	461a      	mov	r2, r3
 80051da:	4623      	mov	r3, r4
 80051dc:	f7fb fc66 	bl	8000aac <__aeabi_uldivmod>
 80051e0:	4603      	mov	r3, r0
 80051e2:	460c      	mov	r4, r1
 80051e4:	461a      	mov	r2, r3
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <UART_SetConfig+0x384>)
 80051e8:	fba3 1302 	umull	r1, r3, r3, r2
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	2164      	movs	r1, #100	; 0x64
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	3332      	adds	r3, #50	; 0x32
 80051fa:	4a07      	ldr	r2, [pc, #28]	; (8005218 <UART_SetConfig+0x384>)
 80051fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	f003 0207 	and.w	r2, r3, #7
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4442      	add	r2, r8
 800520c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800520e:	e1b2      	b.n	8005576 <UART_SetConfig+0x6e2>
 8005210:	40011000 	.word	0x40011000
 8005214:	40011400 	.word	0x40011400
 8005218:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4ad7      	ldr	r2, [pc, #860]	; (8005580 <UART_SetConfig+0x6ec>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d005      	beq.n	8005232 <UART_SetConfig+0x39e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4ad6      	ldr	r2, [pc, #856]	; (8005584 <UART_SetConfig+0x6f0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	f040 80d1 	bne.w	80053d4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005232:	f7ff f877 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 8005236:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	469a      	mov	sl, r3
 800523c:	f04f 0b00 	mov.w	fp, #0
 8005240:	46d0      	mov	r8, sl
 8005242:	46d9      	mov	r9, fp
 8005244:	eb18 0308 	adds.w	r3, r8, r8
 8005248:	eb49 0409 	adc.w	r4, r9, r9
 800524c:	4698      	mov	r8, r3
 800524e:	46a1      	mov	r9, r4
 8005250:	eb18 080a 	adds.w	r8, r8, sl
 8005254:	eb49 090b 	adc.w	r9, r9, fp
 8005258:	f04f 0100 	mov.w	r1, #0
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005264:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005268:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800526c:	4688      	mov	r8, r1
 800526e:	4691      	mov	r9, r2
 8005270:	eb1a 0508 	adds.w	r5, sl, r8
 8005274:	eb4b 0609 	adc.w	r6, fp, r9
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	4619      	mov	r1, r3
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	f04f 0400 	mov.w	r4, #0
 800528a:	0094      	lsls	r4, r2, #2
 800528c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005290:	008b      	lsls	r3, r1, #2
 8005292:	461a      	mov	r2, r3
 8005294:	4623      	mov	r3, r4
 8005296:	4628      	mov	r0, r5
 8005298:	4631      	mov	r1, r6
 800529a:	f7fb fc07 	bl	8000aac <__aeabi_uldivmod>
 800529e:	4603      	mov	r3, r0
 80052a0:	460c      	mov	r4, r1
 80052a2:	461a      	mov	r2, r3
 80052a4:	4bb8      	ldr	r3, [pc, #736]	; (8005588 <UART_SetConfig+0x6f4>)
 80052a6:	fba3 2302 	umull	r2, r3, r3, r2
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	469b      	mov	fp, r3
 80052b4:	f04f 0c00 	mov.w	ip, #0
 80052b8:	46d9      	mov	r9, fp
 80052ba:	46e2      	mov	sl, ip
 80052bc:	eb19 0309 	adds.w	r3, r9, r9
 80052c0:	eb4a 040a 	adc.w	r4, sl, sl
 80052c4:	4699      	mov	r9, r3
 80052c6:	46a2      	mov	sl, r4
 80052c8:	eb19 090b 	adds.w	r9, r9, fp
 80052cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052d0:	f04f 0100 	mov.w	r1, #0
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052e4:	4689      	mov	r9, r1
 80052e6:	4692      	mov	sl, r2
 80052e8:	eb1b 0509 	adds.w	r5, fp, r9
 80052ec:	eb4c 060a 	adc.w	r6, ip, sl
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	4619      	mov	r1, r3
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	f04f 0300 	mov.w	r3, #0
 80052fe:	f04f 0400 	mov.w	r4, #0
 8005302:	0094      	lsls	r4, r2, #2
 8005304:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005308:	008b      	lsls	r3, r1, #2
 800530a:	461a      	mov	r2, r3
 800530c:	4623      	mov	r3, r4
 800530e:	4628      	mov	r0, r5
 8005310:	4631      	mov	r1, r6
 8005312:	f7fb fbcb 	bl	8000aac <__aeabi_uldivmod>
 8005316:	4603      	mov	r3, r0
 8005318:	460c      	mov	r4, r1
 800531a:	461a      	mov	r2, r3
 800531c:	4b9a      	ldr	r3, [pc, #616]	; (8005588 <UART_SetConfig+0x6f4>)
 800531e:	fba3 1302 	umull	r1, r3, r3, r2
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	2164      	movs	r1, #100	; 0x64
 8005326:	fb01 f303 	mul.w	r3, r1, r3
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	3332      	adds	r3, #50	; 0x32
 8005330:	4a95      	ldr	r2, [pc, #596]	; (8005588 <UART_SetConfig+0x6f4>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800533c:	4498      	add	r8, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	469b      	mov	fp, r3
 8005342:	f04f 0c00 	mov.w	ip, #0
 8005346:	46d9      	mov	r9, fp
 8005348:	46e2      	mov	sl, ip
 800534a:	eb19 0309 	adds.w	r3, r9, r9
 800534e:	eb4a 040a 	adc.w	r4, sl, sl
 8005352:	4699      	mov	r9, r3
 8005354:	46a2      	mov	sl, r4
 8005356:	eb19 090b 	adds.w	r9, r9, fp
 800535a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800535e:	f04f 0100 	mov.w	r1, #0
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800536a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800536e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005372:	4689      	mov	r9, r1
 8005374:	4692      	mov	sl, r2
 8005376:	eb1b 0509 	adds.w	r5, fp, r9
 800537a:	eb4c 060a 	adc.w	r6, ip, sl
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	4619      	mov	r1, r3
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	f04f 0400 	mov.w	r4, #0
 8005390:	0094      	lsls	r4, r2, #2
 8005392:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005396:	008b      	lsls	r3, r1, #2
 8005398:	461a      	mov	r2, r3
 800539a:	4623      	mov	r3, r4
 800539c:	4628      	mov	r0, r5
 800539e:	4631      	mov	r1, r6
 80053a0:	f7fb fb84 	bl	8000aac <__aeabi_uldivmod>
 80053a4:	4603      	mov	r3, r0
 80053a6:	460c      	mov	r4, r1
 80053a8:	461a      	mov	r2, r3
 80053aa:	4b77      	ldr	r3, [pc, #476]	; (8005588 <UART_SetConfig+0x6f4>)
 80053ac:	fba3 1302 	umull	r1, r3, r3, r2
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	2164      	movs	r1, #100	; 0x64
 80053b4:	fb01 f303 	mul.w	r3, r1, r3
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	3332      	adds	r3, #50	; 0x32
 80053be:	4a72      	ldr	r2, [pc, #456]	; (8005588 <UART_SetConfig+0x6f4>)
 80053c0:	fba2 2303 	umull	r2, r3, r2, r3
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	f003 020f 	and.w	r2, r3, #15
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4442      	add	r2, r8
 80053d0:	609a      	str	r2, [r3, #8]
 80053d2:	e0d0      	b.n	8005576 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80053d4:	f7fe ff92 	bl	80042fc <HAL_RCC_GetPCLK1Freq>
 80053d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	469a      	mov	sl, r3
 80053de:	f04f 0b00 	mov.w	fp, #0
 80053e2:	46d0      	mov	r8, sl
 80053e4:	46d9      	mov	r9, fp
 80053e6:	eb18 0308 	adds.w	r3, r8, r8
 80053ea:	eb49 0409 	adc.w	r4, r9, r9
 80053ee:	4698      	mov	r8, r3
 80053f0:	46a1      	mov	r9, r4
 80053f2:	eb18 080a 	adds.w	r8, r8, sl
 80053f6:	eb49 090b 	adc.w	r9, r9, fp
 80053fa:	f04f 0100 	mov.w	r1, #0
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005406:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800540a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800540e:	4688      	mov	r8, r1
 8005410:	4691      	mov	r9, r2
 8005412:	eb1a 0508 	adds.w	r5, sl, r8
 8005416:	eb4b 0609 	adc.w	r6, fp, r9
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	4619      	mov	r1, r3
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	f04f 0400 	mov.w	r4, #0
 800542c:	0094      	lsls	r4, r2, #2
 800542e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005432:	008b      	lsls	r3, r1, #2
 8005434:	461a      	mov	r2, r3
 8005436:	4623      	mov	r3, r4
 8005438:	4628      	mov	r0, r5
 800543a:	4631      	mov	r1, r6
 800543c:	f7fb fb36 	bl	8000aac <__aeabi_uldivmod>
 8005440:	4603      	mov	r3, r0
 8005442:	460c      	mov	r4, r1
 8005444:	461a      	mov	r2, r3
 8005446:	4b50      	ldr	r3, [pc, #320]	; (8005588 <UART_SetConfig+0x6f4>)
 8005448:	fba3 2302 	umull	r2, r3, r3, r2
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	469b      	mov	fp, r3
 8005456:	f04f 0c00 	mov.w	ip, #0
 800545a:	46d9      	mov	r9, fp
 800545c:	46e2      	mov	sl, ip
 800545e:	eb19 0309 	adds.w	r3, r9, r9
 8005462:	eb4a 040a 	adc.w	r4, sl, sl
 8005466:	4699      	mov	r9, r3
 8005468:	46a2      	mov	sl, r4
 800546a:	eb19 090b 	adds.w	r9, r9, fp
 800546e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005472:	f04f 0100 	mov.w	r1, #0
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800547e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005482:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005486:	4689      	mov	r9, r1
 8005488:	4692      	mov	sl, r2
 800548a:	eb1b 0509 	adds.w	r5, fp, r9
 800548e:	eb4c 060a 	adc.w	r6, ip, sl
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	4619      	mov	r1, r3
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	f04f 0300 	mov.w	r3, #0
 80054a0:	f04f 0400 	mov.w	r4, #0
 80054a4:	0094      	lsls	r4, r2, #2
 80054a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054aa:	008b      	lsls	r3, r1, #2
 80054ac:	461a      	mov	r2, r3
 80054ae:	4623      	mov	r3, r4
 80054b0:	4628      	mov	r0, r5
 80054b2:	4631      	mov	r1, r6
 80054b4:	f7fb fafa 	bl	8000aac <__aeabi_uldivmod>
 80054b8:	4603      	mov	r3, r0
 80054ba:	460c      	mov	r4, r1
 80054bc:	461a      	mov	r2, r3
 80054be:	4b32      	ldr	r3, [pc, #200]	; (8005588 <UART_SetConfig+0x6f4>)
 80054c0:	fba3 1302 	umull	r1, r3, r3, r2
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	2164      	movs	r1, #100	; 0x64
 80054c8:	fb01 f303 	mul.w	r3, r1, r3
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	3332      	adds	r3, #50	; 0x32
 80054d2:	4a2d      	ldr	r2, [pc, #180]	; (8005588 <UART_SetConfig+0x6f4>)
 80054d4:	fba2 2303 	umull	r2, r3, r2, r3
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054de:	4498      	add	r8, r3
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	469b      	mov	fp, r3
 80054e4:	f04f 0c00 	mov.w	ip, #0
 80054e8:	46d9      	mov	r9, fp
 80054ea:	46e2      	mov	sl, ip
 80054ec:	eb19 0309 	adds.w	r3, r9, r9
 80054f0:	eb4a 040a 	adc.w	r4, sl, sl
 80054f4:	4699      	mov	r9, r3
 80054f6:	46a2      	mov	sl, r4
 80054f8:	eb19 090b 	adds.w	r9, r9, fp
 80054fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005500:	f04f 0100 	mov.w	r1, #0
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800550c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005510:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005514:	4689      	mov	r9, r1
 8005516:	4692      	mov	sl, r2
 8005518:	eb1b 0509 	adds.w	r5, fp, r9
 800551c:	eb4c 060a 	adc.w	r6, ip, sl
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	4619      	mov	r1, r3
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	f04f 0400 	mov.w	r4, #0
 8005532:	0094      	lsls	r4, r2, #2
 8005534:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005538:	008b      	lsls	r3, r1, #2
 800553a:	461a      	mov	r2, r3
 800553c:	4623      	mov	r3, r4
 800553e:	4628      	mov	r0, r5
 8005540:	4631      	mov	r1, r6
 8005542:	f7fb fab3 	bl	8000aac <__aeabi_uldivmod>
 8005546:	4603      	mov	r3, r0
 8005548:	460c      	mov	r4, r1
 800554a:	461a      	mov	r2, r3
 800554c:	4b0e      	ldr	r3, [pc, #56]	; (8005588 <UART_SetConfig+0x6f4>)
 800554e:	fba3 1302 	umull	r1, r3, r3, r2
 8005552:	095b      	lsrs	r3, r3, #5
 8005554:	2164      	movs	r1, #100	; 0x64
 8005556:	fb01 f303 	mul.w	r3, r1, r3
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	3332      	adds	r3, #50	; 0x32
 8005560:	4a09      	ldr	r2, [pc, #36]	; (8005588 <UART_SetConfig+0x6f4>)
 8005562:	fba2 2303 	umull	r2, r3, r2, r3
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	f003 020f 	and.w	r2, r3, #15
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4442      	add	r2, r8
 8005572:	609a      	str	r2, [r3, #8]
}
 8005574:	e7ff      	b.n	8005576 <UART_SetConfig+0x6e2>
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005580:	40011000 	.word	0x40011000
 8005584:	40011400 	.word	0x40011400
 8005588:	51eb851f 	.word	0x51eb851f

0800558c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800558c:	b084      	sub	sp, #16
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	f107 001c 	add.w	r0, r7, #28
 800559a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d122      	bne.n	80055ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d105      	bne.n	80055de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f001 fac6 	bl	8006b70 <USB_CoreReset>
 80055e4:	4603      	mov	r3, r0
 80055e6:	73fb      	strb	r3, [r7, #15]
 80055e8:	e01a      	b.n	8005620 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f001 faba 	bl	8006b70 <USB_CoreReset>
 80055fc:	4603      	mov	r3, r0
 80055fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	639a      	str	r2, [r3, #56]	; 0x38
 8005612:	e005      	b.n	8005620 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	2b01      	cmp	r3, #1
 8005624:	d10b      	bne.n	800563e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f043 0206 	orr.w	r2, r3, #6
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f043 0220 	orr.w	r2, r3, #32
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800563e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800564a:	b004      	add	sp, #16
 800564c:	4770      	bx	lr
	...

08005650 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	4613      	mov	r3, r2
 800565c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d165      	bne.n	8005730 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4a41      	ldr	r2, [pc, #260]	; (800576c <USB_SetTurnaroundTime+0x11c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d906      	bls.n	800567a <USB_SetTurnaroundTime+0x2a>
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4a40      	ldr	r2, [pc, #256]	; (8005770 <USB_SetTurnaroundTime+0x120>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d802      	bhi.n	800567a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005674:	230f      	movs	r3, #15
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	e062      	b.n	8005740 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	4a3c      	ldr	r2, [pc, #240]	; (8005770 <USB_SetTurnaroundTime+0x120>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d906      	bls.n	8005690 <USB_SetTurnaroundTime+0x40>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	4a3b      	ldr	r2, [pc, #236]	; (8005774 <USB_SetTurnaroundTime+0x124>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d802      	bhi.n	8005690 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800568a:	230e      	movs	r3, #14
 800568c:	617b      	str	r3, [r7, #20]
 800568e:	e057      	b.n	8005740 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4a38      	ldr	r2, [pc, #224]	; (8005774 <USB_SetTurnaroundTime+0x124>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d906      	bls.n	80056a6 <USB_SetTurnaroundTime+0x56>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4a37      	ldr	r2, [pc, #220]	; (8005778 <USB_SetTurnaroundTime+0x128>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d802      	bhi.n	80056a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80056a0:	230d      	movs	r3, #13
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	e04c      	b.n	8005740 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4a33      	ldr	r2, [pc, #204]	; (8005778 <USB_SetTurnaroundTime+0x128>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d906      	bls.n	80056bc <USB_SetTurnaroundTime+0x6c>
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	4a32      	ldr	r2, [pc, #200]	; (800577c <USB_SetTurnaroundTime+0x12c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d802      	bhi.n	80056bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80056b6:	230c      	movs	r3, #12
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	e041      	b.n	8005740 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	4a2f      	ldr	r2, [pc, #188]	; (800577c <USB_SetTurnaroundTime+0x12c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d906      	bls.n	80056d2 <USB_SetTurnaroundTime+0x82>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4a2e      	ldr	r2, [pc, #184]	; (8005780 <USB_SetTurnaroundTime+0x130>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d802      	bhi.n	80056d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80056cc:	230b      	movs	r3, #11
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	e036      	b.n	8005740 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4a2a      	ldr	r2, [pc, #168]	; (8005780 <USB_SetTurnaroundTime+0x130>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d906      	bls.n	80056e8 <USB_SetTurnaroundTime+0x98>
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4a29      	ldr	r2, [pc, #164]	; (8005784 <USB_SetTurnaroundTime+0x134>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d802      	bhi.n	80056e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80056e2:	230a      	movs	r3, #10
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e02b      	b.n	8005740 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4a26      	ldr	r2, [pc, #152]	; (8005784 <USB_SetTurnaroundTime+0x134>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d906      	bls.n	80056fe <USB_SetTurnaroundTime+0xae>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4a25      	ldr	r2, [pc, #148]	; (8005788 <USB_SetTurnaroundTime+0x138>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d802      	bhi.n	80056fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80056f8:	2309      	movs	r3, #9
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	e020      	b.n	8005740 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4a21      	ldr	r2, [pc, #132]	; (8005788 <USB_SetTurnaroundTime+0x138>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d906      	bls.n	8005714 <USB_SetTurnaroundTime+0xc4>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4a20      	ldr	r2, [pc, #128]	; (800578c <USB_SetTurnaroundTime+0x13c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d802      	bhi.n	8005714 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800570e:	2308      	movs	r3, #8
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	e015      	b.n	8005740 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4a1d      	ldr	r2, [pc, #116]	; (800578c <USB_SetTurnaroundTime+0x13c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d906      	bls.n	800572a <USB_SetTurnaroundTime+0xda>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4a1c      	ldr	r2, [pc, #112]	; (8005790 <USB_SetTurnaroundTime+0x140>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d802      	bhi.n	800572a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005724:	2307      	movs	r3, #7
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	e00a      	b.n	8005740 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800572a:	2306      	movs	r3, #6
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	e007      	b.n	8005740 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d102      	bne.n	800573c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005736:	2309      	movs	r3, #9
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	e001      	b.n	8005740 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800573c:	2309      	movs	r3, #9
 800573e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	029b      	lsls	r3, r3, #10
 8005754:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005758:	431a      	orrs	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	00d8acbf 	.word	0x00d8acbf
 8005770:	00e4e1bf 	.word	0x00e4e1bf
 8005774:	00f423ff 	.word	0x00f423ff
 8005778:	0106737f 	.word	0x0106737f
 800577c:	011a499f 	.word	0x011a499f
 8005780:	01312cff 	.word	0x01312cff
 8005784:	014ca43f 	.word	0x014ca43f
 8005788:	016e35ff 	.word	0x016e35ff
 800578c:	01a6ab1f 	.word	0x01a6ab1f
 8005790:	01e847ff 	.word	0x01e847ff

08005794 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f043 0201 	orr.w	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f023 0201 	bic.w	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d106      	bne.n	8005804 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	60da      	str	r2, [r3, #12]
 8005802:	e00b      	b.n	800581c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	60da      	str	r2, [r3, #12]
 8005816:	e001      	b.n	800581c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e003      	b.n	8005824 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800581c:	2032      	movs	r0, #50	; 0x32
 800581e:	f7fb ffd9 	bl	80017d4 <HAL_Delay>

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800582c:	b084      	sub	sp, #16
 800582e:	b580      	push	{r7, lr}
 8005830:	b086      	sub	sp, #24
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800583a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005846:	2300      	movs	r3, #0
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	e009      	b.n	8005860 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	3340      	adds	r3, #64	; 0x40
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	2200      	movs	r2, #0
 8005858:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	3301      	adds	r3, #1
 800585e:	613b      	str	r3, [r7, #16]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	2b0e      	cmp	r3, #14
 8005864:	d9f2      	bls.n	800584c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d11c      	bne.n	80058a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800587a:	f043 0302 	orr.w	r3, r3, #2
 800587e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	639a      	str	r2, [r3, #56]	; 0x38
 80058a4:	e00b      	b.n	80058be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058c4:	461a      	mov	r2, r3
 80058c6:	2300      	movs	r3, #0
 80058c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d0:	4619      	mov	r1, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d8:	461a      	mov	r2, r3
 80058da:	680b      	ldr	r3, [r1, #0]
 80058dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d10c      	bne.n	80058fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d104      	bne.n	80058f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058ea:	2100      	movs	r1, #0
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f949 	bl	8005b84 <USB_SetDevSpeed>
 80058f2:	e008      	b.n	8005906 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058f4:	2101      	movs	r1, #1
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f944 	bl	8005b84 <USB_SetDevSpeed>
 80058fc:	e003      	b.n	8005906 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058fe:	2103      	movs	r1, #3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f93f 	bl	8005b84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005906:	2110      	movs	r1, #16
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f8f3 	bl	8005af4 <USB_FlushTxFifo>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f911 	bl	8005b40 <USB_FlushRxFifo>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592e:	461a      	mov	r2, r3
 8005930:	2300      	movs	r3, #0
 8005932:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593a:	461a      	mov	r2, r3
 800593c:	2300      	movs	r3, #0
 800593e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005946:	461a      	mov	r2, r3
 8005948:	2300      	movs	r3, #0
 800594a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800594c:	2300      	movs	r3, #0
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	e043      	b.n	80059da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005968:	d118      	bne.n	800599c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10a      	bne.n	8005986 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597c:	461a      	mov	r2, r3
 800597e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	e013      	b.n	80059ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005992:	461a      	mov	r2, r3
 8005994:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	e008      	b.n	80059ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a8:	461a      	mov	r2, r3
 80059aa:	2300      	movs	r3, #0
 80059ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ba:	461a      	mov	r2, r3
 80059bc:	2300      	movs	r3, #0
 80059be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	461a      	mov	r2, r3
 80059ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	3301      	adds	r3, #1
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d3b7      	bcc.n	8005952 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059e2:	2300      	movs	r3, #0
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	e043      	b.n	8005a70 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059fe:	d118      	bne.n	8005a32 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10a      	bne.n	8005a1c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a12:	461a      	mov	r2, r3
 8005a14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	e013      	b.n	8005a44 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	e008      	b.n	8005a44 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3e:	461a      	mov	r2, r3
 8005a40:	2300      	movs	r3, #0
 8005a42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a50:	461a      	mov	r2, r3
 8005a52:	2300      	movs	r3, #0
 8005a54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	461a      	mov	r2, r3
 8005a64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d3b7      	bcc.n	80059e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d105      	bne.n	8005aac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	f043 0210 	orr.w	r2, r3, #16
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	699a      	ldr	r2, [r3, #24]
 8005ab0:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <USB_DevInit+0x2c4>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	f043 0208 	orr.w	r2, r3, #8
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d107      	bne.n	8005ae0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ad8:	f043 0304 	orr.w	r3, r3, #4
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aec:	b004      	add	sp, #16
 8005aee:	4770      	bx	lr
 8005af0:	803c3800 	.word	0x803c3800

08005af4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	019b      	lsls	r3, r3, #6
 8005b06:	f043 0220 	orr.w	r2, r3, #32
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3301      	adds	r3, #1
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4a09      	ldr	r2, [pc, #36]	; (8005b3c <USB_FlushTxFifo+0x48>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d901      	bls.n	8005b20 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e006      	b.n	8005b2e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	d0f0      	beq.n	8005b0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	00030d40 	.word	0x00030d40

08005b40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2210      	movs	r2, #16
 8005b50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3301      	adds	r3, #1
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4a09      	ldr	r2, [pc, #36]	; (8005b80 <USB_FlushRxFifo+0x40>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d901      	bls.n	8005b64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e006      	b.n	8005b72 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f003 0310 	and.w	r3, r3, #16
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	d0f0      	beq.n	8005b52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	00030d40 	.word	0x00030d40

08005b84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	68f9      	ldr	r1, [r7, #12]
 8005ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b087      	sub	sp, #28
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 0306 	and.w	r3, r3, #6
 8005bce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d102      	bne.n	8005bdc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	75fb      	strb	r3, [r7, #23]
 8005bda:	e00a      	b.n	8005bf2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d002      	beq.n	8005be8 <USB_GetDevSpeed+0x32>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b06      	cmp	r3, #6
 8005be6:	d102      	bne.n	8005bee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005be8:	2302      	movs	r3, #2
 8005bea:	75fb      	strb	r3, [r7, #23]
 8005bec:	e001      	b.n	8005bf2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005bee:	230f      	movs	r3, #15
 8005bf0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	371c      	adds	r7, #28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d13a      	bne.n	8005c92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c22:	69da      	ldr	r2, [r3, #28]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	f003 030f 	and.w	r3, r3, #15
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	68f9      	ldr	r1, [r7, #12]
 8005c36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d155      	bne.n	8005d00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	78db      	ldrb	r3, [r3, #3]
 8005c6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	059b      	lsls	r3, r3, #22
 8005c76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	0151      	lsls	r1, r2, #5
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	440a      	add	r2, r1
 8005c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	e036      	b.n	8005d00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c98:	69da      	ldr	r2, [r3, #28]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca8:	041b      	lsls	r3, r3, #16
 8005caa:	68f9      	ldr	r1, [r7, #12]
 8005cac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d11a      	bne.n	8005d00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	78db      	ldrb	r3, [r3, #3]
 8005ce4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	0151      	lsls	r1, r2, #5
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cfe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
	...

08005d10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d161      	bne.n	8005df0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d42:	d11f      	bne.n	8005d84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	0151      	lsls	r1, r2, #5
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	440a      	add	r2, r1
 8005d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	2101      	movs	r1, #1
 8005d96:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	43db      	mvns	r3, r3
 8005d9e:	68f9      	ldr	r1, [r7, #12]
 8005da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005da4:	4013      	ands	r3, r2
 8005da6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dae:	69da      	ldr	r2, [r3, #28]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	2101      	movs	r1, #1
 8005dba:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	43db      	mvns	r3, r3
 8005dc2:	68f9      	ldr	r1, [r7, #12]
 8005dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dc8:	4013      	ands	r3, r2
 8005dca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	0159      	lsls	r1, r3, #5
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	440b      	add	r3, r1
 8005de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de6:	4619      	mov	r1, r3
 8005de8:	4b35      	ldr	r3, [pc, #212]	; (8005ec0 <USB_DeactivateEndpoint+0x1b0>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	600b      	str	r3, [r1, #0]
 8005dee:	e060      	b.n	8005eb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e06:	d11f      	bne.n	8005e48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	0151      	lsls	r1, r2, #5
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	440a      	add	r2, r1
 8005e3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	2101      	movs	r1, #1
 8005e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5e:	041b      	lsls	r3, r3, #16
 8005e60:	43db      	mvns	r3, r3
 8005e62:	68f9      	ldr	r1, [r7, #12]
 8005e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e68:	4013      	ands	r3, r2
 8005e6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e72:	69da      	ldr	r2, [r3, #28]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e82:	041b      	lsls	r3, r3, #16
 8005e84:	43db      	mvns	r3, r3
 8005e86:	68f9      	ldr	r1, [r7, #12]
 8005e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	0159      	lsls	r1, r3, #5
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	440b      	add	r3, r1
 8005ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <USB_DeactivateEndpoint+0x1b4>)
 8005eae:	4013      	ands	r3, r2
 8005eb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	ec337800 	.word	0xec337800
 8005ec4:	eff37800 	.word	0xeff37800

08005ec8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08a      	sub	sp, #40	; 0x28
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	f040 815c 	bne.w	80061a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d132      	bne.n	8005f58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	0151      	lsls	r1, r2, #5
 8005f04:	69fa      	ldr	r2, [r7, #28]
 8005f06:	440a      	add	r2, r1
 8005f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	0151      	lsls	r1, r2, #5
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	0151      	lsls	r1, r2, #5
 8005f48:	69fa      	ldr	r2, [r7, #28]
 8005f4a:	440a      	add	r2, r1
 8005f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f50:	0cdb      	lsrs	r3, r3, #19
 8005f52:	04db      	lsls	r3, r3, #19
 8005f54:	6113      	str	r3, [r2, #16]
 8005f56:	e074      	b.n	8006042 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	0151      	lsls	r1, r2, #5
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	440a      	add	r2, r1
 8005f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f72:	0cdb      	lsrs	r3, r3, #19
 8005f74:	04db      	lsls	r3, r3, #19
 8005f76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	6959      	ldr	r1, [r3, #20]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	440b      	add	r3, r1
 8005fb4:	1e59      	subs	r1, r3, #1
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fbe:	04d9      	lsls	r1, r3, #19
 8005fc0:	4b9d      	ldr	r3, [pc, #628]	; (8006238 <USB_EPStartXfer+0x370>)
 8005fc2:	400b      	ands	r3, r1
 8005fc4:	69b9      	ldr	r1, [r7, #24]
 8005fc6:	0148      	lsls	r0, r1, #5
 8005fc8:	69f9      	ldr	r1, [r7, #28]
 8005fca:	4401      	add	r1, r0
 8005fcc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe0:	691a      	ldr	r2, [r3, #16]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fea:	69b9      	ldr	r1, [r7, #24]
 8005fec:	0148      	lsls	r0, r1, #5
 8005fee:	69f9      	ldr	r1, [r7, #28]
 8005ff0:	4401      	add	r1, r0
 8005ff2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	78db      	ldrb	r3, [r3, #3]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d11f      	bne.n	8006042 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	440a      	add	r2, r1
 8006018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006020:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	0151      	lsls	r1, r2, #5
 8006034:	69fa      	ldr	r2, [r7, #28]
 8006036:	440a      	add	r2, r1
 8006038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006040:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d14b      	bne.n	80060e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d009      	beq.n	8006064 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605c:	461a      	mov	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	78db      	ldrb	r3, [r3, #3]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d128      	bne.n	80060be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006078:	2b00      	cmp	r3, #0
 800607a:	d110      	bne.n	800609e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006096:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	e00f      	b.n	80060be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	e12f      	b.n	8006340 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	78db      	ldrb	r3, [r3, #3]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d015      	beq.n	8006134 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 8117 	beq.w	8006340 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	2101      	movs	r1, #1
 8006124:	fa01 f303 	lsl.w	r3, r1, r3
 8006128:	69f9      	ldr	r1, [r7, #28]
 800612a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800612e:	4313      	orrs	r3, r2
 8006130:	634b      	str	r3, [r1, #52]	; 0x34
 8006132:	e105      	b.n	8006340 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006140:	2b00      	cmp	r3, #0
 8006142:	d110      	bne.n	8006166 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	e00f      	b.n	8006186 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	440a      	add	r2, r1
 800617c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006184:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	68d9      	ldr	r1, [r3, #12]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	781a      	ldrb	r2, [r3, #0]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	b298      	uxth	r0, r3
 8006194:	79fb      	ldrb	r3, [r7, #7]
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	4603      	mov	r3, r0
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 fa2b 	bl	80065f6 <USB_WritePacket>
 80061a0:	e0ce      	b.n	8006340 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	69fa      	ldr	r2, [r7, #28]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061bc:	0cdb      	lsrs	r3, r3, #19
 80061be:	04db      	lsls	r3, r3, #19
 80061c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	0151      	lsls	r1, r2, #5
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	440a      	add	r2, r1
 80061d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d126      	bne.n	800623c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006204:	69b9      	ldr	r1, [r7, #24]
 8006206:	0148      	lsls	r0, r1, #5
 8006208:	69f9      	ldr	r1, [r7, #28]
 800620a:	4401      	add	r1, r0
 800620c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006210:	4313      	orrs	r3, r2
 8006212:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	0151      	lsls	r1, r2, #5
 8006226:	69fa      	ldr	r2, [r7, #28]
 8006228:	440a      	add	r2, r1
 800622a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800622e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006232:	6113      	str	r3, [r2, #16]
 8006234:	e036      	b.n	80062a4 <USB_EPStartXfer+0x3dc>
 8006236:	bf00      	nop
 8006238:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	695a      	ldr	r2, [r3, #20]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	4413      	add	r3, r2
 8006246:	1e5a      	subs	r2, r3, #1
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006250:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	8afb      	ldrh	r3, [r7, #22]
 8006262:	04d9      	lsls	r1, r3, #19
 8006264:	4b39      	ldr	r3, [pc, #228]	; (800634c <USB_EPStartXfer+0x484>)
 8006266:	400b      	ands	r3, r1
 8006268:	69b9      	ldr	r1, [r7, #24]
 800626a:	0148      	lsls	r0, r1, #5
 800626c:	69f9      	ldr	r1, [r7, #28]
 800626e:	4401      	add	r1, r0
 8006270:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006274:	4313      	orrs	r3, r2
 8006276:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006284:	691a      	ldr	r2, [r3, #16]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	8af9      	ldrh	r1, [r7, #22]
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006294:	69b9      	ldr	r1, [r7, #24]
 8006296:	0148      	lsls	r0, r1, #5
 8006298:	69f9      	ldr	r1, [r7, #28]
 800629a:	4401      	add	r1, r0
 800629c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062a0:	4313      	orrs	r3, r2
 80062a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d10d      	bne.n	80062c6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d009      	beq.n	80062c6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	68d9      	ldr	r1, [r3, #12]
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c2:	460a      	mov	r2, r1
 80062c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	78db      	ldrb	r3, [r3, #3]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d128      	bne.n	8006320 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d110      	bne.n	8006300 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e00f      	b.n	8006320 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	440a      	add	r2, r1
 8006316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800631a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800631e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	0151      	lsls	r1, r2, #5
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	440a      	add	r2, r1
 8006336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800633a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800633e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3720      	adds	r7, #32
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	1ff80000 	.word	0x1ff80000

08006350 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b01      	cmp	r3, #1
 800636e:	f040 80cd 	bne.w	800650c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d132      	bne.n	80063e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006394:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006398:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800639c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	0151      	lsls	r1, r2, #5
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	440a      	add	r2, r1
 80063d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d8:	0cdb      	lsrs	r3, r3, #19
 80063da:	04db      	lsls	r3, r3, #19
 80063dc:	6113      	str	r3, [r2, #16]
 80063de:	e04e      	b.n	800647e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	0151      	lsls	r1, r2, #5
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	440a      	add	r2, r1
 80063f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fa:	0cdb      	lsrs	r3, r3, #19
 80063fc:	04db      	lsls	r3, r3, #19
 80063fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	0151      	lsls	r1, r2, #5
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	440a      	add	r2, r1
 8006416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800641a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800641e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006422:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	695a      	ldr	r2, [r3, #20]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	429a      	cmp	r2, r3
 800642e:	d903      	bls.n	8006438 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	440a      	add	r2, r1
 800644e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006452:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006456:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006464:	691a      	ldr	r2, [r3, #16]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800646e:	6939      	ldr	r1, [r7, #16]
 8006470:	0148      	lsls	r0, r1, #5
 8006472:	6979      	ldr	r1, [r7, #20]
 8006474:	4401      	add	r1, r0
 8006476:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800647a:	4313      	orrs	r3, r2
 800647c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800647e:	79fb      	ldrb	r3, [r7, #7]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d11e      	bne.n	80064c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d009      	beq.n	80064a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006498:	461a      	mov	r2, r3
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	e092      	b.n	80065e8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	0151      	lsls	r1, r2, #5
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	440a      	add	r2, r1
 80064d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d07e      	beq.n	80065e8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	2101      	movs	r1, #1
 80064fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006500:	6979      	ldr	r1, [r7, #20]
 8006502:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006506:	4313      	orrs	r3, r2
 8006508:	634b      	str	r3, [r1, #52]	; 0x34
 800650a:	e06d      	b.n	80065e8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	440a      	add	r2, r1
 8006522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006526:	0cdb      	lsrs	r3, r3, #19
 8006528:	04db      	lsls	r3, r3, #19
 800652a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	440a      	add	r2, r1
 8006542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006546:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800654a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800654e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	440a      	add	r2, r1
 8006576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800657a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800657e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	4413      	add	r3, r2
 8006588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658c:	691a      	ldr	r2, [r3, #16]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006596:	6939      	ldr	r1, [r7, #16]
 8006598:	0148      	lsls	r0, r1, #5
 800659a:	6979      	ldr	r1, [r7, #20]
 800659c:	4401      	add	r1, r0
 800659e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065a2:	4313      	orrs	r3, r2
 80065a4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80065a6:	79fb      	ldrb	r3, [r7, #7]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d10d      	bne.n	80065c8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d009      	beq.n	80065c8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	68d9      	ldr	r1, [r3, #12]
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c4:	460a      	mov	r2, r1
 80065c6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	0151      	lsls	r1, r2, #5
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	440a      	add	r2, r1
 80065de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b089      	sub	sp, #36	; 0x24
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	60f8      	str	r0, [r7, #12]
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	4611      	mov	r1, r2
 8006602:	461a      	mov	r2, r3
 8006604:	460b      	mov	r3, r1
 8006606:	71fb      	strb	r3, [r7, #7]
 8006608:	4613      	mov	r3, r2
 800660a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006614:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006618:	2b00      	cmp	r3, #0
 800661a:	d11a      	bne.n	8006652 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800661c:	88bb      	ldrh	r3, [r7, #4]
 800661e:	3303      	adds	r3, #3
 8006620:	089b      	lsrs	r3, r3, #2
 8006622:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006624:	2300      	movs	r3, #0
 8006626:	61bb      	str	r3, [r7, #24]
 8006628:	e00f      	b.n	800664a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800662a:	79fb      	ldrb	r3, [r7, #7]
 800662c:	031a      	lsls	r2, r3, #12
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	4413      	add	r3, r2
 8006632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006636:	461a      	mov	r2, r3
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	3304      	adds	r3, #4
 8006642:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	3301      	adds	r3, #1
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	429a      	cmp	r2, r3
 8006650:	d3eb      	bcc.n	800662a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3724      	adds	r7, #36	; 0x24
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006660:	b480      	push	{r7}
 8006662:	b089      	sub	sp, #36	; 0x24
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	4613      	mov	r3, r2
 800666c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006676:	88fb      	ldrh	r3, [r7, #6]
 8006678:	3303      	adds	r3, #3
 800667a:	089b      	lsrs	r3, r3, #2
 800667c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800667e:	2300      	movs	r3, #0
 8006680:	61bb      	str	r3, [r7, #24]
 8006682:	e00b      	b.n	800669c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	3304      	adds	r3, #4
 8006694:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	3301      	adds	r3, #1
 800669a:	61bb      	str	r3, [r7, #24]
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d3ef      	bcc.n	8006684 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80066a4:	69fb      	ldr	r3, [r7, #28]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3724      	adds	r7, #36	; 0x24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	785b      	ldrb	r3, [r3, #1]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d12c      	bne.n	8006728 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	db12      	blt.n	8006706 <USB_EPSetStall+0x54>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00f      	beq.n	8006706 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	0151      	lsls	r1, r2, #5
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	440a      	add	r2, r1
 80066fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006700:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006704:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	440a      	add	r2, r1
 800671c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	e02b      	b.n	8006780 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	db12      	blt.n	8006760 <USB_EPSetStall+0xae>
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00f      	beq.n	8006760 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	0151      	lsls	r1, r2, #5
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	440a      	add	r2, r1
 8006756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800675a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800675e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	0151      	lsls	r1, r2, #5
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	440a      	add	r2, r1
 8006776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800677a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800677e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800678e:	b480      	push	{r7}
 8006790:	b085      	sub	sp, #20
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	785b      	ldrb	r3, [r3, #1]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d128      	bne.n	80067fc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	78db      	ldrb	r3, [r3, #3]
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d003      	beq.n	80067da <USB_EPClearStall+0x4c>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	78db      	ldrb	r3, [r3, #3]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d138      	bne.n	800684c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	0151      	lsls	r1, r2, #5
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	440a      	add	r2, r1
 80067f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	e027      	b.n	800684c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	0151      	lsls	r1, r2, #5
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	440a      	add	r2, r1
 8006812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006816:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800681a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	78db      	ldrb	r3, [r3, #3]
 8006820:	2b03      	cmp	r3, #3
 8006822:	d003      	beq.n	800682c <USB_EPClearStall+0x9e>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	78db      	ldrb	r3, [r3, #3]
 8006828:	2b02      	cmp	r3, #2
 800682a:	d10f      	bne.n	800684c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	0151      	lsls	r1, r2, #5
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	440a      	add	r2, r1
 8006842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800684a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800685a:	b480      	push	{r7}
 800685c:	b085      	sub	sp, #20
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	460b      	mov	r3, r1
 8006864:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006878:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800687c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	78fb      	ldrb	r3, [r7, #3]
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006894:	4313      	orrs	r3, r2
 8006896:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b085      	sub	sp, #20
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068c0:	f023 0303 	bic.w	r3, r3, #3
 80068c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068d4:	f023 0302 	bic.w	r3, r3, #2
 80068d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006902:	f023 0303 	bic.w	r3, r3, #3
 8006906:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006916:	f043 0302 	orr.w	r3, r3, #2
 800691a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800692a:	b480      	push	{r7}
 800692c:	b085      	sub	sp, #20
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4013      	ands	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006942:	68fb      	ldr	r3, [r7, #12]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	4013      	ands	r3, r2
 8006972:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	0c1b      	lsrs	r3, r3, #16
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	4013      	ands	r3, r2
 80069a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	b29b      	uxth	r3, r3
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80069c8:	78fb      	ldrb	r3, [r7, #3]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	4013      	ands	r3, r2
 80069e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069e6:	68bb      	ldr	r3, [r7, #8]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a16:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	fa22 f303 	lsr.w	r3, r2, r3
 8006a24:	01db      	lsls	r3, r3, #7
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a2e:	78fb      	ldrb	r3, [r7, #3]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a42:	68bb      	ldr	r3, [r7, #8]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	371c      	adds	r7, #28
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	f003 0301 	and.w	r3, r3, #1
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a8a:	f023 0307 	bic.w	r3, r3, #7
 8006a8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
	...

08006ab4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	460b      	mov	r3, r1
 8006abe:	607a      	str	r2, [r7, #4]
 8006ac0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	333c      	adds	r3, #60	; 0x3c
 8006aca:	3304      	adds	r3, #4
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	4a26      	ldr	r2, [pc, #152]	; (8006b6c <USB_EP0_OutStart+0xb8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d90a      	bls.n	8006aee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ae8:	d101      	bne.n	8006aee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	e037      	b.n	8006b5e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af4:	461a      	mov	r2, r3
 8006af6:	2300      	movs	r3, #0
 8006af8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b1c:	f043 0318 	orr.w	r3, r3, #24
 8006b20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b30:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006b34:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006b36:	7afb      	ldrb	r3, [r7, #11]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d10f      	bne.n	8006b5c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b42:	461a      	mov	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b56:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006b5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	371c      	adds	r7, #28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	4f54300a 	.word	0x4f54300a

08006b70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	4a13      	ldr	r2, [pc, #76]	; (8006bd4 <USB_CoreReset+0x64>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d901      	bls.n	8006b8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e01b      	b.n	8006bc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	daf2      	bge.n	8006b7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f043 0201 	orr.w	r2, r3, #1
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4a09      	ldr	r2, [pc, #36]	; (8006bd4 <USB_CoreReset+0x64>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d901      	bls.n	8006bb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e006      	b.n	8006bc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d0f0      	beq.n	8006ba6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	00030d40 	.word	0x00030d40

08006bd8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006be4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006be8:	f002 f8d6 	bl	8008d98 <malloc>
 8006bec:	4603      	mov	r3, r0
 8006bee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d105      	bne.n	8006c02 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e066      	b.n	8006cd0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	7c1b      	ldrb	r3, [r3, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d119      	bne.n	8006c46 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c16:	2202      	movs	r2, #2
 8006c18:	2181      	movs	r1, #129	; 0x81
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f001 ff43 	bl	8008aa6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f001 ff39 	bl	8008aa6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2210      	movs	r2, #16
 8006c40:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006c44:	e016      	b.n	8006c74 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c46:	2340      	movs	r3, #64	; 0x40
 8006c48:	2202      	movs	r2, #2
 8006c4a:	2181      	movs	r1, #129	; 0x81
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 ff2a 	bl	8008aa6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c58:	2340      	movs	r3, #64	; 0x40
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 ff21 	bl	8008aa6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2210      	movs	r2, #16
 8006c70:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c74:	2308      	movs	r3, #8
 8006c76:	2203      	movs	r2, #3
 8006c78:	2182      	movs	r1, #130	; 0x82
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 ff13 	bl	8008aa6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	7c1b      	ldrb	r3, [r3, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d109      	bne.n	8006cbe <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 ffe4 	bl	8008c84 <USBD_LL_PrepareReceive>
 8006cbc:	e007      	b.n	8006cce <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cc4:	2340      	movs	r3, #64	; 0x40
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 ffdb 	bl	8008c84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ce8:	2181      	movs	r1, #129	; 0x81
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 ff01 	bl	8008af2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fefa 	bl	8008af2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d06:	2182      	movs	r1, #130	; 0x82
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 fef2 	bl	8008af2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00e      	beq.n	8006d46 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f002 f835 	bl	8008da8 <free>
    pdev->pClassData = NULL;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d60:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d03a      	beq.n	8006df0 <USBD_CDC_Setup+0xa0>
 8006d7a:	2b20      	cmp	r3, #32
 8006d7c:	f040 8097 	bne.w	8006eae <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	88db      	ldrh	r3, [r3, #6]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d029      	beq.n	8006ddc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	b25b      	sxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	da11      	bge.n	8006db6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006d9e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	88d2      	ldrh	r2, [r2, #6]
 8006da4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006da6:	6939      	ldr	r1, [r7, #16]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	88db      	ldrh	r3, [r3, #6]
 8006dac:	461a      	mov	r2, r3
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f001 fa6d 	bl	800828e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006db4:	e082      	b.n	8006ebc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	785a      	ldrb	r2, [r3, #1]
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	88db      	ldrh	r3, [r3, #6]
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006dcc:	6939      	ldr	r1, [r7, #16]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	88db      	ldrh	r3, [r3, #6]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 fa86 	bl	80082e6 <USBD_CtlPrepareRx>
    break;
 8006dda:	e06f      	b.n	8006ebc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	7850      	ldrb	r0, [r2, #1]
 8006de8:	2200      	movs	r2, #0
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	4798      	blx	r3
    break;
 8006dee:	e065      	b.n	8006ebc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	785b      	ldrb	r3, [r3, #1]
 8006df4:	2b0b      	cmp	r3, #11
 8006df6:	d84f      	bhi.n	8006e98 <USBD_CDC_Setup+0x148>
 8006df8:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <USBD_CDC_Setup+0xb0>)
 8006dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfe:	bf00      	nop
 8006e00:	08006e31 	.word	0x08006e31
 8006e04:	08006ea7 	.word	0x08006ea7
 8006e08:	08006e99 	.word	0x08006e99
 8006e0c:	08006e99 	.word	0x08006e99
 8006e10:	08006e99 	.word	0x08006e99
 8006e14:	08006e99 	.word	0x08006e99
 8006e18:	08006e99 	.word	0x08006e99
 8006e1c:	08006e99 	.word	0x08006e99
 8006e20:	08006e99 	.word	0x08006e99
 8006e24:	08006e99 	.word	0x08006e99
 8006e28:	08006e59 	.word	0x08006e59
 8006e2c:	08006e81 	.word	0x08006e81
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d107      	bne.n	8006e4a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e3a:	f107 030c 	add.w	r3, r7, #12
 8006e3e:	2202      	movs	r2, #2
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 fa23 	bl	800828e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006e48:	e030      	b.n	8006eac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 f9ad 	bl	80081ac <USBD_CtlError>
        ret = USBD_FAIL;
 8006e52:	2303      	movs	r3, #3
 8006e54:	75fb      	strb	r3, [r7, #23]
      break;
 8006e56:	e029      	b.n	8006eac <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d107      	bne.n	8006e72 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e62:	f107 030f 	add.w	r3, r7, #15
 8006e66:	2201      	movs	r2, #1
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 fa0f 	bl	800828e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006e70:	e01c      	b.n	8006eac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 f999 	bl	80081ac <USBD_CtlError>
        ret = USBD_FAIL;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e7e:	e015      	b.n	8006eac <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d00f      	beq.n	8006eaa <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f001 f98d 	bl	80081ac <USBD_CtlError>
        ret = USBD_FAIL;
 8006e92:	2303      	movs	r3, #3
 8006e94:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006e96:	e008      	b.n	8006eaa <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f001 f986 	bl	80081ac <USBD_CtlError>
      ret = USBD_FAIL;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea4:	e002      	b.n	8006eac <USBD_CDC_Setup+0x15c>
      break;
 8006ea6:	bf00      	nop
 8006ea8:	e008      	b.n	8006ebc <USBD_CDC_Setup+0x16c>
      break;
 8006eaa:	bf00      	nop
    }
    break;
 8006eac:	e006      	b.n	8006ebc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 f97b 	bl	80081ac <USBD_CtlError>
    ret = USBD_FAIL;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	75fb      	strb	r3, [r7, #23]
    break;
 8006eba:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3718      	adds	r7, #24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop

08006ec8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006eda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e049      	b.n	8006f7e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ef0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006ef2:	78fa      	ldrb	r2, [r7, #3]
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	440b      	add	r3, r1
 8006f00:	3318      	adds	r3, #24
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d029      	beq.n	8006f5c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f08:	78fa      	ldrb	r2, [r7, #3]
 8006f0a:	6879      	ldr	r1, [r7, #4]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	3318      	adds	r3, #24
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	78f9      	ldrb	r1, [r7, #3]
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	00db      	lsls	r3, r3, #3
 8006f22:	1a5b      	subs	r3, r3, r1
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4403      	add	r3, r0
 8006f28:	3344      	adds	r3, #68	; 0x44
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f30:	fb03 f301 	mul.w	r3, r3, r1
 8006f34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d110      	bne.n	8006f5c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006f3a:	78fa      	ldrb	r2, [r7, #3]
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	440b      	add	r3, r1
 8006f48:	3318      	adds	r3, #24
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f4e:	78f9      	ldrb	r1, [r7, #3]
 8006f50:	2300      	movs	r3, #0
 8006f52:	2200      	movs	r2, #0
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fe74 	bl	8008c42 <USBD_LL_Transmit>
 8006f5a:	e00f      	b.n	8006f7c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f78:	78fa      	ldrb	r2, [r7, #3]
 8006f7a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e015      	b.n	8006fd4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006fa8:	78fb      	ldrb	r3, [r7, #3]
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 fe8a 	bl	8008cc6 <USBD_LL_GetRxDataSize>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fce:	4611      	mov	r1, r2
 8006fd0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d015      	beq.n	8007022 <USBD_CDC_EP0_RxReady+0x46>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ffc:	2bff      	cmp	r3, #255	; 0xff
 8006ffe:	d010      	beq.n	8007022 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800700e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007016:	b292      	uxth	r2, r2
 8007018:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	22ff      	movs	r2, #255	; 0xff
 800701e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2243      	movs	r2, #67	; 0x43
 8007038:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800703a:	4b03      	ldr	r3, [pc, #12]	; (8007048 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	20000094 	.word	0x20000094

0800704c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2243      	movs	r2, #67	; 0x43
 8007058:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800705a:	4b03      	ldr	r3, [pc, #12]	; (8007068 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	20000050 	.word	0x20000050

0800706c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2243      	movs	r2, #67	; 0x43
 8007078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800707a:	4b03      	ldr	r3, [pc, #12]	; (8007088 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	200000d8 	.word	0x200000d8

0800708c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	220a      	movs	r2, #10
 8007098:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800709a:	4b03      	ldr	r3, [pc, #12]	; (80070a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800709c:	4618      	mov	r0, r3
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	2000000c 	.word	0x2000000c

080070ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070bc:	2303      	movs	r3, #3
 80070be:	e004      	b.n	80070ca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b087      	sub	sp, #28
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070e8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	371c      	adds	r7, #28
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007118:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800713e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800714a:	2303      	movs	r3, #3
 800714c:	e016      	b.n	800717c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	7c1b      	ldrb	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800715c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007160:	2101      	movs	r1, #1
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 fd8e 	bl	8008c84 <USBD_LL_PrepareReceive>
 8007168:	e007      	b.n	800717a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007170:	2340      	movs	r3, #64	; 0x40
 8007172:	2101      	movs	r1, #1
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f001 fd85 	bl	8008c84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	4613      	mov	r3, r2
 8007190:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007198:	2303      	movs	r3, #3
 800719a:	e025      	b.n	80071e8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	79fa      	ldrb	r2, [r7, #7]
 80071da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f001 fbfb 	bl	80089d8 <USBD_LL_Init>
 80071e2:	4603      	mov	r3, r0
 80071e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007204:	2303      	movs	r3, #3
 8007206:	e010      	b.n	800722a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007218:	f107 020e 	add.w	r2, r7, #14
 800721c:	4610      	mov	r0, r2
 800721e:	4798      	blx	r3
 8007220:	4602      	mov	r2, r0
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b082      	sub	sp, #8
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 fc18 	bl	8008a70 <USBD_LL_Start>
 8007240:	4603      	mov	r3, r0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800726c:	2303      	movs	r3, #3
 800726e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007276:	2b00      	cmp	r3, #0
 8007278:	d009      	beq.n	800728e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	78fa      	ldrb	r2, [r7, #3]
 8007284:	4611      	mov	r1, r2
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
 800728a:	4603      	mov	r3, r0
 800728c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800728e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d007      	beq.n	80072be <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	78fa      	ldrb	r2, [r7, #3]
 80072b8:	4611      	mov	r1, r2
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	4798      	blx	r3
  }

  return USBD_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 ff2c 	bl	8008138 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80072ee:	461a      	mov	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072fc:	f003 031f 	and.w	r3, r3, #31
 8007300:	2b01      	cmp	r3, #1
 8007302:	d00e      	beq.n	8007322 <USBD_LL_SetupStage+0x5a>
 8007304:	2b01      	cmp	r3, #1
 8007306:	d302      	bcc.n	800730e <USBD_LL_SetupStage+0x46>
 8007308:	2b02      	cmp	r3, #2
 800730a:	d014      	beq.n	8007336 <USBD_LL_SetupStage+0x6e>
 800730c:	e01d      	b.n	800734a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fa18 	bl	800774c <USBD_StdDevReq>
 800731c:	4603      	mov	r3, r0
 800731e:	73fb      	strb	r3, [r7, #15]
      break;
 8007320:	e020      	b.n	8007364 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fa7c 	bl	8007828 <USBD_StdItfReq>
 8007330:	4603      	mov	r3, r0
 8007332:	73fb      	strb	r3, [r7, #15]
      break;
 8007334:	e016      	b.n	8007364 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fab8 	bl	80078b4 <USBD_StdEPReq>
 8007344:	4603      	mov	r3, r0
 8007346:	73fb      	strb	r3, [r7, #15]
      break;
 8007348:	e00c      	b.n	8007364 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007350:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007354:	b2db      	uxtb	r3, r3
 8007356:	4619      	mov	r1, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f001 fbe9 	bl	8008b30 <USBD_LL_StallEP>
 800735e:	4603      	mov	r3, r0
 8007360:	73fb      	strb	r3, [r7, #15]
      break;
 8007362:	bf00      	nop
  }

  return ret;
 8007364:	7bfb      	ldrb	r3, [r7, #15]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b086      	sub	sp, #24
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	460b      	mov	r3, r1
 8007378:	607a      	str	r2, [r7, #4]
 800737a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800737c:	7afb      	ldrb	r3, [r7, #11]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d137      	bne.n	80073f2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007388:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007390:	2b03      	cmp	r3, #3
 8007392:	d14a      	bne.n	800742a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	429a      	cmp	r2, r3
 800739e:	d913      	bls.n	80073c8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	1ad2      	subs	r2, r2, r3
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	68da      	ldr	r2, [r3, #12]
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	4293      	cmp	r3, r2
 80073b8:	bf28      	it	cs
 80073ba:	4613      	movcs	r3, r2
 80073bc:	461a      	mov	r2, r3
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f000 ffad 	bl	8008320 <USBD_CtlContinueRx>
 80073c6:	e030      	b.n	800742a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d105      	bne.n	80073ea <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 ffa9 	bl	8008342 <USBD_CtlSendStatus>
 80073f0:	e01b      	b.n	800742a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d013      	beq.n	8007426 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007404:	2b03      	cmp	r3, #3
 8007406:	d10e      	bne.n	8007426 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	7afa      	ldrb	r2, [r7, #11]
 8007412:	4611      	mov	r1, r2
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	4798      	blx	r3
 8007418:	4603      	mov	r3, r0
 800741a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800741c:	7dfb      	ldrb	r3, [r7, #23]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	e002      	b.n	800742c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007426:	2303      	movs	r3, #3
 8007428:	e000      	b.n	800742c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3718      	adds	r7, #24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	460b      	mov	r3, r1
 800743e:	607a      	str	r2, [r7, #4]
 8007440:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007442:	7afb      	ldrb	r3, [r7, #11]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d16a      	bne.n	800751e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3314      	adds	r3, #20
 800744c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007454:	2b02      	cmp	r3, #2
 8007456:	d155      	bne.n	8007504 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	689a      	ldr	r2, [r3, #8]
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	429a      	cmp	r2, r3
 8007462:	d914      	bls.n	800748e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	689a      	ldr	r2, [r3, #8]
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	1ad2      	subs	r2, r2, r3
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	461a      	mov	r2, r3
 8007478:	6879      	ldr	r1, [r7, #4]
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 ff22 	bl	80082c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007480:	2300      	movs	r3, #0
 8007482:	2200      	movs	r2, #0
 8007484:	2100      	movs	r1, #0
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f001 fbfc 	bl	8008c84 <USBD_LL_PrepareReceive>
 800748c:	e03a      	b.n	8007504 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	429a      	cmp	r2, r3
 8007498:	d11c      	bne.n	80074d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d316      	bcc.n	80074d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d20f      	bcs.n	80074d4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074b4:	2200      	movs	r2, #0
 80074b6:	2100      	movs	r1, #0
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 ff03 	bl	80082c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074c6:	2300      	movs	r3, #0
 80074c8:	2200      	movs	r2, #0
 80074ca:	2100      	movs	r1, #0
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f001 fbd9 	bl	8008c84 <USBD_LL_PrepareReceive>
 80074d2:	e017      	b.n	8007504 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d105      	bne.n	80074f6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80074f6:	2180      	movs	r1, #128	; 0x80
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f001 fb19 	bl	8008b30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f000 ff32 	bl	8008368 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800750a:	2b01      	cmp	r3, #1
 800750c:	d123      	bne.n	8007556 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f7ff fe9b 	bl	800724a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800751c:	e01b      	b.n	8007556 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d013      	beq.n	8007552 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007530:	2b03      	cmp	r3, #3
 8007532:	d10e      	bne.n	8007552 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	7afa      	ldrb	r2, [r7, #11]
 800753e:	4611      	mov	r1, r2
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	4798      	blx	r3
 8007544:	4603      	mov	r3, r0
 8007546:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007548:	7dfb      	ldrb	r3, [r7, #23]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	e002      	b.n	8007558 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007552:	2303      	movs	r3, #3
 8007554:	e000      	b.n	8007558 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800758c:	2b00      	cmp	r3, #0
 800758e:	d009      	beq.n	80075a4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	6852      	ldr	r2, [r2, #4]
 800759c:	b2d2      	uxtb	r2, r2
 800759e:	4611      	mov	r1, r2
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075a4:	2340      	movs	r3, #64	; 0x40
 80075a6:	2200      	movs	r2, #0
 80075a8:	2100      	movs	r1, #0
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f001 fa7b 	bl	8008aa6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2240      	movs	r2, #64	; 0x40
 80075bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075c0:	2340      	movs	r3, #64	; 0x40
 80075c2:	2200      	movs	r2, #0
 80075c4:	2180      	movs	r1, #128	; 0x80
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 fa6d 	bl	8008aa6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2240      	movs	r2, #64	; 0x40
 80075d6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	460b      	mov	r3, r1
 80075ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	78fa      	ldrb	r2, [r7, #3]
 80075f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007602:	b480      	push	{r7}
 8007604:	b083      	sub	sp, #12
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2204      	movs	r2, #4
 800761a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800763a:	2b04      	cmp	r3, #4
 800763c:	d105      	bne.n	800764a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007666:	2b03      	cmp	r3, #3
 8007668:	d10b      	bne.n	8007682 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d005      	beq.n	8007682 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	460b      	mov	r3, r1
 80076b0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b082      	sub	sp, #8
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d009      	beq.n	8007704 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	6852      	ldr	r2, [r2, #4]
 80076fc:	b2d2      	uxtb	r2, r2
 80076fe:	4611      	mov	r1, r2
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	4798      	blx	r3
  }

  return USBD_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800770e:	b480      	push	{r7}
 8007710:	b087      	sub	sp, #28
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	3301      	adds	r3, #1
 8007724:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800772c:	8a3b      	ldrh	r3, [r7, #16]
 800772e:	021b      	lsls	r3, r3, #8
 8007730:	b21a      	sxth	r2, r3
 8007732:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007736:	4313      	orrs	r3, r2
 8007738:	b21b      	sxth	r3, r3
 800773a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800773c:	89fb      	ldrh	r3, [r7, #14]
}
 800773e:	4618      	mov	r0, r3
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
	...

0800774c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007762:	2b20      	cmp	r3, #32
 8007764:	d004      	beq.n	8007770 <USBD_StdDevReq+0x24>
 8007766:	2b40      	cmp	r3, #64	; 0x40
 8007768:	d002      	beq.n	8007770 <USBD_StdDevReq+0x24>
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <USBD_StdDevReq+0x38>
 800776e:	e050      	b.n	8007812 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
 800777e:	4603      	mov	r3, r0
 8007780:	73fb      	strb	r3, [r7, #15]
    break;
 8007782:	e04b      	b.n	800781c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	785b      	ldrb	r3, [r3, #1]
 8007788:	2b09      	cmp	r3, #9
 800778a:	d83c      	bhi.n	8007806 <USBD_StdDevReq+0xba>
 800778c:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <USBD_StdDevReq+0x48>)
 800778e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007792:	bf00      	nop
 8007794:	080077e9 	.word	0x080077e9
 8007798:	080077fd 	.word	0x080077fd
 800779c:	08007807 	.word	0x08007807
 80077a0:	080077f3 	.word	0x080077f3
 80077a4:	08007807 	.word	0x08007807
 80077a8:	080077c7 	.word	0x080077c7
 80077ac:	080077bd 	.word	0x080077bd
 80077b0:	08007807 	.word	0x08007807
 80077b4:	080077df 	.word	0x080077df
 80077b8:	080077d1 	.word	0x080077d1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f9ce 	bl	8007b60 <USBD_GetDescriptor>
      break;
 80077c4:	e024      	b.n	8007810 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fb33 	bl	8007e34 <USBD_SetAddress>
      break;
 80077ce:	e01f      	b.n	8007810 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fb70 	bl	8007eb8 <USBD_SetConfig>
 80077d8:	4603      	mov	r3, r0
 80077da:	73fb      	strb	r3, [r7, #15]
      break;
 80077dc:	e018      	b.n	8007810 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fc0d 	bl	8008000 <USBD_GetConfig>
      break;
 80077e6:	e013      	b.n	8007810 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fc3c 	bl	8008068 <USBD_GetStatus>
      break;
 80077f0:	e00e      	b.n	8007810 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fc6a 	bl	80080ce <USBD_SetFeature>
      break;
 80077fa:	e009      	b.n	8007810 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fc79 	bl	80080f6 <USBD_ClrFeature>
      break;
 8007804:	e004      	b.n	8007810 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fccf 	bl	80081ac <USBD_CtlError>
      break;
 800780e:	bf00      	nop
    }
    break;
 8007810:	e004      	b.n	800781c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fcc9 	bl	80081ac <USBD_CtlError>
    break;
 800781a:	bf00      	nop
  }

  return ret;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop

08007828 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800783e:	2b20      	cmp	r3, #32
 8007840:	d003      	beq.n	800784a <USBD_StdItfReq+0x22>
 8007842:	2b40      	cmp	r3, #64	; 0x40
 8007844:	d001      	beq.n	800784a <USBD_StdItfReq+0x22>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d12a      	bne.n	80078a0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007850:	3b01      	subs	r3, #1
 8007852:	2b02      	cmp	r3, #2
 8007854:	d81d      	bhi.n	8007892 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	889b      	ldrh	r3, [r3, #4]
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b01      	cmp	r3, #1
 800785e:	d813      	bhi.n	8007888 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	4798      	blx	r3
 800786e:	4603      	mov	r3, r0
 8007870:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	88db      	ldrh	r3, [r3, #6]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d110      	bne.n	800789c <USBD_StdItfReq+0x74>
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10d      	bne.n	800789c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fd5e 	bl	8008342 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007886:	e009      	b.n	800789c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fc8e 	bl	80081ac <USBD_CtlError>
      break;
 8007890:	e004      	b.n	800789c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fc89 	bl	80081ac <USBD_CtlError>
      break;
 800789a:	e000      	b.n	800789e <USBD_StdItfReq+0x76>
      break;
 800789c:	bf00      	nop
    }
    break;
 800789e:	e004      	b.n	80078aa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fc82 	bl	80081ac <USBD_CtlError>
    break;
 80078a8:	bf00      	nop
  }

  return ret;
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	889b      	ldrh	r3, [r3, #4]
 80078c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	d004      	beq.n	80078de <USBD_StdEPReq+0x2a>
 80078d4:	2b40      	cmp	r3, #64	; 0x40
 80078d6:	d002      	beq.n	80078de <USBD_StdEPReq+0x2a>
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00a      	beq.n	80078f2 <USBD_StdEPReq+0x3e>
 80078dc:	e135      	b.n	8007b4a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	4798      	blx	r3
 80078ec:	4603      	mov	r3, r0
 80078ee:	73fb      	strb	r3, [r7, #15]
    break;
 80078f0:	e130      	b.n	8007b54 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	785b      	ldrb	r3, [r3, #1]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d03e      	beq.n	8007978 <USBD_StdEPReq+0xc4>
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d002      	beq.n	8007904 <USBD_StdEPReq+0x50>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d077      	beq.n	80079f2 <USBD_StdEPReq+0x13e>
 8007902:	e11c      	b.n	8007b3e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800790a:	2b02      	cmp	r3, #2
 800790c:	d002      	beq.n	8007914 <USBD_StdEPReq+0x60>
 800790e:	2b03      	cmp	r3, #3
 8007910:	d015      	beq.n	800793e <USBD_StdEPReq+0x8a>
 8007912:	e02b      	b.n	800796c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00c      	beq.n	8007934 <USBD_StdEPReq+0x80>
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	2b80      	cmp	r3, #128	; 0x80
 800791e:	d009      	beq.n	8007934 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f001 f903 	bl	8008b30 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800792a:	2180      	movs	r1, #128	; 0x80
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f001 f8ff 	bl	8008b30 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007932:	e020      	b.n	8007976 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fc38 	bl	80081ac <USBD_CtlError>
        break;
 800793c:	e01b      	b.n	8007976 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	885b      	ldrh	r3, [r3, #2]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10e      	bne.n	8007964 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00b      	beq.n	8007964 <USBD_StdEPReq+0xb0>
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	2b80      	cmp	r3, #128	; 0x80
 8007950:	d008      	beq.n	8007964 <USBD_StdEPReq+0xb0>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	88db      	ldrh	r3, [r3, #6]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d104      	bne.n	8007964 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f001 f8e6 	bl	8008b30 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fcec 	bl	8008342 <USBD_CtlSendStatus>

        break;
 800796a:	e004      	b.n	8007976 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fc1c 	bl	80081ac <USBD_CtlError>
        break;
 8007974:	bf00      	nop
      }
      break;
 8007976:	e0e7      	b.n	8007b48 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800797e:	2b02      	cmp	r3, #2
 8007980:	d002      	beq.n	8007988 <USBD_StdEPReq+0xd4>
 8007982:	2b03      	cmp	r3, #3
 8007984:	d015      	beq.n	80079b2 <USBD_StdEPReq+0xfe>
 8007986:	e02d      	b.n	80079e4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00c      	beq.n	80079a8 <USBD_StdEPReq+0xf4>
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	2b80      	cmp	r3, #128	; 0x80
 8007992:	d009      	beq.n	80079a8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 f8c9 	bl	8008b30 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800799e:	2180      	movs	r1, #128	; 0x80
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 f8c5 	bl	8008b30 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80079a6:	e023      	b.n	80079f0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fbfe 	bl	80081ac <USBD_CtlError>
        break;
 80079b0:	e01e      	b.n	80079f0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	885b      	ldrh	r3, [r3, #2]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d119      	bne.n	80079ee <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d004      	beq.n	80079ce <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 f8d0 	bl	8008b6e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fcb7 	bl	8008342 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
        }
        break;
 80079e2:	e004      	b.n	80079ee <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fbe0 	bl	80081ac <USBD_CtlError>
        break;
 80079ec:	e000      	b.n	80079f0 <USBD_StdEPReq+0x13c>
        break;
 80079ee:	bf00      	nop
      }
      break;
 80079f0:	e0aa      	b.n	8007b48 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d002      	beq.n	8007a02 <USBD_StdEPReq+0x14e>
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d032      	beq.n	8007a66 <USBD_StdEPReq+0x1b2>
 8007a00:	e097      	b.n	8007b32 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d007      	beq.n	8007a18 <USBD_StdEPReq+0x164>
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	2b80      	cmp	r3, #128	; 0x80
 8007a0c:	d004      	beq.n	8007a18 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fbcb 	bl	80081ac <USBD_CtlError>
          break;
 8007a16:	e091      	b.n	8007b3c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	da0b      	bge.n	8007a38 <USBD_StdEPReq+0x184>
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a26:	4613      	mov	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	3310      	adds	r3, #16
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	4413      	add	r3, r2
 8007a34:	3304      	adds	r3, #4
 8007a36:	e00b      	b.n	8007a50 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	3304      	adds	r3, #4
 8007a50:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2200      	movs	r2, #0
 8007a56:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fc15 	bl	800828e <USBD_CtlSendData>
        break;
 8007a64:	e06a      	b.n	8007b3c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007a66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	da11      	bge.n	8007a92 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	f003 020f 	and.w	r2, r3, #15
 8007a74:	6879      	ldr	r1, [r7, #4]
 8007a76:	4613      	mov	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	440b      	add	r3, r1
 8007a80:	3324      	adds	r3, #36	; 0x24
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d117      	bne.n	8007ab8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fb8e 	bl	80081ac <USBD_CtlError>
            break;
 8007a90:	e054      	b.n	8007b3c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
 8007a94:	f003 020f 	and.w	r2, r3, #15
 8007a98:	6879      	ldr	r1, [r7, #4]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	440b      	add	r3, r1
 8007aa4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d104      	bne.n	8007ab8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fb7b 	bl	80081ac <USBD_CtlError>
            break;
 8007ab6:	e041      	b.n	8007b3c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	da0b      	bge.n	8007ad8 <USBD_StdEPReq+0x224>
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	3310      	adds	r3, #16
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	e00b      	b.n	8007af0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	4413      	add	r3, r2
 8007aee:	3304      	adds	r3, #4
 8007af0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007af2:	7bbb      	ldrb	r3, [r7, #14]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <USBD_StdEPReq+0x24a>
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	2b80      	cmp	r3, #128	; 0x80
 8007afc:	d103      	bne.n	8007b06 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2200      	movs	r2, #0
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	e00e      	b.n	8007b24 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 f84e 	bl	8008bac <USBD_LL_IsStallEP>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	e002      	b.n	8007b24 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2200      	movs	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2202      	movs	r2, #2
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fbaf 	bl	800828e <USBD_CtlSendData>
          break;
 8007b30:	e004      	b.n	8007b3c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fb39 	bl	80081ac <USBD_CtlError>
        break;
 8007b3a:	bf00      	nop
      }
      break;
 8007b3c:	e004      	b.n	8007b48 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fb33 	bl	80081ac <USBD_CtlError>
      break;
 8007b46:	bf00      	nop
    }
    break;
 8007b48:	e004      	b.n	8007b54 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fb2d 	bl	80081ac <USBD_CtlError>
    break;
 8007b52:	bf00      	nop
  }

  return ret;
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	885b      	ldrh	r3, [r3, #2]
 8007b7a:	0a1b      	lsrs	r3, r3, #8
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	2b06      	cmp	r3, #6
 8007b82:	f200 8128 	bhi.w	8007dd6 <USBD_GetDescriptor+0x276>
 8007b86:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <USBD_GetDescriptor+0x2c>)
 8007b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8c:	08007ba9 	.word	0x08007ba9
 8007b90:	08007bc1 	.word	0x08007bc1
 8007b94:	08007c01 	.word	0x08007c01
 8007b98:	08007dd7 	.word	0x08007dd7
 8007b9c:	08007dd7 	.word	0x08007dd7
 8007ba0:	08007d77 	.word	0x08007d77
 8007ba4:	08007da3 	.word	0x08007da3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	7c12      	ldrb	r2, [r2, #16]
 8007bb4:	f107 0108 	add.w	r1, r7, #8
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4798      	blx	r3
 8007bbc:	60f8      	str	r0, [r7, #12]
    break;
 8007bbe:	e112      	b.n	8007de6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	7c1b      	ldrb	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10d      	bne.n	8007be4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd0:	f107 0208 	add.w	r2, r7, #8
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	4798      	blx	r3
 8007bd8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	2202      	movs	r2, #2
 8007be0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007be2:	e100      	b.n	8007de6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	f107 0208 	add.w	r2, r7, #8
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	4798      	blx	r3
 8007bf4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	701a      	strb	r2, [r3, #0]
    break;
 8007bfe:	e0f2      	b.n	8007de6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	885b      	ldrh	r3, [r3, #2]
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b05      	cmp	r3, #5
 8007c08:	f200 80ac 	bhi.w	8007d64 <USBD_GetDescriptor+0x204>
 8007c0c:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <USBD_GetDescriptor+0xb4>)
 8007c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c12:	bf00      	nop
 8007c14:	08007c2d 	.word	0x08007c2d
 8007c18:	08007c61 	.word	0x08007c61
 8007c1c:	08007c95 	.word	0x08007c95
 8007c20:	08007cc9 	.word	0x08007cc9
 8007c24:	08007cfd 	.word	0x08007cfd
 8007c28:	08007d31 	.word	0x08007d31
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00b      	beq.n	8007c50 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	7c12      	ldrb	r2, [r2, #16]
 8007c44:	f107 0108 	add.w	r1, r7, #8
 8007c48:	4610      	mov	r0, r2
 8007c4a:	4798      	blx	r3
 8007c4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c4e:	e091      	b.n	8007d74 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 faaa 	bl	80081ac <USBD_CtlError>
        err++;
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	72fb      	strb	r3, [r7, #11]
      break;
 8007c5e:	e089      	b.n	8007d74 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00b      	beq.n	8007c84 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	7c12      	ldrb	r2, [r2, #16]
 8007c78:	f107 0108 	add.w	r1, r7, #8
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4798      	blx	r3
 8007c80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c82:	e077      	b.n	8007d74 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fa90 	bl	80081ac <USBD_CtlError>
        err++;
 8007c8c:	7afb      	ldrb	r3, [r7, #11]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	72fb      	strb	r3, [r7, #11]
      break;
 8007c92:	e06f      	b.n	8007d74 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00b      	beq.n	8007cb8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	7c12      	ldrb	r2, [r2, #16]
 8007cac:	f107 0108 	add.w	r1, r7, #8
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4798      	blx	r3
 8007cb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cb6:	e05d      	b.n	8007d74 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa76 	bl	80081ac <USBD_CtlError>
        err++;
 8007cc0:	7afb      	ldrb	r3, [r7, #11]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	72fb      	strb	r3, [r7, #11]
      break;
 8007cc6:	e055      	b.n	8007d74 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00b      	beq.n	8007cec <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7c12      	ldrb	r2, [r2, #16]
 8007ce0:	f107 0108 	add.w	r1, r7, #8
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	4798      	blx	r3
 8007ce8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cea:	e043      	b.n	8007d74 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa5c 	bl	80081ac <USBD_CtlError>
        err++;
 8007cf4:	7afb      	ldrb	r3, [r7, #11]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	72fb      	strb	r3, [r7, #11]
      break;
 8007cfa:	e03b      	b.n	8007d74 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00b      	beq.n	8007d20 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	7c12      	ldrb	r2, [r2, #16]
 8007d14:	f107 0108 	add.w	r1, r7, #8
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
 8007d1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d1e:	e029      	b.n	8007d74 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa42 	bl	80081ac <USBD_CtlError>
        err++;
 8007d28:	7afb      	ldrb	r3, [r7, #11]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d2e:	e021      	b.n	8007d74 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00b      	beq.n	8007d54 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	7c12      	ldrb	r2, [r2, #16]
 8007d48:	f107 0108 	add.w	r1, r7, #8
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4798      	blx	r3
 8007d50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d52:	e00f      	b.n	8007d74 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa28 	bl	80081ac <USBD_CtlError>
        err++;
 8007d5c:	7afb      	ldrb	r3, [r7, #11]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	72fb      	strb	r3, [r7, #11]
      break;
 8007d62:	e007      	b.n	8007d74 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fa20 	bl	80081ac <USBD_CtlError>
      err++;
 8007d6c:	7afb      	ldrb	r3, [r7, #11]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007d72:	bf00      	nop
    }
    break;
 8007d74:	e037      	b.n	8007de6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	7c1b      	ldrb	r3, [r3, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d109      	bne.n	8007d92 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d86:	f107 0208 	add.w	r2, r7, #8
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	4798      	blx	r3
 8007d8e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d90:	e029      	b.n	8007de6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fa09 	bl	80081ac <USBD_CtlError>
      err++;
 8007d9a:	7afb      	ldrb	r3, [r7, #11]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	72fb      	strb	r3, [r7, #11]
    break;
 8007da0:	e021      	b.n	8007de6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	7c1b      	ldrb	r3, [r3, #16]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10d      	bne.n	8007dc6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db2:	f107 0208 	add.w	r2, r7, #8
 8007db6:	4610      	mov	r0, r2
 8007db8:	4798      	blx	r3
 8007dba:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	2207      	movs	r2, #7
 8007dc2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007dc4:	e00f      	b.n	8007de6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f9ef 	bl	80081ac <USBD_CtlError>
      err++;
 8007dce:	7afb      	ldrb	r3, [r7, #11]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	72fb      	strb	r3, [r7, #11]
    break;
 8007dd4:	e007      	b.n	8007de6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f9e7 	bl	80081ac <USBD_CtlError>
    err++;
 8007dde:	7afb      	ldrb	r3, [r7, #11]
 8007de0:	3301      	adds	r3, #1
 8007de2:	72fb      	strb	r3, [r7, #11]
    break;
 8007de4:	bf00      	nop
  }

  if (err != 0U)
 8007de6:	7afb      	ldrb	r3, [r7, #11]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d11e      	bne.n	8007e2a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	88db      	ldrh	r3, [r3, #6]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d016      	beq.n	8007e22 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007df4:	893b      	ldrh	r3, [r7, #8]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00e      	beq.n	8007e18 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	88da      	ldrh	r2, [r3, #6]
 8007dfe:	893b      	ldrh	r3, [r7, #8]
 8007e00:	4293      	cmp	r3, r2
 8007e02:	bf28      	it	cs
 8007e04:	4613      	movcs	r3, r2
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e0a:	893b      	ldrh	r3, [r7, #8]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	68f9      	ldr	r1, [r7, #12]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fa3c 	bl	800828e <USBD_CtlSendData>
 8007e16:	e009      	b.n	8007e2c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f9c6 	bl	80081ac <USBD_CtlError>
 8007e20:	e004      	b.n	8007e2c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fa8d 	bl	8008342 <USBD_CtlSendStatus>
 8007e28:	e000      	b.n	8007e2c <USBD_GetDescriptor+0x2cc>
    return;
 8007e2a:	bf00      	nop
    }
  }
}
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop

08007e34 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	889b      	ldrh	r3, [r3, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d130      	bne.n	8007ea8 <USBD_SetAddress+0x74>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	88db      	ldrh	r3, [r3, #6]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d12c      	bne.n	8007ea8 <USBD_SetAddress+0x74>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	885b      	ldrh	r3, [r3, #2]
 8007e52:	2b7f      	cmp	r3, #127	; 0x7f
 8007e54:	d828      	bhi.n	8007ea8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	885b      	ldrh	r3, [r3, #2]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e68:	2b03      	cmp	r3, #3
 8007e6a:	d104      	bne.n	8007e76 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f99c 	bl	80081ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e74:	e01c      	b.n	8007eb0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	7bfa      	ldrb	r2, [r7, #15]
 8007e7a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	4619      	mov	r1, r3
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 febe 	bl	8008c04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fa5a 	bl	8008342 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d004      	beq.n	8007e9e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e9c:	e008      	b.n	8007eb0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ea6:	e003      	b.n	8007eb0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f97e 	bl	80081ac <USBD_CtlError>
  }
}
 8007eb0:	bf00      	nop
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	885b      	ldrh	r3, [r3, #2]
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	4b4b      	ldr	r3, [pc, #300]	; (8007ffc <USBD_SetConfig+0x144>)
 8007ece:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ed0:	4b4a      	ldr	r3, [pc, #296]	; (8007ffc <USBD_SetConfig+0x144>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d905      	bls.n	8007ee4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f966 	bl	80081ac <USBD_CtlError>
    return USBD_FAIL;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e087      	b.n	8007ff4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d002      	beq.n	8007ef4 <USBD_SetConfig+0x3c>
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d025      	beq.n	8007f3e <USBD_SetConfig+0x86>
 8007ef2:	e071      	b.n	8007fd8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007ef4:	4b41      	ldr	r3, [pc, #260]	; (8007ffc <USBD_SetConfig+0x144>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d01c      	beq.n	8007f36 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007efc:	4b3f      	ldr	r3, [pc, #252]	; (8007ffc <USBD_SetConfig+0x144>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f06:	4b3d      	ldr	r3, [pc, #244]	; (8007ffc <USBD_SetConfig+0x144>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff f9a7 	bl	8007260 <USBD_SetClassConfig>
 8007f12:	4603      	mov	r3, r0
 8007f14:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d004      	beq.n	8007f26 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f944 	bl	80081ac <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f24:	e065      	b.n	8007ff2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fa0b 	bl	8008342 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2203      	movs	r2, #3
 8007f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f34:	e05d      	b.n	8007ff2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa03 	bl	8008342 <USBD_CtlSendStatus>
    break;
 8007f3c:	e059      	b.n	8007ff2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007f3e:	4b2f      	ldr	r3, [pc, #188]	; (8007ffc <USBD_SetConfig+0x144>)
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d112      	bne.n	8007f6c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2202      	movs	r2, #2
 8007f4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007f4e:	4b2b      	ldr	r3, [pc, #172]	; (8007ffc <USBD_SetConfig+0x144>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f58:	4b28      	ldr	r3, [pc, #160]	; (8007ffc <USBD_SetConfig+0x144>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7ff f99a 	bl	8007298 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f9ec 	bl	8008342 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f6a:	e042      	b.n	8007ff2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007f6c:	4b23      	ldr	r3, [pc, #140]	; (8007ffc <USBD_SetConfig+0x144>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	461a      	mov	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d02a      	beq.n	8007fd0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7ff f988 	bl	8007298 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007f88:	4b1c      	ldr	r3, [pc, #112]	; (8007ffc <USBD_SetConfig+0x144>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f92:	4b1a      	ldr	r3, [pc, #104]	; (8007ffc <USBD_SetConfig+0x144>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff f961 	bl	8007260 <USBD_SetClassConfig>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00f      	beq.n	8007fc8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f8fe 	bl	80081ac <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7ff f96d 	bl	8007298 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007fc6:	e014      	b.n	8007ff2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f9ba 	bl	8008342 <USBD_CtlSendStatus>
    break;
 8007fce:	e010      	b.n	8007ff2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f9b6 	bl	8008342 <USBD_CtlSendStatus>
    break;
 8007fd6:	e00c      	b.n	8007ff2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007fd8:	6839      	ldr	r1, [r7, #0]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f8e6 	bl	80081ac <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fe0:	4b06      	ldr	r3, [pc, #24]	; (8007ffc <USBD_SetConfig+0x144>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7ff f956 	bl	8007298 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007fec:	2303      	movs	r3, #3
 8007fee:	73fb      	strb	r3, [r7, #15]
    break;
 8007ff0:	bf00      	nop
  }

  return ret;
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	2000029c 	.word	0x2000029c

08008000 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	88db      	ldrh	r3, [r3, #6]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d004      	beq.n	800801c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f8c9 	bl	80081ac <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800801a:	e021      	b.n	8008060 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008022:	2b01      	cmp	r3, #1
 8008024:	db17      	blt.n	8008056 <USBD_GetConfig+0x56>
 8008026:	2b02      	cmp	r3, #2
 8008028:	dd02      	ble.n	8008030 <USBD_GetConfig+0x30>
 800802a:	2b03      	cmp	r3, #3
 800802c:	d00b      	beq.n	8008046 <USBD_GetConfig+0x46>
 800802e:	e012      	b.n	8008056 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	3308      	adds	r3, #8
 800803a:	2201      	movs	r2, #1
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f925 	bl	800828e <USBD_CtlSendData>
      break;
 8008044:	e00c      	b.n	8008060 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	3304      	adds	r3, #4
 800804a:	2201      	movs	r2, #1
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f91d 	bl	800828e <USBD_CtlSendData>
      break;
 8008054:	e004      	b.n	8008060 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f8a7 	bl	80081ac <USBD_CtlError>
      break;
 800805e:	bf00      	nop
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008078:	3b01      	subs	r3, #1
 800807a:	2b02      	cmp	r3, #2
 800807c:	d81e      	bhi.n	80080bc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	88db      	ldrh	r3, [r3, #6]
 8008082:	2b02      	cmp	r3, #2
 8008084:	d004      	beq.n	8008090 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f88f 	bl	80081ac <USBD_CtlError>
      break;
 800808e:	e01a      	b.n	80080c6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800809c:	2b00      	cmp	r3, #0
 800809e:	d005      	beq.n	80080ac <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	f043 0202 	orr.w	r2, r3, #2
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	330c      	adds	r3, #12
 80080b0:	2202      	movs	r2, #2
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f8ea 	bl	800828e <USBD_CtlSendData>
    break;
 80080ba:	e004      	b.n	80080c6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f874 	bl	80081ac <USBD_CtlError>
    break;
 80080c4:	bf00      	nop
  }
}
 80080c6:	bf00      	nop
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b082      	sub	sp, #8
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	885b      	ldrh	r3, [r3, #2]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d106      	bne.n	80080ee <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f92a 	bl	8008342 <USBD_CtlSendStatus>
  }
}
 80080ee:	bf00      	nop
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008106:	3b01      	subs	r3, #1
 8008108:	2b02      	cmp	r3, #2
 800810a:	d80b      	bhi.n	8008124 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	885b      	ldrh	r3, [r3, #2]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d10c      	bne.n	800812e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f910 	bl	8008342 <USBD_CtlSendStatus>
      }
      break;
 8008122:	e004      	b.n	800812e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f840 	bl	80081ac <USBD_CtlError>
      break;
 800812c:	e000      	b.n	8008130 <USBD_ClrFeature+0x3a>
      break;
 800812e:	bf00      	nop
  }
}
 8008130:	bf00      	nop
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	781a      	ldrb	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3301      	adds	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	781a      	ldrb	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3301      	adds	r3, #1
 8008160:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7ff fad3 	bl	800770e <SWAPBYTE>
 8008168:	4603      	mov	r3, r0
 800816a:	461a      	mov	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3301      	adds	r3, #1
 8008174:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	3301      	adds	r3, #1
 800817a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7ff fac6 	bl	800770e <SWAPBYTE>
 8008182:	4603      	mov	r3, r0
 8008184:	461a      	mov	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3301      	adds	r3, #1
 800818e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	3301      	adds	r3, #1
 8008194:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f7ff fab9 	bl	800770e <SWAPBYTE>
 800819c:	4603      	mov	r3, r0
 800819e:	461a      	mov	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	80da      	strh	r2, [r3, #6]
}
 80081a4:	bf00      	nop
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081b6:	2180      	movs	r1, #128	; 0x80
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fcb9 	bl	8008b30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80081be:	2100      	movs	r1, #0
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fcb5 	bl	8008b30 <USBD_LL_StallEP>
}
 80081c6:	bf00      	nop
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b086      	sub	sp, #24
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	60f8      	str	r0, [r7, #12]
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081da:	2300      	movs	r3, #0
 80081dc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d036      	beq.n	8008252 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081e8:	6938      	ldr	r0, [r7, #16]
 80081ea:	f000 f836 	bl	800825a <USBD_GetLen>
 80081ee:	4603      	mov	r3, r0
 80081f0:	3301      	adds	r3, #1
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	4413      	add	r3, r2
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	7812      	ldrb	r2, [r2, #0]
 8008206:	701a      	strb	r2, [r3, #0]
  idx++;
 8008208:	7dfb      	ldrb	r3, [r7, #23]
 800820a:	3301      	adds	r3, #1
 800820c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	4413      	add	r3, r2
 8008214:	2203      	movs	r2, #3
 8008216:	701a      	strb	r2, [r3, #0]
  idx++;
 8008218:	7dfb      	ldrb	r3, [r7, #23]
 800821a:	3301      	adds	r3, #1
 800821c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800821e:	e013      	b.n	8008248 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	4413      	add	r3, r2
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	7812      	ldrb	r2, [r2, #0]
 800822a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	3301      	adds	r3, #1
 8008230:	613b      	str	r3, [r7, #16]
    idx++;
 8008232:	7dfb      	ldrb	r3, [r7, #23]
 8008234:	3301      	adds	r3, #1
 8008236:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	4413      	add	r3, r2
 800823e:	2200      	movs	r2, #0
 8008240:	701a      	strb	r2, [r3, #0]
    idx++;
 8008242:	7dfb      	ldrb	r3, [r7, #23]
 8008244:	3301      	adds	r3, #1
 8008246:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e7      	bne.n	8008220 <USBD_GetString+0x52>
 8008250:	e000      	b.n	8008254 <USBD_GetString+0x86>
    return;
 8008252:	bf00      	nop
  }
}
 8008254:	3718      	adds	r7, #24
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800825a:	b480      	push	{r7}
 800825c:	b085      	sub	sp, #20
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008262:	2300      	movs	r3, #0
 8008264:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800826a:	e005      	b.n	8008278 <USBD_GetLen+0x1e>
  {
    len++;
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	3301      	adds	r3, #1
 8008270:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	3301      	adds	r3, #1
 8008276:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1f5      	bne.n	800826c <USBD_GetLen+0x12>
  }

  return len;
 8008280:	7bfb      	ldrb	r3, [r7, #15]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2202      	movs	r2, #2
 800829e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	2100      	movs	r1, #0
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 fcc4 	bl	8008c42 <USBD_LL_Transmit>

  return USBD_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	2100      	movs	r1, #0
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 fcb3 	bl	8008c42 <USBD_LL_Transmit>

  return USBD_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2203      	movs	r2, #3
 80082f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	2100      	movs	r1, #0
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 fcb7 	bl	8008c84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	2100      	movs	r1, #0
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f000 fca6 	bl	8008c84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b082      	sub	sp, #8
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2204      	movs	r2, #4
 800834e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008352:	2300      	movs	r3, #0
 8008354:	2200      	movs	r2, #0
 8008356:	2100      	movs	r1, #0
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fc72 	bl	8008c42 <USBD_LL_Transmit>

  return USBD_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2205      	movs	r2, #5
 8008374:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008378:	2300      	movs	r3, #0
 800837a:	2200      	movs	r2, #0
 800837c:	2100      	movs	r1, #0
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fc80 	bl	8008c84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
	...

08008390 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008394:	2200      	movs	r2, #0
 8008396:	4912      	ldr	r1, [pc, #72]	; (80083e0 <MX_USB_DEVICE_Init+0x50>)
 8008398:	4812      	ldr	r0, [pc, #72]	; (80083e4 <MX_USB_DEVICE_Init+0x54>)
 800839a:	f7fe fef3 	bl	8007184 <USBD_Init>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083a4:	f7f8 ffae 	bl	8001304 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80083a8:	490f      	ldr	r1, [pc, #60]	; (80083e8 <MX_USB_DEVICE_Init+0x58>)
 80083aa:	480e      	ldr	r0, [pc, #56]	; (80083e4 <MX_USB_DEVICE_Init+0x54>)
 80083ac:	f7fe ff20 	bl	80071f0 <USBD_RegisterClass>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083b6:	f7f8 ffa5 	bl	8001304 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083ba:	490c      	ldr	r1, [pc, #48]	; (80083ec <MX_USB_DEVICE_Init+0x5c>)
 80083bc:	4809      	ldr	r0, [pc, #36]	; (80083e4 <MX_USB_DEVICE_Init+0x54>)
 80083be:	f7fe fe75 	bl	80070ac <USBD_CDC_RegisterInterface>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083c8:	f7f8 ff9c 	bl	8001304 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083cc:	4805      	ldr	r0, [pc, #20]	; (80083e4 <MX_USB_DEVICE_Init+0x54>)
 80083ce:	f7fe ff30 	bl	8007232 <USBD_Start>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083d8:	f7f8 ff94 	bl	8001304 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083dc:	bf00      	nop
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	20000130 	.word	0x20000130
 80083e4:	200003c8 	.word	0x200003c8
 80083e8:	20000018 	.word	0x20000018
 80083ec:	2000011c 	.word	0x2000011c

080083f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083f4:	2200      	movs	r2, #0
 80083f6:	4905      	ldr	r1, [pc, #20]	; (800840c <CDC_Init_FS+0x1c>)
 80083f8:	4805      	ldr	r0, [pc, #20]	; (8008410 <CDC_Init_FS+0x20>)
 80083fa:	f7fe fe6c 	bl	80070d6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083fe:	4905      	ldr	r1, [pc, #20]	; (8008414 <CDC_Init_FS+0x24>)
 8008400:	4803      	ldr	r0, [pc, #12]	; (8008410 <CDC_Init_FS+0x20>)
 8008402:	f7fe fe81 	bl	8007108 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008406:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008408:	4618      	mov	r0, r3
 800840a:	bd80      	pop	{r7, pc}
 800840c:	20000e98 	.word	0x20000e98
 8008410:	200003c8 	.word	0x200003c8
 8008414:	20000698 	.word	0x20000698

08008418 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800841c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800841e:	4618      	mov	r0, r3
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	6039      	str	r1, [r7, #0]
 8008432:	71fb      	strb	r3, [r7, #7]
 8008434:	4613      	mov	r3, r2
 8008436:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008438:	79fb      	ldrb	r3, [r7, #7]
 800843a:	2b23      	cmp	r3, #35	; 0x23
 800843c:	d84a      	bhi.n	80084d4 <CDC_Control_FS+0xac>
 800843e:	a201      	add	r2, pc, #4	; (adr r2, 8008444 <CDC_Control_FS+0x1c>)
 8008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008444:	080084d5 	.word	0x080084d5
 8008448:	080084d5 	.word	0x080084d5
 800844c:	080084d5 	.word	0x080084d5
 8008450:	080084d5 	.word	0x080084d5
 8008454:	080084d5 	.word	0x080084d5
 8008458:	080084d5 	.word	0x080084d5
 800845c:	080084d5 	.word	0x080084d5
 8008460:	080084d5 	.word	0x080084d5
 8008464:	080084d5 	.word	0x080084d5
 8008468:	080084d5 	.word	0x080084d5
 800846c:	080084d5 	.word	0x080084d5
 8008470:	080084d5 	.word	0x080084d5
 8008474:	080084d5 	.word	0x080084d5
 8008478:	080084d5 	.word	0x080084d5
 800847c:	080084d5 	.word	0x080084d5
 8008480:	080084d5 	.word	0x080084d5
 8008484:	080084d5 	.word	0x080084d5
 8008488:	080084d5 	.word	0x080084d5
 800848c:	080084d5 	.word	0x080084d5
 8008490:	080084d5 	.word	0x080084d5
 8008494:	080084d5 	.word	0x080084d5
 8008498:	080084d5 	.word	0x080084d5
 800849c:	080084d5 	.word	0x080084d5
 80084a0:	080084d5 	.word	0x080084d5
 80084a4:	080084d5 	.word	0x080084d5
 80084a8:	080084d5 	.word	0x080084d5
 80084ac:	080084d5 	.word	0x080084d5
 80084b0:	080084d5 	.word	0x080084d5
 80084b4:	080084d5 	.word	0x080084d5
 80084b8:	080084d5 	.word	0x080084d5
 80084bc:	080084d5 	.word	0x080084d5
 80084c0:	080084d5 	.word	0x080084d5
 80084c4:	080084d5 	.word	0x080084d5
 80084c8:	080084d5 	.word	0x080084d5
 80084cc:	080084d5 	.word	0x080084d5
 80084d0:	080084d5 	.word	0x080084d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084d4:	bf00      	nop
  }

  return (USBD_OK);
 80084d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084ee:	6879      	ldr	r1, [r7, #4]
 80084f0:	4805      	ldr	r0, [pc, #20]	; (8008508 <CDC_Receive_FS+0x24>)
 80084f2:	f7fe fe09 	bl	8007108 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084f6:	4804      	ldr	r0, [pc, #16]	; (8008508 <CDC_Receive_FS+0x24>)
 80084f8:	f7fe fe1a 	bl	8007130 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80084fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	200003c8 	.word	0x200003c8

0800850c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	4613      	mov	r3, r2
 8008518:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800851e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008522:	4618      	mov	r0, r3
 8008524:	371c      	adds	r7, #28
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
	...

08008530 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	4603      	mov	r3, r0
 8008538:	6039      	str	r1, [r7, #0]
 800853a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	2212      	movs	r2, #18
 8008540:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008542:	4b03      	ldr	r3, [pc, #12]	; (8008550 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008544:	4618      	mov	r0, r3
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	2000014c 	.word	0x2000014c

08008554 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	6039      	str	r1, [r7, #0]
 800855e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2204      	movs	r2, #4
 8008564:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008566:	4b03      	ldr	r3, [pc, #12]	; (8008574 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008568:	4618      	mov	r0, r3
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	20000160 	.word	0x20000160

08008578 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	4603      	mov	r3, r0
 8008580:	6039      	str	r1, [r7, #0]
 8008582:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008584:	79fb      	ldrb	r3, [r7, #7]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d105      	bne.n	8008596 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	4907      	ldr	r1, [pc, #28]	; (80085ac <USBD_FS_ProductStrDescriptor+0x34>)
 800858e:	4808      	ldr	r0, [pc, #32]	; (80085b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008590:	f7ff fe1d 	bl	80081ce <USBD_GetString>
 8008594:	e004      	b.n	80085a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	4904      	ldr	r1, [pc, #16]	; (80085ac <USBD_FS_ProductStrDescriptor+0x34>)
 800859a:	4805      	ldr	r0, [pc, #20]	; (80085b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800859c:	f7ff fe17 	bl	80081ce <USBD_GetString>
  }
  return USBD_StrDesc;
 80085a0:	4b02      	ldr	r3, [pc, #8]	; (80085ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	20001698 	.word	0x20001698
 80085b0:	080095fc 	.word	0x080095fc

080085b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	4603      	mov	r3, r0
 80085bc:	6039      	str	r1, [r7, #0]
 80085be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	4904      	ldr	r1, [pc, #16]	; (80085d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085c4:	4804      	ldr	r0, [pc, #16]	; (80085d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085c6:	f7ff fe02 	bl	80081ce <USBD_GetString>
  return USBD_StrDesc;
 80085ca:	4b02      	ldr	r3, [pc, #8]	; (80085d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	20001698 	.word	0x20001698
 80085d8:	08009614 	.word	0x08009614

080085dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	6039      	str	r1, [r7, #0]
 80085e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	221a      	movs	r2, #26
 80085ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085ee:	f000 f843 	bl	8008678 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085f2:	4b02      	ldr	r3, [pc, #8]	; (80085fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	20000164 	.word	0x20000164

08008600 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	6039      	str	r1, [r7, #0]
 800860a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800860c:	79fb      	ldrb	r3, [r7, #7]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d105      	bne.n	800861e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	4907      	ldr	r1, [pc, #28]	; (8008634 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008616:	4808      	ldr	r0, [pc, #32]	; (8008638 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008618:	f7ff fdd9 	bl	80081ce <USBD_GetString>
 800861c:	e004      	b.n	8008628 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	4904      	ldr	r1, [pc, #16]	; (8008634 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008622:	4805      	ldr	r0, [pc, #20]	; (8008638 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008624:	f7ff fdd3 	bl	80081ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8008628:	4b02      	ldr	r3, [pc, #8]	; (8008634 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20001698 	.word	0x20001698
 8008638:	08009628 	.word	0x08009628

0800863c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	4603      	mov	r3, r0
 8008644:	6039      	str	r1, [r7, #0]
 8008646:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008648:	79fb      	ldrb	r3, [r7, #7]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d105      	bne.n	800865a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	4907      	ldr	r1, [pc, #28]	; (8008670 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008652:	4808      	ldr	r0, [pc, #32]	; (8008674 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008654:	f7ff fdbb 	bl	80081ce <USBD_GetString>
 8008658:	e004      	b.n	8008664 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	4904      	ldr	r1, [pc, #16]	; (8008670 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800865e:	4805      	ldr	r0, [pc, #20]	; (8008674 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008660:	f7ff fdb5 	bl	80081ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8008664:	4b02      	ldr	r3, [pc, #8]	; (8008670 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008666:	4618      	mov	r0, r3
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20001698 	.word	0x20001698
 8008674:	08009634 	.word	0x08009634

08008678 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800867e:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <Get_SerialNum+0x44>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008684:	4b0e      	ldr	r3, [pc, #56]	; (80086c0 <Get_SerialNum+0x48>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800868a:	4b0e      	ldr	r3, [pc, #56]	; (80086c4 <Get_SerialNum+0x4c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4413      	add	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d009      	beq.n	80086b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800869e:	2208      	movs	r2, #8
 80086a0:	4909      	ldr	r1, [pc, #36]	; (80086c8 <Get_SerialNum+0x50>)
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f000 f814 	bl	80086d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086a8:	2204      	movs	r2, #4
 80086aa:	4908      	ldr	r1, [pc, #32]	; (80086cc <Get_SerialNum+0x54>)
 80086ac:	68b8      	ldr	r0, [r7, #8]
 80086ae:	f000 f80f 	bl	80086d0 <IntToUnicode>
  }
}
 80086b2:	bf00      	nop
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	1fff7a10 	.word	0x1fff7a10
 80086c0:	1fff7a14 	.word	0x1fff7a14
 80086c4:	1fff7a18 	.word	0x1fff7a18
 80086c8:	20000166 	.word	0x20000166
 80086cc:	20000176 	.word	0x20000176

080086d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	4613      	mov	r3, r2
 80086dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086e2:	2300      	movs	r3, #0
 80086e4:	75fb      	strb	r3, [r7, #23]
 80086e6:	e027      	b.n	8008738 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	0f1b      	lsrs	r3, r3, #28
 80086ec:	2b09      	cmp	r3, #9
 80086ee:	d80b      	bhi.n	8008708 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	0f1b      	lsrs	r3, r3, #28
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	7dfb      	ldrb	r3, [r7, #23]
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	4619      	mov	r1, r3
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	440b      	add	r3, r1
 8008700:	3230      	adds	r2, #48	; 0x30
 8008702:	b2d2      	uxtb	r2, r2
 8008704:	701a      	strb	r2, [r3, #0]
 8008706:	e00a      	b.n	800871e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	0f1b      	lsrs	r3, r3, #28
 800870c:	b2da      	uxtb	r2, r3
 800870e:	7dfb      	ldrb	r3, [r7, #23]
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	4619      	mov	r1, r3
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	440b      	add	r3, r1
 8008718:	3237      	adds	r2, #55	; 0x37
 800871a:	b2d2      	uxtb	r2, r2
 800871c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	011b      	lsls	r3, r3, #4
 8008722:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008724:	7dfb      	ldrb	r3, [r7, #23]
 8008726:	005b      	lsls	r3, r3, #1
 8008728:	3301      	adds	r3, #1
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	4413      	add	r3, r2
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	3301      	adds	r3, #1
 8008736:	75fb      	strb	r3, [r7, #23]
 8008738:	7dfa      	ldrb	r2, [r7, #23]
 800873a:	79fb      	ldrb	r3, [r7, #7]
 800873c:	429a      	cmp	r2, r3
 800873e:	d3d3      	bcc.n	80086e8 <IntToUnicode+0x18>
  }
}
 8008740:	bf00      	nop
 8008742:	371c      	adds	r7, #28
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08a      	sub	sp, #40	; 0x28
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008754:	f107 0314 	add.w	r3, r7, #20
 8008758:	2200      	movs	r2, #0
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	605a      	str	r2, [r3, #4]
 800875e:	609a      	str	r2, [r3, #8]
 8008760:	60da      	str	r2, [r3, #12]
 8008762:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800876c:	d13a      	bne.n	80087e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800876e:	2300      	movs	r3, #0
 8008770:	613b      	str	r3, [r7, #16]
 8008772:	4b1e      	ldr	r3, [pc, #120]	; (80087ec <HAL_PCD_MspInit+0xa0>)
 8008774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008776:	4a1d      	ldr	r2, [pc, #116]	; (80087ec <HAL_PCD_MspInit+0xa0>)
 8008778:	f043 0301 	orr.w	r3, r3, #1
 800877c:	6313      	str	r3, [r2, #48]	; 0x30
 800877e:	4b1b      	ldr	r3, [pc, #108]	; (80087ec <HAL_PCD_MspInit+0xa0>)
 8008780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	613b      	str	r3, [r7, #16]
 8008788:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800878a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800878e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008790:	2302      	movs	r3, #2
 8008792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008794:	2300      	movs	r3, #0
 8008796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008798:	2303      	movs	r3, #3
 800879a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800879c:	230a      	movs	r3, #10
 800879e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087a0:	f107 0314 	add.w	r3, r7, #20
 80087a4:	4619      	mov	r1, r3
 80087a6:	4812      	ldr	r0, [pc, #72]	; (80087f0 <HAL_PCD_MspInit+0xa4>)
 80087a8:	f7f9 fd24 	bl	80021f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80087ac:	4b0f      	ldr	r3, [pc, #60]	; (80087ec <HAL_PCD_MspInit+0xa0>)
 80087ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b0:	4a0e      	ldr	r2, [pc, #56]	; (80087ec <HAL_PCD_MspInit+0xa0>)
 80087b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b6:	6353      	str	r3, [r2, #52]	; 0x34
 80087b8:	2300      	movs	r3, #0
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	4b0b      	ldr	r3, [pc, #44]	; (80087ec <HAL_PCD_MspInit+0xa0>)
 80087be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c0:	4a0a      	ldr	r2, [pc, #40]	; (80087ec <HAL_PCD_MspInit+0xa0>)
 80087c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087c6:	6453      	str	r3, [r2, #68]	; 0x44
 80087c8:	4b08      	ldr	r3, [pc, #32]	; (80087ec <HAL_PCD_MspInit+0xa0>)
 80087ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087d0:	60fb      	str	r3, [r7, #12]
 80087d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80087d4:	2200      	movs	r2, #0
 80087d6:	2100      	movs	r1, #0
 80087d8:	2043      	movs	r0, #67	; 0x43
 80087da:	f7f9 fcb2 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80087de:	2043      	movs	r0, #67	; 0x43
 80087e0:	f7f9 fccb 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087e4:	bf00      	nop
 80087e6:	3728      	adds	r7, #40	; 0x28
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	40023800 	.word	0x40023800
 80087f0:	40020000 	.word	0x40020000

080087f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008808:	4619      	mov	r1, r3
 800880a:	4610      	mov	r0, r2
 800880c:	f7fe fd5c 	bl	80072c8 <USBD_LL_SetupStage>
}
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	460b      	mov	r3, r1
 8008822:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800882a:	78fa      	ldrb	r2, [r7, #3]
 800882c:	6879      	ldr	r1, [r7, #4]
 800882e:	4613      	mov	r3, r2
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	1a9b      	subs	r3, r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	440b      	add	r3, r1
 8008838:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	78fb      	ldrb	r3, [r7, #3]
 8008840:	4619      	mov	r1, r3
 8008842:	f7fe fd94 	bl	800736e <USBD_LL_DataOutStage>
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	460b      	mov	r3, r1
 8008858:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008860:	78fa      	ldrb	r2, [r7, #3]
 8008862:	6879      	ldr	r1, [r7, #4]
 8008864:	4613      	mov	r3, r2
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	1a9b      	subs	r3, r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	440b      	add	r3, r1
 800886e:	3348      	adds	r3, #72	; 0x48
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	78fb      	ldrb	r3, [r7, #3]
 8008874:	4619      	mov	r1, r3
 8008876:	f7fe fddd 	bl	8007434 <USBD_LL_DataInStage>
}
 800887a:	bf00      	nop
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008890:	4618      	mov	r0, r3
 8008892:	f7fe fee1 	bl	8007658 <USBD_LL_SOF>
}
 8008896:	bf00      	nop
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088a6:	2301      	movs	r3, #1
 80088a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d102      	bne.n	80088b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80088b2:	2300      	movs	r3, #0
 80088b4:	73fb      	strb	r3, [r7, #15]
 80088b6:	e008      	b.n	80088ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d102      	bne.n	80088c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80088c0:	2301      	movs	r3, #1
 80088c2:	73fb      	strb	r3, [r7, #15]
 80088c4:	e001      	b.n	80088ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80088c6:	f7f8 fd1d 	bl	8001304 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088d0:	7bfa      	ldrb	r2, [r7, #15]
 80088d2:	4611      	mov	r1, r2
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe fe84 	bl	80075e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fe fe3d 	bl	8007560 <USBD_LL_Reset>
}
 80088e6:	bf00      	nop
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fe fe7f 	bl	8007602 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	6812      	ldr	r2, [r2, #0]
 8008912:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008916:	f043 0301 	orr.w	r3, r3, #1
 800891a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d005      	beq.n	8008930 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008924:	4b04      	ldr	r3, [pc, #16]	; (8008938 <HAL_PCD_SuspendCallback+0x48>)
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	4a03      	ldr	r2, [pc, #12]	; (8008938 <HAL_PCD_SuspendCallback+0x48>)
 800892a:	f043 0306 	orr.w	r3, r3, #6
 800892e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	e000ed00 	.word	0xe000ed00

0800893c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800894a:	4618      	mov	r0, r3
 800894c:	f7fe fe6e 	bl	800762c <USBD_LL_Resume>
}
 8008950:	bf00      	nop
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	460b      	mov	r3, r1
 8008962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800896a:	78fa      	ldrb	r2, [r7, #3]
 800896c:	4611      	mov	r1, r2
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe fe99 	bl	80076a6 <USBD_LL_IsoOUTIncomplete>
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	460b      	mov	r3, r1
 8008986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800898e:	78fa      	ldrb	r2, [r7, #3]
 8008990:	4611      	mov	r1, r2
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe fe7a 	bl	800768c <USBD_LL_IsoINIncomplete>
}
 8008998:	bf00      	nop
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe fe86 	bl	80076c0 <USBD_LL_DevConnected>
}
 80089b4:	bf00      	nop
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fe fe83 	bl	80076d6 <USBD_LL_DevDisconnected>
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d13c      	bne.n	8008a62 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80089e8:	4a20      	ldr	r2, [pc, #128]	; (8008a6c <USBD_LL_Init+0x94>)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a1e      	ldr	r2, [pc, #120]	; (8008a6c <USBD_LL_Init+0x94>)
 80089f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089f8:	4b1c      	ldr	r3, [pc, #112]	; (8008a6c <USBD_LL_Init+0x94>)
 80089fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a00:	4b1a      	ldr	r3, [pc, #104]	; (8008a6c <USBD_LL_Init+0x94>)
 8008a02:	2204      	movs	r2, #4
 8008a04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a06:	4b19      	ldr	r3, [pc, #100]	; (8008a6c <USBD_LL_Init+0x94>)
 8008a08:	2202      	movs	r2, #2
 8008a0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a0c:	4b17      	ldr	r3, [pc, #92]	; (8008a6c <USBD_LL_Init+0x94>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a12:	4b16      	ldr	r3, [pc, #88]	; (8008a6c <USBD_LL_Init+0x94>)
 8008a14:	2202      	movs	r2, #2
 8008a16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a18:	4b14      	ldr	r3, [pc, #80]	; (8008a6c <USBD_LL_Init+0x94>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a1e:	4b13      	ldr	r3, [pc, #76]	; (8008a6c <USBD_LL_Init+0x94>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a24:	4b11      	ldr	r3, [pc, #68]	; (8008a6c <USBD_LL_Init+0x94>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008a2a:	4b10      	ldr	r3, [pc, #64]	; (8008a6c <USBD_LL_Init+0x94>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a30:	4b0e      	ldr	r3, [pc, #56]	; (8008a6c <USBD_LL_Init+0x94>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a36:	480d      	ldr	r0, [pc, #52]	; (8008a6c <USBD_LL_Init+0x94>)
 8008a38:	f7f9 fec8 	bl	80027cc <HAL_PCD_Init>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a42:	f7f8 fc5f 	bl	8001304 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a46:	2180      	movs	r1, #128	; 0x80
 8008a48:	4808      	ldr	r0, [pc, #32]	; (8008a6c <USBD_LL_Init+0x94>)
 8008a4a:	f7fb f826 	bl	8003a9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a4e:	2240      	movs	r2, #64	; 0x40
 8008a50:	2100      	movs	r1, #0
 8008a52:	4806      	ldr	r0, [pc, #24]	; (8008a6c <USBD_LL_Init+0x94>)
 8008a54:	f7fa ffda 	bl	8003a0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a58:	2280      	movs	r2, #128	; 0x80
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	4803      	ldr	r0, [pc, #12]	; (8008a6c <USBD_LL_Init+0x94>)
 8008a5e:	f7fa ffd5 	bl	8003a0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	20001898 	.word	0x20001898

08008a70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7f9 ffbd 	bl	8002a06 <HAL_PCD_Start>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 f92a 	bl	8008cec <USBD_Get_USB_Status>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	4608      	mov	r0, r1
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	70fb      	strb	r3, [r7, #3]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70bb      	strb	r3, [r7, #2]
 8008abc:	4613      	mov	r3, r2
 8008abe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ace:	78bb      	ldrb	r3, [r7, #2]
 8008ad0:	883a      	ldrh	r2, [r7, #0]
 8008ad2:	78f9      	ldrb	r1, [r7, #3]
 8008ad4:	f7fa fba1 	bl	800321a <HAL_PCD_EP_Open>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 f904 	bl	8008cec <USBD_Get_USB_Status>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	460b      	mov	r3, r1
 8008afc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b0c:	78fa      	ldrb	r2, [r7, #3]
 8008b0e:	4611      	mov	r1, r2
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fa fbea 	bl	80032ea <HAL_PCD_EP_Close>
 8008b16:	4603      	mov	r3, r0
 8008b18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 f8e5 	bl	8008cec <USBD_Get_USB_Status>
 8008b22:	4603      	mov	r3, r0
 8008b24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b4a:	78fa      	ldrb	r2, [r7, #3]
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fa fcc2 	bl	80034d8 <HAL_PCD_EP_SetStall>
 8008b54:	4603      	mov	r3, r0
 8008b56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 f8c6 	bl	8008cec <USBD_Get_USB_Status>
 8008b60:	4603      	mov	r3, r0
 8008b62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	460b      	mov	r3, r1
 8008b78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b88:	78fa      	ldrb	r2, [r7, #3]
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fa fd07 	bl	80035a0 <HAL_PCD_EP_ClrStall>
 8008b92:	4603      	mov	r3, r0
 8008b94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b96:	7bfb      	ldrb	r3, [r7, #15]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 f8a7 	bl	8008cec <USBD_Get_USB_Status>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008bc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	da0b      	bge.n	8008be0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bc8:	78fb      	ldrb	r3, [r7, #3]
 8008bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bce:	68f9      	ldr	r1, [r7, #12]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	00db      	lsls	r3, r3, #3
 8008bd4:	1a9b      	subs	r3, r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	440b      	add	r3, r1
 8008bda:	333e      	adds	r3, #62	; 0x3e
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	e00b      	b.n	8008bf8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008be0:	78fb      	ldrb	r3, [r7, #3]
 8008be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008be6:	68f9      	ldr	r1, [r7, #12]
 8008be8:	4613      	mov	r3, r2
 8008bea:	00db      	lsls	r3, r3, #3
 8008bec:	1a9b      	subs	r3, r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	440b      	add	r3, r1
 8008bf2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008bf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c1e:	78fa      	ldrb	r2, [r7, #3]
 8008c20:	4611      	mov	r1, r2
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fa fad4 	bl	80031d0 <HAL_PCD_SetAddress>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 f85c 	bl	8008cec <USBD_Get_USB_Status>
 8008c34:	4603      	mov	r3, r0
 8008c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b086      	sub	sp, #24
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	603b      	str	r3, [r7, #0]
 8008c4e:	460b      	mov	r3, r1
 8008c50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c56:	2300      	movs	r3, #0
 8008c58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c60:	7af9      	ldrb	r1, [r7, #11]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	f7fa fbed 	bl	8003444 <HAL_PCD_EP_Transmit>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c6e:	7dfb      	ldrb	r3, [r7, #23]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 f83b 	bl	8008cec <USBD_Get_USB_Status>
 8008c76:	4603      	mov	r3, r0
 8008c78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	607a      	str	r2, [r7, #4]
 8008c8e:	603b      	str	r3, [r7, #0]
 8008c90:	460b      	mov	r3, r1
 8008c92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ca2:	7af9      	ldrb	r1, [r7, #11]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	f7fa fb69 	bl	800337e <HAL_PCD_EP_Receive>
 8008cac:	4603      	mov	r3, r0
 8008cae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cb0:	7dfb      	ldrb	r3, [r7, #23]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f000 f81a 	bl	8008cec <USBD_Get_USB_Status>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cbc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3718      	adds	r7, #24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b082      	sub	sp, #8
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	460b      	mov	r3, r1
 8008cd0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cd8:	78fa      	ldrb	r2, [r7, #3]
 8008cda:	4611      	mov	r1, r2
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fa fb99 	bl	8003414 <HAL_PCD_EP_GetRxCount>
 8008ce2:	4603      	mov	r3, r0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cfa:	79fb      	ldrb	r3, [r7, #7]
 8008cfc:	2b03      	cmp	r3, #3
 8008cfe:	d817      	bhi.n	8008d30 <USBD_Get_USB_Status+0x44>
 8008d00:	a201      	add	r2, pc, #4	; (adr r2, 8008d08 <USBD_Get_USB_Status+0x1c>)
 8008d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d06:	bf00      	nop
 8008d08:	08008d19 	.word	0x08008d19
 8008d0c:	08008d1f 	.word	0x08008d1f
 8008d10:	08008d25 	.word	0x08008d25
 8008d14:	08008d2b 	.word	0x08008d2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d1c:	e00b      	b.n	8008d36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	73fb      	strb	r3, [r7, #15]
    break;
 8008d22:	e008      	b.n	8008d36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d24:	2301      	movs	r3, #1
 8008d26:	73fb      	strb	r3, [r7, #15]
    break;
 8008d28:	e005      	b.n	8008d36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d2e:	e002      	b.n	8008d36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d30:	2303      	movs	r3, #3
 8008d32:	73fb      	strb	r3, [r7, #15]
    break;
 8008d34:	bf00      	nop
  }
  return usb_status;
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <__errno>:
 8008d44:	4b01      	ldr	r3, [pc, #4]	; (8008d4c <__errno+0x8>)
 8008d46:	6818      	ldr	r0, [r3, #0]
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	20000180 	.word	0x20000180

08008d50 <__libc_init_array>:
 8008d50:	b570      	push	{r4, r5, r6, lr}
 8008d52:	4e0d      	ldr	r6, [pc, #52]	; (8008d88 <__libc_init_array+0x38>)
 8008d54:	4c0d      	ldr	r4, [pc, #52]	; (8008d8c <__libc_init_array+0x3c>)
 8008d56:	1ba4      	subs	r4, r4, r6
 8008d58:	10a4      	asrs	r4, r4, #2
 8008d5a:	2500      	movs	r5, #0
 8008d5c:	42a5      	cmp	r5, r4
 8008d5e:	d109      	bne.n	8008d74 <__libc_init_array+0x24>
 8008d60:	4e0b      	ldr	r6, [pc, #44]	; (8008d90 <__libc_init_array+0x40>)
 8008d62:	4c0c      	ldr	r4, [pc, #48]	; (8008d94 <__libc_init_array+0x44>)
 8008d64:	f000 fc36 	bl	80095d4 <_init>
 8008d68:	1ba4      	subs	r4, r4, r6
 8008d6a:	10a4      	asrs	r4, r4, #2
 8008d6c:	2500      	movs	r5, #0
 8008d6e:	42a5      	cmp	r5, r4
 8008d70:	d105      	bne.n	8008d7e <__libc_init_array+0x2e>
 8008d72:	bd70      	pop	{r4, r5, r6, pc}
 8008d74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d78:	4798      	blx	r3
 8008d7a:	3501      	adds	r5, #1
 8008d7c:	e7ee      	b.n	8008d5c <__libc_init_array+0xc>
 8008d7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d82:	4798      	blx	r3
 8008d84:	3501      	adds	r5, #1
 8008d86:	e7f2      	b.n	8008d6e <__libc_init_array+0x1e>
 8008d88:	08009698 	.word	0x08009698
 8008d8c:	08009698 	.word	0x08009698
 8008d90:	08009698 	.word	0x08009698
 8008d94:	0800969c 	.word	0x0800969c

08008d98 <malloc>:
 8008d98:	4b02      	ldr	r3, [pc, #8]	; (8008da4 <malloc+0xc>)
 8008d9a:	4601      	mov	r1, r0
 8008d9c:	6818      	ldr	r0, [r3, #0]
 8008d9e:	f000 b861 	b.w	8008e64 <_malloc_r>
 8008da2:	bf00      	nop
 8008da4:	20000180 	.word	0x20000180

08008da8 <free>:
 8008da8:	4b02      	ldr	r3, [pc, #8]	; (8008db4 <free+0xc>)
 8008daa:	4601      	mov	r1, r0
 8008dac:	6818      	ldr	r0, [r3, #0]
 8008dae:	f000 b80b 	b.w	8008dc8 <_free_r>
 8008db2:	bf00      	nop
 8008db4:	20000180 	.word	0x20000180

08008db8 <memset>:
 8008db8:	4402      	add	r2, r0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d100      	bne.n	8008dc2 <memset+0xa>
 8008dc0:	4770      	bx	lr
 8008dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8008dc6:	e7f9      	b.n	8008dbc <memset+0x4>

08008dc8 <_free_r>:
 8008dc8:	b538      	push	{r3, r4, r5, lr}
 8008dca:	4605      	mov	r5, r0
 8008dcc:	2900      	cmp	r1, #0
 8008dce:	d045      	beq.n	8008e5c <_free_r+0x94>
 8008dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dd4:	1f0c      	subs	r4, r1, #4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	bfb8      	it	lt
 8008dda:	18e4      	addlt	r4, r4, r3
 8008ddc:	f000 f8cc 	bl	8008f78 <__malloc_lock>
 8008de0:	4a1f      	ldr	r2, [pc, #124]	; (8008e60 <_free_r+0x98>)
 8008de2:	6813      	ldr	r3, [r2, #0]
 8008de4:	4610      	mov	r0, r2
 8008de6:	b933      	cbnz	r3, 8008df6 <_free_r+0x2e>
 8008de8:	6063      	str	r3, [r4, #4]
 8008dea:	6014      	str	r4, [r2, #0]
 8008dec:	4628      	mov	r0, r5
 8008dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008df2:	f000 b8c2 	b.w	8008f7a <__malloc_unlock>
 8008df6:	42a3      	cmp	r3, r4
 8008df8:	d90c      	bls.n	8008e14 <_free_r+0x4c>
 8008dfa:	6821      	ldr	r1, [r4, #0]
 8008dfc:	1862      	adds	r2, r4, r1
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	bf04      	itt	eq
 8008e02:	681a      	ldreq	r2, [r3, #0]
 8008e04:	685b      	ldreq	r3, [r3, #4]
 8008e06:	6063      	str	r3, [r4, #4]
 8008e08:	bf04      	itt	eq
 8008e0a:	1852      	addeq	r2, r2, r1
 8008e0c:	6022      	streq	r2, [r4, #0]
 8008e0e:	6004      	str	r4, [r0, #0]
 8008e10:	e7ec      	b.n	8008dec <_free_r+0x24>
 8008e12:	4613      	mov	r3, r2
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	b10a      	cbz	r2, 8008e1c <_free_r+0x54>
 8008e18:	42a2      	cmp	r2, r4
 8008e1a:	d9fa      	bls.n	8008e12 <_free_r+0x4a>
 8008e1c:	6819      	ldr	r1, [r3, #0]
 8008e1e:	1858      	adds	r0, r3, r1
 8008e20:	42a0      	cmp	r0, r4
 8008e22:	d10b      	bne.n	8008e3c <_free_r+0x74>
 8008e24:	6820      	ldr	r0, [r4, #0]
 8008e26:	4401      	add	r1, r0
 8008e28:	1858      	adds	r0, r3, r1
 8008e2a:	4282      	cmp	r2, r0
 8008e2c:	6019      	str	r1, [r3, #0]
 8008e2e:	d1dd      	bne.n	8008dec <_free_r+0x24>
 8008e30:	6810      	ldr	r0, [r2, #0]
 8008e32:	6852      	ldr	r2, [r2, #4]
 8008e34:	605a      	str	r2, [r3, #4]
 8008e36:	4401      	add	r1, r0
 8008e38:	6019      	str	r1, [r3, #0]
 8008e3a:	e7d7      	b.n	8008dec <_free_r+0x24>
 8008e3c:	d902      	bls.n	8008e44 <_free_r+0x7c>
 8008e3e:	230c      	movs	r3, #12
 8008e40:	602b      	str	r3, [r5, #0]
 8008e42:	e7d3      	b.n	8008dec <_free_r+0x24>
 8008e44:	6820      	ldr	r0, [r4, #0]
 8008e46:	1821      	adds	r1, r4, r0
 8008e48:	428a      	cmp	r2, r1
 8008e4a:	bf04      	itt	eq
 8008e4c:	6811      	ldreq	r1, [r2, #0]
 8008e4e:	6852      	ldreq	r2, [r2, #4]
 8008e50:	6062      	str	r2, [r4, #4]
 8008e52:	bf04      	itt	eq
 8008e54:	1809      	addeq	r1, r1, r0
 8008e56:	6021      	streq	r1, [r4, #0]
 8008e58:	605c      	str	r4, [r3, #4]
 8008e5a:	e7c7      	b.n	8008dec <_free_r+0x24>
 8008e5c:	bd38      	pop	{r3, r4, r5, pc}
 8008e5e:	bf00      	nop
 8008e60:	200002a0 	.word	0x200002a0

08008e64 <_malloc_r>:
 8008e64:	b570      	push	{r4, r5, r6, lr}
 8008e66:	1ccd      	adds	r5, r1, #3
 8008e68:	f025 0503 	bic.w	r5, r5, #3
 8008e6c:	3508      	adds	r5, #8
 8008e6e:	2d0c      	cmp	r5, #12
 8008e70:	bf38      	it	cc
 8008e72:	250c      	movcc	r5, #12
 8008e74:	2d00      	cmp	r5, #0
 8008e76:	4606      	mov	r6, r0
 8008e78:	db01      	blt.n	8008e7e <_malloc_r+0x1a>
 8008e7a:	42a9      	cmp	r1, r5
 8008e7c:	d903      	bls.n	8008e86 <_malloc_r+0x22>
 8008e7e:	230c      	movs	r3, #12
 8008e80:	6033      	str	r3, [r6, #0]
 8008e82:	2000      	movs	r0, #0
 8008e84:	bd70      	pop	{r4, r5, r6, pc}
 8008e86:	f000 f877 	bl	8008f78 <__malloc_lock>
 8008e8a:	4a21      	ldr	r2, [pc, #132]	; (8008f10 <_malloc_r+0xac>)
 8008e8c:	6814      	ldr	r4, [r2, #0]
 8008e8e:	4621      	mov	r1, r4
 8008e90:	b991      	cbnz	r1, 8008eb8 <_malloc_r+0x54>
 8008e92:	4c20      	ldr	r4, [pc, #128]	; (8008f14 <_malloc_r+0xb0>)
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	b91b      	cbnz	r3, 8008ea0 <_malloc_r+0x3c>
 8008e98:	4630      	mov	r0, r6
 8008e9a:	f000 f83d 	bl	8008f18 <_sbrk_r>
 8008e9e:	6020      	str	r0, [r4, #0]
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f000 f838 	bl	8008f18 <_sbrk_r>
 8008ea8:	1c43      	adds	r3, r0, #1
 8008eaa:	d124      	bne.n	8008ef6 <_malloc_r+0x92>
 8008eac:	230c      	movs	r3, #12
 8008eae:	6033      	str	r3, [r6, #0]
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f000 f862 	bl	8008f7a <__malloc_unlock>
 8008eb6:	e7e4      	b.n	8008e82 <_malloc_r+0x1e>
 8008eb8:	680b      	ldr	r3, [r1, #0]
 8008eba:	1b5b      	subs	r3, r3, r5
 8008ebc:	d418      	bmi.n	8008ef0 <_malloc_r+0x8c>
 8008ebe:	2b0b      	cmp	r3, #11
 8008ec0:	d90f      	bls.n	8008ee2 <_malloc_r+0x7e>
 8008ec2:	600b      	str	r3, [r1, #0]
 8008ec4:	50cd      	str	r5, [r1, r3]
 8008ec6:	18cc      	adds	r4, r1, r3
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f000 f856 	bl	8008f7a <__malloc_unlock>
 8008ece:	f104 000b 	add.w	r0, r4, #11
 8008ed2:	1d23      	adds	r3, r4, #4
 8008ed4:	f020 0007 	bic.w	r0, r0, #7
 8008ed8:	1ac3      	subs	r3, r0, r3
 8008eda:	d0d3      	beq.n	8008e84 <_malloc_r+0x20>
 8008edc:	425a      	negs	r2, r3
 8008ede:	50e2      	str	r2, [r4, r3]
 8008ee0:	e7d0      	b.n	8008e84 <_malloc_r+0x20>
 8008ee2:	428c      	cmp	r4, r1
 8008ee4:	684b      	ldr	r3, [r1, #4]
 8008ee6:	bf16      	itet	ne
 8008ee8:	6063      	strne	r3, [r4, #4]
 8008eea:	6013      	streq	r3, [r2, #0]
 8008eec:	460c      	movne	r4, r1
 8008eee:	e7eb      	b.n	8008ec8 <_malloc_r+0x64>
 8008ef0:	460c      	mov	r4, r1
 8008ef2:	6849      	ldr	r1, [r1, #4]
 8008ef4:	e7cc      	b.n	8008e90 <_malloc_r+0x2c>
 8008ef6:	1cc4      	adds	r4, r0, #3
 8008ef8:	f024 0403 	bic.w	r4, r4, #3
 8008efc:	42a0      	cmp	r0, r4
 8008efe:	d005      	beq.n	8008f0c <_malloc_r+0xa8>
 8008f00:	1a21      	subs	r1, r4, r0
 8008f02:	4630      	mov	r0, r6
 8008f04:	f000 f808 	bl	8008f18 <_sbrk_r>
 8008f08:	3001      	adds	r0, #1
 8008f0a:	d0cf      	beq.n	8008eac <_malloc_r+0x48>
 8008f0c:	6025      	str	r5, [r4, #0]
 8008f0e:	e7db      	b.n	8008ec8 <_malloc_r+0x64>
 8008f10:	200002a0 	.word	0x200002a0
 8008f14:	200002a4 	.word	0x200002a4

08008f18 <_sbrk_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4c06      	ldr	r4, [pc, #24]	; (8008f34 <_sbrk_r+0x1c>)
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4605      	mov	r5, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	6023      	str	r3, [r4, #0]
 8008f24:	f7f8 fb6e 	bl	8001604 <_sbrk>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_sbrk_r+0x1a>
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_sbrk_r+0x1a>
 8008f30:	602b      	str	r3, [r5, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	20001ca0 	.word	0x20001ca0

08008f38 <siprintf>:
 8008f38:	b40e      	push	{r1, r2, r3}
 8008f3a:	b500      	push	{lr}
 8008f3c:	b09c      	sub	sp, #112	; 0x70
 8008f3e:	ab1d      	add	r3, sp, #116	; 0x74
 8008f40:	9002      	str	r0, [sp, #8]
 8008f42:	9006      	str	r0, [sp, #24]
 8008f44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f48:	4809      	ldr	r0, [pc, #36]	; (8008f70 <siprintf+0x38>)
 8008f4a:	9107      	str	r1, [sp, #28]
 8008f4c:	9104      	str	r1, [sp, #16]
 8008f4e:	4909      	ldr	r1, [pc, #36]	; (8008f74 <siprintf+0x3c>)
 8008f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f54:	9105      	str	r1, [sp, #20]
 8008f56:	6800      	ldr	r0, [r0, #0]
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	a902      	add	r1, sp, #8
 8008f5c:	f000 f868 	bl	8009030 <_svfiprintf_r>
 8008f60:	9b02      	ldr	r3, [sp, #8]
 8008f62:	2200      	movs	r2, #0
 8008f64:	701a      	strb	r2, [r3, #0]
 8008f66:	b01c      	add	sp, #112	; 0x70
 8008f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f6c:	b003      	add	sp, #12
 8008f6e:	4770      	bx	lr
 8008f70:	20000180 	.word	0x20000180
 8008f74:	ffff0208 	.word	0xffff0208

08008f78 <__malloc_lock>:
 8008f78:	4770      	bx	lr

08008f7a <__malloc_unlock>:
 8008f7a:	4770      	bx	lr

08008f7c <__ssputs_r>:
 8008f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f80:	688e      	ldr	r6, [r1, #8]
 8008f82:	429e      	cmp	r6, r3
 8008f84:	4682      	mov	sl, r0
 8008f86:	460c      	mov	r4, r1
 8008f88:	4690      	mov	r8, r2
 8008f8a:	4699      	mov	r9, r3
 8008f8c:	d837      	bhi.n	8008ffe <__ssputs_r+0x82>
 8008f8e:	898a      	ldrh	r2, [r1, #12]
 8008f90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f94:	d031      	beq.n	8008ffa <__ssputs_r+0x7e>
 8008f96:	6825      	ldr	r5, [r4, #0]
 8008f98:	6909      	ldr	r1, [r1, #16]
 8008f9a:	1a6f      	subs	r7, r5, r1
 8008f9c:	6965      	ldr	r5, [r4, #20]
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fa4:	fb95 f5f3 	sdiv	r5, r5, r3
 8008fa8:	f109 0301 	add.w	r3, r9, #1
 8008fac:	443b      	add	r3, r7
 8008fae:	429d      	cmp	r5, r3
 8008fb0:	bf38      	it	cc
 8008fb2:	461d      	movcc	r5, r3
 8008fb4:	0553      	lsls	r3, r2, #21
 8008fb6:	d530      	bpl.n	800901a <__ssputs_r+0x9e>
 8008fb8:	4629      	mov	r1, r5
 8008fba:	f7ff ff53 	bl	8008e64 <_malloc_r>
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	b950      	cbnz	r0, 8008fd8 <__ssputs_r+0x5c>
 8008fc2:	230c      	movs	r3, #12
 8008fc4:	f8ca 3000 	str.w	r3, [sl]
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fce:	81a3      	strh	r3, [r4, #12]
 8008fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd8:	463a      	mov	r2, r7
 8008fda:	6921      	ldr	r1, [r4, #16]
 8008fdc:	f000 faa8 	bl	8009530 <memcpy>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	6126      	str	r6, [r4, #16]
 8008fee:	6165      	str	r5, [r4, #20]
 8008ff0:	443e      	add	r6, r7
 8008ff2:	1bed      	subs	r5, r5, r7
 8008ff4:	6026      	str	r6, [r4, #0]
 8008ff6:	60a5      	str	r5, [r4, #8]
 8008ff8:	464e      	mov	r6, r9
 8008ffa:	454e      	cmp	r6, r9
 8008ffc:	d900      	bls.n	8009000 <__ssputs_r+0x84>
 8008ffe:	464e      	mov	r6, r9
 8009000:	4632      	mov	r2, r6
 8009002:	4641      	mov	r1, r8
 8009004:	6820      	ldr	r0, [r4, #0]
 8009006:	f000 fa9e 	bl	8009546 <memmove>
 800900a:	68a3      	ldr	r3, [r4, #8]
 800900c:	1b9b      	subs	r3, r3, r6
 800900e:	60a3      	str	r3, [r4, #8]
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	441e      	add	r6, r3
 8009014:	6026      	str	r6, [r4, #0]
 8009016:	2000      	movs	r0, #0
 8009018:	e7dc      	b.n	8008fd4 <__ssputs_r+0x58>
 800901a:	462a      	mov	r2, r5
 800901c:	f000 faac 	bl	8009578 <_realloc_r>
 8009020:	4606      	mov	r6, r0
 8009022:	2800      	cmp	r0, #0
 8009024:	d1e2      	bne.n	8008fec <__ssputs_r+0x70>
 8009026:	6921      	ldr	r1, [r4, #16]
 8009028:	4650      	mov	r0, sl
 800902a:	f7ff fecd 	bl	8008dc8 <_free_r>
 800902e:	e7c8      	b.n	8008fc2 <__ssputs_r+0x46>

08009030 <_svfiprintf_r>:
 8009030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	461d      	mov	r5, r3
 8009036:	898b      	ldrh	r3, [r1, #12]
 8009038:	061f      	lsls	r7, r3, #24
 800903a:	b09d      	sub	sp, #116	; 0x74
 800903c:	4680      	mov	r8, r0
 800903e:	460c      	mov	r4, r1
 8009040:	4616      	mov	r6, r2
 8009042:	d50f      	bpl.n	8009064 <_svfiprintf_r+0x34>
 8009044:	690b      	ldr	r3, [r1, #16]
 8009046:	b96b      	cbnz	r3, 8009064 <_svfiprintf_r+0x34>
 8009048:	2140      	movs	r1, #64	; 0x40
 800904a:	f7ff ff0b 	bl	8008e64 <_malloc_r>
 800904e:	6020      	str	r0, [r4, #0]
 8009050:	6120      	str	r0, [r4, #16]
 8009052:	b928      	cbnz	r0, 8009060 <_svfiprintf_r+0x30>
 8009054:	230c      	movs	r3, #12
 8009056:	f8c8 3000 	str.w	r3, [r8]
 800905a:	f04f 30ff 	mov.w	r0, #4294967295
 800905e:	e0c8      	b.n	80091f2 <_svfiprintf_r+0x1c2>
 8009060:	2340      	movs	r3, #64	; 0x40
 8009062:	6163      	str	r3, [r4, #20]
 8009064:	2300      	movs	r3, #0
 8009066:	9309      	str	r3, [sp, #36]	; 0x24
 8009068:	2320      	movs	r3, #32
 800906a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800906e:	2330      	movs	r3, #48	; 0x30
 8009070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009074:	9503      	str	r5, [sp, #12]
 8009076:	f04f 0b01 	mov.w	fp, #1
 800907a:	4637      	mov	r7, r6
 800907c:	463d      	mov	r5, r7
 800907e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009082:	b10b      	cbz	r3, 8009088 <_svfiprintf_r+0x58>
 8009084:	2b25      	cmp	r3, #37	; 0x25
 8009086:	d13e      	bne.n	8009106 <_svfiprintf_r+0xd6>
 8009088:	ebb7 0a06 	subs.w	sl, r7, r6
 800908c:	d00b      	beq.n	80090a6 <_svfiprintf_r+0x76>
 800908e:	4653      	mov	r3, sl
 8009090:	4632      	mov	r2, r6
 8009092:	4621      	mov	r1, r4
 8009094:	4640      	mov	r0, r8
 8009096:	f7ff ff71 	bl	8008f7c <__ssputs_r>
 800909a:	3001      	adds	r0, #1
 800909c:	f000 80a4 	beq.w	80091e8 <_svfiprintf_r+0x1b8>
 80090a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a2:	4453      	add	r3, sl
 80090a4:	9309      	str	r3, [sp, #36]	; 0x24
 80090a6:	783b      	ldrb	r3, [r7, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 809d 	beq.w	80091e8 <_svfiprintf_r+0x1b8>
 80090ae:	2300      	movs	r3, #0
 80090b0:	f04f 32ff 	mov.w	r2, #4294967295
 80090b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090b8:	9304      	str	r3, [sp, #16]
 80090ba:	9307      	str	r3, [sp, #28]
 80090bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090c0:	931a      	str	r3, [sp, #104]	; 0x68
 80090c2:	462f      	mov	r7, r5
 80090c4:	2205      	movs	r2, #5
 80090c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80090ca:	4850      	ldr	r0, [pc, #320]	; (800920c <_svfiprintf_r+0x1dc>)
 80090cc:	f7f7 f880 	bl	80001d0 <memchr>
 80090d0:	9b04      	ldr	r3, [sp, #16]
 80090d2:	b9d0      	cbnz	r0, 800910a <_svfiprintf_r+0xda>
 80090d4:	06d9      	lsls	r1, r3, #27
 80090d6:	bf44      	itt	mi
 80090d8:	2220      	movmi	r2, #32
 80090da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80090de:	071a      	lsls	r2, r3, #28
 80090e0:	bf44      	itt	mi
 80090e2:	222b      	movmi	r2, #43	; 0x2b
 80090e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80090e8:	782a      	ldrb	r2, [r5, #0]
 80090ea:	2a2a      	cmp	r2, #42	; 0x2a
 80090ec:	d015      	beq.n	800911a <_svfiprintf_r+0xea>
 80090ee:	9a07      	ldr	r2, [sp, #28]
 80090f0:	462f      	mov	r7, r5
 80090f2:	2000      	movs	r0, #0
 80090f4:	250a      	movs	r5, #10
 80090f6:	4639      	mov	r1, r7
 80090f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090fc:	3b30      	subs	r3, #48	; 0x30
 80090fe:	2b09      	cmp	r3, #9
 8009100:	d94d      	bls.n	800919e <_svfiprintf_r+0x16e>
 8009102:	b1b8      	cbz	r0, 8009134 <_svfiprintf_r+0x104>
 8009104:	e00f      	b.n	8009126 <_svfiprintf_r+0xf6>
 8009106:	462f      	mov	r7, r5
 8009108:	e7b8      	b.n	800907c <_svfiprintf_r+0x4c>
 800910a:	4a40      	ldr	r2, [pc, #256]	; (800920c <_svfiprintf_r+0x1dc>)
 800910c:	1a80      	subs	r0, r0, r2
 800910e:	fa0b f000 	lsl.w	r0, fp, r0
 8009112:	4318      	orrs	r0, r3
 8009114:	9004      	str	r0, [sp, #16]
 8009116:	463d      	mov	r5, r7
 8009118:	e7d3      	b.n	80090c2 <_svfiprintf_r+0x92>
 800911a:	9a03      	ldr	r2, [sp, #12]
 800911c:	1d11      	adds	r1, r2, #4
 800911e:	6812      	ldr	r2, [r2, #0]
 8009120:	9103      	str	r1, [sp, #12]
 8009122:	2a00      	cmp	r2, #0
 8009124:	db01      	blt.n	800912a <_svfiprintf_r+0xfa>
 8009126:	9207      	str	r2, [sp, #28]
 8009128:	e004      	b.n	8009134 <_svfiprintf_r+0x104>
 800912a:	4252      	negs	r2, r2
 800912c:	f043 0302 	orr.w	r3, r3, #2
 8009130:	9207      	str	r2, [sp, #28]
 8009132:	9304      	str	r3, [sp, #16]
 8009134:	783b      	ldrb	r3, [r7, #0]
 8009136:	2b2e      	cmp	r3, #46	; 0x2e
 8009138:	d10c      	bne.n	8009154 <_svfiprintf_r+0x124>
 800913a:	787b      	ldrb	r3, [r7, #1]
 800913c:	2b2a      	cmp	r3, #42	; 0x2a
 800913e:	d133      	bne.n	80091a8 <_svfiprintf_r+0x178>
 8009140:	9b03      	ldr	r3, [sp, #12]
 8009142:	1d1a      	adds	r2, r3, #4
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	9203      	str	r2, [sp, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	bfb8      	it	lt
 800914c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009150:	3702      	adds	r7, #2
 8009152:	9305      	str	r3, [sp, #20]
 8009154:	4d2e      	ldr	r5, [pc, #184]	; (8009210 <_svfiprintf_r+0x1e0>)
 8009156:	7839      	ldrb	r1, [r7, #0]
 8009158:	2203      	movs	r2, #3
 800915a:	4628      	mov	r0, r5
 800915c:	f7f7 f838 	bl	80001d0 <memchr>
 8009160:	b138      	cbz	r0, 8009172 <_svfiprintf_r+0x142>
 8009162:	2340      	movs	r3, #64	; 0x40
 8009164:	1b40      	subs	r0, r0, r5
 8009166:	fa03 f000 	lsl.w	r0, r3, r0
 800916a:	9b04      	ldr	r3, [sp, #16]
 800916c:	4303      	orrs	r3, r0
 800916e:	3701      	adds	r7, #1
 8009170:	9304      	str	r3, [sp, #16]
 8009172:	7839      	ldrb	r1, [r7, #0]
 8009174:	4827      	ldr	r0, [pc, #156]	; (8009214 <_svfiprintf_r+0x1e4>)
 8009176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800917a:	2206      	movs	r2, #6
 800917c:	1c7e      	adds	r6, r7, #1
 800917e:	f7f7 f827 	bl	80001d0 <memchr>
 8009182:	2800      	cmp	r0, #0
 8009184:	d038      	beq.n	80091f8 <_svfiprintf_r+0x1c8>
 8009186:	4b24      	ldr	r3, [pc, #144]	; (8009218 <_svfiprintf_r+0x1e8>)
 8009188:	bb13      	cbnz	r3, 80091d0 <_svfiprintf_r+0x1a0>
 800918a:	9b03      	ldr	r3, [sp, #12]
 800918c:	3307      	adds	r3, #7
 800918e:	f023 0307 	bic.w	r3, r3, #7
 8009192:	3308      	adds	r3, #8
 8009194:	9303      	str	r3, [sp, #12]
 8009196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009198:	444b      	add	r3, r9
 800919a:	9309      	str	r3, [sp, #36]	; 0x24
 800919c:	e76d      	b.n	800907a <_svfiprintf_r+0x4a>
 800919e:	fb05 3202 	mla	r2, r5, r2, r3
 80091a2:	2001      	movs	r0, #1
 80091a4:	460f      	mov	r7, r1
 80091a6:	e7a6      	b.n	80090f6 <_svfiprintf_r+0xc6>
 80091a8:	2300      	movs	r3, #0
 80091aa:	3701      	adds	r7, #1
 80091ac:	9305      	str	r3, [sp, #20]
 80091ae:	4619      	mov	r1, r3
 80091b0:	250a      	movs	r5, #10
 80091b2:	4638      	mov	r0, r7
 80091b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091b8:	3a30      	subs	r2, #48	; 0x30
 80091ba:	2a09      	cmp	r2, #9
 80091bc:	d903      	bls.n	80091c6 <_svfiprintf_r+0x196>
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d0c8      	beq.n	8009154 <_svfiprintf_r+0x124>
 80091c2:	9105      	str	r1, [sp, #20]
 80091c4:	e7c6      	b.n	8009154 <_svfiprintf_r+0x124>
 80091c6:	fb05 2101 	mla	r1, r5, r1, r2
 80091ca:	2301      	movs	r3, #1
 80091cc:	4607      	mov	r7, r0
 80091ce:	e7f0      	b.n	80091b2 <_svfiprintf_r+0x182>
 80091d0:	ab03      	add	r3, sp, #12
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	4622      	mov	r2, r4
 80091d6:	4b11      	ldr	r3, [pc, #68]	; (800921c <_svfiprintf_r+0x1ec>)
 80091d8:	a904      	add	r1, sp, #16
 80091da:	4640      	mov	r0, r8
 80091dc:	f3af 8000 	nop.w
 80091e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80091e4:	4681      	mov	r9, r0
 80091e6:	d1d6      	bne.n	8009196 <_svfiprintf_r+0x166>
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	065b      	lsls	r3, r3, #25
 80091ec:	f53f af35 	bmi.w	800905a <_svfiprintf_r+0x2a>
 80091f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091f2:	b01d      	add	sp, #116	; 0x74
 80091f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f8:	ab03      	add	r3, sp, #12
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	4622      	mov	r2, r4
 80091fe:	4b07      	ldr	r3, [pc, #28]	; (800921c <_svfiprintf_r+0x1ec>)
 8009200:	a904      	add	r1, sp, #16
 8009202:	4640      	mov	r0, r8
 8009204:	f000 f882 	bl	800930c <_printf_i>
 8009208:	e7ea      	b.n	80091e0 <_svfiprintf_r+0x1b0>
 800920a:	bf00      	nop
 800920c:	0800965c 	.word	0x0800965c
 8009210:	08009662 	.word	0x08009662
 8009214:	08009666 	.word	0x08009666
 8009218:	00000000 	.word	0x00000000
 800921c:	08008f7d 	.word	0x08008f7d

08009220 <_printf_common>:
 8009220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009224:	4691      	mov	r9, r2
 8009226:	461f      	mov	r7, r3
 8009228:	688a      	ldr	r2, [r1, #8]
 800922a:	690b      	ldr	r3, [r1, #16]
 800922c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009230:	4293      	cmp	r3, r2
 8009232:	bfb8      	it	lt
 8009234:	4613      	movlt	r3, r2
 8009236:	f8c9 3000 	str.w	r3, [r9]
 800923a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800923e:	4606      	mov	r6, r0
 8009240:	460c      	mov	r4, r1
 8009242:	b112      	cbz	r2, 800924a <_printf_common+0x2a>
 8009244:	3301      	adds	r3, #1
 8009246:	f8c9 3000 	str.w	r3, [r9]
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	0699      	lsls	r1, r3, #26
 800924e:	bf42      	ittt	mi
 8009250:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009254:	3302      	addmi	r3, #2
 8009256:	f8c9 3000 	strmi.w	r3, [r9]
 800925a:	6825      	ldr	r5, [r4, #0]
 800925c:	f015 0506 	ands.w	r5, r5, #6
 8009260:	d107      	bne.n	8009272 <_printf_common+0x52>
 8009262:	f104 0a19 	add.w	sl, r4, #25
 8009266:	68e3      	ldr	r3, [r4, #12]
 8009268:	f8d9 2000 	ldr.w	r2, [r9]
 800926c:	1a9b      	subs	r3, r3, r2
 800926e:	42ab      	cmp	r3, r5
 8009270:	dc28      	bgt.n	80092c4 <_printf_common+0xa4>
 8009272:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009276:	6822      	ldr	r2, [r4, #0]
 8009278:	3300      	adds	r3, #0
 800927a:	bf18      	it	ne
 800927c:	2301      	movne	r3, #1
 800927e:	0692      	lsls	r2, r2, #26
 8009280:	d42d      	bmi.n	80092de <_printf_common+0xbe>
 8009282:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009286:	4639      	mov	r1, r7
 8009288:	4630      	mov	r0, r6
 800928a:	47c0      	blx	r8
 800928c:	3001      	adds	r0, #1
 800928e:	d020      	beq.n	80092d2 <_printf_common+0xb2>
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	68e5      	ldr	r5, [r4, #12]
 8009294:	f8d9 2000 	ldr.w	r2, [r9]
 8009298:	f003 0306 	and.w	r3, r3, #6
 800929c:	2b04      	cmp	r3, #4
 800929e:	bf08      	it	eq
 80092a0:	1aad      	subeq	r5, r5, r2
 80092a2:	68a3      	ldr	r3, [r4, #8]
 80092a4:	6922      	ldr	r2, [r4, #16]
 80092a6:	bf0c      	ite	eq
 80092a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092ac:	2500      	movne	r5, #0
 80092ae:	4293      	cmp	r3, r2
 80092b0:	bfc4      	itt	gt
 80092b2:	1a9b      	subgt	r3, r3, r2
 80092b4:	18ed      	addgt	r5, r5, r3
 80092b6:	f04f 0900 	mov.w	r9, #0
 80092ba:	341a      	adds	r4, #26
 80092bc:	454d      	cmp	r5, r9
 80092be:	d11a      	bne.n	80092f6 <_printf_common+0xd6>
 80092c0:	2000      	movs	r0, #0
 80092c2:	e008      	b.n	80092d6 <_printf_common+0xb6>
 80092c4:	2301      	movs	r3, #1
 80092c6:	4652      	mov	r2, sl
 80092c8:	4639      	mov	r1, r7
 80092ca:	4630      	mov	r0, r6
 80092cc:	47c0      	blx	r8
 80092ce:	3001      	adds	r0, #1
 80092d0:	d103      	bne.n	80092da <_printf_common+0xba>
 80092d2:	f04f 30ff 	mov.w	r0, #4294967295
 80092d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092da:	3501      	adds	r5, #1
 80092dc:	e7c3      	b.n	8009266 <_printf_common+0x46>
 80092de:	18e1      	adds	r1, r4, r3
 80092e0:	1c5a      	adds	r2, r3, #1
 80092e2:	2030      	movs	r0, #48	; 0x30
 80092e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092e8:	4422      	add	r2, r4
 80092ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092f2:	3302      	adds	r3, #2
 80092f4:	e7c5      	b.n	8009282 <_printf_common+0x62>
 80092f6:	2301      	movs	r3, #1
 80092f8:	4622      	mov	r2, r4
 80092fa:	4639      	mov	r1, r7
 80092fc:	4630      	mov	r0, r6
 80092fe:	47c0      	blx	r8
 8009300:	3001      	adds	r0, #1
 8009302:	d0e6      	beq.n	80092d2 <_printf_common+0xb2>
 8009304:	f109 0901 	add.w	r9, r9, #1
 8009308:	e7d8      	b.n	80092bc <_printf_common+0x9c>
	...

0800930c <_printf_i>:
 800930c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009310:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009314:	460c      	mov	r4, r1
 8009316:	7e09      	ldrb	r1, [r1, #24]
 8009318:	b085      	sub	sp, #20
 800931a:	296e      	cmp	r1, #110	; 0x6e
 800931c:	4617      	mov	r7, r2
 800931e:	4606      	mov	r6, r0
 8009320:	4698      	mov	r8, r3
 8009322:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009324:	f000 80b3 	beq.w	800948e <_printf_i+0x182>
 8009328:	d822      	bhi.n	8009370 <_printf_i+0x64>
 800932a:	2963      	cmp	r1, #99	; 0x63
 800932c:	d036      	beq.n	800939c <_printf_i+0x90>
 800932e:	d80a      	bhi.n	8009346 <_printf_i+0x3a>
 8009330:	2900      	cmp	r1, #0
 8009332:	f000 80b9 	beq.w	80094a8 <_printf_i+0x19c>
 8009336:	2958      	cmp	r1, #88	; 0x58
 8009338:	f000 8083 	beq.w	8009442 <_printf_i+0x136>
 800933c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009340:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009344:	e032      	b.n	80093ac <_printf_i+0xa0>
 8009346:	2964      	cmp	r1, #100	; 0x64
 8009348:	d001      	beq.n	800934e <_printf_i+0x42>
 800934a:	2969      	cmp	r1, #105	; 0x69
 800934c:	d1f6      	bne.n	800933c <_printf_i+0x30>
 800934e:	6820      	ldr	r0, [r4, #0]
 8009350:	6813      	ldr	r3, [r2, #0]
 8009352:	0605      	lsls	r5, r0, #24
 8009354:	f103 0104 	add.w	r1, r3, #4
 8009358:	d52a      	bpl.n	80093b0 <_printf_i+0xa4>
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6011      	str	r1, [r2, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	da03      	bge.n	800936a <_printf_i+0x5e>
 8009362:	222d      	movs	r2, #45	; 0x2d
 8009364:	425b      	negs	r3, r3
 8009366:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800936a:	486f      	ldr	r0, [pc, #444]	; (8009528 <_printf_i+0x21c>)
 800936c:	220a      	movs	r2, #10
 800936e:	e039      	b.n	80093e4 <_printf_i+0xd8>
 8009370:	2973      	cmp	r1, #115	; 0x73
 8009372:	f000 809d 	beq.w	80094b0 <_printf_i+0x1a4>
 8009376:	d808      	bhi.n	800938a <_printf_i+0x7e>
 8009378:	296f      	cmp	r1, #111	; 0x6f
 800937a:	d020      	beq.n	80093be <_printf_i+0xb2>
 800937c:	2970      	cmp	r1, #112	; 0x70
 800937e:	d1dd      	bne.n	800933c <_printf_i+0x30>
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	f043 0320 	orr.w	r3, r3, #32
 8009386:	6023      	str	r3, [r4, #0]
 8009388:	e003      	b.n	8009392 <_printf_i+0x86>
 800938a:	2975      	cmp	r1, #117	; 0x75
 800938c:	d017      	beq.n	80093be <_printf_i+0xb2>
 800938e:	2978      	cmp	r1, #120	; 0x78
 8009390:	d1d4      	bne.n	800933c <_printf_i+0x30>
 8009392:	2378      	movs	r3, #120	; 0x78
 8009394:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009398:	4864      	ldr	r0, [pc, #400]	; (800952c <_printf_i+0x220>)
 800939a:	e055      	b.n	8009448 <_printf_i+0x13c>
 800939c:	6813      	ldr	r3, [r2, #0]
 800939e:	1d19      	adds	r1, r3, #4
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	6011      	str	r1, [r2, #0]
 80093a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093ac:	2301      	movs	r3, #1
 80093ae:	e08c      	b.n	80094ca <_printf_i+0x1be>
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	6011      	str	r1, [r2, #0]
 80093b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093b8:	bf18      	it	ne
 80093ba:	b21b      	sxthne	r3, r3
 80093bc:	e7cf      	b.n	800935e <_printf_i+0x52>
 80093be:	6813      	ldr	r3, [r2, #0]
 80093c0:	6825      	ldr	r5, [r4, #0]
 80093c2:	1d18      	adds	r0, r3, #4
 80093c4:	6010      	str	r0, [r2, #0]
 80093c6:	0628      	lsls	r0, r5, #24
 80093c8:	d501      	bpl.n	80093ce <_printf_i+0xc2>
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	e002      	b.n	80093d4 <_printf_i+0xc8>
 80093ce:	0668      	lsls	r0, r5, #25
 80093d0:	d5fb      	bpl.n	80093ca <_printf_i+0xbe>
 80093d2:	881b      	ldrh	r3, [r3, #0]
 80093d4:	4854      	ldr	r0, [pc, #336]	; (8009528 <_printf_i+0x21c>)
 80093d6:	296f      	cmp	r1, #111	; 0x6f
 80093d8:	bf14      	ite	ne
 80093da:	220a      	movne	r2, #10
 80093dc:	2208      	moveq	r2, #8
 80093de:	2100      	movs	r1, #0
 80093e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093e4:	6865      	ldr	r5, [r4, #4]
 80093e6:	60a5      	str	r5, [r4, #8]
 80093e8:	2d00      	cmp	r5, #0
 80093ea:	f2c0 8095 	blt.w	8009518 <_printf_i+0x20c>
 80093ee:	6821      	ldr	r1, [r4, #0]
 80093f0:	f021 0104 	bic.w	r1, r1, #4
 80093f4:	6021      	str	r1, [r4, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d13d      	bne.n	8009476 <_printf_i+0x16a>
 80093fa:	2d00      	cmp	r5, #0
 80093fc:	f040 808e 	bne.w	800951c <_printf_i+0x210>
 8009400:	4665      	mov	r5, ip
 8009402:	2a08      	cmp	r2, #8
 8009404:	d10b      	bne.n	800941e <_printf_i+0x112>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	07db      	lsls	r3, r3, #31
 800940a:	d508      	bpl.n	800941e <_printf_i+0x112>
 800940c:	6923      	ldr	r3, [r4, #16]
 800940e:	6862      	ldr	r2, [r4, #4]
 8009410:	429a      	cmp	r2, r3
 8009412:	bfde      	ittt	le
 8009414:	2330      	movle	r3, #48	; 0x30
 8009416:	f805 3c01 	strble.w	r3, [r5, #-1]
 800941a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800941e:	ebac 0305 	sub.w	r3, ip, r5
 8009422:	6123      	str	r3, [r4, #16]
 8009424:	f8cd 8000 	str.w	r8, [sp]
 8009428:	463b      	mov	r3, r7
 800942a:	aa03      	add	r2, sp, #12
 800942c:	4621      	mov	r1, r4
 800942e:	4630      	mov	r0, r6
 8009430:	f7ff fef6 	bl	8009220 <_printf_common>
 8009434:	3001      	adds	r0, #1
 8009436:	d14d      	bne.n	80094d4 <_printf_i+0x1c8>
 8009438:	f04f 30ff 	mov.w	r0, #4294967295
 800943c:	b005      	add	sp, #20
 800943e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009442:	4839      	ldr	r0, [pc, #228]	; (8009528 <_printf_i+0x21c>)
 8009444:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009448:	6813      	ldr	r3, [r2, #0]
 800944a:	6821      	ldr	r1, [r4, #0]
 800944c:	1d1d      	adds	r5, r3, #4
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6015      	str	r5, [r2, #0]
 8009452:	060a      	lsls	r2, r1, #24
 8009454:	d50b      	bpl.n	800946e <_printf_i+0x162>
 8009456:	07ca      	lsls	r2, r1, #31
 8009458:	bf44      	itt	mi
 800945a:	f041 0120 	orrmi.w	r1, r1, #32
 800945e:	6021      	strmi	r1, [r4, #0]
 8009460:	b91b      	cbnz	r3, 800946a <_printf_i+0x15e>
 8009462:	6822      	ldr	r2, [r4, #0]
 8009464:	f022 0220 	bic.w	r2, r2, #32
 8009468:	6022      	str	r2, [r4, #0]
 800946a:	2210      	movs	r2, #16
 800946c:	e7b7      	b.n	80093de <_printf_i+0xd2>
 800946e:	064d      	lsls	r5, r1, #25
 8009470:	bf48      	it	mi
 8009472:	b29b      	uxthmi	r3, r3
 8009474:	e7ef      	b.n	8009456 <_printf_i+0x14a>
 8009476:	4665      	mov	r5, ip
 8009478:	fbb3 f1f2 	udiv	r1, r3, r2
 800947c:	fb02 3311 	mls	r3, r2, r1, r3
 8009480:	5cc3      	ldrb	r3, [r0, r3]
 8009482:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009486:	460b      	mov	r3, r1
 8009488:	2900      	cmp	r1, #0
 800948a:	d1f5      	bne.n	8009478 <_printf_i+0x16c>
 800948c:	e7b9      	b.n	8009402 <_printf_i+0xf6>
 800948e:	6813      	ldr	r3, [r2, #0]
 8009490:	6825      	ldr	r5, [r4, #0]
 8009492:	6961      	ldr	r1, [r4, #20]
 8009494:	1d18      	adds	r0, r3, #4
 8009496:	6010      	str	r0, [r2, #0]
 8009498:	0628      	lsls	r0, r5, #24
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	d501      	bpl.n	80094a2 <_printf_i+0x196>
 800949e:	6019      	str	r1, [r3, #0]
 80094a0:	e002      	b.n	80094a8 <_printf_i+0x19c>
 80094a2:	066a      	lsls	r2, r5, #25
 80094a4:	d5fb      	bpl.n	800949e <_printf_i+0x192>
 80094a6:	8019      	strh	r1, [r3, #0]
 80094a8:	2300      	movs	r3, #0
 80094aa:	6123      	str	r3, [r4, #16]
 80094ac:	4665      	mov	r5, ip
 80094ae:	e7b9      	b.n	8009424 <_printf_i+0x118>
 80094b0:	6813      	ldr	r3, [r2, #0]
 80094b2:	1d19      	adds	r1, r3, #4
 80094b4:	6011      	str	r1, [r2, #0]
 80094b6:	681d      	ldr	r5, [r3, #0]
 80094b8:	6862      	ldr	r2, [r4, #4]
 80094ba:	2100      	movs	r1, #0
 80094bc:	4628      	mov	r0, r5
 80094be:	f7f6 fe87 	bl	80001d0 <memchr>
 80094c2:	b108      	cbz	r0, 80094c8 <_printf_i+0x1bc>
 80094c4:	1b40      	subs	r0, r0, r5
 80094c6:	6060      	str	r0, [r4, #4]
 80094c8:	6863      	ldr	r3, [r4, #4]
 80094ca:	6123      	str	r3, [r4, #16]
 80094cc:	2300      	movs	r3, #0
 80094ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094d2:	e7a7      	b.n	8009424 <_printf_i+0x118>
 80094d4:	6923      	ldr	r3, [r4, #16]
 80094d6:	462a      	mov	r2, r5
 80094d8:	4639      	mov	r1, r7
 80094da:	4630      	mov	r0, r6
 80094dc:	47c0      	blx	r8
 80094de:	3001      	adds	r0, #1
 80094e0:	d0aa      	beq.n	8009438 <_printf_i+0x12c>
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	079b      	lsls	r3, r3, #30
 80094e6:	d413      	bmi.n	8009510 <_printf_i+0x204>
 80094e8:	68e0      	ldr	r0, [r4, #12]
 80094ea:	9b03      	ldr	r3, [sp, #12]
 80094ec:	4298      	cmp	r0, r3
 80094ee:	bfb8      	it	lt
 80094f0:	4618      	movlt	r0, r3
 80094f2:	e7a3      	b.n	800943c <_printf_i+0x130>
 80094f4:	2301      	movs	r3, #1
 80094f6:	464a      	mov	r2, r9
 80094f8:	4639      	mov	r1, r7
 80094fa:	4630      	mov	r0, r6
 80094fc:	47c0      	blx	r8
 80094fe:	3001      	adds	r0, #1
 8009500:	d09a      	beq.n	8009438 <_printf_i+0x12c>
 8009502:	3501      	adds	r5, #1
 8009504:	68e3      	ldr	r3, [r4, #12]
 8009506:	9a03      	ldr	r2, [sp, #12]
 8009508:	1a9b      	subs	r3, r3, r2
 800950a:	42ab      	cmp	r3, r5
 800950c:	dcf2      	bgt.n	80094f4 <_printf_i+0x1e8>
 800950e:	e7eb      	b.n	80094e8 <_printf_i+0x1dc>
 8009510:	2500      	movs	r5, #0
 8009512:	f104 0919 	add.w	r9, r4, #25
 8009516:	e7f5      	b.n	8009504 <_printf_i+0x1f8>
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1ac      	bne.n	8009476 <_printf_i+0x16a>
 800951c:	7803      	ldrb	r3, [r0, #0]
 800951e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009522:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009526:	e76c      	b.n	8009402 <_printf_i+0xf6>
 8009528:	0800966d 	.word	0x0800966d
 800952c:	0800967e 	.word	0x0800967e

08009530 <memcpy>:
 8009530:	b510      	push	{r4, lr}
 8009532:	1e43      	subs	r3, r0, #1
 8009534:	440a      	add	r2, r1
 8009536:	4291      	cmp	r1, r2
 8009538:	d100      	bne.n	800953c <memcpy+0xc>
 800953a:	bd10      	pop	{r4, pc}
 800953c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009540:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009544:	e7f7      	b.n	8009536 <memcpy+0x6>

08009546 <memmove>:
 8009546:	4288      	cmp	r0, r1
 8009548:	b510      	push	{r4, lr}
 800954a:	eb01 0302 	add.w	r3, r1, r2
 800954e:	d807      	bhi.n	8009560 <memmove+0x1a>
 8009550:	1e42      	subs	r2, r0, #1
 8009552:	4299      	cmp	r1, r3
 8009554:	d00a      	beq.n	800956c <memmove+0x26>
 8009556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800955a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800955e:	e7f8      	b.n	8009552 <memmove+0xc>
 8009560:	4283      	cmp	r3, r0
 8009562:	d9f5      	bls.n	8009550 <memmove+0xa>
 8009564:	1881      	adds	r1, r0, r2
 8009566:	1ad2      	subs	r2, r2, r3
 8009568:	42d3      	cmn	r3, r2
 800956a:	d100      	bne.n	800956e <memmove+0x28>
 800956c:	bd10      	pop	{r4, pc}
 800956e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009572:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009576:	e7f7      	b.n	8009568 <memmove+0x22>

08009578 <_realloc_r>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	4607      	mov	r7, r0
 800957c:	4614      	mov	r4, r2
 800957e:	460e      	mov	r6, r1
 8009580:	b921      	cbnz	r1, 800958c <_realloc_r+0x14>
 8009582:	4611      	mov	r1, r2
 8009584:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009588:	f7ff bc6c 	b.w	8008e64 <_malloc_r>
 800958c:	b922      	cbnz	r2, 8009598 <_realloc_r+0x20>
 800958e:	f7ff fc1b 	bl	8008dc8 <_free_r>
 8009592:	4625      	mov	r5, r4
 8009594:	4628      	mov	r0, r5
 8009596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009598:	f000 f814 	bl	80095c4 <_malloc_usable_size_r>
 800959c:	42a0      	cmp	r0, r4
 800959e:	d20f      	bcs.n	80095c0 <_realloc_r+0x48>
 80095a0:	4621      	mov	r1, r4
 80095a2:	4638      	mov	r0, r7
 80095a4:	f7ff fc5e 	bl	8008e64 <_malloc_r>
 80095a8:	4605      	mov	r5, r0
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d0f2      	beq.n	8009594 <_realloc_r+0x1c>
 80095ae:	4631      	mov	r1, r6
 80095b0:	4622      	mov	r2, r4
 80095b2:	f7ff ffbd 	bl	8009530 <memcpy>
 80095b6:	4631      	mov	r1, r6
 80095b8:	4638      	mov	r0, r7
 80095ba:	f7ff fc05 	bl	8008dc8 <_free_r>
 80095be:	e7e9      	b.n	8009594 <_realloc_r+0x1c>
 80095c0:	4635      	mov	r5, r6
 80095c2:	e7e7      	b.n	8009594 <_realloc_r+0x1c>

080095c4 <_malloc_usable_size_r>:
 80095c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095c8:	1f18      	subs	r0, r3, #4
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	bfbc      	itt	lt
 80095ce:	580b      	ldrlt	r3, [r1, r0]
 80095d0:	18c0      	addlt	r0, r0, r3
 80095d2:	4770      	bx	lr

080095d4 <_init>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	bf00      	nop
 80095d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095da:	bc08      	pop	{r3}
 80095dc:	469e      	mov	lr, r3
 80095de:	4770      	bx	lr

080095e0 <_fini>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	bf00      	nop
 80095e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e6:	bc08      	pop	{r3}
 80095e8:	469e      	mov	lr, r3
 80095ea:	4770      	bx	lr
